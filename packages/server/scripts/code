class Router:
    def __init__(self, memoryLimit: int):
        self.memory = memoryLimit
        self.list = deque()
        self.used = set()
        self.map = defaultdict(list)
    def addPacket(self, source: int, destination: int, timestamp: int) -> bool:
        item = (source, destination, timestamp)
        if item in self.used: return False
        if len(self.used) == self.memory: self.forwardPacket()
        self.list.append(item)
        self.used.add(item)
        self.map[destination].append((timestamp, source))
        return True
    def forwardPacket(self) -> List[int]:
        if not self.list: return []
        item = self.list.popleft()
        self.used.remove(item)
        self.map[item[1]].remove((item[2], item[0]))
        return list(item)
    def getCount(self, destination: int, startTime: int, endTime: int) -> int:
        lidx = bisect_left(self.map[destination], (startTime, -inf))
        ridx = bisect_right(self.map[destination], (endTime, inf))
        return ridx - lidx