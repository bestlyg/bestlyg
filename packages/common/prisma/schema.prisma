// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../dist/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("BESTLYG_DATABASE_URL")
}

enum LedgerType {
  Generally
  Drinks
  Food
  Transportation
  RedEnvelope
  Taobao
  Rent
  PhoneBill
  DailyNecessities
  Drug
  BuyGroceries
  Movie
  Snack
  Fruit
  ClothesShoesBags
  SkinMakeup
  Salary
  FamilyWallet
  BreakfastWallet
  LunchWallet
  DinnerWallet
  TravelWallet
}

enum LedgerFrom {
  Lyg
  Yzx
}

model Ledger {
  id          String      @id @default(nanoid())
  createdTime DateTime    @default(now()) @map("create_time")
  updatedTime DateTime    @default(now()) @updatedAt @map("update_time")
  date        DateTime
  balance     Int
  comment     String
  io          Boolean
  from        LedgerFrom?
  bank        String?
  type        LedgerType

  @@map("ledger")
}

model Xuan {
  id          String   @id @default(nanoid())
  createdTime DateTime @default(now()) @map("create_time")
  updatedTime DateTime @default(now()) @updatedAt @map("update_time")
  date        DateTime @unique
  weight      Int?
  danceTimes  Int?     @map("dance_times")

  @@map("xuan")
}

enum LeetcodeScriptType {
  javascript
  typescript
  python
  csharp
  c
  cpp
  java
  go
  rust
  sql
}

enum LeetcodeLevelType {
  Easy
  Medium
  Hard
}

model LeetcodeProblem {
  id          String             @id @default(nanoid())
  createdTime DateTime           @default(now()) @map("create_time")
  updatedTime DateTime           @default(now()) @updatedAt @map("update_time")
  name        String             @unique
  url         String
  desc        String
  tags        String[]
  level       LeetcodeLevelType
  solutions   LeetcodeSolution[]

  @@map("leetcode_problem")
}

model LeetcodeSolution {
  id                String             @id @default(nanoid())
  createdTime       DateTime           @default(now()) @map("create_time")
  updatedTime       DateTime           @default(now()) @updatedAt @map("update_time")
  script            LeetcodeScriptType
  date              DateTime
  time              Float?
  memory            Float?
  desc              String
  code              String
  leetcodeProblemId String             @map("leetcode_problem_id")
  leetcodeProblem   LeetcodeProblem    @relation(fields: [leetcodeProblemId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("leetcode_solution")
}

model Secrets {
  id          String   @id @default(nanoid())
  createdTime DateTime @default(now()) @map("create_time")
  updatedTime DateTime @default(now()) @updatedAt @map("update_time")
  name        String   @unique
  data        String

  @@map("secrets")
}

model Serverless {
  id          String           @id @default(nanoid())
  createdTime DateTime         @default(now()) @map("create_time")
  updatedTime DateTime         @default(now()) @updatedAt @map("update_time")
  name        String           @unique
  codes       ServerlessCode[]

  @@map("serverless")
}

model ServerlessCode {
  id           String      @id @default(nanoid())
  createdTime  DateTime    @default(now()) @map("create_time")
  updatedTime  DateTime    @default(now()) @updatedAt @map("update_time")
  name         String      @unique
  code         String
  serverless   Serverless? @relation(fields: [serverlessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serverlessId String?     @map("serverless_id")

  @@map("serverless_code")
}

model User {
  id          String   @id @default(nanoid())
  createdTime DateTime @default(now()) @map("create_time")
  updatedTime DateTime @default(now()) @updatedAt @map("update_time")
  name        String   @unique
  pwd         String
  nickname    String
  description String
  avatar      String

  @@map("user")
}

model CasbinRule {
  id        String   @id @default(nanoid())
  createdAt DateTime @default(now()) @map("create_time") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("update_time") @db.Timestamp(6)
  ptype     String
  v0        String?
  v1        String?
  v2        String?
  v3        String?
  v4        String?
  v5        String?

  @@map("casbin_rule")
}
