class Solution:
    def snakesAndLadders(self, board: List[List[int]]) -> int:
        n = len(board)
        used = set([1])
        q = deque([1])
        size = 1
        step = 0
        def t(p: int) -> Tuple[int, int]:
            x = n - 1 - (p - 1) // n
            y = (p - 1) % n
            if x % 2 != (n - 1) % 2: y = n - 1 - y
            return (x, y)
        while q:
            temp_used = set()
            p = q.popleft()
            if p == n ** 2: return step
            x, y = t(p)
            for i in range(1, 7):
                np = p + i
                if np > n ** 2: break
                nx, ny = t(np)
                nnp = board[nx][ny]
                if nnp != -1:
                    if nnp not in used:
                        q.append(nnp)
                        temp_used.add(nnp)
                else:
                    if np not in used:
                        q.append(np)
                        temp_used.add(np)
            used |= temp_used
            size -= 1
            if size == 0:
                size = len(q)
                step += 1
        return -1