class Solution:
    def minimumCost(self, n: int, m: int, horizontalCut: List[int], verticalCut: List[int]) -> int:
        @cache
        def dfs(i1: int, i2: int, j1: int, j2: int) -> int:
            if i1 == i2 and j1 == j2: return 0
            res = inf
            for i in range(i1, i2):
                res = min(res, dfs(i1, i, j1, j2) + dfs(i + 1, i2, j1, j2) + horizontalCut[i])
            for j in range(j1, j2):
                res = min(res, dfs(i1, i2, j1, j) + dfs(i1, i2, j + 1, j2) + verticalCut[j])
            return res
        return dfs(0, n - 1, 0, m - 1)