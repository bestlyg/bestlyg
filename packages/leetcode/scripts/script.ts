/**
 *
 * @param src
 * @param dist
 *
 * d : 当前是第几步
 * k : x - y的值
 * x + y == d, x - y == k
 */
// function myers(src: string, dist: string) {
//   const n = src.length + dist.length;
//   const trace: Record<number, Record<number, number>> = {};
//   let i = 0;
//   while (i < src.length && i < dist.length && src[i] == dist[i]) i++;
//   trace[0] = { 0: i };
//   const v: Record<number, number> = { 0: 1 };
//   loop: for (let d = 1; d <= n; d++) {
//     const v = new Map<number, number>();
//     trace[d] = {};
//     for (let k = -d; k <= d; k += 2) {
//       console.log(`=======\nd = ${d}, k = ${k}`);
//       const down = k === -d || (k !== d && v[k + 1] > v[k - 1]);
//       let x = down ? v[k + 1] : v[k - 1] + 1;
//       let y = x - k;
//       while (x < src.length && y < dist.length && src[x] === dist[y]) x++, y++;
//       v[k] = x;
//       trace[d][k] = x;
//       if (x === src.length && y === dist.length) console.log(`down = ${down}, x = ${x}, y = ${y}`);
//     }
//   }
//   console.log(trace);
// }
// const src = 'cbabc';
// const dist = 'abcabba';
// myers(src, dist);

function makeStringsEqual(s: string, target: string): boolean {
  const n = s.length;
  const set = new Set([s]);
  const q = [s];
  while (q.length) {
    const s = q.shift()!;
    if (s === target) return true;
    // console.log('========\n', s);
    for (let i = 0; i < n; i++) {
      const inum = +s[i];
      for (let j = i + 1; j < n; j++) {
        if (i === j) continue;
        const jnum = +s[j];
        let next =
          s.substring(0, i) +
          (inum | jnum) +
          s.substring(i + 1, j) +
          (inum ^ jnum) +
          s.substring(j + 1);
        if (!set.has(next)) {
          set.add(next);
          q.push(next);
        }
        next =
          s.substring(0, i) +
          (inum ^ jnum) +
          s.substring(i + 1, j) +
          (inum | jnum) +
          s.substring(j + 1);
        if (!set.has(next)) {
          set.add(next);
          q.push(next);
        }
      }
    }
  }
  return false;
}

// [[-37,-50,-3,44],[-37,46,13,-32],[47,-42,-3,-40],[-17,-22,-39,24]]
// [[-24,-9,-14,-15,44,31,-46,5,20,-5,34],[9,-40,-49,-50,17,40,35,30,-39,36,-49],[-18,-43,-40,-5,-30,9,-28,-41,-6,-47,12],[11,42,-23,20,35,34,-39,-16,27,34,-15],[32,27,-30,29,-48,15,-50,-47,-28,-21,38],[45,48,-1,-18,9,-4,-13,10,9,8,-41],[-42,-35,20,-17,10,5,36,47,6,1,8],[3,-50,-23,16,31,2,-39,36,-25,-30,37],[-48,-41,18,-31,-48,-1,-42,-3,-8,-29,-2],[17,0,31,-30,-43,-20,-37,-6,-43,8,19],[42,25,32,27,-2,45,12,-9,34,17,32]]
// [[25,8,31,42,-39,8,31,-10,33,-44,7,-30,9,44,15,26],[-3,-48,-17,-18,9,-12,-21,10,1,44,-17,14,-27,48,-21,-6],[49,28,27,-18,-31,4,-13,34,49,48,47,-18,33,40,15,38],[5,-28,-49,-38,1,32,-25,-50,29,-32,35,-46,-43,48,-49,-6],[-27,-24,23,-14,-47,-12,7,6,25,-16,47,-26,13,-12,-33,-18],[45,-48,3,-26,-23,-36,-17,38,17,12,15,46,37,40,47,26],[-19,-24,-21,-2,-7,-48,47,30,5,-8,23,-46,21,-32,-33,-26],[-27,32,27,-26,21,-32,-49,-10,5,20,-29,46,-43,-44,39,22],[-43,48,27,26,-27,12,-1,-10,-27,12,-29,-34,41,-28,-25,-30],[25,-36,35,-26,37,-20,31,14,-19,-40,-29,-2,-39,-28,11,46],[49,-32,-29,-6,-47,32,-17,-18,-23,24,23,22,-47,-44,27,14],[37,-44,-33,-18,-47,24,-17,-46,-43,-32,15,-46,-27,-8,-25,46],[41,-40,31,-30,13,-24,-29,22,-15,-16,47,2,-39,4,-25,-42],[-3,12,7,14,-7,8,-37,-34,-7,-12,39,-38,1,44,27,-34],[-47,4,7,-2,-43,-32,27,2,-43,-8,-33,14,49,-48,-5,30],[-15,8,-33,-26,-23,-32,-25,22,13,-20,-9,26,29,4,-1,2]]

const list = [
  [25, 8, 31, 42, -39, 8, 31, -10, 33, -44, 7, -30, 9, 44, 15, 26],
  [-3, -48, -17, -18, 9, -12, -21, 10, 1, 44, -17, 14, -27, 48, -21, -6],
  [49, 28, 27, -18, -31, 4, -13, 34, 49, 48, 47, -18, 33, 40, 15, 38],
  [5, -28, -49, -38, 1, 32, -25, -50, 29, -32, 35, -46, -43, 48, -49, -6],
  [-27, -24, 23, -14, -47, -12, 7, 6, 25, -16, 47, -26, 13, -12, -33, -18],
  [45, -48, 3, -26, -23, -36, -17, 38, 17, 12, 15, 46, 37, 40, 47, 26],
  [-19, -24, -21, -2, -7, -48, 47, 30, 5, -8, 23, -46, 21, -32, -33, -26],
  [-27, 32, 27, -26, 21, -32, -49, -10, 5, 20, -29, 46, -43, -44, 39, 22],
  [-43, 48, 27, 26, -27, 12, -1, -10, -27, 12, -29, -34, 41, -28, -25, -30],
  [25, -36, 35, -26, 37, -20, 31, 14, -19, -40, -29, -2, -39, -28, 11, 46],
  [49, -32, -29, -6, -47, 32, -17, -18, -23, 24, 23, 22, -47, -44, 27, 14],
  [37, -44, -33, -18, -47, 24, -17, -46, -43, -32, 15, -46, -27, -8, -25, 46],
  [41, -40, 31, -30, 13, -24, -29, 22, -15, -16, 47, 2, -39, 4, -25, -42],
  [-3, 12, 7, 14, -7, 8, -37, -34, -7, -12, 39, -38, 1, 44, 27, -34],
  [-47, 4, 7, -2, -43, -32, 27, 2, -43, -8, -33, 14, 49, -48, -5, 30],
  [-15, 8, -33, -26, -23, -32, -25, 22, 13, -20, -9, 26, 29, 4, -1, 2],
];

const res1 = [
  [25, 22, 28, 30, 6, 22, 28, 13, 29, 1, 16, 7, 23, 33, 24, 27],
  [18, 1, 13, 11, 20, 16, 12, 21, 19, 28, 13, 22, 8, 34, 12, 17],
  [35, 28, 27, 11, 7, 17, 14, 30, 35, 34, 33, 11, 29, 32, 24, 31],
  [19, 9, 2, 5, 18, 29, 11, 1, 27, 7, 30, 3, 4, 34, 2, 17],
  [9, 11, 25, 15, 1, 16, 21, 20, 26, 14, 33, 10, 24, 16, 4, 12],
  [33, 1, 14, 10, 12, 2, 13, 31, 25, 23, 24, 34, 30, 32, 35, 27],
  [13, 11, 12, 18, 16, 1, 29, 27, 20, 16, 26, 3, 25, 5, 4, 8],
  [9, 29, 27, 10, 25, 7, 1, 13, 20, 24, 8, 34, 4, 2, 30, 26],
  [3, 32, 27, 25, 10, 23, 15, 13, 10, 23, 8, 5, 31, 9, 11, 7],
  [25, 7, 29, 10, 30, 13, 28, 22, 14, 2, 8, 15, 6, 9, 19, 32],
  [35, 8, 9, 16, 1, 29, 13, 12, 11, 27, 26, 23, 1, 2, 28, 20],
  [26, 4, 6, 11, 1, 25, 13, 3, 5, 7, 24, 3, 8, 17, 11, 32],
  [29, 5, 28, 7, 21, 12, 8, 24, 15, 14, 33, 16, 6, 20, 11, 1],
  [18, 23, 21, 24, 16, 22, 5, 6, 16, 15, 31, 4, 19, 33, 28, 6],
  [2, 20, 21, 18, 5, 7, 23, 19, 5, 16, 6, 22, 32, 1, 17, 28],
  [14, 22, 6, 10, 12, 7, 11, 24, 23, 13, 15, 25, 26, 20, 18, 19],
];
const res2 = [
  [25, 22, 28, 30, 6, 22, 28, 13, 29, 1, 16, 7, 23, 33, 24, 27],
  [18, 1, 14, 13, 20, 16, 12, 21, 19, 28, 14, 22, 8, 34, 12, 17],
  [35, 28, 27, 13, 7, 17, 15, 30, 35, 34, 33, 13, 29, 32, 24, 31],
  [19, 9, 2, 5, 18, 29, 11, 1, 27, 7, 30, 3, 4, 34, 2, 17],
  [9, 11, 25, 15, 1, 16, 21, 20, 26, 14, 33, 10, 24, 16, 4, 12],
  [33, 1, 15, 10, 12, 2, 14, 31, 25, 23, 24, 34, 30, 32, 35, 27],
  [13, 11, 12, 18, 17, 1, 29, 27, 20, 16, 26, 3, 25, 5, 4, 8],
  [9, 29, 27, 10, 25, 7, 1, 13, 20, 24, 8, 34, 4, 2, 30, 26],
  [3, 32, 27, 25, 10, 23, 16, 13, 10, 23, 8, 5, 31, 9, 11, 7],
  [25, 7, 29, 10, 30, 13, 28, 22, 14, 2, 8, 15, 6, 9, 19, 32],
  [35, 8, 9, 16, 1, 29, 14, 12, 11, 27, 26, 23, 1, 2, 28, 20],
  [26, 4, 6, 13, 1, 25, 14, 3, 5, 7, 24, 3, 8, 17, 11, 32],
  [29, 5, 28, 7, 21, 12, 8, 24, 15, 14, 33, 16, 6, 20, 11, 1],
  [18, 23, 21, 24, 17, 22, 5, 6, 17, 15, 31, 4, 19, 33, 28, 6],
  [2, 20, 21, 18, 5, 7, 23, 19, 5, 16, 6, 22, 32, 1, 17, 28],
  [14, 22, 6, 10, 12, 7, 11, 24, 23, 13, 15, 25, 26, 20, 18, 19],
];
