{
    "id": "2161",
    "name": "2034.股票价格波动",
    "url": "https://leetcode.cn/problems/stock-price-fluctuation",
    "desc": "请你设计一个算法，实现：更新 股票在某一时间戳的股票价格，如果有之前同一时间戳的价格，这一操作将   更正   之前的错误价格。找到当前记录里 最新股票价格  。最新股票价格   定义为时间戳最晚的股票价格。找到当前记录里股票的 最高价格  。找到当前记录里股票的 最低价格  。",
    "solutions": [
        {
            "date": "2022-01-23",
            "time": 692,
            "memory": 79.2,
            "script": "typescript",
            "desc": "维护堆内下标。",
            "code": "class Node {\n  constructor(\n    public timestamp: number,\n    public price: number,\n    public imax: number,\n    public imin: number\n  ) {}\n}\nclass Heap<Node> {\n  private arr: Node[] = [];\n  get isEmpty() {\n    return this.size === 0;\n  }\n  get size() {\n    return this.arr.length;\n  }\n  get top() {\n    return this.arr[0];\n  }\n  constructor(private compare: (t1: Node, t2: Node) => number, private idx_field: string) {}\n  add(num: Node): void {\n    this.arr.push(num);\n    this.shiftUp(this.size - 1);\n  }\n  remove(): Node {\n    const num = this.arr.shift()!;\n    if (this.size) {\n      this.arr.unshift(this.arr.pop()!);\n      this.shiftDown(0);\n    }\n    return num;\n  }\n  shiftUp(index: number): void {\n    if (index === 0) return;\n    const parentIndex = (index - 1) >> 1;\n    if (this.compare(this.arr[index], this.arr[parentIndex]) > 0) {\n      this.arr[index][this.idx_field] = parentIndex;\n      this.arr[parentIndex][this.idx_field] = index;\n      [this.arr[index], this.arr[parentIndex]] = [this.arr[parentIndex], this.arr[index]];\n      this.shiftUp(parentIndex);\n    }\n  }\n  shiftDown(index: number): void {\n    let childrenIndex = index * 2 + 1;\n    if (childrenIndex > this.size - 1) return;\n    if (\n      childrenIndex + 1 <= this.size - 1 &&\n      this.compare(this.arr[childrenIndex + 1], this.arr[childrenIndex]) > 0\n    ) {\n      childrenIndex++;\n    }\n    if (this.compare(this.arr[childrenIndex], this.arr[index]) > 0) {\n      this.arr[index][this.idx_field] = childrenIndex;\n      this.arr[childrenIndex][this.idx_field] = index;\n      [this.arr[childrenIndex], this.arr[index]] = [this.arr[index], this.arr[childrenIndex]];\n      this.shiftDown(childrenIndex);\n    }\n  }\n  *[Symbol.iterator](): IterableIterator<Node> {\n    for (const t of this.arr) {\n      yield t;\n    }\n  }\n}\n\nclass StockPrice {\n  heap_max = new Heap<Node>((t1, t2) => t1.price - t2.price, 'imax');\n  heap_min = new Heap<Node>((t1, t2) => t2.price - t1.price, 'imin');\n  map = new Map<number, Node>();\n  time_max = -1;\n  update(timestamp: number, price: number): void {\n    this.time_max = Math.max(this.time_max, timestamp);\n    const cnt = this.map.size;\n    let node = this.map.get(timestamp);\n    if (node) {\n      node.price = price;\n      this.heap_max.shiftUp(node.imax);\n      this.heap_max.shiftDown(node.imax);\n      this.heap_min.shiftUp(node.imin);\n      this.heap_min.shiftDown(node.imin);\n    } else {\n      this.map.set(timestamp, (node = new Node(timestamp, price, cnt, cnt)));\n      this.heap_max.add(node);\n      this.heap_min.add(node);\n    }\n  }\n  current(): number {\n    return this.map.get(this.time_max)!.price;\n  }\n  maximum(): number {\n    return this.heap_max.top.price;\n  }\n  minimum(): number {\n    return this.heap_min.top.price;\n  }\n}"
        },
        {
            "script": "python",
            "time": 1140,
            "memory": 57.04,
            "desc": "有序集合。",
            "code": "from sortedcontainers import SortedDict\nclass StockPrice:\n\n    def __init__(self):\n        self.cur_time = -1\n        self.cur_price = 0\n        self.time_map = SortedDict()\n        self.max_map = SortedDict()\n        self.min_map = SortedDict()\n\n    def update_map(self, map, key, d):\n        if key not in map: map[key] = 0\n        map[key] += d\n        if map[key] == 0: del map[key]\n\n    def update(self, timestamp: int, price: int) -> None:\n        if timestamp in self.time_map: \n            cur_price = self.time_map[timestamp]\n            self.update_map(self.max_map, cur_price, -1)\n            self.update_map(self.min_map, cur_price, -1)\n        self.update_map(self.max_map, price, 1)\n        self.update_map(self.min_map, price, 1)\n        self.time_map[timestamp] = price\n        if self.cur_time <= timestamp:\n            self.cur_time = timestamp\n            self.cur_price = price\n\n    def current(self) -> int:\n        return self.cur_price\n\n    def maximum(self) -> int:\n        return self.max_map.keys()[-1]\n\n    def minimum(self) -> int:\n        return self.min_map.keys()[0]\n",
            "date": "2023-10-08"
        }
    ],
    "tagList": [
        "设计",
        "哈希表",
        "数据流",
        "有序集合",
        "堆（优先队列）"
    ],
    "level": "Medium"
}