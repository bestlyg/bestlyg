{
    "id": "2134",
    "name": "2024.考试的最大困扰度",
    "url": "https://leetcode.cn/problems/maximize-the-confusion-of-an-exam",
    "desc": "请你返回在不超过 k 次操作的情况下，最大 连续 'T' 或者 'F' 的数目。",
    "solutions": [
        {
            "date": "2022-03-29",
            "time": 24,
            "memory": 11.7,
            "script": "cpp",
            "desc": "双指针维护中间 k。",
            "code": "class Solution {\n   public:\n    int maxConsecutiveAnswers(string answerKey, int k) {\n        return max(check('T', answerKey, k), check('F', answerKey, k));\n    }\n    int check(char ch, string str, int k) {\n        int n = str.size(), l = 0, r = 0, ans = 0;\n        do {\n            while (r < n && k > 0) {\n                while (r < n && str[r] == ch) r++;\n                k--;\n                if (r < n) r++;\n                while (r < n && str[r] == ch) r++;\n            }\n            ans = max(ans, r - l);\n            while (l < n && k <= 0) {\n                if (str[l] != ch) k++;\n                l++;\n            }\n        } while (r < n);\n        return ans;\n    }\n};"
        },
        {
            "script": "python",
            "time": 204,
            "memory": 16.68,
            "desc": "滑动窗口。",
            "code": "class Solution:\n    def maxConsecutiveAnswers(self, answerKey: str, k: int) -> int:\n        n = len(answerKey)\n        def run(ch: str, k: int) -> int:\n            left = 0\n            right = 0\n            while right < n and (k or answerKey[right] == ch):\n                if answerKey[right] != ch: k -= 1\n                right += 1\n            res = right - left\n            while right < n:\n                if answerKey[right] == ch:\n                    res = max(res, right + 1 - left)\n                else:\n                    while answerKey[left] == ch: left += 1\n                    left += 1\n                    res = max(res, right - left)\n                right += 1\n            return res\n        return max(run('T', k), run('F', k))",
            "date": "2024-09-02"
        }
    ],
    "tagList": ["字符串", "二分查找", "前缀和", "滑动窗口"],
    "level": "Medium"
}
