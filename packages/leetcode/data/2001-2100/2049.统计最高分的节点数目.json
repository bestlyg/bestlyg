{
    "id": "2175",
    "name": "2049.统计最高分的节点数目",
    "url": "https://leetcode.cn/problems/count-nodes-with-the-highest-score",
    "difficulty": "中等",
    "tag": [
        "树",
        "深度优先搜索",
        "数组",
        "二叉树"
    ],
    "desc": "请你返回有 最高得分 节点的 数目 。",
    "solutions": [
        {
            "date": 1646928000000,
            "time": 128,
            "memory": 79.6,
            "script": "cpp",
            "desc": "统计每个点的父节点，左子树个数，右子树个数。",
            "code": "class Solution {\n   public:\n    struct node {\n        int parent, left, right, lcnt, rcnt;\n    };\n    // ans\n    int ans = 0;\n    long long maxnum = -1;\n    void setAns(long long num) {\n        if (num >= maxnum) {\n            if (num > maxnum) ans = 0;\n            ans++;\n            maxnum = num;\n        }\n    }\n    int countHighestScoreNodes(vector<int>& parents) {\n        int n = parents.size();\n        vector<node> list(n);\n        // init\n        for (int i = 0; i < n; i++) {\n            list[i].parent = parents[i];\n            list[i].left = list[i].right = -1;\n            list[i].lcnt = list[i].rcnt = 0;\n        }\n        // load\n        for (int i = 1; i < n; i++) {\n            if (list[list[i].parent].left == -1)\n                list[list[i].parent].left = i;\n            else\n                list[list[i].parent].right = i;\n        }\n        // check\n        int sum = check(list, 0);\n        // res\n        for (int i = 1; i < n; i++) {\n            if (list[i].lcnt == 0 && list[i].rcnt == 0) {\n                setAns((long long)list[0].lcnt + list[0].rcnt);\n                continue;\n            }\n            setAns((long long)format(sum - 1 - list[i].lcnt - list[i].rcnt) *\n                   format(list[i].lcnt) * format(list[i].rcnt));\n        }\n        // res0\n        setAns((long long)format(list[0].lcnt) * format(list[0].rcnt));\n        return ans;\n    }\n    int check(vector<node>& list, int node) {\n        int ans = 0;\n        if (list[node].left != -1) {\n            list[node].lcnt = check(list, list[node].left);\n            ans += list[node].lcnt;\n        }\n        if (list[node].right != -1) {\n            list[node].rcnt = check(list, list[node].right);\n            ans += list[node].rcnt;\n        }\n        return ans + 1;\n    }\n    int format(int num) { return num == 0 ? 1 : num; }\n};"
        }
    ]
}