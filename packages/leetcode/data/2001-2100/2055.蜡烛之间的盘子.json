{
    "id": "2165",
    "name": "2055.蜡烛之间的盘子",
    "url": "https://leetcode.cn/problems/plates-between-candles",
    "desc": "请你返回一个整数数组 answer ，其中 answer[i] 是第 i 个查询的答案。",
    "solutions": [
        {
            "date": "2022-03-08",
            "time": 380,
            "memory": 135.3,
            "script": "cpp",
            "desc": "前缀和，二分。",
            "code": "class Solution {\n   public:\n    typedef pair<int, int> node;\n    vector<node> list;\n    int n;\n    vector<int> platesBetweenCandles(string s, vector<vector<int>>& queries) {\n        n = s.size();\n        int prev = 0;\n        for (int i = 0; i < n; i++) {\n            if (s[i] == '|') list.push_back(make_pair(i, prev));\n            if (s[i] == '*') prev++;\n        }\n        vector<int> ans;\n        ans.reserve(queries.size());\n        for (auto& query : queries) {\n            int l = bs_l(query[0]), r = bs_r(query[1]), res;\n            if (l == list.size() || r == -1 || list[l].first > query[1] ||\n                l == r)\n                res = 0;\n            else\n                res = list[r].second - list[l].second;\n            ans.push_back(res);\n        }\n\n        return ans;\n    }\n    int bs_l(int idx) {\n        int l = 0, r = list.size(), m;\n        while (l < r) {\n            m = (l + r) >> 1;\n            if (list[m].first >= idx)\n                r = m;\n            else\n                l = m + 1;\n        }\n        return l;\n    }\n    int bs_r(int idx) {\n        int l = -1, r = list.size() - 1, m;\n        while (l < r) {\n            m = (l + r + 1) >> 1;\n            if (list[m].first <= idx)\n                l = m;\n            else\n                r = m - 1;\n        }\n        return l;\n    }\n};"
        },
        {
            "date": "2022-03-08",
            "time": 364,
            "memory": 138.9,
            "script": "cpp",
            "desc": "前缀和，遍历存储每个点的前后蜡烛。",
            "code": "class Solution {\n   public:\n    typedef pair<int, int> node;\n    vector<int> platesBetweenCandles(string s, vector<vector<int>>& queries) {\n        int n = s.size(), prev = 0;\n        vector<node> list;\n        for (int i = 0; i < n; i++) {\n            if (s[i] == '|') list.push_back(make_pair(i, prev));\n            if (s[i] == '*') prev++;\n        }\n        vector<int> find_l(n), find_r(n);\n        for (int i = 0, start = 0; i < n; i++) {\n            find_l[i] = start;\n            if (start < list.size() && i == list[start].first) start++;\n        }\n        for (int i = n - 1, start = list.size() - 1; i >= 0; i--) {\n            find_r[i] = start;\n            if (start > -1 && i == list[start].first) start--;\n        }\n        vector<int> ans;\n        ans.reserve(queries.size());\n        for (auto& query : queries) {\n            int l = find_l[query[0]], r = find_r[query[1]], res;\n            if (l == list.size() || r == -1 || list[l].first > query[1] ||\n                l == r)\n                res = 0;\n            else\n                res = list[r].second - list[l].second;\n            ans.push_back(res);\n        }\n        return ans;\n    }\n};"
        }
    ],
    "tagList": ["数组", "字符串", "二分查找", "前缀和"],
    "level": "Medium"
}
