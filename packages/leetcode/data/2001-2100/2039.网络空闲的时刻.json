{
  "name": "2039. 网络空闲的时刻",
  "url": "https://leetcode-cn.com/problems/the-time-when-the-network-becomes-idle/",
  "difficulty": "中等",
  "tag": ["广度优先搜索", "图", "数组"],
  "desc": "请返回计算机网络变为 空闲 状态的 最早秒数 。",
  "solutions": [
    {
      "date": 1647705600000,
      "time": 540,
      "memory": 185.9,
      "script": "cpp",
      "desc": "bfs 后统计每个的时长。",
      "code": "class Solution {\n   public:\n    struct node {\n        int idx;\n        vector<int> next;\n    };\n    int networkBecomesIdle(vector<vector<int>>& edges, vector<int>& patience) {\n        int n = patience.size();\n        vector<node> list(n);\n        for (int i = 0; i < n; i++) list[i].idx = i;\n        for (auto& edge : edges) {\n            list[edge[0]].next.push_back(edge[1]);\n            list[edge[1]].next.push_back(edge[0]);\n        }\n        int ans = 0;\n        queue<int> q;\n        q.push(0);\n        vector<bool> check(list.size(), false);\n        check[0] = true;\n        int cur_time = 1, size = 1;\n        while (q.size()) {\n            int idx = q.front();\n            q.pop();\n            for (auto& next : list[idx].next) {\n                if (check[next]) continue;\n                check[next] = true;\n                q.push(next);\n                int time = cur_time * 2, pat = patience[list[next].idx];\n                // 超出一遍等待， 按最后一个算\n                if (time > pat)\n                    time += time % pat == 0 ? time - pat : time - time % pat;\n                ans = max(ans, time);\n            }\n            if (--size == 0) {\n                size = q.size();\n                cur_time++;\n            }\n        }\n\n        return ans + 1;\n    }\n};"
    }
  ]
}
