{
    "id": "1037",
    "name": "995.K连续位的最小翻转次数",
    "url": "https://leetcode.cn/problems/minimum-number-of-k-consecutive-bit-flips",
    "desc": "在仅包含 0 和 1 的数组 A 中，一次 K 位翻转包括选择一个长度为 K 的（连续）子数组，同时将子数组中的每个 0 更改为 1，而每个 1 更改为 0。返回所需的 K 位翻转的最小次数，以便数组没有值为 0 的元素。如果不可能，返回 -1。",
    "solutions": [
        {
            "date": "2021-02-18",
            "time": 1580,
            "memory": 46.4,
            "script": "typescript",
            "desc": "贪心，直接翻转每个 0。",
            "code": "function minKBitFlips(A: number[], K: number): number {\n  const checkZero = (v: number) => !(v & 1);\n  if (K === 1) return A.filter(checkZero).length;\n  const startI = A.findIndex(checkZero);\n  if (startI === -1) return 0;\n  const flip = (index: number) => {\n    for (let i = index, l = index + K; i < l; i++) {\n      A[i] ^= 1;\n    }\n  };\n  const len = A.length - K;\n  let ans = 0;\n  for (let i = startI; i <= len; i++) {\n    if (!(A[i] & 1)) {\n      ans++;\n      flip(i);\n    }\n  }\n  return A.slice(len).every(v => v & 1) ? ans : -1;\n}"
        }
    ],
    "tagList": [
        "位运算",
        "队列",
        "数组",
        "前缀和",
        "滑动窗口"
    ],
    "level": "Hard"
}