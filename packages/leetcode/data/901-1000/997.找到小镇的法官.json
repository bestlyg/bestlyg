{
    "id": "1039",
    "name": "997.找到小镇的法官",
    "url": "https://leetcode.cn/problems/find-the-town-judge",
    "desc": "如果小镇存在秘密法官并且可以确定他的身份，请返回该法官的编号。否则，返回 -1。",
    "solutions": [
        {
            "date": "2021-12-19",
            "time": 112,
            "memory": 46.8,
            "script": "typescript",
            "desc": "统计每个人是否都有 n-1 个人相信且没有相信别人。",
            "code": "class Person {\n  parent: number = 0;\n  children: number = 0;\n  constructor(public idx: number) {}\n}\nfunction findJudge(n: number, trust: number[][]): number {\n  const persons = new Array(n).fill(0).map((_, i) => new Person(i + 1));\n  for (const [i1, i2] of trust) {\n    persons[i1 - 1].parent++;\n    persons[i2 - 1].children++;\n  }\n  return persons.find(p => p.children === n - 1 && p.parent === 0)?.idx ?? -1;\n}"
        },
        {
            "script": "python",
            "time": 74,
            "memory": 19.66,
            "desc": "遍历。",
            "code": "class Solution:\n    def findJudge(self, n: int, trust: List[List[int]]) -> int:\n        carr = [[] for _ in range(n + 1)]\n        parr = [[] for _ in range(n + 1)]\n        for p1, p2 in trust:\n            parr[p2].append(p1)\n            carr[p1].append(p2)\n        for i in range(1, n + 1):\n            if not carr[i] and len(parr[i]) == n - 1:\n                return i\n        return -1",
            "date": "2024-09-22"
        }
    ],
    "tagList": ["图", "数组", "哈希表"],
    "level": "Easy"
}
