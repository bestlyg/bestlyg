{
    "id": "983",
    "name": "946.验证栈序列",
    "url": "https://leetcode.cn/problems/validate-stack-sequences",
    "desc": "给定  pushed  和  popped  两个序列，每个序列中的 值都不重复，只有当它们可能是在最初空栈上进行的推入 push 和弹出 pop 操作序列的结果时，返回 true；否则，返回 false 。",
    "solutions": [
        {
            "date": "2021-03-19",
            "time": 96,
            "memory": 40,
            "script": "typescript",
            "desc": "维护栈，判断数据是否正常弹出。",
            "code": "function validateStackSequences(pushed: number[], popped: number[]): boolean {\n  const stack: number[] = [];\n  for (const push of pushed) {\n    stack.push(push);\n    while (popped.length > 0 && popped[0] === stack[stack.length - 1]) {\n      stack.pop();\n      popped.shift();\n    }\n  }\n  return popped.length === 0;\n}"
        },
        {
            "date": "2022-08-31",
            "time": 16,
            "memory": 14.8,
            "script": "cpp",
            "desc": "stack。",
            "code": "class Solution {\npublic:\n    bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {\n        int len = popped.size();\n        stack<int> s;\n        for (int i1 = 0, i2 = 0; i1 < len; i1++) {\n            s.push(pushed[i1]);\n            while (i2 < len && s.size() && s.top() == popped[i2]) {\n                s.pop();\n                i2++;\n            }\n        }\n        return s.empty();\n    }\n};"
        }
    ],
    "tagList": [
        "栈",
        "数组",
        "模拟"
    ],
    "level": "Medium"
}