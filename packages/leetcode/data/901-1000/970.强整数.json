{
    "id": "1010",
    "name": "970.强整数",
    "url": "https://leetcode.cn/problems/powerful-integers",
    "desc": "给定三个整数 x 、 y 和 bound ，返回 值小于或等于 bound 的所有 强整数 组成的列表 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 0,
            "memory": 6.6,
            "desc": "dfs。",
            "code": "class Solution {\npublic:\n    vector<int> powerfulIntegers(int x, int y, int bound) {\n        vector<int> list;\n        unordered_set<int> res;\n        for (int i = 0; pow(x, i) <= bound; i++) {\n            list.push_back(pow(x, i));\n            if (x == 1) break;\n        }\n        for (int i = 0; pow(y, i) <= bound; i++) {\n            int ynum = pow(y, i);\n            for (auto &xnum : list)\n                if (ynum + xnum <= bound) res.insert(ynum + xnum);\n                else break;\n            if (y == 1) break;\n        }\n        return vector<int>(res.begin(), res.end());\n    }\n};",
            "date": "2023-05-02"
        },
        {
            "script": "python",
            "time": 48,
            "memory": 16.2,
            "desc": "同上。",
            "code": "class Solution:\n    def powerfulIntegers(self, x: int, y: int, bound: int) -> List[int]:\n        list = []\n        res = set()\n        i = 0\n        while pow(x, i) <= bound:\n            list.append(pow(x, i))\n            if x == 1:\n                break\n            i += 1\n        i = 0\n        while pow(y, i) <= bound:\n            ynum = pow(y, i)\n            for xnum in list:\n                if ynum + xnum <= bound:\n                    res.add(ynum + xnum)\n                else:\n                    break\n            if y == 1:\n                break\n            i += 1\n        return [num for num in res]",
            "date": "2023-05-02"
        },
        {
            "script": "rust",
            "time": 4,
            "memory": 2.2,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn powerful_integers(x: i32, y: i32, bound: i32) -> Vec<i32> {\n        let mut list = vec![];\n        let mut res = std::collections::HashSet::<i32>::new();\n        let mut i = 0;\n        while x.pow(i) <= bound {\n            list.push(x.pow(i));\n            if x == 1 {\n                break;\n            }\n            i += 1;\n        }\n        i = 0;\n        while y.pow(i) <= bound {\n            let ynum = y.pow(i);\n            for xnum in &list {\n                if ynum + *xnum <= bound {\n                    res.insert(ynum + *xnum);\n                } else {\n                    break;\n                }\n            }\n            if y == 1 {\n                break;\n            }\n            i += 1;\n        }\n        res.into_iter().collect()\n    }\n}\n",
            "date": "2023-05-02"
        }
    ],
    "tagList": ["哈希表", "数学", "枚举"],
    "level": "Medium"
}
