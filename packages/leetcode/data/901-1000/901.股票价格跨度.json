{
    "id": "937",
    "name": "901.股票价格跨度",
    "url": "https://leetcode.cn/problems/online-stock-span",
    "desc": "编写一个 StockSpanner 类，它收集某些股票的每日报价，并返回该股票当日价格的跨度。",
    "solutions": [
        {
            "date": "2021-07-19",
            "time": 372,
            "memory": 48.4,
            "script": "typescript",
            "desc": "单调递减栈，寻找前一个比当前值大的值。",
            "code": "class StockSpanner {\n  private arr: number[] = [];\n  private stack: number[] = [];\n  next(price: number): number {\n    const i = this.arr.length;\n    this.arr.push(price);\n    while (this.stack.length && price >= this.arr[this.stack[this.stack.length - 1]])\n      this.stack.pop()!;\n    const ans = i - (this.stack[this.stack.length - 1] ?? -1);\n    this.stack.push(i);\n    return ans;\n  }\n}"
        },
        {
            "date": "2022-10-21",
            "time": 196,
            "memory": 84.1,
            "script": "cpp",
            "desc": "单调栈，存储比自己大的最近节点。",
            "code": "class StockSpanner {\npublic:\n    stack<int> s;\n    vector<int> list;\n    StockSpanner() {\n        list.push_back(0x7fffffff);\n        s.push(0);\n    }\n    int next(int price) {\n        while (list[s.top()] <= price) s.pop();\n        int res = list.size() - s.top();\n        s.push(list.size());\n        list.push_back(price);\n        return res;\n    }\n};"
        },
        {
            "script": "cpp",
            "time": 240,
            "memory": 80.53,
            "desc": "单调栈。",
            "code": "class StockSpanner {\npublic:\n    int idx;\n    vector<pair<int, int>> arr;\n    StockSpanner(): idx(0), arr(vector<pair<int, int>>()) {}\n    int next(int price) {\n        while (arr.size() && arr.back().second <= price) arr.pop_back();\n        idx += 1;\n        int res = idx - (arr.size() ? arr.back().first : 0);\n        arr.push_back(make_pair(idx, price));\n        return res;\n    }\n};",
            "date": "2023-10-07"
        },
        {
            "script": "python",
            "time": 356,
            "memory": 20.68,
            "desc": "同上。",
            "code": "class StockSpanner:\n\n    def __init__(self):\n        self.idx = 0\n        self.arr = []\n\n    def next(self, price: int) -> int:\n        while self.arr and self.arr[-1][1] <= price:\n            self.arr.pop()\n        self.idx += 1\n        res = self.idx - (self.arr[-1][0] if self.arr else 0)\n        self.arr.append((self.idx, price))\n        return res\n",
            "date": "2023-10-07"
        },
        {
            "script": "rust",
            "time": 28,
            "memory": 6.27,
            "desc": "同上。",
            "code": "struct StockSpanner {\n    idx: usize,\n    arr: Vec<(usize, i32)>,\n}\n\nimpl StockSpanner {\n    fn new() -> Self {\n        Self {\n            idx: 0,\n            arr: vec![],\n        }\n    }\n\n    fn next(&mut self, price: i32) -> i32 {\n        while !self.arr.is_empty() && self.arr.last().unwrap().1 <= price {\n            self.arr.pop();\n        }\n        self.idx += 1;\n        let res = self.idx\n            - (if self.arr.is_empty() {\n                0\n            } else {\n                self.arr.last().unwrap().0\n            });\n        self.arr.push((self.idx, price));\n        res as i32\n    }\n}",
            "date": "2023-10-07"
        }
    ],
    "tagList": ["栈", "设计", "数据流", "单调栈"],
    "level": "Medium"
}
