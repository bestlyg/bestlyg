{
    "id": "954",
    "name": "918.环形子数组的最大和",
    "url": "https://leetcode.cn/problems/maximum-sum-circular-subarray",
    "desc": "定一个长度为 n 的环形整数数组 nums ，返回 nums 的非空 子数组 的最大可能和 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 100,
            "memory": 48,
            "desc": "前缀和统计，单调队列记录区间最大值。",
            "code": "class Solution {\npublic:\n    int maxSubarraySumCircular(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> sums(1, 0);\n        for (auto &num : nums) {\n            sums.push_back(num + sums.back());\n        }\n        for (auto &num : nums) {\n            sums.push_back(num + sums.back());\n        }\n        deque<int> q;\n        for (int i = 1; i <= n; i++) {\n            while (q.size() && sums[q.back()] > sums[i]) q.pop_back();\n            q.push_back(i);\n        }\n        int res = INT_MIN;\n        for (int i = n + 1; i < sums.size(); i++) {\n            res = max(res, nums[i - n - 1]);\n            while (q.size() && q.front() < i - n) q.pop_front();\n            while (q.size() && sums[q.back()] > sums[i]) q.pop_back();\n            if (q.size()) res = max(res, sums[i] - sums[q.front()]);\n            q.push_back(i);\n        }\n        return res;\n    }\n};",
            "date": "2023-07-20"
        },
        {
            "script": "python",
            "time": 396,
            "memory": 22.3,
            "desc": "同上。",
            "code": "class Solution:\n    def maxSubarraySumCircular(self, nums: List[int]) -> int:\n        n = len(nums)\n        sums = [0]\n        for num in nums:\n            sums.append(num + sums[-1])\n        for num in nums:\n            sums.append(num + sums[-1])\n        q = deque()\n        for i in range(1, n+1):\n            while len(q) and sums[q[-1]] > sums[i]:\n                q.pop()\n            q.append(i)\n        res = -inf\n        for i in range(n+1, len(sums)):\n            res = max(res, nums[i-n-1])\n            while len(q) and q[0] < i - n:\n                q.popleft()\n            while len(q) and sums[q[-1]] > sums[i]:\n                q.pop()\n            if len(q):\n                res = max(res, sums[i] - sums[q[0]])\n            q.append(i)\n        return res",
            "date": "2023-07-20"
        },
        {
            "script": "rust",
            "time": 16,
            "memory": 2.8,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn max_subarray_sum_circular(nums: Vec<i32>) -> i32 {\n        let n = nums.len();\n        let mut sums = vec![0];\n        for num in &nums {\n            sums.push(sums.last().unwrap() + num);\n        }\n        for num in &nums {\n            sums.push(sums.last().unwrap() + num);\n        }\n        let mut q = std::collections::VecDeque::<usize>::new();\n        for i in 1..=n {\n            while !q.is_empty() && sums[*q.back().unwrap()] > sums[i] {\n                q.pop_back();\n            }\n            q.push_back(i);\n        }\n        let mut res = i32::MIN;\n        for i in (n + 1)..sums.len() {\n            res = res.max(nums[i - n - 1]);\n            while !q.is_empty() && *q.front().unwrap() < i - n {\n                q.pop_front();\n            }\n            while !q.is_empty() && sums[*q.back().unwrap()] > sums[i] {\n                q.pop_back();\n            }\n            if !q.is_empty() {\n                res = res.max(sums[i] - sums[*q.front().unwrap()]);\n            }\n            q.push_back(i);\n        }\n        res\n    }\n}",
            "date": "2023-07-20"
        }
    ],
    "tagList": [
        "队列",
        "数组",
        "分治",
        "动态规划",
        "单调队列"
    ],
    "level": "Medium"
}