{
    "id": "998",
    "name": "958.二叉树的完全性检验",
    "url": "https://leetcode.cn/problems/check-completeness-of-a-binary-tree",
    "desc": "给定一个二叉树，确定它是否是一个完全二叉树。",
    "solutions": [
        {
            "date": "2021-07-29",
            "time": 144,
            "memory": 46.8,
            "script": "typescript",
            "desc": "dfs 递归遍历。",
            "code": "function isCompleteTree(root: TreeNode | null): boolean {\n  if (root === null) return true;\n  const n = count(root);\n  let m = 1;\n  let cnt = 0;\n  while (cnt + 2 * m < n) cnt += m <<= 1;\n  return judge(root, n, m);\n  function count(node: TreeNode | null): number {\n    if (node === null) return 0;\n    return count(node.left) + count(node.right) + 1;\n  }\n  function judge(node: TreeNode | null, n: number, m: number): boolean {\n    console.log(node, n, m);\n    if (node === null) return n === 0;\n    if (n === 0) return false;\n    if (n === 1) return node.left === null && node.right === null;\n    const sum = Math.max(0, m * 2 - 1);\n    const left = Math.min(m, n - sum);\n    const right = n - sum - left;\n    return (\n      judge(node.left, ((sum - 1) >> 1) + left, m >> 1) &&\n      judge(node.right, ((sum - 1) >> 1) + right, m >> 1)\n    );\n  }\n}"
        }
    ],
    "tagList": ["树", "广度优先搜索", "二叉树"],
    "level": "Medium"
}
