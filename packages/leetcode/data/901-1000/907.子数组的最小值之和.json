{
    "id": "943",
    "name": "907.子数组的最小值之和",
    "url": "https://leetcode.cn/problems/sum-of-subarray-minimums",
    "difficulty": "中等",
    "tag": ["栈", "数组", "动态规划", "单调栈"],
    "desc": "给定一个整数数组 arr，找到 min(b) 的总和，其中 b 的范围为 arr 的每个（连续）子数组。",
    "solutions": [
        {
            "date": 1666886400000,
            "time": 104,
            "memory": 41.3,
            "script": "cpp",
            "desc": "单调栈，统计每个点第一个左边大的数，和第二个右边大的数，统计左边数量+右边数量+左右交叉数量。",
            "code": "class Solution {\npublic:\n    const int mod = 1e9 + 7;\n    int sumSubarrayMins(vector<int>& arr) {\n        int n = arr.size();\n        long long ans = 0;\n        vector<int> l(n, -1), r(n, n);\n        stack<int> s;\n        for (int i = 0; i < n; i++) {\n            while (s.size() && arr[s.top()] > arr[i]) r[s.top()] = i, s.pop();\n            if (s.size()) l[i] = s.top();\n            s.push(i);\n        }\n        for (int i = 0; i < n; i++) {\n            int left = i - l[i] - 1, right = r[i] - i - 1;\n            ans = (ans +(static_cast<long long>(left) + right + left * right + 1) * arr[i]) % mod;\n        }\n        return ans;\n    }\n};"
        },
        {
            "script": "python",
            "time": 140,
            "memory": 20.25,
            "desc": "单调栈，找出当前点为最小值时的区间。",
            "code": "class Solution:\n    def sumSubarrayMins(self, arr: List[int]) -> int:\n        n = len(arr)\n        prev = [-1] * n\n        next = [n] * n\n        s = []\n        ans = 0\n        for i in range(n):\n            while s and arr[s[-1]] >= arr[i]:\n                next[s[-1]] = i\n                s.pop()\n            if s: prev[i] = s[-1]\n            s.append(i)\n        return sum((next[i] - i) * (i - prev[i]) * arr[i] for i in range(n)) % (10** 9 + 7)",
            "date": 1701014400000
        }
    ]
}
