{
    "id": "967",
    "name": "931.下降路径最小和",
    "url": "https://leetcode.cn/problems/minimum-falling-path-sum",
    "desc": "给你一个 n x n 的 方形 整数数组 matrix ，请你找出并返回通过 matrix 的下降路径 的 最小和 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 12,
            "memory": 9.9,
            "desc": "遍历。",
            "code": "class Solution {\npublic:\n    int minFallingPathSum(vector<vector<int>>& matrix) {\n        int n = matrix.size(), res = INT_MAX;\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                int val = matrix[i][j] + matrix[i - 1][j];\n                if (j > 0) val = min(val, matrix[i][j] + matrix[i - 1][j - 1]);\n                if (j < n - 1) val = min(val, matrix[i][j] + matrix[i - 1][j + 1]);\n                matrix[i][j] = val;\n            }\n        }\n        for (int j = 0; j < n; j++) res = min(res, matrix[n - 1][j]);\n        return res;\n    }\n};",
            "date": "2023-07-13"
        },
        {
            "script": "python",
            "time": 80,
            "memory": 17,
            "desc": "同上。",
            "code": "class Solution:\n    def minFallingPathSum(self, matrix: List[List[int]]) -> int:\n        n = len(matrix)\n        for i in range(1, n):\n            for j in range(n):\n                val = matrix[i][j] + matrix[i-1][j]\n                if j > 0:\n                    val = min(val, matrix[i][j] + matrix[i-1][j-1])\n                if j < n-1:\n                    val = min(val, matrix[i][j] + matrix[i-1][j+1])\n                matrix[i][j] = val\n        return min(matrix[n-1])",
            "date": "2023-07-13"
        },
        {
            "script": "rust",
            "time": 4,
            "memory": 2.1,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn min_falling_path_sum(mut matrix: Vec<Vec<i32>>) -> i32 {\n        let n = matrix.len();\n        for i in 1..n {\n            for j in 0..n {\n                let mut val = matrix[i][j] + matrix[i - 1][j];\n                if j > 0 {\n                    val = val.min(matrix[i][j] + matrix[i - 1][j - 1]);\n                }\n                if j < n - 1 {\n                    val = val.min(matrix[i][j] + matrix[i - 1][j + 1]);\n                }\n                matrix[i][j] = val;\n            }\n        }\n        *matrix[n - 1].iter().min().unwrap()\n    }\n}",
            "date": "2023-07-13"
        }
    ],
    "tagList": ["数组", "动态规划", "矩阵"],
    "level": "Medium"
}
