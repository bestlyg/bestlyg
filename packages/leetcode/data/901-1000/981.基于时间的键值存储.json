{
    "id": "1023",
    "name": "981.基于时间的键值存储",
    "url": "https://leetcode.cn/problems/time-based-key-value-store",
    "desc": "创建一个基于时间的键值存储类 TimeMap。",
    "solutions": [
        {
            "date": "2021-07-10",
            "time": 412,
            "memory": 77.1,
            "script": "typescript",
            "desc": "利用 map 储存所有值。",
            "code": "class TimeMap {\n  private map: Record<string, [string, number][]> = {};\n  set(key: string, value: string, timestamp: number): void {\n    let list = this.map[key];\n    if (!list) this.map[key] = list = [];\n    list.push([value, timestamp]);\n  }\n  get(key: string, timestamp: number): string {\n    return this.find(this.map[key] ?? [], timestamp);\n  }\n  private find(\n    list: [string, number][],\n    timestamp: number,\n    first = 0,\n    last = list.length - 1\n  ): string {\n    if (first > last) {\n      while (first > list.length - 1) first--;\n      while (first >= 0) {\n        if (list[first][1] < timestamp) return list[first][0];\n        first--;\n      }\n      return '';\n    }\n    const mid = (first + last) >> 1;\n    const [midStr, midTime] = list[mid];\n    if (midTime > timestamp) return this.find(list, timestamp, first, mid - 1);\n    else if (midTime < timestamp) return this.find(list, timestamp, mid + 1, last);\n    else return midStr;\n  }\n}"
        },
        {
            "date": "2021-08-14",
            "time": 404,
            "memory": 76.4,
            "script": "typescript",
            "desc": "map 储存，二分查找。",
            "code": "class TimeMap {\n  map = new Map<string, [string, number][]>();\n  set(key: string, value: string, timestamp: number): void {\n    let data = this.map.get(key);\n    if (!data) this.map.set(key, (data = []));\n    data.push([value, timestamp]);\n  }\n  get(key: string, timestamp: number): string {\n    let data = this.map.get(key);\n    if (!data) return '';\n    const idx = this.bs(data, timestamp);\n    if (idx === 0) {\n      if (data[idx][1] > timestamp) return '';\n      else return data[idx][0];\n    }\n    if (data[idx][1] <= timestamp) return data[idx][0];\n    return data[idx - 1][0];\n  }\n  bs(data: [string, number][], timestamp: number): number {\n    let l = 0;\n    let r = data.length - 1;\n    while (l < r) {\n      const mid = (l + r) >> 1;\n      if (data[mid][1] > timestamp) r = mid;\n      else l = mid + 1;\n    }\n    return l;\n  }\n}"
        }
    ],
    "tagList": ["设计", "哈希表", "字符串", "二分查找"],
    "level": "Medium"
}
