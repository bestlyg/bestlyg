{
    "id": "984",
    "name": "947.移除最多的同行或同列石头",
    "url": "https://leetcode.cn/problems/most-stones-removed-with-same-row-or-column",
    "difficulty": "中等",
    "tag": [
        "深度优先搜索",
        "并查集",
        "图",
        "哈希表"
    ],
    "desc": "n 块石头放置在二维平面中的一些整数坐标点上。每个坐标点上最多只能有一块石头。如果一块石头的 同行或者同列 上有其他石头存在，那么就可以移除这块石头。给你一个长度为 n 的数组 stones ，其中 stones[i] = [xi, yi] 表示第 i 块石头的位置，返回 可以移除的石子 的最大数量。",
    "solutions": [
        {
            "date": 1610640000000,
            "time": 108,
            "memory": 45.4,
            "script": "typescript",
            "desc": "并查集。",
            "code": "function removeStones(stones: number[][]): number {\n  const arr: number[] = [];\n  const n = stones.length;\n  let count = 0;\n  const find = (x: number) => {\n    if (arr[x] === undefined) {\n      arr[x] = x;\n      count++;\n    }\n    if (x !== arr[x]) {\n      arr[x] = find(arr[x]);\n    }\n    return arr[x];\n  };\n  const union = (u: number, v: number) => {\n    const x = find(u);\n    const y = find(v);\n    if (x !== y) {\n      arr[x] = y;\n      count--;\n    }\n  };\n  stones.forEach(([x, y]) => union(x + 10000, y));\n  return n - count;\n}"
        },
        {
            "date": 1619798400000,
            "time": 208,
            "memory": 44.1,
            "script": "typescript",
            "desc": "并查集。",
            "code": "class UnionFind {\n  elements: number[];\n  constructor(public size: number) {\n    this.elements = new Array(size).fill(0).map((_, i) => i);\n  }\n  same(v1: number, v2: number): boolean {\n    return this.find(v1) === this.find(v2);\n  }\n  find(v: number): number {\n    return v === this.elements[v] ? v : (this.elements[v] = this.find(this.elements[v]));\n  }\n  union(v1: number, v2: number): void {\n    const e1 = this.find(v1);\n    const e2 = this.find(v2);\n    if (e1 !== e2) {\n      this.elements[e1] = e2;\n      this.size--;\n    }\n  }\n}\nfunction removeStones(stones: number[][]): number {\n  const len = stones.length;\n  const uf = new UnionFind(len);\n  const findIndex = (stone: number[]): number[] => {\n    const ans: number[] = [];\n    for (let i = 0; i < len; i++) {\n      const s = stones[i];\n      if (s !== stone && (s[0] === stone[0] || s[1] === stone[1])) {\n        ans.push(i);\n      }\n    }\n    return ans;\n  };\n  for (let i = 0; i < len; i++) {\n    const stone = stones[i];\n    findIndex(stone).forEach(v => uf.union(i, v));\n  }\n  const cache: Record<number, number> = {};\n  for (let i = 0, l = uf.elements.length; i < l; i++) {\n    const index = uf.find(i);\n    cache[index] = (cache[index] ?? 0) + 1;\n  }\n  return Object.values(cache).reduce((total, cur) => (total += cur - 1), 0);\n}"
        }
    ]
}