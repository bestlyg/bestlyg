{
    "name": "937. 重新排列日志文件",
    "url": "https://leetcode-cn.com/problems/reorder-data-in-log-files/",
    "difficulty": "简单",
    "tag": [
        "数组",
        "字符串",
        "排序"
    ],
    "desc": "返回日志的最终顺序。",
    "solutions": [
        {
            "date": 1648051200000,
            "time": 60,
            "memory": 32.3,
            "script": "cpp",
            "desc": "遍历后比较。",
            "code": "vector<string> split(string str) {\n    istringstream iss(str);\n    string tmp;\n    vector<string> ans;\n    while (getline(iss, tmp, ' ')) ans.push_back(tmp);\n    return ans;\n}\nbool comp(string &a, string &b) {\n    vector<string> list1 = split(a), list2 = split(b);\n    string body1 = \"\", body2 = \"\";\n    for (int i = 1; i < list1.size(); i++) body1 += list1[i] + \" \";\n    for (int i = 1; i < list2.size(); i++) body2 += list2[i] + \" \";\n    if (body1 == body2)\n        return list1[0] < list2[0];\n    else\n        return body1 < body2;\n}\nclass Solution {\n   public:\n    vector<string> reorderLogFiles(vector<string> &logs) {\n        vector<string> lets, digs, ans;\n        for (auto &log : logs) {\n            if (isDigLog(log))\n                digs.push_back(log);\n            else\n                lets.push_back(log);\n        }\n        sort(lets.begin(), lets.end(), comp);\n        for (auto &log : lets) ans.push_back(log);\n        for (auto &log : digs) ans.push_back(log);\n        return ans;\n    }\n    bool isDigLog(string log) { return isdigit(split(log)[1][0]); }\n};"
        },
        {
            "date": 1651507200000,
            "time": 4,
            "memory": 4.6,
            "script": "cpp",
            "desc": "分割字符串，排序。",
            "code": "type Item struct {\n    raw   []string\n    state int\n    idx   int\n}\n\nfunc reorderLogFiles(logs []string) []string {\n    n := len(logs)\n    list := make([]Item, n)\n    for i := 0; i < n; i++ {\n        list[i] = toItem(logs[i], i)\n    }\n    sort.Slice(list, func(i, j int) bool {\n        if list[i].state == 0 && list[j].state == 0 {\n            return list[i].idx < list[j].idx\n        } else if list[i].state == 0 && list[j].state == 1 {\n            return false\n        } else if list[i].state == 1 && list[j].state == 0 {\n            return true\n        } else {\n            idx := 1\n            for ; idx < len(list[i].raw) && idx < len(list[j].raw); idx++ {\n                comp := strings.Compare(list[i].raw[idx], list[j].raw[idx])\n                if comp < 0 {\n                    return true\n                } else if comp > 0 {\n                    return false\n                }\n            }\n            if idx != len(list[i].raw) {\n                return false\n            } else if idx != len(list[j].raw) {\n                return true\n            } else {\n                return strings.Compare(list[i].raw[0], list[j].raw[0]) < 0\n            }\n\n        }\n    })\n    ans := make([]string, n)\n    for i, val := range list {\n        ans[i] = logs[val.idx]\n    }\n    return ans\n}\nfunc toItem(log string, i int) Item {\n    item := Item{}\n    item.idx = i\n    item.raw = strings.Split(log, \" \")\n    var flag bool = true\n    for _, val := range item.raw[1] {\n        if !unicode.IsDigit(val) {\n            flag = false\n            break\n        }\n    }\n    if flag {\n        item.state = 0\n    } else {\n        item.state = 1\n    }\n    return item\n}"
        }
    ]
}