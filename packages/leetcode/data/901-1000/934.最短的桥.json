{
    "name": "934. 最短的桥",
    "url": "https://leetcode.cn/problems/shortest-bridge/",
    "difficulty": "中等",
    "tag": [
        "深度优先搜索",
        "广度优先搜索",
        "数组",
        "矩阵"
    ],
    "desc": "返回必须翻转的 0 的最小数目。",
    "solutions": [
        {
            "date": 1666627200000,
            "time": 44,
            "memory": 18.6,
            "script": "cpp",
            "desc": "bfs。",
            "code": "typedef pair<int, int> node;\nconst int dirs[4][2] = {\n    {0, 1}, {0, -1},\n    {1, 0}, {-1, 0}\n};\nclass Solution {\npublic:\n    int shortestBridge(vector<vector<int>>& grid) {\n        int n = grid.size();\n        vector<vector<bool>> check(n, vector<bool>(n, false));\n        queue<node> q;\n        int f = true;\n        for (int i = 0; i < n && f; i++) {\n            for (int j = 0; j < n && f; j++) {\n                if (grid[i][j] == 1) {\n                    queue<node> tmp;\n                    tmp.push(make_pair(i, j));\n                    check[i][j] = true;\n                    while (tmp.size()) {\n                        node v = tmp.front();\n                        tmp.pop();\n                        q.push(make_pair(v.first, v.second));\n                        for (int k = 0; k < 4; k++) {\n                            int ni = v.first + dirs[k][0], nj = v.second + dirs[k][1];\n                            if (ni < 0 || ni == n || nj < 0 || nj == n || grid[ni][nj] == 0 || check[ni][nj]) continue;\n                            tmp.push(make_pair(ni, nj));\n                            check[ni][nj] = true;\n                        }\n                    }\n                    f = false;\n                }\n            }\n        }\n        int level = 1, size = q.size();\n        while (q.size()) {\n            node v = q.front();\n            q.pop();\n            for (int i = 0; i < 4; i++) {\n                int ni = v.first + dirs[i][0], nj = v.second + dirs[i][1];\n                if (ni < 0 || ni == n || nj < 0 || nj == n || check[ni][nj]) continue;\n                if (grid[ni][nj]) return level - 1;\n                check[ni][nj] = true;\n                q.push(make_pair(ni, nj));\n            }\n            if (--size == 0) {\n                size = q.size();\n                level++;\n            }\n        }\n        return 0;\n    }\n};"
        }
    ]
}