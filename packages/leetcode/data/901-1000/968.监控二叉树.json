{
    "id": "1008",
    "name": "968.监控二叉树",
    "url": "https://leetcode.cn/problems/binary-tree-cameras",
    "desc": "给定一个二叉树，我们在树的节点上安装摄像头。节点上的每个摄影头都可以监视其父对象、自身及其直接子对象。计算监控树的所有节点所需的最小摄像头数量。",
    "solutions": [
        {
            "date": "2020-09-22",
            "time": 96,
            "memory": 43,
            "script": "typescript",
            "desc": "[参考连接](https://leetcode-cn.com/problems/binary-tree-cameras/solution/jian-kong-er-cha-shu-by-leetcode-solution/)。",
            "code": "function minCameraCover(root: TreeNode | null): number {\n  return dfs(root)[1];\n  /**\n   * @return\n   * 状态 a：root 必须放置摄像头的情况下，覆盖整棵树需要的摄像头数目。\n   * 状态 b：覆盖整棵树需要的摄像头数目，无论 root 是否放置摄像头。\n   * 状态 c：覆盖两棵子树需要的摄像头数目，无论节点 root 本身是否被监控到。\n   */\n  function dfs(root: TreeNode | null): [number, number, number] {\n    if (root === null) return [Infinity, 0, 0];\n    const [la, lb, lc] = dfs(root.left);\n    const [ra, rb, rc] = dfs(root.right);\n    const a = lc + rc + 1;\n    return [a, Math.min(a, la + rb, ra + lb), Math.min(a, lb + rb)];\n  }\n}"
        },
        {
            "date": "2021-04-04",
            "time": 140,
            "memory": 48.4,
            "script": "typescript",
            "desc": "递归计算每个点的存在摄像头和父节点存在摄像头的情况。",
            "code": "/**\n *    dp[0][0] 父节点和当前节点都不存在摄像头\n *    dp[1][0] 父节点存在摄像头，当前节点不存在\n *    dp[0][1] 父节点不存在摄像头，当前节点存在\n *    dp[1][1] 父节点和当前节点都存在摄像头\n */\nfunction minCameraCover(root: TreeNode | null): number {\n  const getArr = (): number[][] => new Array(2).fill(0).map(_ => new Array(2).fill(0));\n  const dp: number[][] = getArr();\n  const dfs = (node: TreeNode | null, dp: number[][]): void => {\n    if (!node) {\n      // 如果节点是null\n      dp[1][0] = dp[0][0] = 0;\n      dp[0][1] = dp[1][1] = Infinity; // null节点不存在摄像头\n    } else if (!node.left && !node.right) {\n      // 如果节点是叶子节点\n      dp[0][0] = Infinity; // 不存在此种情况，叶子节点和父节点必须有一个有摄像头\n      dp[1][1] = dp[0][1] = 1;\n      dp[1][0] = 0;\n    } else {\n      const left: number[][] = getArr();\n      const right: number[][] = getArr();\n      dfs(node.left, left);\n      dfs(node.right, right);\n      dp[0][0] = Math.min(\n        left[0][1] + right[0][0],\n        left[0][0] + right[0][1],\n        left[0][1] + right[0][1]\n      ); // 如果父节点和当前节点都不存在摄像头，则子节点最少存在一个摄像头\n      dp[1][0] = Math.min(left[0][0] + right[0][0], dp[0][0]); // 如果父节点存在摄像头，当前节点不存在，则子节点可以存在任意情况\n      dp[1][1] = dp[0][1] =\n        1 +\n        Math.min(\n          left[1][0] + right[1][0],\n          left[1][1] + right[1][0],\n          left[1][0] + right[1][1],\n          left[1][1] + right[1][1]\n        ); // 如果父节点不存在摄像头，当前节点存在，则子节点可存在任意情况，由于当前节点存在，则需增1\n    }\n  };\n  dfs(root, dp);\n  return Math.min(dp[0][1], dp[0][0]);\n}"
        }
    ],
    "tagList": ["树", "深度优先搜索", "动态规划", "二叉树"],
    "level": "Hard"
}
