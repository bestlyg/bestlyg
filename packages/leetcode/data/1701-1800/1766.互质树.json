{
    "id": "1875",
    "name": "1766.互质树",
    "url": "https://leetcode.cn/problems/tree-of-coprimes",
    "difficulty": "困难",
    "tag": ["树", "深度优先搜索", "数组", "数学", "数论"],
    "desc": "请你返回一个大小为 n 的数组 ans ，其中 ans[i]是离节点 i 最近的祖先节点且满足 nums[i] 和 nums[ans[i]] 是 互质的 ，如果不存在这样的祖先节点，ans[i] 为 -1 。",
    "solutions": [
        {
            "script": "python",
            "time": 1017,
            "memory": 66.86,
            "desc": "预处理后dfs。",
            "code": "primes = [0 for _ in range(51)]\n    for num1 in range(1, 51):\n        for num2 in range(1, 51):\n            if gcd(num1, num2) == 1:\n                primes[num1] |= 1 << num2\n                primes[num2] |= 1 << num1\n    \n    class Solution:\n        def getCoprimes(self, nums: List[int], edges: List[List[int]]) -> List[int]:\n            n = len(nums)\n            nodes = [[] for _ in range(n)]\n            for n1, n2 in edges:\n                nodes[n1].append(n2)\n                nodes[n2].append(n1)\n            ans = [-1 for _ in range(n)]\n            def dfs(node: int, arr: List[Tuple[int, int]], parent: int, level: int):\n                num1 = nums[node]\n                cur = (-1, -1)\n                for num2 in range(1, 51):\n                    if arr[num2][0] != -1 and primes[num1] & (1 << num2) and (cur[1] == -1 or arr[num2][1] > cur[1]):\n                        cur = arr[num2]\n                ans[node] = cur[0]\n                oldv = arr[num1]\n                arr[num1] = (node, level)\n                for child in nodes[node]:\n                    if child != parent:\n                        dfs(child, arr, node, level + 1)\n                arr[num1] = oldv\n            dfs(0, [(-1, -1) for _ in range(51)], -1, 0)\n            return ans",
            "date": 1712764800000
        }
    ]
}
