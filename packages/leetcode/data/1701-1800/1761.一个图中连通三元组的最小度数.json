{
    "id": "1887",
    "name": "1761.一个图中连通三元组的最小度数",
    "url": "https://leetcode.cn/problems/minimum-degree-of-a-connected-trio-in-a-graph",
    "difficulty": "困难",
    "tag": [
        "图"
    ],
    "desc": "请你返回所有连通三元组中度数的 最小值 ，如果图中没有连通三元组，那么返回 -1 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 1896,
            "memory": 53.2,
            "desc": "枚举。",
            "code": "class Solution {\npublic:\n    int minTrioDegree(int n, vector<vector<int>>& edges) {\n        vector<unordered_set<int>> nodes(n);\n        for (auto &edge : edges) {\n            nodes[edge[0] - 1].insert(edge[1] - 1);\n            nodes[edge[1] - 1].insert(edge[0] - 1);\n        }\n        int res = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (!nodes[i].count(j)) continue;\n                for (int k = j + 1; k < n; k++) {\n                    if (!nodes[i].count(k) || !nodes[j].count(k)) continue;\n                    res = min(res, (int)nodes[i].size() + (int)nodes[j].size() + (int)nodes[k].size() - 6);\n                }\n            }\n        }\n        return res == INT_MAX ? -1 : res;\n    }\n};",
            "date": 1693411200000
        },
        {
            "script": "python",
            "time": 4360,
            "memory": 40.23,
            "desc": "同上。",
            "code": "class Solution:\n    def minTrioDegree(self, n: int, edges: List[List[int]]) -> int:\n        nodes = [set() for _ in range(n)]\n        for [n0, n1] in edges:\n            nodes[n0-1].add(n1-1)\n            nodes[n1-1].add(n0-1)\n        res = inf\n        for i in range(n):\n            for j in range(i + 1, n):\n                if not j in nodes[i]:\n                    continue\n                for k in range(j + 1, n):\n                    if not k in nodes[i] or not k in nodes[j]:\n                        continue\n                    res = min(res, len(nodes[i]) +\n                              len(nodes[j]) + len(nodes[k]) - 6)\n        return res if res != inf else -1",
            "date": 1693411200000
        },
        {
            "script": "rust",
            "time": 12,
            "memory": 2.24,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn min_trio_degree(n: i32, edges: Vec<Vec<i32>>) -> i32 {\n        let n = n as usize;\n        let mut nodes = vec![std::collections::HashSet::new(); n];\n        for edge in edges {\n            let (n0, n1) = (edge[0] as usize - 1, edge[1] as usize - 1);\n            nodes[n0].insert(n1);\n            nodes[n1].insert(n0);\n        }\n        let mut res = i32::MAX;\n        for i in 0..n {\n            for j in i + 1..n {\n                if nodes[i].contains(&j) {\n                    for k in j + 1..n {\n                        if nodes[i].contains(&k) && nodes[j].contains(&k) {\n                            res = res\n                                .min((nodes[i].len() + nodes[j].len() + nodes[k].len() - 6) as i32)\n                        }\n                    }\n                }\n            }\n        }\n        if res == i32::MAX {\n            -1\n        } else {\n            res\n        }\n    }\n}",
            "date": 1693411200000
        }
    ]
}