{
    "id": "1873",
    "name": "1763.最长的美好子字符串",
    "url": "https://leetcode.cn/problems/longest-nice-substring",
    "desc": "给你一个字符串 s ，请你返回 s 最长的 美好子字符串 。如果有多个答案，请你返回 最早 出现的一个。如果不存在美好子字符串，请你返回一个空字符串。",
    "solutions": [
        {
            "date": "2022-02-01",
            "time": 8,
            "memory": 6.1,
            "script": "cpp",
            "desc": "遍历所有起点和终点。",
            "code": "class Solution {\n   public:\n    int arr[256];\n    int check(string &str, int start, int end) {\n        memset(arr, 0, sizeof(int) * 256);\n        for (int i = start; i <= end; i++) {\n            arr[str[i]] = 1;\n        }\n        for (int i = 'A'; i <= 'Z'; i++) {\n            if (arr[i] && !arr[i + 32]) return 0;\n        }\n        for (int i = 'a'; i <= 'z'; i++) {\n            if (arr[i] && !arr[i - 32]) return 0;\n        }\n        return 1;\n    }\n    string longestNiceSubstring(string s) {\n        string ans = \"\";\n        for (int i = 0; i < s.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (check(s, j, i) && i - j + 1 > ans.size())\n                    ans = s.substr(j, i - j + 1);\n            }\n        }\n        return ans;\n    }\n};"
        },
        {
            "date": "2022-02-01",
            "time": 12,
            "memory": 6,
            "script": "cpp",
            "desc": "遍历所有起点和终点。",
            "code": "class Solution {\n   public:\n    int arr[26];\n    int check(string &str, int start, int end) {\n        memset(arr, 0, sizeof(int) * 26);\n        for (int i = start; i <= end; i++) {\n            if (str[i] >= 'a')\n                arr[str[i] - 'a'] |= 0b10;\n            else\n                arr[str[i] - 'A'] |= 0b01;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (arr[i] != 0 && arr[i] != 3) return 0;\n        }\n        return 1;\n    }\n    string longestNiceSubstring(string s) {\n        string ans = \"\";\n        for (int i = 0; i < s.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (check(s, j, i) && i - j + 1 > ans.size())\n                    ans = s.substr(j, i - j + 1);\n            }\n        }\n        return ans;\n    }\n};"
        }
    ],
    "tagList": ["位运算", "哈希表", "字符串", "分治", "滑动窗口"],
    "level": "Easy"
}
