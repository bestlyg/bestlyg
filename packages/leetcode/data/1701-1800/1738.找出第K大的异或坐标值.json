{
    "id": "1860",
    "name": "1738.找出第K大的异或坐标值",
    "url": "https://leetcode.cn/problems/find-kth-largest-xor-coordinate-value",
    "desc": "请你找出 matrix 的所有坐标中第 k 大的值（k 的值从 1 开始计数）。",
    "solutions": [
        {
            "date": "2021-05-19",
            "time": 736,
            "memory": 105.1,
            "script": "typescript",
            "desc": "前缀和。",
            "code": "function kthLargestValue(matrix: number[][], k: number): number {\n  const rowLen = matrix.length;\n  const colLen = matrix[0].length;\n  const prefixSumList: number[][] = new Array(rowLen + 1)\n    .fill(0)\n    .map(_ => new Array(colLen + 1).fill(0));\n  const list: number[] = [];\n  for (let row = 1; row <= rowLen; row++) {\n    for (let col = 1; col <= colLen; col++) {\n      list.push(\n        (prefixSumList[row][col] =\n          prefixSumList[row - 1][col] ^\n          prefixSumList[row][col - 1] ^\n          prefixSumList[row - 1][col - 1] ^\n          matrix[row - 1][col - 1])\n      );\n    }\n  }\n  return list.sort((a, b) => b - a)[k - 1];\n}"
        },
        {
            "script": "python",
            "time": 770,
            "memory": 61.8,
            "desc": "前缀和存储异或值后，利用堆排序。",
            "code": "class Solution:\n    def kthLargestValue(self, matrix: List[List[int]], k: int) -> int:\n        n, m = len(matrix), len(matrix[0])\n        sums = [[0] * (m + 1) for _ in range(n + 1)]\n        q = []\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                sums[i][j] = sums[i - 1][j] ^ sums[i][j - 1] ^ sums[i - 1][j - 1] ^ matrix[i - 1][j - 1]\n                heappush(q, -sums[i][j])\n        for _ in range(k - 1): heappop(q)\n        return -q[0]",
            "date": "2024-05-26"
        }
    ],
    "tagList": [
        "位运算",
        "数组",
        "分治",
        "矩阵",
        "前缀和",
        "快速选择",
        "排序",
        "堆（优先队列）"
    ],
    "level": "Medium"
}