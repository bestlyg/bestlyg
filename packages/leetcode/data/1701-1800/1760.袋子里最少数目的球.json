{
    "name": "1760. 袋子里最少数目的球",
    "url": "https://leetcode-cn.com/problems/minimum-limit-of-balls-in-a-bag/",
    "difficulty": "中等",
    "tag": [
        "数组",
        "二分查找"
    ],
    "desc": "给你一个整数数组 nums ，你的开销是单个袋子里球数目的 最大值 ，你想要 最小化 开销。",
    "solutions": [
        {
            "date": 1626796800000,
            "time": 260,
            "memory": 49.4,
            "script": "typescript",
            "desc": "对最大值进行二分查找。",
            "code": "function minimumSize(nums: number[], maxOperations: number): number {\n  return search();\n  function search(l = 1, r = Math.max(...nums)): number {\n    if (l === r) return l;\n    const mid = (l + r) >> 1;\n    if (count(mid) <= maxOperations) r = mid;\n    else l = mid + 1;\n    return search(l, r);\n  }\n  function count(size: number): number {\n    return nums.reduce((total, num) => total + ~~(num / size) + +!!(num % size) - 1, 0);\n  }\n}"
        },
        {
            "date": 1671465600000,
            "time": 164,
            "memory": 54.7,
            "script": "cpp",
            "desc": "二分查找。",
            "code": "class Solution {\npublic:\n    int minimumSize(vector<int>& nums, int maxOperations) {\n        int nmin = 1, nmax = 1000000000, nmid;\n        while (nmin < nmax) {\n            nmid = (nmin + nmax) / 2;\n            if (comp(nums, nmid) <= maxOperations) nmax = nmid;\n            else nmin = nmid + 1;\n        }\n        return nmin;\n    }\n    int comp(vector<int> &nums, int val) {\n        int ans = 0;\n        for (auto &num : nums) {\n            if (num <= val) continue;\n            ans += ceil(1.0 * num / val) - 1;\n        }\n        return ans;\n    }\n};"
        }
    ]
}