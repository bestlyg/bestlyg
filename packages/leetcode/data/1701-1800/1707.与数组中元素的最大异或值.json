{
  "name": "1707. 与数组中元素的最大异或值",
  "url": "https://leetcode-cn.com/problems/maximum-xor-with-an-element-from-array/",
  "difficulty": "困难",
  "tag": ["位运算", "字典树"],
  "desc": "返回一个整数数组 answer 作为查询的答案，其中 answer.length == queries.length 且 answer[i] 是第 i 个查询的答案。",
  "solutions": [
    {
      "date": 1621699200000,
      "time": 3000,
      "memory": 122.9,
      "script": "typescript",
      "desc": "构建字典树，排序后计算最大可能异或值。",
      "code": "class Trie {\n  left: Trie | null = null;\n  right: Trie | null = null;\n  val: number | null = null;\n}\nfunction maximizeXor(nums: number[], queries: number[][]): number[] {\n  const root = new Trie();\n  const add = (num: number) => {\n    let node = root;\n    for (let i = 31; i >= 0; i--) {\n      const val = (num >> i) & 1;\n      if (val === 1) node = node.right ?? (node.right = new Trie());\n      else node = node.left ?? (node.left = new Trie());\n      node.val = num;\n    }\n  };\n  const select = (num: number): number => {\n    let node = root;\n    for (let i = 31; i >= 0; i--) {\n      const val = (num >> i) & 1;\n      if (val === 1) node = node.left ?? node.right!;\n      else node = node.right ?? node.left!;\n    }\n    return node.val!;\n  };\n  nums.sort((a, b) => a - b);\n  const queryMap = new Map<number[], number>();\n  queries.forEach((v, i) => queryMap.set(v, i));\n  queries.sort(([, a], [, b]) => a - b);\n  const ans: number[] = [];\n  for (const query of queries) {\n    const [x, m] = query;\n    while (nums.length > 0 && nums[0] <= m) add(nums.shift()!);\n    const index = queryMap.get(query)!;\n    ans[index] = root.left === null && root.right === null ? -1 : x ^ select(x);\n  }\n  return ans;\n}"
    }
  ]
}
