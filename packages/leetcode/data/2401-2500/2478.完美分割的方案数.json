{
    "id": "2569",
    "name": "2478.完美分割的方案数",
    "url": "https://leetcode.cn/problems/number-of-beautiful-partitions",
    "desc": "给你一个字符串 s ，每个字符是数字 '1' 到 '9' ，再给你两个整数 k 和 minLength 。请你返回 s 的 完美 分割数目。由于答案可能很大，请返回答案对 109 + 7 取余 后的结果。",
    "solutions": [
        {
            "date": "2022-11-20",
            "time": 32,
            "memory": 30.4,
            "script": "cpp",
            "desc": "dp[i][j]表示总共分成 i 组总共字符有 j 个的合理方案数。",
            "code": "class Solution {\npublic:\n    string s;\n    int n;\n    const int mod = 1e9 + 7;\n    bool isPrime(int i) {\n        return s[i] == '2' || s[i] == '3' || s[i] == '5' || s[i] == '7';\n    }\n    bool canPart(int i) {\n        return i == 0 || i == n || !isPrime(i - 1) && isPrime(i);\n    }\n    int beautifulPartitions(string s, int k, int minLength) {\n        this->s = s;\n        n = s.size();\n        if (!isPrime(0) || isPrime(n - 1) || k * minLength > n) return false;\n        vector<vector<int>> dp(k + 1, vector<int>(n + 1, 0));\n        dp[0][0] = 1;\n        for (int i = 1; i <= k; i++) {\n            int sum = 0;\n            for (int j = i * minLength; j + (k - i) * minLength <= n; j++) {\n                if (canPart(j - minLength)) sum = (sum + dp[i - 1][j - minLength]) % mod;\n                if (canPart(j)) dp[i][j] = sum;\n            }\n        }\n        return dp[k][n];\n    }\n};"
        }
    ],
    "tagList": [
        "字符串",
        "动态规划"
    ],
    "level": "Hard"
}