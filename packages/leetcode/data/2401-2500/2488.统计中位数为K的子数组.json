{
    "id": "2574",
    "name": "2488.统计中位数为K的子数组",
    "url": "https://leetcode.cn/problems/count-subarrays-with-median-k",
    "difficulty": "困难",
    "tag": ["数组", "哈希表", "前缀和"],
    "desc": "给你一个长度为 n 的数组 nums ，该数组由从 1 到 n 的 不同 整数组成。另给你一个正整数 k 。统计并返回 num 中的 中位数 等于 k 的非空子数组的数目。",
    "solutions": [
        {
            "date": 1669478400000,
            "time": 76,
            "memory": 51.4,
            "script": "cpp",
            "desc": "因为是中位数且只有一个，找到唯一的 k，向左遍历记录情况存储，再向右遍历统计。",
            "code": "#define X first\n#define Y second\n#define lb(x) ((x) & (-x))\n#define mem(a,b) memset(a,b,sizeof(a))\n#define debug freopen(\"r.txt\",\"r\",stdin)\n#define pi pair<int,int>\nusing namespace std;\ntypedef long long ll;\n\nclass Solution {\npublic:\n    int countSubarrays(vector<int>& nums, int k) {\n        int ans = 1, idx = findK(nums, k), n = nums.size();\n        unordered_map<int, int> m;\n        pi item = make_pair(0, 0);\n        for (int i = idx - 1; i >= 0; i--) {\n            if (nums[i] > k) item.Y += 1;\n            else item.X += 1;\n            if (item.Y - item.X == 0 || item.Y - item.X == 1) ans++;\n            m[item.Y - item.X]++;\n        }\n        item = make_pair(0, 0);\n        for (int j = idx + 1; j < n; j++) {\n          if (nums[j] > k) item.Y += 1;\n          else item.X += 1;\n          if (item.Y - item.X == 0) ans += 1 + m[0] + m[1];\n          else if (item.Y - item.X == 1) ans += 1 + m[0] + m[-1];\n          else ans += m[item.X - item.Y] + m[item.X - item.Y + 1];\n        }\n        return ans;\n    }\n    int findK(vector<int>& nums, int k) {\n      for (int i = 0; i < nums.size(); i++) if (nums[i] == k) return i;\n      return -1;\n    }\n};"
        },
        {
            "script": "cpp",
            "time": 76,
            "memory": 51.4,
            "desc": "遍历，对于每个值判断前面可取值，并存入map。",
            "code": "class Solution {\npublic:\n    int countSubarrays(vector<int>& nums, int k) {\n        unordered_map<int, int> m;\n        int res = 0, cur = 0;\n        bool findK = false;\n        for (auto &num : nums) {\n            if (num > k) cur += 1;\n            else if (num < k) cur -= 1;\n            if (num == k) findK = true;\n            if (findK) res += m[cur] + m[cur - 1] + (cur == 0 || cur == 1);\n            else m[cur]++;\n        }\n        return res;\n    }\n};",
            "date": 1678896000000
        },
        {
            "script": "python",
            "time": 120,
            "memory": 16.7,
            "desc": "同上。",
            "code": "class Solution:\n    def maximalNetworkRank(self, n: int, roads: List[List[int]]) -> int:\n        l = [set() for _ in range(n)]\n        for [n1, n2] in roads:\n            l[n1].add(n2)\n            l[n2].add(n1)\n        res = 0\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    res = max(res, len(l[i]) + len(l[j]) + (-1 if j in l[i] else 0))\n        return res",
            "date": 1678896000000
        },
        {
            "script": "rust",
            "time": 16,
            "memory": 3.2,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn count_subarrays(nums: Vec<i32>, k: i32) -> i32 {\n        let mut m = std::collections::HashMap::<i32, i32>::new();\n        let (mut res, mut cur, mut find_k) = (0, 0, false);\n        for num in nums {\n            if num > k {\n                cur += 1;\n            } else if num < k {\n                cur -= 1;\n            } else {\n                find_k = true;\n            }\n            if find_k {\n                res += *m.get(&cur).unwrap_or(&0)\n                    + *m.get(&(cur - 1)).unwrap_or(&0)\n                    + ((cur == 0 || cur == 1) as i32);\n            } else {\n                *m.entry(cur).or_insert(0) += 1;\n            }\n        }\n        res\n    }\n}",
            "date": 1678896000000
        }
    ]
}
