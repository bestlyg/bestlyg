{
    "id": "2554",
    "name": "2463.最小移动总距离",
    "url": "https://leetcode.cn/problems/minimum-total-distance-traveled",
    "difficulty": "困难",
    "tag": [
        "数组",
        "动态规划",
        "排序"
    ],
    "desc": "请你返回所有机器人移动的最小总距离。测试数据保证所有机器人都可以被维修。",
    "solutions": [
        {
            "date": 1668009600000,
            "time": 40,
            "memory": 8.2,
            "script": "cpp",
            "desc": "dp[i][j] = 当只有 i 个工厂，j 个机器人时的最小移动距离。",
            "code": "class Solution {\npublic:\n    const int MAX = 105;\n    long long minimumTotalDistance(vector<int>& robot, vector<vector<int>>& factory) {\n        sort(robot.begin(), robot.end());\n        sort(factory.begin(), factory.end(), [](auto &a, auto &b){ return a[0] < b[0]; });\n        int n = factory.size(), m = robot.size();\n        // dp[i][j] = 当只有i个工厂，j个机器人时的最小移动距离\n        long long dp[MAX][MAX];\n        memset(dp, 0x3f, sizeof(long long) * MAX * MAX);\n        for (int i = 0; i <= n; i++) dp[i][0] = 0;\n        for (int i = 1; i <= n; i++) {\n            auto &f = factory[i - 1];\n            for (int j = 1; j <= m; j++) {\n                // 当前工厂不做操作的时候 等于 前一个工厂\n                dp[i][j] = dp[i - 1][j];\n                long long sum = 0;\n                for (int k = j; k >= max(1, j - f[1] + 1); k--) {\n                    sum += abs(robot[k - 1] - f[0]);\n                    dp[i][j] = min(dp[i][j], sum + dp[i - 1][k - 1]);\n                }\n                // for (int k = 1; k <= min(j, f[1]); k++) {\n                //     sum += abs(robot[j - k] - f[0]);\n                //     dp[i][j] = min(dp[i][j], sum + dp[i - 1][j - k]);\n                // }\n            }\n        }\n        return dp[n][m];\n    }\n};"
        }
    ]
}