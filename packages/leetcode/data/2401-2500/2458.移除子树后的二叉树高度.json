{
    "id": "2545",
    "name": "2458.移除子树后的二叉树高度",
    "url": "https://leetcode.cn/problems/height-of-binary-tree-after-subtree-removal-queries",
    "desc": "返回一个长度为 m 的数组 answer ，其中 answer[i] 是执行第 i 个查询后树的高度。",
    "solutions": [
        {
            "date": "2022-10-30",
            "time": 368,
            "memory": 222.5,
            "script": "cpp",
            "desc": "两次 dfs，第一次统计出每颗子树的高度，第二次记录层高，统计当前子树被移除后的剩余高度，通过最大高度和 level+右子树高度的最大值获取。",
            "code": "class Solution {\npublic:\n    typedef pair<int, int> node;\n    unordered_map<int, node> m;\n    vector<int> treeQueries(TreeNode* root, vector<int>& queries) {\n        m[-1] = make_pair(0, 0);\n        dfs1(root);\n        dfs2(root);\n        vector<int> ans;\n        for (auto &q : queries) ans.push_back(m[q].second);\n        return ans;\n    }\n    int dfs1(TreeNode *node) {\n        if (node == nullptr) return 0;\n        int l = dfs1(node->left), r = dfs1(node->right), h = max(l, r) + 1;\n        m[node->val] = make_pair(h, 0);\n        return h;\n    }\n    void dfs2(TreeNode *node, int level = 0, int curH = 0) {\n        if (node == nullptr) return;\n        m[node->val].second = curH;\n        int l = node->left == nullptr ? -1 : node->left->val,\n            r = node->right == nullptr ? -1 : node->right->val;\n        dfs2(node->left, level + 1, max(curH, level + m[r].first));\n        dfs2(node->right, level + 1, max(curH, level + m[l].first));\n    }\n};"
        }
    ],
    "tagList": ["树", "深度优先搜索", "广度优先搜索", "数组", "二叉树"],
    "level": "Hard"
}
