{
    "id": "1296",
    "name": "1483.树节点的第K个祖先",
    "url": "https://leetcode.cn/problems/kth-ancestor-of-a-tree-node",
    "desc": "给你一棵树，树上有 n 个节点，按从 0 到 n-1 编号。树以父节点数组的形式给出，其中 parent[i] 是节点 i 的父节点。树的根节点是编号为 0 的节点。树节点的第 k 个祖先节点是从该节点到根节点路径上的第 k 个节点。",
    "solutions": [
        {
            "script": "cpp",
            "time": 520,
            "memory": 132.2,
            "desc": "倍增法。",
            "code": "class TreeAncestor {\npublic:\n    vector<vector<int>> list;\n\n    TreeAncestor(int n, vector<int>& parent): list(vector<vector<int>>(n)) {\n        for (int i = 1; i < parent.size(); i++) {\n            list[i].push_back(parent[i]);\n            for (int j = 1, res = 1; res != -1; j++) {\n                res = getKthAncestor(i, pow(2, j));\n                if (res != -1) list[i].push_back(res);\n            }\n        }\n    }\n\n    int getKthAncestor(int node, int k) {\n        if (k == 0) return node;\n        int l = -1, r = list[node].size() - 1;\n        while (l < r) {\n            int m = (l + r + 1) / 2;\n            if (k >= pow(2, m)) l = m;\n            else r = m - 1;\n        }\n        if (l == -1) return l;\n        return getKthAncestor(list[node][l], k - pow(2, l));\n    }\n};",
            "date": "2023-06-12"
        },
        {
            "script": "python",
            "time": 7080,
            "memory": 48.2,
            "desc": "同上。",
            "code": "class TreeAncestor:\n\n    def __init__(self, n: int, parent: List[int]):\n        self.list = [[] for _ in range(n)]\n        for i in range(1, len(parent)):\n            self.list[i].append(parent[i])\n            j = res = 1\n            while res != -1:\n                res = self.getKthAncestor(i, pow(2, j))\n                if res != -1:\n                    self.list[i].append(res)\n                j += 1\n\n    def getKthAncestor(self, node: int, k: int) -> int:\n        if k == 0:\n            return node\n        l = -1\n        r = len(self.list[node]) - 1\n        while l < r:\n            m = (l+r+1)//2\n            if k >= pow(2, m):\n                l = m\n            else:\n                r = m-1\n        if l == -1:\n            return l\n        return self.getKthAncestor(self.list[node][l], k-pow(2, l))\n",
            "date": "2023-06-12"
        },
        {
            "script": "rust",
            "time": 204,
            "memory": 34.9,
            "desc": "同上。",
            "code": "struct TreeAncestor {\n    list: Vec<Vec<usize>>,\n}\nimpl TreeAncestor {\n    fn new(n: i32, parent: Vec<i32>) -> Self {\n        let mut list = vec![vec![]; n as usize];\n        for i in 1..parent.len() {\n            list[i].push(parent[i] as usize);\n            let mut res = 1;\n            for j in 1.. {\n                res = TreeAncestor::_get_kth_ancestor(&list, i as i32, 2i32.pow(j as u32));\n                if res != -1 {\n                    list[i].push(res as usize);\n                } else {\n                    break;\n                }\n            }\n        }\n        Self { list }\n    }\n    fn _get_kth_ancestor(list: &Vec<Vec<usize>>, node: i32, k: i32) -> i32 {\n        if k == 0 {\n            node\n        } else {\n            let mut l = -1 as i32;\n            let mut r = (list[node as usize].len() - 1) as i32;\n            while l < r {\n                let m = (l + r + 1) / 2;\n                if k >= 2i32.pow(m as u32) {\n                    l = m;\n                } else {\n                    r = m - 1;\n                }\n            }\n            if l == -1 {\n                l\n            } else {\n                TreeAncestor::_get_kth_ancestor(list, list[node as usize][l as usize] as i32, k - (2i32.pow(l as u32)))\n            }\n        }\n    }\n    fn get_kth_ancestor(&self, node: i32, k: i32) -> i32 {\n        TreeAncestor::_get_kth_ancestor(&self.list, node, k)\n    }\n}",
            "date": "2023-06-12"
        },
        {
            "script": "cpp",
            "time": 392,
            "memory": 132.1,
            "desc": "当前节点的第n项等于第n-1个父节点的第n-1项。",
            "code": "class TreeAncestor {\npublic:\n    vector<vector<int>> list;\n\n    TreeAncestor(int n, vector<int>& parent): list(vector<vector<int>>(n)) {\n        for (int i = 1; i < parent.size(); i++) {\n            list[i].push_back(parent[i]);\n            for (int j = 1; ; j++) {\n                if (list[list[i].back()].size() > j - 1) list[i].push_back(list[list[i].back()][j - 1]);\n                else break;\n            }\n        }\n    }\n\n    int getKthAncestor(int node, int k) {\n        if (k == 0) return node;\n        int l = -1, r = list[node].size() - 1;\n        while (l < r) {\n            int m = (l + r + 1) / 2;\n            if (k >= pow(2, m)) l = m;\n            else r = m - 1;\n        }\n        if (l == -1) return l;\n        return getKthAncestor(list[node][l], k - pow(2, l));\n    }\n};",
            "date": "2023-06-12"
        },
        {
            "script": "python",
            "time": 901,
            "memory": 55.49,
            "desc": "倍增法。",
            "code": "class TreeAncestor:\n    def __init__(self, n: int, parents: List[int]):\n        self.parents = [[] for _ in range(n + 1)]\n        children = [[] for _ in range(n + 1)]\n        for i in range(n):\n            self.parents[i].append(parents[i])\n            children[parents[i]].append(i)\n        q = deque([0])\n        while q:\n            node = q.popleft()\n            for child in children[node]:\n                q.append(child)\n            arr = self.parents[node]\n            i = 1\n            while node and len(self.parents[arr[i - 1]]) > i - 1:\n                arr.append(self.parents[arr[i - 1]][i - 1])\n                i += 1\n\n    def getKthAncestor(self, node: int, k: int) -> int:\n        idx = 0\n        while pow(2, idx + 1) <= k: idx += 1\n        if len(self.parents[node]) <= idx: return -1\n        if pow(2, idx) == k: return self.parents[node][idx]\n        return self.getKthAncestor(self.parents[node][idx], k - pow(2, idx))",
            "date": "2024-04-06"
        }
    ],
    "tagList": [
        "树",
        "深度优先搜索",
        "广度优先搜索",
        "设计",
        "二分查找",
        "动态规划"
    ],
    "level": "Hard"
}