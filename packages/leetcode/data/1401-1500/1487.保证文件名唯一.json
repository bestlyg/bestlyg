{
    "id": "1611",
    "name": "1487.保证文件名唯一",
    "url": "https://leetcode.cn/problems/making-file-names-unique",
    "difficulty": "中等",
    "tag": ["数组", "哈希表", "字符串"],
    "desc": "返回长度为 n 的字符串数组，其中 ans[i] 是创建第 i 个文件夹时系统分配给该文件夹的实际名称。",
    "solutions": [
        {
            "script": "cpp",
            "time": 168,
            "memory": 57.2,
            "desc": "哈希存储。",
            "code": "class Solution {\npublic:\n    vector<string> getFolderNames(vector<string>& names) {\n        unordered_map<string, int> m;\n        for (int i = 0; i < names.size(); i++) {\n            string name = names[i];\n            if (m.count(name)) {\n                for (int j = m[name]; ; j++) {\n                    string next = name + \"(\" + to_string(j) + \")\";\n                    if (!m.count(next)) {\n                        names[i] = next;\n                        m[next] = 1;\n                        m[name] = j + 1;\n                        break;\n                    }\n                }\n            } else {\n                m[name] = 1;\n            }\n        }\n        return names;\n    }\n};",
            "date": 1677772800000
        },
        {
            "script": "python",
            "time": 140,
            "memory": 28.3,
            "desc": "同上。",
            "code": "class Solution:\n    def getFolderNames(self, names: List[str]) -> List[str]:\n        m = {}\n        for i in range(len(names)):\n            name = names[i]\n            if name in m:\n                j = m[name]\n                while name + \"(\" + str(j) + \")\" in m:\n                    j += 1\n                next_name = name + \"(\" + str(j) + \")\"\n                names[i] = next_name\n                m[next_name] = 1\n                m[name] = j + 1\n            else:\n                m[name] = 1\n        return names",
            "date": 1677772800000
        },
        {
            "script": "rust",
            "time": 48,
            "memory": 9.3,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn get_folder_names(names: Vec<String>) -> Vec<String> {\n        let mut names = names;\n        let mut m = std::collections::HashMap::<String, usize>::new();\n        for i in 0..names.len() {\n            let name = names[i].clone();\n            if m.contains_key(&name) {\n                let mut j = *m.get(&name).unwrap();\n                let next;\n                loop {\n                    let mut item = name.clone();\n                    item.push('(');\n                    item.push_str(&j.to_string());\n                    item.push(')');\n                    if !m.contains_key(&item) {\n                        next = item;\n                        break;\n                    }\n                    j += 1;\n                }\n                m.insert(next.clone(), 1);\n                names[i] = next.clone();\n                *m.get_mut(&name).unwrap() = j + 1;\n            } else {\n                m.insert(name.clone(), 1);\n            }\n        }\n        names\n    }\n}",
            "date": 1677772800000
        }
    ]
}
