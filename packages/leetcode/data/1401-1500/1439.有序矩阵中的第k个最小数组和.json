{
    "id": "1550",
    "name": "1439.有序矩阵中的第k个最小数组和",
    "url": "https://leetcode.cn/problems/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows",
    "desc": "给你一个 m * n 的矩阵 mat，以及一个整数 k ，矩阵中的每一行都以非递减的顺序排列。",
    "solutions": [
        {
            "script": "cpp",
            "time": 156,
            "memory": 32.9,
            "desc": "每次求和只取前k个数字，后面数字不需要。",
            "code": "class Solution {\npublic:\n    int kthSmallest(vector<vector<int>>& mat, int k) {\n        vector<int> list(1, 0);\n        for (auto &m : mat) {\n            vector<int> next;\n            for (auto &num1 : list) {\n                for (auto &num2 : m) {\n                    next.push_back(num1 + num2);\n                }\n            }\n            sort(next.begin(), next.end());\n            if (next.size() > k) next.resize(k);\n            list = next;\n        }\n        return list.back();\n    }\n};",
            "date": "2023-05-28"
        },
        {
            "script": "cpp",
            "time": 16,
            "memory": 8.3,
            "desc": "求出最大最小值，二分答案。",
            "code": "class Solution {\npublic:\n    int kthSmallest(vector<vector<int>>& mat, int k) {\n        int n = mat.size(), m = mat[0].size(), l = 0, r = 0, base = 0;\n        for (int i = 0; i < n; i++) l += mat[i][0], r += mat[i][m - 1], base += mat[i][0];\n        function<bool(int, int, int&)> dfs = [&](int idx, int sum, int &cnt) {\n            if (idx == -1) return --cnt == 0;\n            for (int i = 0; i < mat[idx].size() && sum - (mat[idx][i] - mat[idx][0]) >= 0; i++)\n                if (dfs(idx - 1, sum - (mat[idx][i] - mat[idx][0]), cnt)) return true;\n            return false;\n        };\n        while (l < r) {\n            int m = (l + r) / 2, cnt = k;\n            if (dfs(n - 1, m - base, cnt)) r = m;\n            else l = m + 1;\n        }\n        return l;\n    }\n};",
            "date": "2023-05-28"
        }
    ],
    "tagList": ["数组", "二分查找", "矩阵", "堆（优先队列）"],
    "level": "Hard"
}
