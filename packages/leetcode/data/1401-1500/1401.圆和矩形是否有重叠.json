{
    "id": "1501",
    "name": "1401.圆和矩形是否有重叠",
    "url": "https://leetcode.cn/problems/circle-and-rectangle-overlapping",
    "desc": "给你一个以 (radius, xCenter, yCenter) 表示的圆和一个与坐标轴平行的矩形 (x1, y1, x2, y2) ，其中 (x1, y1) 是矩形左下角的坐标，而 (x2, y2) 是右上角的坐标。如果圆和矩形有重叠的部分，请你返回 true ，否则返回 false 。换句话说，请你检测是否 存在 点 (xi, yi) ，它既在圆上也在矩形上（两者都包括点落在边界上的情况）。",
    "solutions": [
        {
            "script": "cpp",
            "time": 0,
            "memory": 5.7,
            "desc": "对于圆在矩形的四边和在四个远郊区都进行检测。",
            "code": "class Solution {\npublic:\n    bool checkOverlap(int radius, int xCenter, int yCenter, int x1, int y1, int x2, int y2) {\n        double xCenter2 = 1.0 * (x2 + x1) / 2, yCenter2 = 1.0 * (y2 + y1) / 2, d2 = yCenter2 - y1, d1 = xCenter2 - x1;\n        auto check = [&](double x1, double y1, double x2, double y2, double d) { return fabs(x1 - x2) * fabs(x1 - x2) + fabs(y1 - y2) * fabs(y1 - y2) <= d * d; };\n        return xCenter2 - d1 <= xCenter && xCenter <= xCenter2 + d1 && yCenter2 - d2 <= yCenter && yCenter <= yCenter2 + d2 ||\n               xCenter2 - d1 <= xCenter && xCenter <= xCenter2 + d1 && yCenter2 <= yCenter && yCenter <= yCenter2 + d2 + radius ||\n               xCenter2 - d1 <= xCenter && xCenter <= xCenter2 + d1 && yCenter2 - d2 - radius <= yCenter && yCenter <= yCenter2 ||\n               yCenter2 - d2 <= yCenter && yCenter <= yCenter2 + d2 && xCenter2 <= xCenter && xCenter <= xCenter2 + d1 + radius ||\n               yCenter2 - d2 <= yCenter && yCenter <= yCenter2 + d2 && xCenter2 - d1 - radius <= xCenter && xCenter <= xCenter2 ||\n               check(xCenter, yCenter, x1, y1, radius) ||\n               check(xCenter, yCenter, x1, y2, radius) ||\n               check(xCenter, yCenter, x2, y1, radius) ||\n               check(xCenter, yCenter, x2, y2, radius)\n               ;\n               \n    }\n};",
            "date": "2023-06-25"
        },
        {
            "script": "cpp",
            "time": 4,
            "memory": 5.6,
            "desc": "计算两个形状的最近距离。",
            "code": "class Solution {\npublic:\n    bool checkOverlap(int radius, int xCenter, int yCenter, int x1, int y1, int x2, int y2) {\n        int x = clamp(xCenter, x1, x2) - xCenter, y = clamp(yCenter, y1, y2) - yCenter;\n        return pow(x, 2) + pow(y, 2) <= pow(radius, 2);\n    }\n};",
            "date": "2023-06-25"
        },
        {
            "script": "python",
            "time": 40,
            "memory": 16,
            "desc": "同上。",
            "code": "class Solution:\n    def checkOverlap(self, radius: int, xCenter: int, yCenter: int, x1: int, y1: int, x2: int, y2: int) -> bool:\n        x = max(min(xCenter, x2), x1) - xCenter\n        y = max(min(yCenter, y2), y1) - yCenter\n        return pow(x, 2) + pow(y, 2) <= pow(radius, 2)\n",
            "date": "2023-06-25"
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 1.9,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn check_overlap(\n        radius: i32,\n        x_center: i32,\n        y_center: i32,\n        x1: i32,\n        y1: i32,\n        x2: i32,\n        y2: i32,\n    ) -> bool {\n        let x = x_center.clamp(x1, x2) - x_center;\n        let y = y_center.clamp(y1, y2) - y_center;\n        x.pow(2) + y.pow(2) <= radius.pow(2)\n    }\n}",
            "date": "2023-06-25"
        }
    ],
    "tagList": ["几何", "数学"],
    "level": "Medium"
}
