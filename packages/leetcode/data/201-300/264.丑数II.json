{
    "name": "264. 丑数 II",
    "url": "https://leetcode-cn.com/problems/ugly-number-ii/",
    "difficulty": "中等",
    "tag": [
        "堆",
        "数学",
        "动态规划"
    ],
    "desc": "给你一个整数 n ，请你找出并返回第 n 个 丑数 。",
    "solutions": [
        {
            "date": 1618070400000,
            "time": 200,
            "memory": 45.3,
            "script": "typescript",
            "desc": "依次利用 235 乘以堆顶值进行快速计算下一个丑数。",
            "code": "class Heap<T> {\n  private arr: T[] = [];\n  get isEmpty() {\n    return this.size === 0;\n  }\n  get size() {\n    return this.arr.length;\n  }\n  get top() {\n    return this.arr[0];\n  }\n  constructor(private compare: (t1: T, t2: T) => number) {}\n  add(num: T): void {\n    this.arr.push(num);\n    this.shiftUp(this.size - 1);\n  }\n  remove(): T {\n    const num = this.arr.shift()!;\n    if (this.size) {\n      this.arr.unshift(this.arr.pop()!);\n      this.shiftDown(0);\n    }\n    return num;\n  }\n  private shiftUp(index: number): void {\n    if (index === 0) return;\n    const parentIndex = (index - 1) >> 1;\n    if (this.compare(this.arr[index], this.arr[parentIndex]) > 0) {\n      [this.arr[index], this.arr[parentIndex]] = [this.arr[parentIndex], this.arr[index]];\n      this.shiftUp(parentIndex);\n    }\n  }\n  private shiftDown(index: number): void {\n    let childrenIndex = index * 2 + 1;\n    if (childrenIndex > this.size - 1) return;\n    if (\n      childrenIndex + 1 <= this.size - 1 &&\n      this.compare(this.arr[childrenIndex + 1], this.arr[childrenIndex]) > 0\n    ) {\n      childrenIndex++;\n    }\n    if (this.compare(this.arr[childrenIndex], this.arr[index]) > 0) {\n      [this.arr[childrenIndex], this.arr[index]] = [this.arr[index], this.arr[childrenIndex]];\n      this.shiftDown(childrenIndex);\n    }\n  }\n}\nfunction nthUglyNumber(n: number): number {\n  if (n === 1) return 1;\n  let c = 1;\n  const heap = new Heap<number>((t1, t2) => t2 - t1);\n  heap.add(1);\n  while (c++ < n) {\n    const ans = heap.remove();\n    if (ans % 5 === 0) {\n      heap.add(ans * 5);\n    } else if (ans % 3 === 0) {\n      heap.add(ans * 5);\n      heap.add(ans * 3);\n    } else {\n      heap.add(ans * 5);\n      heap.add(ans * 3);\n      heap.add(ans * 2);\n    }\n  }\n  return heap.remove();\n}"
        }
    ]
}