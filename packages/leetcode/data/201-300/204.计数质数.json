{
    "id": "204",
    "name": "204.计数质数",
    "url": "https://leetcode.cn/problems/count-primes",
    "difficulty": "中等",
    "tag": [
        "数组",
        "数学",
        "枚举",
        "数论"
    ],
    "desc": "统计所有小于非负整数 n 的质数的数量。",
    "solutions": [
        {
            "date": 1606924800000,
            "time": 136,
            "memory": 52.1,
            "script": "typescript",
            "desc": "埃氏筛。",
            "code": "function countPrimes(n: number): number {\n  const isPrime = new Array(n).fill(1);\n  let ans = 0;\n  for (let i = 2; i < n; ++i) {\n    if (isPrime[i]) {\n      ans += 1;\n      for (let j = i * i; j < n; j += i) {\n        isPrime[j] = 0;\n      }\n    }\n  }\n  return ans;\n}"
        },
        {
            "date": 1629388800000,
            "time": 256,
            "memory": 109.5,
            "script": "typescript",
            "desc": "分别统计每个数的倍数快速标记。",
            "code": "function countPrimes(n: number): number {\n  const arr: boolean[] = new Array(n).fill(true);\n  arr[0] = arr[1] = false;\n  for (let i = 2; i <= n - 1; i++) {\n    if (arr[i]) for (let num = 2; num * i < n; num++) arr[num * i] = false;\n  }\n  return arr.filter(Boolean).length;\n}"
        }
    ]
}