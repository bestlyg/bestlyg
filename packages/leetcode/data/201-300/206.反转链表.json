{
    "id": "206",
    "name": "206.反转链表",
    "url": "https://leetcode.cn/problems/reverse-linked-list",
    "difficulty": "简单",
    "tag": [
        "递归",
        "链表"
    ],
    "desc": "反转一个单链表。",
    "solutions": [
        {
            "date": 1581523200000,
            "time": 0,
            "memory": 37.3,
            "script": "java",
            "desc": "创建链表，循环头部插入。",
            "code": "class Solution {\n    public ListNode reverseList(ListNode head) {\n        if (head == null || head.next == null)\n\t\t\treturn head;\n\t\tListNode newHead=null;\n\t\twhile(head!=null) {\n\t\t\tListNode tmp=head.next;\n\t\t\thead.next=newHead;\n\t\t\tnewHead=head;\n\t\t\thead=tmp;\n\t\t}\n\t\treturn newHead;\n    }\n}"
        },
        {
            "date": 1614960000000,
            "time": 100,
            "memory": 40,
            "script": "typescript",
            "desc": "递归。",
            "code": "function reverseList(head: ListNode | null): ListNode | null {\n  if (head === null || head.next === null) return head;\n  const nextList = reverseList(head.next);\n  head.next.next = head;\n  head.next = null;\n  return nextList;\n}"
        },
        {
            "date": 1637251200000,
            "time": 4,
            "memory": 6.6,
            "script": "c",
            "desc": "递归。",
            "code": "struct ListNode* reverseList(struct ListNode* head){\n    if (head == NULL || head->next == NULL) return head;\n    struct ListNode *next = head->next;\n    struct ListNode *reverse_head = reverseList(next);\n    next->next = head;\n    head->next = NULL;\n    return reverse_head;\n}"
        },
        {
            "date": 1646236800000,
            "time": 8,
            "memory": 8.1,
            "script": "cpp",
            "desc": "双指针。",
            "code": "class Solution {\n   public:\n    ListNode* reverseList(ListNode* head) {\n        if (!head) return head;\n        ListNode *newHead = nullptr, *tmp;\n        while (head) {\n            tmp = head->next;\n            head->next = newHead;\n            newHead = head;\n            head = tmp;\n        }\n        return newHead;\n    }\n};"
        }
    ]
}