{
    "id": "210",
    "name": "210.课程表II",
    "url": "https://leetcode.cn/problems/course-schedule-ii",
    "difficulty": "中等",
    "tag": ["深度优先搜索", "广度优先搜索", "图", "拓扑排序"],
    "desc": "现在你总共有 n 门课需要选，记为  0  到  n-1。在选修某些课程之前需要一些先修课程。  例如，想要学习课程 0 ，你需要先完成课程  1 ，我们用一个匹配来表示他们: [0,1]给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。",
    "solutions": [
        {
            "date": 1589644800000,
            "time": 644,
            "memory": 43.5,
            "script": "javascript",
            "desc": "通过队列出栈无前置课程的课程，依次压栈。",
            "code": "/**\n * @param {number} numCourses\n * @param {number[][]} prerequisites\n * @return {number[]}\n */\nvar findOrder = function (numCourses, prerequisites) {\n  const course = [];\n  for (let i = 0; i < numCourses; i++) course[i] = new Course(i);\n  for (const [next, prev] of prerequisites) {\n    course[next].prev.push(course[prev]);\n    course[prev].next.push(course[next]);\n  }\n  const topo = [];\n  const queue = [];\n  for (let i = 0; i < numCourses; i++) if (!course[i].hasPrev()) queue.push(course[i]);\n  let time = 0;\n  let max = numCourses * (numCourses - 1);\n  while (queue.length !== 0) {\n    if (time++ > max) return [];\n    const course = queue.shift();\n    if (course.hasPrev()) {\n      queue.push(course);\n      continue;\n    }\n    topo.push(course);\n    if (!course.hasNext()) continue;\n    for (const next of course.next) {\n      if (!queue.includes(next)) queue.push(next);\n      next.prev = next.prev.filter(v => v !== course);\n    }\n  }\n  if (topo.length !== numCourses) return [];\n  return topo.map(v => v.val);\n};\nclass Course {\n  prev = [];\n  next = [];\n  constructor(val) {\n    this.val = val;\n  }\n  hasPrev() {\n    return this.prev.length !== 0;\n  }\n  hasNext() {\n    return this.next.length !== 0;\n  }\n}"
        },
        {
            "script": "python",
            "time": 48,
            "memory": 17.51,
            "desc": "bfs。",
            "code": "class Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        used_count = 0\n        arr = [[set(),set()] for _ in range(numCourses)]\n        for [item1, item2] in prerequisites:\n            arr[item1][0].add(item2)\n            arr[item2][1].add(item1)\n        q = [i for i in range(numCourses) if not len(arr[i][0])]\n        res = []\n        while len(q):\n            cur = q.pop()\n            res.append(cur)\n            for child in arr[cur][1]:\n                arr[child][0].remove(cur)\n                if not len(arr[child][0]):\n                    q.append(child)\n        return res if numCourses == len(res) else []",
            "date": 1694275200000
        }
    ]
}
