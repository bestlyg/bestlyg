{
    "name": "238.除自身以外数组的乘积",
    "url": "https://leetcode-cn.com/problems/product-of-array-except-self/",
    "difficulty": "中等",
    "tag": [
        "数组"
    ],
    "desc": "给你一个长度为  n  的整数数组  nums，其中  n > 1，返回输出数组  output ，其中 output[i]  等于  nums  中除  nums[i]  之外其余各元素的乘积。",
    "solutions": [
        {
            "date": 1591200000000,
            "time": 132,
            "memory": 42.7,
            "script": "typescript",
            "desc": "虽通过但使用了除法不符合题目要求",
            "code": "function productExceptSelf(nums: number[]): number[] {\n  let zeroIndex = nums.indexOf(0);\n  if (zeroIndex === -1) {\n    let sum = 1;\n    for (const num of nums) sum *= num;\n    return nums.map(v => sum / v);\n  } else if (nums.includes(0, zeroIndex + 1)) {\n    return nums.map(v => 0);\n  } else {\n    let sum = 1;\n    for (const num of nums) sum *= num === 0 ? 1 : num;\n    return nums.map(v => (v === 0 ? sum : 0));\n  }\n}"
        },
        {
            "date": 1591200000000,
            "time": 132,
            "memory": 42.1,
            "script": "typescript",
            "desc": "储存左值与右值,res[i]=l[i]\\*r[i]",
            "code": "function productExceptSelf(nums: number[]): number[] {\n  const len = nums.length;\n  let l: number[] = [];\n  let r: number[] = [];\n  l[0] = 1;\n  for (let i = 1; i < len; i++) l[i] = l[i - 1] * nums[i - 1];\n  r[len - 1] = 1;\n  for (let i = len - 2; i >= 0; i--) r[i] = r[i + 1] * nums[i + 1];\n  return nums.map((_, i) => l[i] * r[i]);\n}"
        },
        {
            "date": 1591200000000,
            "time": 96,
            "memory": 42,
            "script": "typescript",
            "desc": "根据题解 2，利用输出数组，先存入左值再累乘右值，使空间变 O(1)",
            "code": "function productExceptSelf(nums: number[]): number[] {\n  const len = nums.length;\n  let ans: number[] = [1];\n  for (let i = 1; i < len; i++) ans[i] = ans[i - 1] * nums[i - 1];\n  let r = nums[len - 1];\n  for (let i = len - 2; i >= 0; i--) {\n    ans[i] *= r;\n    r *= nums[i];\n  }\n  return ans;\n}"
        }
    ]
}