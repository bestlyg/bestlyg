{
    "id": "213",
    "name": "213.打家劫舍II",
    "url": "https://leetcode.cn/problems/house-robber-ii",
    "difficulty": "中等",
    "tag": [
        "数组",
        "动态规划"
    ],
    "desc": "给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，能够偷窃到的最高金额。",
    "solutions": [
        {
            "date": 1618416000000,
            "time": 108,
            "memory": 39.5,
            "script": "typescript",
            "desc": "动态规划，考虑到头尾相接，分别考虑第一个偷和不偷的情况。",
            "code": "function rob(nums: number[]): number {\n  const size = nums.length;\n  if (size === 1) return nums[0];\n  let max = 0;\n  const dp: number[][] = new Array(size).fill(0).map(_ => new Array(2));\n  const traversal = () => {\n    for (let i = 1; i < size; i++) {\n      dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1]);\n      dp[i][1] = dp[i - 1][0] + nums[i];\n    }\n  };\n  // 第一个不偷\n  dp[0][0] = 0;\n  dp[0][1] = 0;\n  traversal();\n  max = Math.max(dp[size - 1][0], dp[size - 1][1]);\n  // 第一个偷\n  dp[0][1] = nums[0];\n  traversal();\n  max = Math.max(max, dp[size - 1][0]);\n  return max;\n}"
        },
        {
            "date": 1631462400000,
            "time": 84,
            "memory": 41.5,
            "script": "typescript",
            "desc": "动态规划。",
            "code": "function rob(nums: number[]): number {\n  const n = nums.length;\n  if (n < 3) return Math.max(...nums);\n  /**\n   * 0 => 偷\n   * 1 => 不偷\n   * dp(i,j,k) = 第i个房子是否偷(j)且第一个房子是否偷(k)\n   */\n  const dp = new Array(n).fill(0).map(_ => new Array(2).fill(0).map(_ => new Array(2).fill(0)));\n  dp[0][0][0] = nums[0];\n  dp[1][0][1] = nums[1];\n  dp[1][1][0] = nums[0];\n  for (let i = 2; i < n; i++) {\n    dp[i][0][0] = Math.max(Math.max(dp[i - 2][0][0], dp[i - 2][1][0]) + nums[i], dp[i - 1][1][0]);\n    dp[i][0][1] = Math.max(Math.max(dp[i - 2][0][1], dp[i - 2][1][1]) + nums[i], dp[i - 1][1][1]);\n    dp[i][1][0] = Math.max(dp[i - 1][0][0], dp[i - 1][1][0]);\n    dp[i][1][1] = dp[i - 1][0][1];\n  }\n  return Math.max(dp[n - 1][0][1], dp[n - 1][1][0], dp[n - 1][1][1]);\n}"
        },
        {
            "date": 1631462400000,
            "time": 84,
            "memory": 40.3,
            "script": "typescript",
            "desc": "动态规划优化。",
            "code": "function rob(nums: number[]): number {\n  const n = nums.length;\n  if (n < 3) return Math.max(...nums);\n  /**\n   * 0 => 偷\n   * 1 => 不偷\n   * dp(i,j,k) = 第i个房子是否偷(j)且第一个房子是否偷(k)\n   */\n  const dp = new Array(3).fill(0).map(_ => new Array(2).fill(0).map(_ => new Array(2).fill(0)));\n  dp[0][0][0] = nums[0];\n  dp[1][0][1] = nums[1];\n  dp[1][1][0] = nums[0];\n  for (let i = 2; i < n; i++) {\n    const idx = i % 3;\n    const prevIdx = (i - 1) % 3;\n    const prevIdx2 = (i - 2) % 3;\n    dp[idx][0][0] = Math.max(\n      Math.max(dp[prevIdx2][0][0], dp[prevIdx2][1][0]) + nums[i],\n      dp[prevIdx][1][0]\n    );\n    dp[idx][0][1] = Math.max(\n      Math.max(dp[prevIdx2][0][1], dp[prevIdx2][1][1]) + nums[i],\n      dp[prevIdx][1][1]\n    );\n    dp[idx][1][0] = Math.max(dp[prevIdx][0][0], dp[prevIdx][1][0]);\n    dp[idx][1][1] = dp[prevIdx][0][1];\n    console.log(i, dp);\n  }\n  const lastIdx = (n - 1) % 3;\n  return Math.max(dp[lastIdx][0][1], dp[lastIdx][1][0], dp[lastIdx][1][1]);\n}"
        }
    ]
}