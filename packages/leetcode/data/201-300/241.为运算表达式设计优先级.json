{
    "id": "241",
    "name": "241.为运算表达式设计优先级",
    "url": "https://leetcode.cn/problems/different-ways-to-add-parentheses",
    "desc": "给定一个含有数字和运算符的字符串，为表达式添加括号，改变其运算优先级以求出不同的结果。你需要给出所有可能的组合的结果。有效的运算符号包含 +, -  以及  \\* 。",
    "solutions": [
        {
            "date": "2021-10-25",
            "time": 88,
            "memory": 41.3,
            "script": "typescript",
            "desc": "对于每个操作符当作根节点计算。",
            "code": "function diffWaysToCompute(expression: string): number[] {\n  return dfs(expression);\n  function split(expression: string, idx: number) {\n    return [expression.substring(0, idx), expression.substring(idx + 1)];\n  }\n  function comp(num1: number, num2: number, op: string): number {\n    switch (op) {\n      case '+':\n        return num1 + num2;\n      case '-':\n        return num1 - num2;\n      case '*':\n        return num1 * num2;\n      default:\n        return num1 + num2;\n    }\n  }\n  function dfs(expression: string): number[] {\n    const n = expression.length;\n    const opIdxs: number[] = [];\n    for (let i = 0; i < n; i++) {\n      const ch = expression[i];\n      if (ch === '+' || ch === '-' || ch === '*') opIdxs.push(i);\n    }\n    if (opIdxs.length === 0) return [+expression];\n    const ans: number[] = [];\n    for (const idx of opIdxs) {\n      const [left, right] = split(expression, idx);\n      for (const num1 of dfs(left)) {\n        for (const num2 of dfs(right)) {\n          ans.push(comp(num1, num2, expression[idx]));\n        }\n      }\n    }\n    return ans;\n  }\n}"
        },
        {
            "date": "2022-07-01",
            "time": 8,
            "memory": 12.4,
            "script": "cpp",
            "desc": "分治。",
            "code": "class Solution {\n   public:\n    unordered_set<char> opset;\n    Solution() {\n        opset.insert('+');\n        opset.insert('-');\n        opset.insert('*');\n    }\n    vector<int> diffWaysToCompute(string expression) {\n        vector<int> ans, oplist;\n        int n = expression.size();\n        for (int i = 0; i < n; i++) {\n            if (opset.count(expression[i])) oplist.push_back(i);\n        }\n        if (oplist.size() == 0)\n            ans.push_back(toNum(expression));\n        else\n            dfs(expression, oplist, ans);\n        return ans;\n    }\n    int toNum(string &expression) {\n        int num = 0, n = expression.size(), i = 0;\n        while (i < n && !opset.count(expression[i]))\n            num = num * 10 + expression[i++] - '0';\n        return num;\n    }\n    void dfs(string &expression, vector<int> &oplist, vector<int> &ans) {\n        for (auto &idx : oplist) {\n            vector<int> llist = diffWaysToCompute(expression.substr(0, idx));\n            vector<int> rlist = diffWaysToCompute(\n                expression.substr(idx + 1, expression.size() - idx));\n            for (auto &num1 : llist) {\n                for (auto &num2 : rlist) {\n                    switch (expression[idx]) {\n                        case '+':\n                            ans.push_back(num1 + num2);\n                            break;\n                        case '-':\n                            ans.push_back(num1 - num2);\n                            break;\n                        case '*':\n                            ans.push_back(num1 * num2);\n                            break;\n                    }\n                }\n            }\n        }\n    }\n};"
        },
        {
            "date": "2022-07-01",
            "time": 8,
            "memory": 12.4,
            "script": "cpp",
            "desc": "分治。",
            "code": "class Solution {\n   public:\n    unordered_set<char> opset;\n    Solution() {\n        opset.insert('+');\n        opset.insert('-');\n        opset.insert('*');\n    }\n    vector<int> diffWaysToCompute(string expression) {\n        vector<int> ans, oplist;\n        int n = expression.size();\n        for (int i = 0; i < n; i++) {\n            if (opset.count(expression[i])) oplist.push_back(i);\n        }\n        if (oplist.size() == 0)\n            ans.push_back(toNum(expression));\n        else\n            dfs(expression, oplist, ans);\n        return ans;\n    }\n    int toNum(string &expression) {\n        int num = 0, n = expression.size(), i = 0;\n        while (i < n && !opset.count(expression[i]))\n            num = num * 10 + expression[i++] - '0';\n        return num;\n    }\n    void dfs(string &expression, vector<int> &oplist, vector<int> &ans) {\n        for (auto &idx : oplist) {\n            vector<int> llist = diffWaysToCompute(expression.substr(0, idx));\n            vector<int> rlist = diffWaysToCompute(\n                expression.substr(idx + 1, expression.size() - idx));\n            for (auto &num1 : llist) {\n                for (auto &num2 : rlist) {\n                    switch (expression[idx]) {\n                        case '+':\n                            ans.push_back(num1 + num2);\n                            break;\n                        case '-':\n                            ans.push_back(num1 - num2);\n                            break;\n                        case '*':\n                            ans.push_back(num1 * num2);\n                            break;\n                    }\n                }\n            }\n        }\n    }\n};"
        }
    ],
    "tagList": [
        "递归",
        "记忆化搜索",
        "数学",
        "字符串",
        "动态规划"
    ],
    "level": "Medium"
}