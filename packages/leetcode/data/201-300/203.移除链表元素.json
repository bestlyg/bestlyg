{
    "name": "203. 移除链表元素",
    "url": "https://leetcode-cn.com/problems/remove-linked-list-elements/",
    "difficulty": "简单",
    "tag": [
        "链表"
    ],
    "desc": "删除链表中等于给定值 val 的所有节点。",
    "solutions": [
        {
            "date": 1581523200000,
            "time": 1,
            "memory": 40.1,
            "script": "java",
            "desc": "创建新链表，遍历节点，若存在符合的值则移除。",
            "code": "class Solution {\n    public ListNode removeElements(ListNode head, int val) {\n        ListNode newHead=new ListNode(0);\n        newHead.next=head;\n        ListNode tem=newHead;\n        while(tem!=null&&tem.next!=null) {\n        \tif(tem.next.val==val) {\n        \t\ttem.next=tem.next.next;\n                continue;\n        \t}\n        \ttem=tem.next;\n        }\n        return newHead.next;\n    }\n}"
        },
        {
            "date": 1622822400000,
            "time": 108,
            "memory": 43.3,
            "script": "typescript",
            "desc": "初始化空头节点便于运算。",
            "code": "function removeElements(head: ListNode | null, val: number): ListNode | null {\n  if (head === null) return null;\n  const tempHead = new ListNode(0, head);\n  let p: ListNode | null = tempHead;\n  while (p !== null) {\n    let next: ListNode | null = p.next;\n    while (next !== null && next.val === val) next = next.next;\n    p.next = next;\n    p = next;\n  }\n  return tempHead.next;\n}"
        },
        {
            "date": 1637251200000,
            "time": 8,
            "memory": 7.9,
            "script": "c",
            "desc": "双指针。",
            "code": "struct ListNode* removeElements(struct ListNode* head, int val){\n    if (!head) return NULL;\n    while (head && head->val == val) head = head->next;\n    if (!head) return NULL;\n    struct ListNode *p = head;\n    struct ListNode *work = head;\n    while (work) {\n        work = work->next;\n        while(work && work->val == val) work = work->next;\n        p->next = work;\n        p = p->next;\n    }\n    return head;\n}"
        }
    ]
}