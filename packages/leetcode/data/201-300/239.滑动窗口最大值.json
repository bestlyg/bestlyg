{
  "name": "239. 滑动窗口最大值",
  "url": "https://leetcode-cn.com/problems/sliding-window-maximum/",
  "difficulty": "困难",
  "tag": ["堆", "滑动窗口"],
  "desc": "给你一个整数数组 nums，有一个大小为  k  的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k  个数字。滑动窗口每次只向右移动一位。返回滑动窗口中的最大值。",
  "solutions": [
    {
      "date": 1609516800000,
      "time": 4056,
      "memory": 73.1,
      "script": "typescript",
      "desc": "每次储存最大值进行比较。",
      "code": "function maxSlidingWindow(nums: number[], k: number): number[] {\n  if (k === 1) return nums;\n  const len = nums.length;\n  if (len === k) return [Math.max(...nums)];\n  const ans: number[] = [];\n  let max = -Infinity;\n  let index = 0;\n  for (let i = 0; i < k; i++) {\n    const num = nums[i];\n    if (max < num) {\n      max = num;\n      index = i;\n    }\n  }\n  ans.push(max);\n  for (let i = k; i < len; i++) {\n    if (index <= i - k) {\n      max = -Infinity;\n      for (let j = i - k + 1; j <= i; j++) {\n        const num = nums[j];\n        if (max < num) {\n          max = num;\n          index = j;\n        }\n      }\n    } else {\n      const num = nums[i];\n      if (max < num) {\n        max = num;\n        index = i;\n      }\n    }\n    ans.push(max);\n  }\n  return ans;\n}"
    },
    {
      "date": 1609516800000,
      "time": 324,
      "memory": 72.2,
      "script": "typescript",
      "desc": "优化题解 1。",
      "code": "function maxSlidingWindow(nums: number[], k: number): number[] {\n  const n = nums.length;\n  const q: number[] = [];\n  for (let i = 0; i < k; i++) {\n    while (q.length && nums[i] >= nums[q[q.length - 1]]) {\n      q.pop();\n    }\n    q.push(i);\n  }\n  const ans = [nums[q[0]]];\n  for (let i = k; i < n; i++) {\n    while (q.length && nums[i] >= nums[q[q.length - 1]]) {\n      q.pop();\n    }\n    q.push(i);\n    while (q[0] <= i - k) {\n      q.shift();\n    }\n    ans.push(nums[q[0]]);\n  }\n  return ans;\n}"
    }
  ]
}
