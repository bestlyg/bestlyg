{
    "id": "215",
    "name": "215.数组中的第K个最大元素",
    "url": "https://leetcode.cn/problems/kth-largest-element-in-an-array",
    "desc": "在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。",
    "solutions": [
        {
            "date": "2020-06-29",
            "time": 88,
            "memory": 35.9,
            "script": "typescript",
            "desc": "构建大顶堆即可。",
            "code": "class Heap {\n  get size(): number {\n    return this._elemenets.length;\n  }\n  constructor(private _elemenets: number[]) {\n    this.heapify();\n  }\n  heapify(): void {\n    for (let i = (this.size >> 1) - 1; i >= 0; i--) {\n      this.siftDown(i);\n    }\n  }\n  remove(): number {\n    const root = this._elemenets[0];\n    this._elemenets[0] = this._elemenets.pop() as number;\n    this.siftDown(0);\n    return root;\n  }\n  siftDown(index: number) {\n    const element = this._elemenets[index];\n    const half = this.size >> 1;\n    while (index < half) {\n      let childIndex = (index << 1) + 1;\n      let child = this._elemenets[childIndex];\n      const rightIndex = childIndex + 1;\n      if (rightIndex < this.size && this._elemenets[rightIndex] > child) {\n        child = this._elemenets[(childIndex = rightIndex)];\n      }\n      if (element >= child) break;\n      this._elemenets[index] = child;\n      index = childIndex;\n    }\n    this._elemenets[index] = element;\n  }\n}\nfunction findKthLargest(nums: number[], k: number): number {\n  const heap = new Heap(nums);\n  for (let i = 1; i < k; i++) {\n    heap.remove();\n  }\n  return heap.remove();\n}"
        }
    ],
    "tagList": ["数组", "分治", "快速选择", "排序", "堆（优先队列）"],
    "level": "Medium"
}
