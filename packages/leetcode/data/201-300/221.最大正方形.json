{
    "name": "221.最大正方形",
    "url": "https://leetcode-cn.com/problems/maximal-square/",
    "difficulty": "中等",
    "tag": [
        "动态规划"
    ],
    "desc": "在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。",
    "solutions": [
        {
            "date": 1588867200000,
            "time": 440,
            "memory": 74.3,
            "script": "javascript",
            "desc": "先把字符串转换为后缀表达式，然后再利用栈计算。",
            "code": "/**\n * @param {character[][]} matrix\n * @return {number}\n */\nvar maximalSquare = function (matrix) {\n  function isAllOne(i, j) {\n    let b = false;\n    try {\n      b = matrix[i + 1][j + 1] === '1' && matrix[i][j + 1] === '1' && matrix[i + 1][j] === '1';\n    } catch (error) {}\n    return b;\n  }\n  let max = 0;\n  for (let i = 0; i < matrix.length; i++) {\n    for (let j = 0; j < matrix[i].length; j++) {\n      if (matrix[i][j] === '0') continue;\n      let width = 1;\n      let size = 1;\n      let temp = [];\n      const queue = [[i, j]];\n      while (queue.length !== 0) {\n        const [nextI, nextJ] = queue.shift();\n        if (!isAllOne(nextI, nextJ)) break;\n        temp.push([nextI, nextJ + 1], [nextI + 1, nextJ], [nextI + 1, nextJ + 1]);\n        if (--size === 0) {\n          queue.push(...temp);\n          size = temp.length;\n          temp.length = 0;\n          width++;\n        }\n      }\n      max = Math.max(max, width);\n    }\n  }\n  return max ** 2;\n};"
        }
    ]
}