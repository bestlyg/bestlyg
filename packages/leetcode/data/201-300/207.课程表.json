{
    "id": "207",
    "name": "207.课程表",
    "url": "https://leetcode.cn/problems/course-schedule",
    "desc": "请你判断是否可能完成所有课程的学习？如果可以，返回 true ；否则，返回 false 。",
    "solutions": [
        {
            "date": "2020-08-05",
            "script": "typescript",
            "time": 96,
            "memory": 40.3,
            "desc": "归并排序。",
            "code": "function canFinish(numCourses: number, prerequisites: number[][]): boolean {\n    const inDegree:number[] = Array(numCourses).fill(0) //入度的数组\n    const map:any = new Map() \n    for (let i = 0; i < prerequisites.length; i++) {\n        inDegree[prerequisites[i][0]]++ //遍历课程，第一项都是依赖后一项的所以入度都加1\n        if (map.has(prerequisites[i][1])) { //push依赖prerequisites[i][1]的课程\n            map.get(prerequisites[i][1]).push(prerequisites[i][0])\n        } else { //map中没有此课程，添加进去并把value设置成数组用来push依赖prerequisites[i][1]的课程\n            map.set(prerequisites[i][1], [prerequisites[i][0]])\n        }\n    }\n    const queue:number[] = []//数组队列\n    for (let i = 0; i < inDegree.length; i++) {\n        if (inDegree[i] == 0) {//如果入度为0表示可先学习课程push到队列\n            queue.push(i)\n        }\n    }\n    let count:number = 0//选课次数\n    while (queue.length) {\n        const selected = queue.shift()//可选课程\n        count++ \n        const preSelect = map.get(selected) //依赖此课程的所有课程（是个数组）\n            if (preSelect && preSelect.length) {\n                //依赖此课程的课程入度都减1\n                for (let i = 0; i < preSelect.length; i++) {\n                    inDegree[preSelect[i]]--\n                    if (inDegree[preSelect[i]] == 0) {//入度为0可以学习push到队列\n                        queue.push(preSelect[i])\n                    }\n                }\n            }\n    }\n    return count == numCourses\n};"
        },
        {
            "script": "cpp",
            "time": 24,
            "memory": 17.9,
            "desc": "拓扑排序。",
            "code": "class Solution {\npublic:\n    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {\n        int used_count = 0;\n        vector<unordered_set<int>> parr(numCourses);\n        vector<unordered_set<int>> carr(numCourses);\n        for (auto &item : prerequisites)\n            carr[item[0]].insert(item[1]),\n            parr[item[1]].insert(item[0]);\n        vector<int> q;\n        for (int i = 0; i < numCourses; i++) {\n            if (parr[i].empty()) q.push_back(i);\n        }\n        while (q.size()) {\n            int cur = q.back();\n            used_count++;\n            q.pop_back();\n            for (auto &child : carr[cur]) {\n                parr[child].erase(cur);\n                if (parr[child].empty()) q.push_back(child);\n            }\n        }\n        return used_count == numCourses;\n    }\n};",
            "date": "2023-09-09"
        },
        {
            "script": "python",
            "time": 48,
            "memory": 16.1,
            "desc": "同上。",
            "code": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        used_count = 0\n        arr = [[set(),set()] for _ in range(numCourses)]\n        for [item1, item2] in prerequisites:\n            arr[item2][0].add(item1)\n            arr[item1][1].add(item2)\n        q = [i for i in range(numCourses) if not len(arr[i][0])]\n        while len(q):\n            cur = q.pop()\n            used_count += 1\n            for child in arr[cur][1]:\n                arr[child][0].remove(cur)\n                if not len(arr[child][0]):\n                    q.append(child)\n        return used_count == numCourses",
            "date": "2023-09-09"
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 2.7,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn can_finish(num_courses: i32, prerequisites: Vec<Vec<i32>>) -> bool {\n        use std::collections::HashSet;\n        let num_courses = num_courses as usize;\n        let mut used_count = 0;\n        let mut parr: Vec<HashSet<usize>> = vec![Default::default(); num_courses];\n        let mut carr: Vec<HashSet<usize>> = vec![Default::default(); num_courses];\n        for item in prerequisites {\n            let item0 = item[0] as usize;\n            let item1 = item[1] as usize;\n            carr[item0].insert(item1);\n            parr[item1].insert(item0);\n        }\n        let mut q: Vec<usize> = vec![];\n        for i in 0..num_courses {\n            if parr[i].is_empty() {\n                q.push(i);\n            }\n        }\n        while let Some(cur) = q.pop() {\n            used_count += 1;\n            for child in &carr[cur] {\n                parr[*child].remove(&cur);\n                if parr[*child].is_empty() {\n                    q.push(*child);\n                }\n            }\n        }\n        used_count == num_courses\n    }\n}",
            "date": "2023-09-09"
        }
    ],
    "tagList": [
        "深度优先搜索",
        "广度优先搜索",
        "图",
        "拓扑排序"
    ],
    "level": "Medium"
}