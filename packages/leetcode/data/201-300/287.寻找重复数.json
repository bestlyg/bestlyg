{
    "id": "287",
    "name": "287.寻找重复数",
    "url": "https://leetcode.cn/problems/find-the-duplicate-number",
    "difficulty": "中等",
    "tag": ["位运算", "数组", "双指针", "二分查找"],
    "desc": "根据 百度百科 ，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。",
    "solutions": [
        {
            "date": 1590422400000,
            "time": 452,
            "memory": 35.3,
            "script": "typescript",
            "desc": "使用 include 判断是否存在相同数即可",
            "code": "var findDuplicate = function (nums: number[]): number {\n  for (let i = 0, len = nums.length; i < len; i++)\n    if (nums.includes(nums[i], i + 1)) return nums[i];\n  return 0;\n};"
        },
        {
            "date": 1590422400000,
            "time": 72,
            "memory": 36.8,
            "script": "typescript",
            "desc": "二分查找，通过只有一个数重复且数大小在 1~len-1 之间时进行判断",
            "code": "var findDuplicate = function (nums: number[]): number {\n  const len = nums.length;\n  let l = 1,\n    r = len - 1,\n    res = -1;\n  while (l <= r) {\n    let c = 0;\n    const mid = (l + r) >> 1;\n    for (const num of nums) if (num <= mid) cpp;\n    if (c <= mid) {\n      l = mid + 1;\n    } else {\n      r = mid - 1;\n      res = mid;\n    }\n  }\n  return res;\n};"
        },
        {
            "date": 1590422400000,
            "time": 68,
            "memory": 36.7,
            "script": "typescript",
            "desc": "利用位运算节省空间，遍历一遍即可",
            "code": "var findDuplicate = function (nums: number[]): number {\n  const maxRadix = 30;\n  let cache: number[] = new Array(2).fill(0);\n  for (const num of nums) {\n    const compNum = num - 1;\n    const cacheNum = Math.floor(compNum / 30);\n    const bit = 1 << compNum;\n    if ((cache[cacheNum] & bit) !== 0) return num;\n    cache[cacheNum] |= bit;\n  }\n  return 0;\n};"
        },
        {
            "date": 1638547200000,
            "time": 100,
            "memory": 47.1,
            "script": "typescript",
            "desc": "快慢指针。",
            "code": "function findDuplicate(nums: number[]): number {\n  let p = nums[0];\n  let q = nums[p];\n  while (p != q) {\n    p = nums[p];\n    q = nums[nums[q]];\n  }\n  p = 0;\n  while (p != q) {\n    p = nums[p];\n    q = nums[q];\n  }\n  return p;\n}"
        }
    ]
}
