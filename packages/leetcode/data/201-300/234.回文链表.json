{
    "id": "234",
    "name": "234.回文链表",
    "url": "https://leetcode.cn/problems/palindrome-linked-list",
    "desc": "请判断一个链表是否为回文链表。",
    "solutions": [
        {
            "date": "2020-10-23",
            "time": 104,
            "memory": 43,
            "script": "typescript",
            "desc": "快慢指针一次遍历。",
            "code": "function isPalindrome(head: ListNode | null): boolean {\n  if (head === null) return true;\n  let fast: ListNode | null = head;\n  let slow: ListNode | null = head;\n  const cache: number[] = [];\n  while (fast !== null && fast.next !== null) {\n    fast = fast.next.next;\n    cache.push(slow!.val);\n    slow = slow!.next;\n  }\n  if (fast?.next === null) slow = slow!.next;\n  while (slow) {\n    const val = cache.pop();\n    if (slow.val !== val) return false;\n    slow = slow.next;\n  }\n  return true;\n}"
        },
        {
            "date": "2021-08-20",
            "time": 260,
            "memory": 66.2,
            "script": "typescript",
            "desc": "利用字符串保存翻转值。",
            "code": "function isPalindrome(head: ListNode): boolean {\n  let str1 = '';\n  let str2 = '';\n  let p: ListNode | null = head;\n  while (p) {\n    str1 = str1 + p.val;\n    str2 = p.val + str2;\n    p = p.next;\n  }\n  return str1 === str2;\n}"
        },
        {
            "date": "2021-09-22",
            "time": 228,
            "memory": 69.9,
            "script": "javascript",
            "desc": "反转后半部分。",
            "code": "function isPalindrome(head: ListNode): boolean {\n        let slow = head;\n        let fast = head.next;\n        if (!fast) return true;\n        while (fast && fast.next) {\n          slow = slow.next!;\n          fast = fast.next.next;\n        }\n        fast = reverse(slow.next!)[0];\n        slow = head;\n        while (fast) {\n          if (slow.val !== fast.val) return false;\n          slow = slow.next!;\n          fast = fast.next!;\n        }\n        return true;\n        function reverse(node: ListNode): [ListNode, ListNode] {\n          if (node.next === null) return [node, node];\n          const [first, last] = reverse(node.next);\n          last.next = node;\n          node.next = null;\n          return [first, node];\n        }\n      }"
        },
        {
            "date": "2021-09-22",
            "time": 152,
            "memory": 60.7,
            "script": "javascript",
            "desc": "反转后半部分，遍历反转。",
            "code": "function isPalindrome(head: ListNode): boolean {\n        let slow = head;\n        let fast = head.next;\n        if (!fast) return true;\n        while (fast && fast.next) {\n          slow = slow.next!;\n          fast = fast.next.next;\n        }\n        fast = reverse(slow.next!);\n        slow = head;\n        while (fast) {\n          if (slow.val !== fast.val) return false;\n          slow = slow.next!;\n          fast = fast.next!;\n        }\n        return true;\n        function reverse(node: ListNode): ListNode {\n          const head = new ListNode();\n          let p: ListNode | null = node;\n          while (p) {\n            const oldNext = head.next;\n            const next = p.next;\n            head.next = p;\n            p.next = oldNext;\n            p = next;\n          }\n          return head.next!;\n        }\n      }"
        },
        {
            "date": "2021-11-19",
            "time": 164,
            "memory": 40.8,
            "script": "c",
            "desc": "储存数组再遍历。",
            "code": "bool isPalindrome(struct ListNode* head){\n    int nums[100000] = {0}, len = 0;\n    struct ListNode *p = head;\n    while(p){\n        nums[len++] = p->val;\n        p = p->next;\n    }\n    for (int i = 0; i < len / 2; i++) {\n        if (nums[i] != nums[len - 1 - i]) return 0;\n    }\n    return 1;\n}"
        }
    ],
    "tagList": ["栈", "递归", "链表", "双指针"],
    "level": "Easy"
}
