{
    "id": "236",
    "name": "236.二叉树的最近公共祖先",
    "url": "https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree",
    "desc": "给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。",
    "solutions": [
        {
            "date": "2020-05-10",
            "time": 84,
            "memory": 42.5,
            "script": "javascript",
            "desc": "通过 js 特性给每个节点添加 parent 属性，遍历是否有相同父节点进行判断。",
            "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {TreeNode}\n */\nvar lowestCommonAncestor = function (root, p, q) {\n  function treeNodeInorder(node) {\n    if (node.left !== null) {\n      node.left.parent = node;\n      treeNodeInorder(node.left);\n    }\n    if (node.right !== null) {\n      node.right.parent = node;\n      treeNodeInorder(node.right);\n    }\n  }\n  treeNodeInorder(root);\n  root.parent = root;\n  let temp = p;\n  const queueP = [temp];\n  while (temp.parent !== root) {\n    queueP.push(temp.parent);\n    temp = temp.parent;\n  }\n  queueP.push(root);\n  temp = q;\n  const queueQ = [temp];\n  while (temp.parent !== root) {\n    queueQ.push(temp.parent);\n    temp = temp.parent;\n  }\n  queueQ.push(root);\n  for (const node of queueP) {\n    if (queueQ.includes(node)) return node;\n  }\n  return root;\n};"
        },
        {
            "script": "python",
            "time": 56,
            "memory": 21.32,
            "desc": "遍历记录父亲和level。",
            "code": "class Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        map = {}\n        plevel = qlevel = 0\n        def dfs(node: Optional[TreeNode], level = 0):\n            nonlocal plevel, qlevel\n            if not node: return\n            if node == p: plevel = level\n            if node == q: qlevel = level\n            if node.left:\n                map[node.left] = node\n                dfs(node.left, level + 1)\n            if node.right:\n                map[node.right] = node\n                dfs(node.right, level + 1)\n        dfs(root)\n        if plevel > qlevel:\n            plevel, qlevel = qlevel, plevel\n            p, q = q, p\n        while qlevel > plevel:\n            print(q, qlevel)\n            qlevel -= 1\n            q = map[q]\n        while p != q:\n            p, q = map[p], map[q]\n        return p",
            "date": "2024-02-09"
        }
    ],
    "tagList": [
        "树",
        "深度优先搜索",
        "二叉树"
    ],
    "level": "Medium"
}