{
    "id": "295",
    "name": "295.数据流的中位数",
    "url": "https://leetcode.cn/problems/find-median-from-data-stream",
    "desc": "中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。",
    "solutions": [
        {
            "date": "2021-04-10",
            "time": 272,
            "memory": 58.5,
            "script": "typescript",
            "desc": "构建左侧大顶堆和右侧小顶堆，中间值为左侧堆最大值和右侧堆最小值的比较。",
            "code": "class Heap<T> {\n  private arr: T[] = [];\n  get isEmpty() {\n    return this.size === 0;\n  }\n  get size() {\n    return this.arr.length;\n  }\n  get top() {\n    return this.arr[0];\n  }\n  constructor(private compare: (t1: T, t2: T) => number) {}\n  add(num: T): void {\n    this.arr.push(num);\n    this.shiftUp(this.size - 1);\n  }\n  remove(): T {\n    const num = this.arr.shift()!;\n    if (this.size) {\n      this.arr.unshift(this.arr.pop()!);\n      this.shiftDown(0);\n    }\n    return num;\n  }\n  private shiftUp(index: number): void {\n    if (index === 0) return;\n    const parentIndex = (index - 1) >> 1;\n    if (this.compare(this.arr[index], this.arr[parentIndex]) > 0) {\n      [this.arr[index], this.arr[parentIndex]] = [this.arr[parentIndex], this.arr[index]];\n      this.shiftUp(parentIndex);\n    }\n  }\n  private shiftDown(index: number): void {\n    let childrenIndex = index * 2 + 1;\n    if (childrenIndex > this.size - 1) return;\n    if (\n      childrenIndex + 1 <= this.size - 1 &&\n      this.compare(this.arr[childrenIndex + 1], this.arr[childrenIndex]) > 0\n    ) {\n      childrenIndex++;\n    }\n    if (this.compare(this.arr[childrenIndex], this.arr[index]) > 0) {\n      [this.arr[childrenIndex], this.arr[index]] = [this.arr[index], this.arr[childrenIndex]];\n      this.shiftDown(childrenIndex);\n    }\n  }\n}\n\nclass MedianFinder {\n  private leftHeap = new Heap<number>((num1: number, num2: number) => num1 - num2);\n  private rightHeap = new Heap<number>((num1: number, num2: number) => num2 - num1);\n  get size() {\n    return this.leftHeap.size + this.rightHeap.size;\n  }\n  addNum(num: number): void {\n    if (!this.leftHeap.size || this.leftHeap.top >= num) {\n      this.leftHeap.add(num);\n    } else {\n      this.rightHeap.add(num);\n    }\n    if (this.leftHeap.size === this.rightHeap.size + 2) {\n      this.rightHeap.add(this.leftHeap.remove());\n    } else if (this.leftHeap.size === this.rightHeap.size - 1) {\n      this.leftHeap.add(this.rightHeap.remove());\n    }\n  }\n  findMedian(): number {\n    if (this.size % 2 === 0) {\n      return (this.leftHeap.top + this.rightHeap.top) / 2;\n    } else {\n      return this.leftHeap.top;\n    }\n  }\n}"
        },
        {
            "date": "2021-08-27",
            "time": 1648,
            "memory": 68.1,
            "script": "typescript",
            "desc": "构建左侧大顶堆，右侧小顶堆，快速取中值。",
            "code": "class Heap<T> {\n  private arr: T[] = [];\n  get isEmpty() {\n    return this.size === 0;\n  }\n  get size() {\n    return this.arr.length;\n  }\n  get top() {\n    return this.arr[0];\n  }\n  constructor(private compare: (t1: T, t2: T) => number) {}\n  add(num: T): void {\n    this.arr.push(num);\n    this.shiftUp(this.size - 1);\n  }\n  remove(): T {\n    const num = this.arr.shift()!;\n    if (this.size) {\n      this.arr.unshift(this.arr.pop()!);\n      this.shiftDown(0);\n    }\n    return num;\n  }\n  private shiftUp(index: number): void {\n    if (index === 0) return;\n    const parentIndex = (index - 1) >> 1;\n    if (this.compare(this.arr[index], this.arr[parentIndex]) > 0) {\n      [this.arr[index], this.arr[parentIndex]] = [this.arr[parentIndex], this.arr[index]];\n      this.shiftUp(parentIndex);\n    }\n  }\n  private shiftDown(index: number): void {\n    let childrenIndex = index * 2 + 1;\n    if (childrenIndex > this.size - 1) return;\n    if (\n      childrenIndex + 1 <= this.size - 1 &&\n      this.compare(this.arr[childrenIndex + 1], this.arr[childrenIndex]) > 0\n    ) {\n      childrenIndex++;\n    }\n    if (this.compare(this.arr[childrenIndex], this.arr[index]) > 0) {\n      [this.arr[childrenIndex], this.arr[index]] = [this.arr[index], this.arr[childrenIndex]];\n      this.shiftDown(childrenIndex);\n    }\n  }\n}\nclass MedianFinder {\n  left = new Heap<number>((t1, t2) => t1 - t2);\n  right = new Heap<number>((t1, t2) => t2 - t1);\n  get cnt() {\n    return this.left.size + this.right.size;\n  }\n  addNum(num: number): void {\n    if (this.left.size === 0 && this.right.size === 0) {\n      this.left.add(num);\n    } else if (this.left.top < num) {\n      this.right.add(num);\n    } else {\n      this.left.add(num);\n    }\n    if (this.right.size + 1 > this.left.size) this.left.add(this.right.remove());\n    if (this.left.size - 1 > this.right.size) this.right.add(this.left.remove());\n  }\n  findMedian(): number {\n    return this.cnt % 2 === 0 ? (this.left.top + this.right.top) / 2 : this.left.top;\n  }\n}"
        },
        {
            "date": "2021-11-28",
            "time": 376,
            "memory": 83,
            "script": "c",
            "desc": "堆。",
            "code": "#define swap(a, b)              \\\n    {                           \\\n        __typeof(a) __temp = a; \\\n        a = b;                  \\\n        b = __temp;             \\\n    }\n\ntypedef struct\n{\n    int size, len, *data;\n    int(*comp)(int, int);\n} Heap;\nHeap *heap_create(int len, int (*comp)(int, int))\n{\n    Heap *h = (Heap *)malloc(sizeof(Heap));\n    h->comp = comp;\n    h->len = len;\n    h->size = 0;\n    h->data = (int *)malloc(sizeof(int) * len);\n    return h;\n}\nvoid heap_free(Heap *h)\n{\n    if (!h)\n        return;\n    free(h->data);\n    free(h);\n}\nvoid heap_shift_up(Heap *h, int idx)\n{\n    while (idx)\n    {\n        int p = (idx - 1) / 2;\n        if (h->comp(h->data[idx], h->data[p]) > 0)\n        {\n            swap(h->data[p], h->data[idx]);\n            idx = p;\n        }\n        else\n            break;\n    }\n}\nvoid heap_shift_down(Heap *h, int idx)\n{\n    while (idx * 2 + 1 < h->size)\n    {\n        int child = idx;\n        if (h->comp(h->data[child], h->data[idx * 2 + 1]) < 0)\n        {\n            child = idx * 2 + 1;\n        }\n        if (\n            idx * 2 + 2 < h->len && h->comp(h->data[child], h->data[idx * 2 + 2]) < 0)\n        {\n            child = idx * 2 + 2;\n        }\n        if (child == idx)\n            break;\n        swap(h->data[idx], h->data[child]);\n        idx = child;\n    }\n}\nint heap_remove(Heap *h)\n{\n    if (!h || h->size == 0)\n        return -1;\n    int val = h->data[0];\n    h->data[0] = h->data[--h->size];\n    heap_shift_down(h, 0);\n    return val;\n}\nint heap_add(Heap *h, int val)\n{\n    if (!h || h->len == h->size)\n        return 0;\n    h->data[h->size] = val;\n    heap_shift_up(h, h->size++);\n    return val;\n}\nint heap_top(Heap *h)\n{\n    if (!h || h->size == 0)\n        return -1;\n    return h->data[0];\n}\nvoid heap_show(Heap *h)\n{\n#ifdef DEBUG\n    printf(\"Heap : [\");\n    for (int i = 0; i < h->len; i++)\n    {\n        if (!h->data[i])\n            continue;\n        i != 0 && printf(\",\");\n        printf(\"%d\", h->data[i]);\n    }\n    printf(\"]\\n\");\n#endif\n}\n\nint comp1(int a, int b)\n{\n    return a - b;\n}\nint comp2(int a, int b)\n{\n    return b- a;\n}\n\ntypedef struct {\n    Heap *h1, *h2;\n} MedianFinder;\n\n#define MAX 200000\nMedianFinder* medianFinderCreate() {\n    MedianFinder *o = (MedianFinder *)malloc(sizeof(MedianFinder));\n    o->h1 = heap_create(MAX, comp1);\n    o->h2 = heap_create(MAX, comp2);\n    return o;\n}\n\nvoid medianFinderAddNum(MedianFinder* obj, int num) {\n    if(obj->h1->size == 0 || num <= heap_top(obj->h1)) {\n        heap_add(obj->h1, num);\n        if (obj->h1->size > obj->h2->size + 1) heap_add(obj->h2, heap_remove(obj->h1));\n    }\n    else {\n        heap_add(obj->h2, num);\n        if (obj->h2->size > obj->h1->size) heap_add(obj->h1, heap_remove(obj->h2));\n    }\n}\n\ndouble medianFinderFindMedian(MedianFinder* obj) {\n    if((obj->h1->size + obj->h2->size) & 1) return heap_top(obj->h1);\n    else return (heap_top(obj->h1) + heap_top(obj->h2)) / 2.0;\n}\n\nvoid medianFinderFree(MedianFinder* obj) {\n    heap_free(obj->h1);\n    heap_free(obj->h2);\n    free(obj);\n}"
        }
    ],
    "tagList": ["设计", "双指针", "数据流", "排序", "堆（优先队列）"],
    "level": "Hard"
}
