{
    "id": "1129",
    "name": "1048.最长字符串链",
    "url": "https://leetcode.cn/problems/longest-string-chain",
    "difficulty": "中等",
    "tag": ["数组", "哈希表", "双指针", "字符串", "动态规划"],
    "desc": "从给定单词列表 words 中选择单词组成词链，返回 词链的 最长可能长度 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 96,
            "memory": 12.8,
            "desc": "遍历。",
            "code": "class Solution {\npublic:\n    bool cmp(string &s1, string &s2, int i1 = 0, int i2 = 0, int err = 1) {\n        if (i1 == s1.size()) return i2 + err == s2.size();\n        if (i2 == s2.size()) return i1 + err == s1.size();\n        if (s1[i1] == s2[i2]) return cmp(s1, s2, i1 + 1, i2 + 1, err);\n        if (err == 0) return false;\n        return cmp(s1, s2, i1 + 1, i2, err - 1) || cmp(s1, s2, i1, i2 + 1, err - 1);\n    }\n    int longestStrChain(vector<string>& words) {\n        sort(words.begin(), words.end(), [&](auto &a, auto &b) { return a.size() < b.size(); });\n        int n = words.size(), res = 1;\n        vector<int> dp(n, 1);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (words[j].size() == words[i].size()) break;\n                if (cmp(words[i], words[j])) dp[i] = max(dp[i], dp[j] + 1);\n            }\n            res = max(res, dp[i]);\n        }\n        return res;\n    }\n};",
            "date": 1682524800000
        },
        {
            "script": "python",
            "time": 1836,
            "memory": 15.2,
            "desc": "同上。",
            "code": "def cmp(s1: str, s2: str, i1: int, i2: int, err: int):\n    if i1 == len(s1):\n        return i2 + err == len(s2)\n    if i2 == len(s2):\n        return i1 + err == len(s1)\n    if s1[i1] == s2[i2]:\n        return cmp(s1, s2, i1 + 1, i2 + 1, err)\n    if err == 0:\n        return False\n    return cmp(s1, s2, i1 + 1, i2, err - 1) or cmp(s1, s2, i1, i2 + 1, err - 1)\n\n\nclass Solution:\n    def longestStrChain(self, words: List[str]) -> int:\n        words.sort(key=lambda v: len(v))\n        n = len(words)\n        res = 1\n        dp = [1] * n\n        for i in range(n):\n            for j in range(i):\n                if len(words[j]) == len(words[i]):\n                    break\n                if cmp(words[i], words[j], 0, 0, 1):\n                    dp[i] = max(dp[i], dp[j] + 1)\n            res = max(res, dp[i])\n        return res",
            "date": 1682524800000
        },
        {
            "script": "rust",
            "time": 28,
            "memory": 2.1,
            "desc": "同上。",
            "code": "fn cmp(s1: &[u8], s2: &[u8], i1: usize, i2: usize, err: usize) -> bool {\n    if i1 == s1.len() {\n        i2 + err == s2.len()\n    } else if i2 == s2.len() {\n        i1 + err == s1.len()\n    } else if s1[i1] == s2[i2] {\n        cmp(s1, s2, i1 + 1, i2 + 1, err)\n    } else if err == 0 {\n        false\n    } else {\n        cmp(s1, s2, i1 + 1, i2, err - 1) || cmp(s1, s2, i1, i2 + 1, err - 1)\n    }\n}\nimpl Solution {\n    pub fn longest_str_chain(mut words: Vec<String>) -> i32 {\n        words.sort_by_key(|v| v.len());\n        let n = words.len();\n        let mut res = 1;\n        let mut dp = vec![1; n];\n        for i in 0..n {\n            for j in 0..i {\n                if words[i].len() == words[j].len() {\n                    break;\n                }\n                let s1 = words[i].as_bytes();\n                if cmp(words[i].as_bytes(), words[j].as_bytes(), 0, 0, 1) {\n                    dp[i] = dp[i].max(dp[j] + 1);\n                }\n            }\n            res = res.max(dp[i]);\n        }\n        res as i32\n    }\n}",
            "date": 1682524800000
        }
    ]
}
