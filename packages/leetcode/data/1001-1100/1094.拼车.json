{
    "id": "1184",
    "name": "1094.拼车",
    "url": "https://leetcode.cn/problems/car-pooling",
    "desc": "当且仅当你可以在所有给定的行程中接送所有乘客时，返回 true，否则请返回 false。",
    "solutions": [
        {
            "script": "python",
            "time": 40,
            "memory": 16.64,
            "desc": "排序后优先队列计数。",
            "code": "class Solution:\n    def carPooling(self, trips: List[List[int]], capacity: int) -> bool:\n        trips.sort(key = lambda o: (o[1], o[2]))\n        size = 0\n        q = []\n        for [num, f, t] in trips:\n            while q and q[0][0] <= f: size -= heappop(q)[1]\n            if size + num > capacity: return False\n            heappush(q, (t, num))\n            size += num\n        return True",
            "date": "2023-12-02"
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 2.07,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn car_pooling(mut trips: Vec<Vec<i32>>, capacity: i32) -> bool {\n        trips.sort_by_key(|o| o[1]);\n        let mut size = 0;\n        let mut q = std::collections::BinaryHeap::<(i32, i32)>::new();\n        for item in trips {\n            let (num, f, t) = (item[0], item[1], item[2]);\n            while q.len() > 0 && -(*q.peek().unwrap()).0 <= f {\n                size -= q.pop().unwrap().1;\n            }\n            if size + num > capacity {\n                return false;\n            }\n            q.push((-t, num));\n            size += num;\n        }\n        true\n    }\n}",
            "date": "2023-12-02"
        }
    ],
    "tagList": ["数组", "前缀和", "排序", "模拟", "堆（优先队列）"],
    "level": "Medium"
}
