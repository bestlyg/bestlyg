{
    "id": "1080",
    "name": "1023.驼峰式匹配",
    "url": "https://leetcode.cn/problems/camelcase-matching",
    "difficulty": "中等",
    "tag": [
        "字典树",
        "数组",
        "双指针",
        "字符串",
        "字符串匹配"
    ],
    "desc": "如果我们可以将小写字母插入模式串 pattern 得到待查询项 query，那么待查询项与给定模式串匹配。",
    "solutions": [
        {
            "script": "cpp",
            "time": 4,
            "memory": 6.9,
            "desc": "遍历。",
            "code": "class Solution {\npublic:\n    vector<bool> camelMatch(vector<string>& queries, string pattern) {\n        auto check = [&](string &s) {\n            int pidx = 0;\n            for (int i = 0; i < s.size(); i++) {\n                if (pidx < pattern.size() && s[i] == pattern[pidx]) pidx++;\n                else if (isupper(s[i])) return false;\n            }\n            return pidx == pattern.size();\n        };\n        vector<bool> res;\n        for (auto &q : queries) res.push_back(check(q));\n        return res;\n    }\n};",
            "date": 1681401600000
        },
        {
            "script": "python",
            "time": 36,
            "memory": 14.8,
            "desc": "同上。",
            "code": "class Solution:\n    def camelMatch(self, queries: List[str], pattern: str) -> List[bool]:\n        def check(s: str):\n            pidx = 0\n            for c in s:\n                if pidx < len(pattern) and c == pattern[pidx]:\n                    pidx += 1\n                elif c.isupper():\n                    return False\n            return pidx == len(pattern)\n        return [check(s) for s in queries]",
            "date": 1681401600000
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 2,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn camel_match(queries: Vec<String>, pattern: String) -> Vec<bool> {\n        let pattern = pattern.chars().collect::<Vec<_>>();\n        queries\n            .into_iter()\n            .map(|s| {\n                let mut pidx = 0;\n                for c in s.chars() {\n                    if pidx < pattern.len() && c == pattern[pidx] {\n                        pidx += 1\n                    } else if c.is_uppercase() {\n                        return false;\n                    }\n                }\n                pidx == pattern.len()\n            })\n            .collect::<Vec<_>>()\n    }\n}",
            "date": 1681401600000
        }
    ]
}