{
    "name": "1046. 最后一块石头的重量",
    "url": "https://leetcode-cn.com/problems/last-stone-weight/",
    "difficulty": "简单",
    "tag": [
        "贪心",
        "堆"
    ],
    "desc": "有一堆石头，每块石头的重量都是正整数。最后，最多只会剩下一块石头。返回此石头的重量。如果没有石头剩下，就返回 0。",
    "solutions": [
        {
            "date": 1609257600000,
            "time": 104,
            "memory": 40,
            "script": "typescript",
            "desc": "构建堆。",
            "code": "var lastStoneWeight = function (stones) {\n  const pq = new MaxPriorityQueue();\n  for (const stone of stones) {\n    pq.enqueue('x', stone);\n  }\n  while (pq.size() > 1) {\n    const a = pq.dequeue()['priority'];\n    const b = pq.dequeue()['priority'];\n    if (a > b) {\n      pq.enqueue('x', a - b);\n    }\n  }\n  return pq.isEmpty() ? 0 : pq.dequeue()['priority'];\n};"
        },
        {
            "date": 1618070400000,
            "time": 92,
            "memory": 39.1,
            "script": "typescript",
            "desc": "构建堆。",
            "code": "class Heap<T = number> {\n  private arr: T[] = [];\n  get isEmpty() {\n    return this.size === 0;\n  }\n  get size() {\n    return this.arr.length;\n  }\n  get top() {\n    return this.arr[0];\n  }\n  constructor(private compare: (t1: T, t2: T) => number) {}\n  add(num: T): void {\n    this.arr.push(num);\n    this.shiftUp(this.size - 1);\n  }\n  remove(): T {\n    const num = this.arr.shift()!;\n    if (this.size) {\n      this.arr.unshift(this.arr.pop()!);\n      this.shiftDown(0);\n    }\n    return num;\n  }\n  private shiftUp(index: number): void {\n    if (index === 0) return;\n    const parentIndex = (index - 1) >> 1;\n    if (this.compare(this.arr[index], this.arr[parentIndex]) > 0) {\n      [this.arr[index], this.arr[parentIndex]] = [this.arr[parentIndex], this.arr[index]];\n      this.shiftUp(parentIndex);\n    }\n  }\n  private shiftDown(index: number): void {\n    let childrenIndex = index * 2 + 1;\n    if (childrenIndex > this.size - 1) return;\n    if (\n      childrenIndex + 1 <= this.size - 1 &&\n      this.compare(this.arr[childrenIndex + 1], this.arr[childrenIndex]) > 0\n    ) {\n      childrenIndex++;\n    }\n    if (this.compare(this.arr[childrenIndex], this.arr[index]) > 0) {\n      [this.arr[childrenIndex], this.arr[index]] = [this.arr[index], this.arr[childrenIndex]];\n      this.shiftDown(childrenIndex);\n    }\n  }\n  *[Symbol.iterator](): IterableIterator<T> {\n    for (const t of this.arr) {\n      yield t;\n    }\n  }\n}\nfunction lastStoneWeight(stones: number[]): number {\n  const heap = new Heap((t1, t2) => t1 - t2);\n  stones.forEach(v => heap.add(v));\n  while (heap.size > 1) {\n    const s1 = heap.remove();\n    const s2 = heap.remove();\n    if (s1 === s2) continue;\n    heap.add(Math.abs(s1 - s2));\n  }\n  return heap.size === 0 ? 0 : heap.top;\n}"
        }
    ]
}