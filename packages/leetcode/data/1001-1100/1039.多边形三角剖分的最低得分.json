{
    "id": "1111",
    "name": "1039.多边形三角剖分的最低得分",
    "url": "https://leetcode.cn/problems/minimum-score-triangulation-of-polygon",
    "desc": "假设将多边形 剖分 为 n - 2 个三角形。对于每个三角形，该三角形的值是顶点标记的乘积，三角剖分的分数是进行三角剖分后所有 n - 2 个三角形的值之和。返回 多边形进行三角剖分后可以得到的最低分 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 56,
            "memory": 9.4,
            "desc": "dp[i][j]表示从第i个点到第j个点能组成的三角形最小值，每次从中选一个点，把这一段分成三部分进行递归。",
            "code": "class Solution {\npublic:\n    int minScoreTriangulation(vector<int>& values) {\n        unordered_map<int, unordered_map<int, int>> m;\n        int n = values.size();\n        function<int(int, int)> dfs = [&](int start, int end) {\n            if (start + 2 > end) return 0;\n            else if (start + 2 == end) return values[start] * values[start + 1] * values[end];\n            else if (m.count(start) && m[start].count(end)) return m[start][end];\n            else {\n                int s = INT_MAX;\n                for (int i = start + 1; i < end; i++) {\n                    s = min(s, values[start] * values[end] * values[i] + dfs(start, i) + dfs(i, end));\n                }\n                return m[start][end] = s;\n            }\n        };\n        return dfs(0, n - 1);\n    }\n};",
            "date": "2023-04-02"
        },
        {
            "script": "python",
            "time": 128,
            "memory": 15.5,
            "desc": "同上。",
            "code": "class Solution:\n      def minScoreTriangulation(self, values: List[int]) -> int:\n          n = len(values)\n  \n          @cache\n          def dfs(start: int, end: int):\n              if start + 2 > end:\n                  return 0\n              elif start + 2 == end:\n                  return values[start] * values[start + 1] * values[end]\n              else:\n                  s = 0x7fffffff\n                  for i in range(start + 1, end):\n                      s = min(s, values[start] * values[end] * values[i] + dfs(start, i) + dfs(i, end))\n                  return s\n          return dfs(0, n-1)",
            "date": "2023-04-02"
        },
        {
            "script": "rust",
            "time": 36,
            "memory": 2.1,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn min_score_triangulation(values: Vec<i32>) -> i32 {\n        use std::collections::HashMap;\n        let mut m: HashMap<usize, HashMap<usize, i32>> = HashMap::new();\n        let n = values.len();\n        fn dfs(\n            m: &mut HashMap<usize, HashMap<usize, i32>>,\n            values: &Vec<i32>,\n            n: usize,\n            start: usize,\n            end: usize,\n        ) -> i32 {\n            if start + 2 > end {\n                0\n            } else if start + 2 == end {\n                values[start] * values[start + 1] * values[end]\n            } else if m.contains_key(&start) && m.get(&start).unwrap().contains_key(&end) {\n                *m.get(&start).unwrap().get(&end).unwrap()\n            } else {\n                let mut s = i32::MAX;\n                for i in start + 1..end {\n                    s = s.min(\n                        values[start] * values[end] * values[i]\n                            + dfs(m, values, n, start, i)\n                            + dfs(m, values, n, i, end),\n                    )\n                }\n                m.entry(start).or_insert(HashMap::new()).insert(end, s);\n                s\n            }\n        }\n        dfs(&mut m, &values, n, 0, n - 1)\n    }\n}",
            "date": "2023-04-02"
        }
    ],
    "tagList": ["数组", "动态规划"],
    "level": "Medium"
}
