{
    "id": "1138",
    "name": "1052.爱生气的书店老板",
    "url": "https://leetcode.cn/problems/grumpy-bookstore-owner",
    "desc": "今天，书店老板有一家店打算试营业  customers.length  分钟。每分钟都有一些顾客（customers[i]）会进入书店，所有这些顾客都会在那一分钟结束后离开。请你返回这一天营业下来，最多有多少客户能够感到满意的数量。",
    "solutions": [
        {
            "date": "2021-02-23",
            "time": 104,
            "memory": 44.3,
            "script": "typescript",
            "desc": "读取范围内生气的值的最大值。",
            "code": "function maxSatisfied(customers: number[], grumpy: number[], X: number): number {\n  const _sum = (arr: number[]) => arr.reduce((total, cur) => total + cur, 0);\n  if (X === 0) return _sum(customers.filter((_, i) => grumpy[i]));\n  if (grumpy.every(v => !v)) return _sum(customers);\n  const len = customers.length;\n  let l = 0;\n  let r = X - 1;\n  let sum = _sum(customers.slice(0, X).filter((_, i) => grumpy[i]));\n  let maxSum = sum;\n  while (r < len - 1) {\n    if (grumpy[++r]) sum += customers[r];\n    if (grumpy[l]) sum -= customers[l];\n    l++;\n    maxSum = Math.max(maxSum, sum);\n  }\n  return maxSum + _sum(customers.filter((_, i) => !grumpy[i]));\n}"
        },
        {
            "script": "python",
            "time": 58,
            "memory": 18.13,
            "desc": "滑动窗口。",
            "code": "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\n        n = len(customers)\n        res = cur = sum(customers[i] for i in range(n) if not grumpy[i] or i < minutes)\n        for i in range(minutes, n):\n            if grumpy[i - minutes]: cur -= customers[i - minutes]\n            if grumpy[i]: cur += customers[i]\n            res = max(res, cur)\n        return res",
            "date": "2024-04-23"
        }
    ],
    "tagList": [
        "数组",
        "滑动窗口"
    ],
    "level": "Medium"
}