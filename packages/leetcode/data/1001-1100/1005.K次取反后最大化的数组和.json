{
    "id": "1047",
    "name": "1005.K次取反后最大化的数组和",
    "url": "https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations",
    "desc": "返回数组 可能的最大和。",
    "solutions": [
        {
            "date": "2021-12-03",
            "time": 80,
            "memory": 39.5,
            "script": "typescript",
            "desc": "排序。",
            "code": "function largestSumAfterKNegations(nums: number[], k: number): number {\n  const n = nums.length;\n  nums.sort((a, b) => a - b);\n  for (let i = 0; i < n && nums[i] < 0 && k > 0; i++) {\n    nums[i] *= -1;\n    k--;\n  }\n  const sum = nums.reduce((total, num) => total + num, 0);\n  if ((k & 1) === 0) return sum;\n  return sum - 2 * Math.min(...nums);\n}"
        },
        {
            "date": "2021-12-03",
            "time": 0,
            "memory": 5.7,
            "script": "c",
            "desc": "遍历。",
            "code": "int comp(const void *a, const void *b) {\n    return *(int *)a - *(int *)b;\n}\nint largestSumAfterKNegations(int* nums, int numsSize, int k){\n    qsort(nums, numsSize, sizeof(int), comp);\n    for (int i = 0; i < numsSize && nums[i] < 0 && k > 0; i++) {\n      nums[i] *= -1;\n      k--;\n    }\n    int sum = 0, min = 10000;\n    for (int i = 0; i < numsSize; i++) {\n        sum += nums[i];\n        if (min > nums[i]) min = nums[i];\n    }\n    if ((k & 1) == 0) return sum;\n    return sum - 2 * min;\n}"
        }
    ],
    "tagList": ["贪心", "数组", "排序"],
    "level": "Easy"
}
