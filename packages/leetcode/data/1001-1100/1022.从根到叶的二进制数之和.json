{
    "name": "1022.从根到叶的二进制数之和",
    "url": "https://leetcode-cn.com/problems/available-captures-for-rook/",
    "difficulty": "简单",
    "tag": [
        "树",
        "深度优先搜索",
        "二叉树"
    ],
    "desc": "给出一棵二叉树，其上每个结点的值都是 0 或 1 。每一条从根到叶的路径都代表一个从最高有效位开始的二进制数。返回这些数字之和。",
    "solutions": [
        {
            "date": 1648224000000,
            "time": 0,
            "memory": 16.3,
            "script": "cpp",
            "desc": "dfs。",
            "code": "class Solution {\n   public:\n    int sumRootToLeaf(TreeNode *root) {\n        int ans = 0;\n        dfs(root, ans, 0);\n        return ans;\n    }\n    void dfs(TreeNode *node, int &ans, int num) {\n        if (!node) return;\n        num = num << 1 | node->val;\n        if (!node->left && !node->right) {\n            ans += num;\n            return;\n        }\n        dfs(node->left, ans, num);\n        dfs(node->right, ans, num);\n    }\n};"
        },
        {
            "date": 1653840000000,
            "time": 4,
            "memory": 16.1,
            "script": "cpp",
            "desc": "dfs。",
            "code": "class Solution {\n   public:\n    int sumRootToLeaf(TreeNode* root) {\n        int ans = 0;\n        dfs(root, ans, 0);\n        return ans;\n    }\n    void dfs(TreeNode* node, int& ans, int val) {\n        val = val << 1 | node->val;\n        if (node->left == nullptr && node->right == nullptr) {\n            ans += val;\n            return;\n        }\n        if (node->left) dfs(node->left, ans, val);\n        if (node->right) dfs(node->right, ans, val);\n    }\n};"
        }
    ]
}