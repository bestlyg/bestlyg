{
    "id": "1055",
    "name": "1010.总持续时间可被60整除的歌曲",
    "url": "https://leetcode.cn/problems/pairs-of-songs-with-total-durations-divisible-by-60",
    "desc": "返回其总持续时间（以秒为单位）可被 60 整除的歌曲对的数量。",
    "solutions": [
        {
            "script": "cpp",
            "time": 28,
            "memory": 27.5,
            "desc": "取模后求逆元。",
            "code": "class Solution {\npublic:\n    int numPairsDivisibleBy60(vector<int>& time) {\n        unordered_map<int, int> m;\n        int res = 0;\n        for (auto &t : time) {\n            if (t % 60 == 0) res += m[0];\n            else res += m[60 - t % 60];\n            m[t % 60]++;\n        }\n        return res;\n    }\n};",
            "date": "2023-05-07"
        },
        {
            "script": "python",
            "time": 88,
            "memory": 19.6,
            "desc": "同上。",
            "code": "class Solution:\n    def numPairsDivisibleBy60(self, time: List[int]) -> int:\n        m = Counter()\n        res = 0\n        for t in time:\n            if t % 60 == 0:\n                res += m[0]\n            else:\n                res += m[60-t % 60]\n            m[t % 60] += 1\n        return res",
            "date": "2023-05-07"
        },
        {
            "script": "rust",
            "time": 12,
            "memory": 2.4,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn num_pairs_divisible_by60(time: Vec<i32>) -> i32 {\n        let mut m = std::collections::HashMap::<i32, i32>::new();\n        let mut res = 0;\n        for t in time {\n            if t % 60 == 0 {\n                res += m.get(&0).unwrap_or(&0);\n            } else {\n                res += m.get(&(60 - t % 60)).unwrap_or(&0);\n            }\n            *m.entry(t % 60).or_insert(0) += 1;\n        }\n        res\n    }\n}",
            "date": "2023-05-07"
        }
    ],
    "tagList": ["数组", "哈希表", "计数"],
    "level": "Medium"
}
