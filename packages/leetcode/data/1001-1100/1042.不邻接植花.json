{
    "name": "1042.不邻接植花",
    "url": "https://leetcode.cn/problems/flower-planting-with-no-adjacent/",
    "difficulty": "中等",
    "tag": [
        "广度优先搜索",
        "数组",
        "矩阵"
    ],
    "desc": "有 n 个花园，按从 1 到 n 标记。另有数组 paths ，其中 paths[i] = [xi, yi] 描述了花园 xi 到花园 yi 的双向路径。在每个花园中，你打算种下四种花之一。另外，所有花园 最多 有 3 条路径可以进入或离开.你需要为每个花园选择一种花，使得通过路径相连的任何两个花园中的花的种类互不相同。以数组形式返回 任一 可行的方案作为答案 answer，其中 answer[i] 为在第 (i+1) 个花园中种植的花的种类。花的种类用  1、2、3、4 表示。保证存在答案。",
    "solutions": [
        {
            "script": "cpp",
            "time": 92,
            "memory": 39,
            "desc": "直接找周围还空的位置。",
            "code": "class Solution {\npublic:\n    vector<int> gardenNoAdj(int n, vector<vector<int>>& paths) {\n        vector<vector<int>> list(n);\n        for (auto &p : paths)\n            list[p[0] - 1].push_back(p[1] - 1),\n            list[p[1] - 1].push_back(p[0] - 1);\n        vector<int> res(n, 0);\n        for (int i = 0; i < n; i++) {\n            int cache[5] = {0};\n            for (int next : list[i])\n                if (res[next] != 0) cache[res[next]] = 1;\n            for (int j = 1; j < 5; j++)\n                if (cache[j] != 1) { res[i] = j; break; }\n        }\n        return res;\n    }\n};",
            "date": 1681488000000
        },
        {
            "script": "python3",
            "time": 88,
            "memory": 20.1,
            "desc": "同上。",
            "code": "class Solution:\n    def gardenNoAdj(self, n: int, paths: List[List[int]]) -> List[int]:\n        list = [[] for _ in range(n)]\n        for [p1, p2] in paths:\n            list[p1-1].append(p2-1)\n            list[p2-1].append(p1-1)\n        res = [0] * n\n        for i in range(n):\n            cache = [False] * 5\n            for next in list[i]:\n                if res[next] != 0:\n                    cache[res[next]] = 1\n            for j in range(1, 5):\n                if cache[j] != 1:\n                    res[i] = j\n                    break\n        return res",
            "date": 1681488000000
        },
        {
            "script": "rust",
            "time": 12,
            "memory": 3.6,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn garden_no_adj(n: i32, paths: Vec<Vec<i32>>) -> Vec<i32> {\n        let n = n as usize;\n        let mut list = vec![vec![]; n];\n        for p in paths {\n            let (p0, p1) = (p[0] as usize, p[1] as usize);\n            list[p0 - 1].push(p1 - 1);\n            list[p1 - 1].push(p0 - 1);\n        }\n        let mut res = vec![0; n];\n        for i in 0..n {\n            let mut cache = [false; 5];\n            for next in list[i].iter() {\n                if res[*next] != 0 {\n                    cache[res[*next]] = true;\n                }\n            }\n            for j in 1..5 {\n                if !cache[j] {\n                    res[i] = j;\n                    break;\n                }\n            }\n        }\n        res.into_iter().map(|v| v as i32).collect()\n    }\n}",
            "date": 1681488000000
        }
    ]
}