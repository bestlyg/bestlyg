{
    "id": "1183",
    "name": "1093.大样本统计",
    "url": "https://leetcode.cn/problems/statistics-from-a-large-sample",
    "difficulty": "中等",
    "tag": [
        "数组",
        "数学",
        "概率与统计"
    ],
    "desc": "以浮点数数组的形式返回样本的统计信息 [minimum, maximum, mean, median, mode] 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 4,
            "memory": 8,
            "desc": "遍历。",
            "code": "class Solution {\npublic:\n    typedef long long ll;\n    vector<double> sampleStats(vector<int>& count) {\n        ll n = count.size(), sum = 0, minimum = n - 1, maximum = 0, cnt = 0, mode = 0, mode_cnt = 0;\n        for (ll i = 0; i < n; i++) {\n            sum += count[i] * i;\n            cnt += count[i];\n            if (count[i]) {\n                minimum = min(minimum, i);\n                maximum = max(maximum, i);\n            }\n            if (count[i] > mode_cnt) {\n                mode = i;\n                mode_cnt = count[i];\n            }\n        }\n        double mean = 1.0 * sum / cnt, num1 = -1, num2 = -1;\n        ll imid1 = cnt / 2, imid2 = (cnt - 1) / 2;\n        for (ll i = 0; i < n && (num1 == -1 || num2 == -1); i++) {\n            ll c = count[i];\n            if (num1 == -1 && imid1 - c < 0) num1 = i;\n            if (num2 == -1 && imid2 - c < 0) num2 = i;\n            imid1 -= c;\n            imid2 -= c;\n        }\n        return vector<double>{ (double)minimum, (double)maximum, mean, (num1 + num2) / 2, (double)mode};\n    }\n};",
            "date": 1685116800000
        },
        {
            "script": "python",
            "time": 44,
            "memory": 16.1,
            "desc": "同上。",
            "code": "class Solution:\n    def sampleStats(self, count: List[int]) -> List[float]:\n        n = len(count)\n        minimum = n - 1\n        maximum = sum = cnt = mode = mode_cnt = 0\n        for i in range(n):\n            sum += count[i] * i\n            cnt += count[i]\n            if count[i]:\n                minimum = min(minimum, i)\n                maximum = max(maximum, i)\n            if count[i] > mode_cnt:\n                mode = i\n                mode_cnt = count[i]\n        mean = sum / cnt\n        num1 = num2 = -1\n        imid1 = cnt // 2\n        imid2 = (cnt - 1) // 2\n        icur = 0\n        for i in range(n):\n            c = count[i]\n            if num1 == -1 and imid1 - c < 0:\n                num1 = i\n            if num2 == -1 and imid2 - c < 0:\n                num2 = i\n            imid1 -= c\n            imid2 -= c\n        return [minimum, maximum, mean, (num1+num2)/2, mode]\n",
            "date": 1685116800000
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 2,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn sample_stats(count: Vec<i32>) -> Vec<f64> {\n        use std::cmp::{max, min};\n        let (n, mut sum, mut minimum, mut maximum, mut cnt, mut mode, mut mode_cnt) =\n            (count.len(), 0usize, 0usize, 0usize, 0usize, 0usize, 0usize);\n        minimum = n - 1;\n        for i in 0..n {\n            let c = count[i] as usize;\n            sum += c * i;\n            cnt += c;\n            if c != 0 {\n                minimum = min(minimum, i);\n                maximum = max(maximum, i);\n            }\n            if c > mode_cnt {\n                mode = i;\n                mode_cnt = c;\n            }\n        }\n        let mean = (sum as f64) / (cnt as f64);\n        let (mut num1, mut num2) = (-1f64, -1f64);\n        let (mut imid1, mut imid2) = ((cnt as f64) / 2.0, ((cnt - 1) as f64) / 2.0);\n        for i in 0..n {\n            let c = count[i] as f64;\n            if num1 == -1.0 && imid1 - c < 0.0 {\n                num1 = i as f64;\n            }\n            if num2 == -1.0 && imid2 - c < 0.0 {\n                num2 = i as f64;\n            }\n            imid1 -= c;\n            imid2 -= c;\n        }\n        return vec![\n            minimum as f64,\n            maximum as f64,\n            mean,\n            (num1 + num2) / 2.0,\n            mode as f64,\n        ];\n    }\n}",
            "date": 1685116800000
        }
    ]
}