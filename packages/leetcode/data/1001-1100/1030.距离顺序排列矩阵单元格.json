{
    "name": "1030.距离顺序排列矩阵单元格",
    "url": "https://leetcode-cn.com/problems/matrix-cells-in-distance-order/",
    "difficulty": "简单",
    "tag": [
        "排序"
    ],
    "desc": "给出 R 行 C 列的矩阵，其中的单元格的整数坐标为 (r, c)，满足 0 <= r < R 且 0 <= c < C。另外，我们在该矩阵中给出了一个坐标为  (r0, c0) 的单元格。返回矩阵中的所有单元格的坐标，并按到 (r0, c0) 的距离从最小到最大的顺序排，其中，两单元格(r1, c1) 和 (r2, c2) 之间的距离是曼哈顿距离，|r1 - r2| + |c1 - c2|。（你可以按任何满足此条件的顺序返回答案。）。",
    "solutions": [
        {
            "date": 1605542400000,
            "time": 284,
            "memory": 54,
            "script": "typescript",
            "desc": "遍历所有情况再进行排序。",
            "code": "function allCellsDistOrder(R: number, C: number, r0: number, c0: number): number[][] {\n  const cache: Record<string, number> = {};\n  const format = (r: number, c: number) => `${r}:${c}`;\n  const comp = (r: number, c: number) => {\n    const name = format(r, c);\n    if (cache[name]) return cache[name];\n    else {\n      const num = Math.abs(r - r0) + Math.abs(c - c0);\n      cache[name] = num;\n      return num;\n    }\n  };\n  const ans: number[][] = [];\n  for (let i = 0; i < R; i++) {\n    for (let j = 0; j < C; j++) {\n      ans.push([i, j]);\n    }\n  }\n  return ans.sort(([r1, c1], [r2, c2]) => comp(r1, c1) - comp(r2, c2));\n}"
        }
    ]
}