{
    "id": "1057",
    "name": "1012.至少有1位重复的数字",
    "url": "https://leetcode.cn/problems/numbers-with-repeated-digits",
    "desc": "给定正整数 n，返回在 [1, n] 范围内具有 至少 1 位 重复数字的正整数的个数。",
    "solutions": [
        {
            "script": "cpp",
            "time": 72,
            "memory": 14.3,
            "desc": "数位dp。",
            "code": "class Solution {\npublic:\n    unordered_map<int, unordered_map<int, int>> m;\n    int dfs(string &sn, int idx, int mask, bool limit, bool empty) {\n        if (idx == sn.size()) return empty ? 0 : 1;\n        if (!limit && !empty && m[idx].count(mask)) return m[idx][mask];\n        int res = 0;\n        if (empty) res += dfs(sn, idx + 1, mask, false, true);\n        for (int j = empty ? 1 : 0, nmax = limit ? sn[idx] - '0' : 9; j <= nmax; j++)\n            if ((mask & (1 << j)) == 0) res += dfs(sn, idx + 1, mask | (1 << j), limit && j == nmax, false);\n        return m[idx][mask] = res;\n    };\n    int numDupDigitsAtMostN(int n) {\n        string sn = to_string(n);\n        return n - dfs(sn, 0, 0, true, true);\n    }\n};",
            "date": "2023-03-20"
        },
        {
            "script": "python",
            "time": 280,
            "memory": 19.4,
            "desc": "同上。",
            "code": "class Solution:\n    def numDupDigitsAtMostN(self, n: int) -> int:\n        sn = str(n)\n  \n        @cache\n        def dfs(idx: int, mask: int, limit: bool, empty: bool):\n            if idx == len(sn):\n                return 0 if empty else 1\n            res = 0\n            if empty:\n                res += dfs(idx+1, mask, False, True)\n            nmax = int(sn[idx]) if limit else 9\n            for j in range(1 if empty else 0, nmax+1):\n                if (mask & (1 << j)) == 0:\n                    res += dfs(idx+1, mask | (1 << j),\n                               limit and j == nmax, False)\n            return res\n        return n - dfs(0, 0, True, True)",
            "date": "2023-03-20"
        },
        {
            "script": "rust",
            "time": 8,
            "memory": 1.9,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn num_dup_digits_at_most_n(n: i32) -> i32 {\n        let sn = format!(\"{}\", n).chars().collect::<Vec<char>>();\n        let mut m = vec![vec![-1; 1 << 10]; sn.len()];\n        fn dfs(\n            sn: &Vec<char>,\n            m: &mut Vec<Vec<i32>>,\n            idx: usize,\n            mask: usize,\n            limit: bool,\n            empty: bool,\n        ) -> i32 {\n            if idx == sn.len() {\n                if empty {\n                    0\n                } else {\n                    1\n                }\n            } else if !limit && !empty && m[idx][mask] != -1 {\n                m[idx][mask]\n            } else {\n                let mut res = if empty {\n                    dfs(sn, m, idx + 1, mask, false, true)\n                } else {\n                    0\n                };\n                let nmax = if limit {\n                    sn[idx] as usize - '0' as usize\n                } else {\n                    9\n                };\n                for j in (if empty { 1 } else { 0 })..=nmax {\n                    if (mask & (1 << j)) == 0 {\n                        res += dfs(sn, m, idx + 1, mask | (1 << j), limit && j == nmax, false);\n                    }\n                }\n                m[idx][mask] = res;\n                res\n            }\n        }\n        return n - dfs(&sn, &mut m, 0, 0, true, true);\n    }\n}",
            "date": "2023-03-20"
        }
    ],
    "tagList": ["数学", "动态规划"],
    "level": "Hard"
}
