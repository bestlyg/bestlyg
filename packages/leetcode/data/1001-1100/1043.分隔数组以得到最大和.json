{
    "id": "1121",
    "name": "1043.分隔数组以得到最大和",
    "url": "https://leetcode.cn/problems/partition-array-for-maximum-sum",
    "difficulty": "中等",
    "tag": [
        "数组",
        "动态规划"
    ],
    "desc": "给你一个整数数组 arr，请你将该数组分隔为长度 最多 为 k 的一些（连续）子数组。分隔完成后，每个子数组的中的所有值都会变为该子数组中的最大值。",
    "solutions": [
        {
            "script": "cpp",
            "time": 4,
            "memory": 8.3,
            "desc": "dp[i]表示前i个元素能分割成的最大值。",
            "code": "class Solution {\n    public:\n        int maxSumAfterPartitioning(vector<int>& arr, int k) {\n            int n = arr.size();\n            vector<int> dp(n + 1, 0);\n            int nmax = arr[0];\n            for (int i = 1; i <= k; i++) {\n                nmax = max(nmax, arr[i - 1]);\n                dp[i] = nmax * i;\n            }\n            for (int i = k + 1; i <= n; i++) {\n                nmax = arr[i - 1];\n                for (int j = i; i - j + 1 <= k; j--) {\n                    nmax = max(nmax, arr[j - 1]);\n                    dp[i] = max(dp[i], dp[j - 1] + nmax * (i - j + 1));\n                }   \n            }\n            return dp[n];\n        }\n    };",
            "date": 1681833600000
        },
        {
            "script": "python",
            "time": 212,
            "memory": 15.1,
            "desc": "同上。",
            "code": "class Solution:\n    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        dp = [0] * (n+1)\n        nmax = arr[0]\n        for i in range(1, k+1):\n            nmax = max(nmax, arr[i-1])\n            dp[i] = nmax * i\n        for i in range(k+1, n+1):\n            nmax = arr[i-1]\n            j = i\n            while i-j+1 <= k:\n                nmax = max(nmax, arr[j-1])\n                dp[i] = max(dp[i], dp[j-1]+nmax*(i-j+1))\n                j -= 1\n        return dp[n]",
            "date": 1681833600000
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 2,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn max_sum_after_partitioning(arr: Vec<i32>, k: i32) -> i32 {\n        use std::cmp::max;\n        let n = arr.len();\n        let k = k as usize;\n        let mut dp = vec![0; n + 1];\n        let mut nmax = arr[0];\n        for i in 1..=k {\n            nmax = max(nmax, arr[i - 1]);\n            dp[i] = nmax * (i as i32);\n        }\n        for i in k + 1..=n {\n            nmax = arr[i - 1];\n            let mut j = i;\n            while i - j + 1 <= k {\n                nmax = max(nmax, arr[j - 1]);\n                dp[i] = max(dp[i], dp[j - 1] + nmax * (i - j + 1) as i32);\n                j -= 1\n            }\n        }\n        dp[n]\n    }\n}",
            "date": 1681833600000
        }
    ]
}