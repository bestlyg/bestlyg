{
    "name": "1590.使数组和能被P整除",
    "url": "https://leetcode.cn/problems/make-sum-divisible-by-p//",
    "difficulty": "中等",
    "tag": [
        "广度优先搜索",
        "数组",
        "矩阵"
    ],
    "desc": "给你一个正整数数组 nums，请你移除 最短 子数组（可以为 空），使得剩余元素的 和 能被 p 整除。 不允许 将整个数组都移除。请你返回你需要移除的最短子数组的长度，如果无法满足题目要求，返回 -1 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 152,
            "memory": 65,
            "desc": "前缀和，如果sum%p=x, 那么(f[i+1]-f[j])%p=x才可以求得值。",
            "code": "class Solution {\npublic:\n    int minSubarray(vector<int>& nums, int p) {\n        unordered_map<int, int> m;\n        m[0] = -1;\n        int n = nums.size(), cur = 0, res = n, sum = 0;\n        for (auto &num : nums) sum = (sum + num) % p;\n        if (sum == 0) return 0;\n        for (int i = 0; i < n; i++) {\n            cur = (cur + nums[i]) % p;\n            if (m.count((cur - sum + p) % p)) res = min(res, i - m[(cur - sum + p) % p]);\n            m[cur] = i;\n        }\n        return res == n ? -1 : res;\n    }\n};",
            "date": 1678377600000
        },
        {
            "script": "python3",
            "time": 128,
            "memory": 35.5,
            "desc": "同上。",
            "code": "class Solution:\n    def minSubarray(self, nums: List[int], p: int) -> int:\n        m = dict()\n        m[0] = -1\n        n, cur, res, sums = len(nums), 0, 0x3f3f3f3f, sum(nums) % p\n        if sums == 0:\n            return 0\n        for i in range(n):\n            cur = (cur + nums[i]) % p\n            if (cur - sums + p) % p in m:\n                res = min(res, i - m[(cur - sums + p) % p])\n            m[cur] = i\n        return res if res != n else -1",
            "date": 1678377600000
        },
        {
            "script": "rust",
            "time": 28,
            "memory": 4.7,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn min_subarray(nums: Vec<i32>, p: i32) -> i32 {\n        let mut m = std::collections::HashMap::<i32, i32>::new();\n        m.insert(0, -1);\n        let (n, mut cur, mut sums) = (nums.len(), 0, 0);\n        let mut res = n as i32;\n        for num in nums.iter() {\n            sums = (sums + num) % p;\n        }\n        if sums == 0 {\n            0\n        } else {\n            for i in 0..n {\n                cur = (cur + nums[i]) % p;\n                let target = (cur - sums + p) % p;\n                if m.contains_key(&target) {\n                    res = res.min(i as i32 - m.get(&target).unwrap());\n                }\n                m.insert(cur, i as i32);\n            }\n            if res == n as i32 {\n                -1\n            } else {\n                res\n            }\n        }\n    }\n}",
            "date": 1678377600000
        }
    ]
}