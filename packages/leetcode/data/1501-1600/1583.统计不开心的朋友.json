{
    "id": "1705",
    "name": "1583.统计不开心的朋友",
    "url": "https://leetcode.cn/problems/count-unhappy-friends",
    "desc": "返回 不开心的朋友的数目。",
    "solutions": [
        {
            "date": "2021-08-14",
            "time": 140,
            "memory": 55,
            "script": "typescript",
            "desc": "n2 计算不开心的人进行累加。",
            "code": "class Person {\n  map = new Map<number, number>();\n  constructor(public val: number, link: number[]) {\n    let c = 0;\n    for (const p of link) this.map.set(p, cpp);\n  }\n  compare(p1: Person, p2: Person): boolean {\n    return this.map.get(p1.val)! < this.map.get(p2.val)!;\n  }\n}\nfunction unhappyFriends(n: number, preferences: number[][], pairs: number[][]): number {\n  const map = new Map<number, Person>();\n  for (let i = 0; i < n; i++) map.set(i, new Person(i, preferences[i]));\n  const ans = new Array(n).fill(false);\n  for (let i = 0; i < n / 2; i++) {\n    const [v1, v2] = pairs[i];\n    const p1 = map.get(v1)!;\n    const p2 = map.get(v2)!;\n    for (let j = 0; j < i; j++) {\n      const [v3, v4] = pairs[j];\n      const p3 = map.get(v3)!;\n      const p4 = map.get(v4)!;\n      if (p1.compare(p3, p2) && p3.compare(p1, p4)) ans[v1] = ans[v3] = true;\n      if (p1.compare(p4, p2) && p4.compare(p1, p3)) ans[v1] = ans[v4] = true;\n      if (p2.compare(p3, p1) && p3.compare(p2, p4)) ans[v2] = ans[v3] = true;\n      if (p2.compare(p4, p1) && p4.compare(p2, p3)) ans[v2] = ans[v4] = true;\n    }\n  }\n  return ans.filter(Boolean).length;\n}"
        }
    ],
    "tagList": [
        "数组",
        "模拟"
    ],
    "level": "Medium"
}