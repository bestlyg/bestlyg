{
    "id": "1721",
    "name": "1599.经营摩天轮的最大利润",
    "url": "https://leetcode.cn/problems/maximum-profit-of-operating-a-centennial-wheel",
    "desc": "返回最大化利润所需执行的 最小轮转次数 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 100,
            "memory": 79.5,
            "desc": "模拟。",
            "code": "class Solution {\npublic:\n    int minOperationsMaxProfit(vector<int>& customers, int boardingCost, int runningCost) {\n        int resMax = 0, resCnt = -1, wait = 0, cur = 0, i = 0;\n        while (wait != 0 || i < customers.size()) {\n            if (i < customers.size()) wait += customers[i];\n            cur += min(wait, 4) * boardingCost - runningCost;\n            wait = max(wait - 4, 0);\n            if (cur > resMax) resMax = cur, resCnt = i + 1;\n            i += 1;\n        }\n        return resCnt;\n    }\n};",
            "date": "2023-03-05"
        },
        {
            "script": "python",
            "time": 1656,
            "memory": 19.1,
            "desc": "同上。",
            "code": "class Solution:\n        def minOperationsMaxProfit(self, customers: List[int], boardingCost: int, runningCost: int) -> int:\n            resMax, resCnt = 0, -1\n            wait, cur, i = 0, 0, 0\n            while wait != 0 or i < len(customers):\n                if i < len(customers):\n                    wait += customers[i]\n                cur += min(wait, 4) * boardingCost - runningCost\n                wait = max(wait - 4, 0)\n                if cur > resMax:\n                    resMax = cur\n                    resCnt = i + 1\n                i += 1\n            return resCnt",
            "date": "2023-03-05"
        },
        {
            "script": "rust",
            "time": 24,
            "memory": 2.8,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn min_operations_max_profit(\n        customers: Vec<i32>,\n        boarding_cost: i32,\n        running_cost: i32,\n    ) -> i32 {\n        let (mut resMax, mut resCnt, mut wait, mut cur, mut i) = (0, -1, 0, 0, 0);\n        while wait != 0 || i < customers.len() {\n            if i < customers.len() {\n                wait += customers[i];\n            }\n            cur += wait.min(4) * boarding_cost - running_cost;\n            wait = 0.max(wait - 4);\n            if cur > resMax {\n                resMax = cur;\n                resCnt = i as i32 + 1;\n            }\n            i += 1;\n        }\n        resCnt\n    }\n}",
            "date": "2023-03-05"
        },
        {
            "script": "python",
            "time": 1200,
            "memory": 20.89,
            "desc": "模拟。",
            "code": "class Solution:\n    def minOperationsMaxProfit(self, customers: List[int], boardingCost: int, runningCost: int) -> int:\n        costCnt = costSum = resSum =0\n        resCnt = -1\n        mask = 0b0000\n        wait = 0\n        \n        def walk():\n            nonlocal costCnt, costSum, resSum, resCnt, mask, wait\n            cnt = min(wait, 4)\n            costSum += cnt * boardingCost - runningCost\n            wait -= cnt\n            costCnt += 1\n            mask = ((mask << 1) | 0b0001) & 0b1111\n            if costSum > resSum:\n                resCnt, resSum = costCnt, costSum\n\n        for v in customers:\n            wait += v\n            walk()\n\n        while wait: walk()\n        return resCnt",
            "date": "2024-01-01"
        }
    ],
    "tagList": [
        "数组",
        "模拟"
    ],
    "level": "Medium"
}