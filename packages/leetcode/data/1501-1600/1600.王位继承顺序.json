{
    "id": "1722",
    "name": "1600.王位继承顺序",
    "url": "https://leetcode.cn/problems/throne-inheritance",
    "difficulty": "中等",
    "tag": [
        "树",
        "深度优先搜索",
        "设计",
        "哈希表"
    ],
    "desc": "一个王国里住着国王、他的孩子们、他的孙子们等等。通过以上的函数，我们总是能得到一个唯一的继承顺序。",
    "solutions": [
        {
            "date": 1624118400000,
            "time": 188,
            "memory": 43.8,
            "script": "typescript",
            "desc": "前序遍历。",
            "code": "class Person {\n  children: Person[] = [];\n  dead = false;\n  constructor(public name: string) {}\n}\nclass ThroneInheritance {\n  king = new Person('');\n  nameMap = new Map<string, Person>();\n  constructor(kingName: string) {\n    this.king.name = kingName;\n    this.nameMap.set(kingName, this.king);\n  }\n  birth(parentName: string, childName: string): void {\n    const parent = this.nameMap.get(parentName)!;\n    const child = new Person(childName);\n    this.nameMap.set(childName, child);\n    parent.children.push(child);\n  }\n  death(name: string): void {\n    this.nameMap.get(name)!.dead = true;\n  }\n  getInheritanceOrder(): string[] {\n    return this._getInheritanceOrder(this.king)\n      .filter(v => !v.dead)\n      .map(v => v.name);\n  }\n  private _getInheritanceOrder(person: Person): Person[] {\n    const ans: Person[] = [person];\n    person.children.forEach(child => {\n      ans.push(...this._getInheritanceOrder(child));\n    });\n    return ans;\n  }\n}"
        },
        {
            "script": "python",
            "time": 333,
            "memory": 68.36,
            "desc": "前序遍历。",
            "code": "class ThroneInheritance:\n    def __init__(self, kingName: str):\n        self.kingName = kingName\n        self.children = defaultdict(list)\n        self.dead = set()\n    def birth(self, parentName: str, childName: str) -> None:\n        self.children[parentName].append(childName)\n    def death(self, name: str) -> None:\n        self.dead.add(name)\n    def successor(self, x: str, curOrder: List[str]) -> List[str]:\n        if x not in self.dead: curOrder.append(x)\n        for child in self.children[x]:\n            self.successor(child, curOrder)\n        return curOrder\n    def getInheritanceOrder(self) -> List[str]:\n        return self.successor(self.kingName, [])",
            "date": 1712419200000
        }
    ]
}