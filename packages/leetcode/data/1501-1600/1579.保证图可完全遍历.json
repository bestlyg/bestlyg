{
    "id": "1701",
    "name": "1579.保证图可完全遍历",
    "url": "https://leetcode.cn/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable",
    "desc": "给你一个数组 edges ，其中 edges[i] = [typei, ui, vi]  表示节点 ui 和 vi 之间存在类型为 typei 的双向边。请你在保证图仍能够被 Alice 和 Bob 完全遍历的前提下，找出可以删除的最大边数。如果从任何节点开始，Alice 和 Bob 都可以到达所有其他节点，则认为图是可以完全遍历的。返回可以删除的最大边数，如果 Alice 和 Bob 无法完全遍历图，则返回 -1 。",
    "solutions": [
        {
            "date": "2021-01-27",
            "time": 312,
            "memory": 70.6,
            "script": "typescript",
            "desc": "并查集。",
            "code": "class UnionFind {\n  elements: number[];\n  constructor(public size: number) {\n    this.elements = new Array(size).fill(0).map((_, i) => i);\n  }\n  same(v1: number, v2: number): boolean {\n    return this.find(v1) === this.find(v2);\n  }\n  find(v: number): number {\n    return v === this.elements[v] ? v : (this.elements[v] = this.find(this.elements[v]));\n  }\n  union(v1: number, v2: number): void {\n    const e1 = this.find(v1);\n    const e2 = this.find(v2);\n    if (e1 !== e2) {\n      this.elements[e1] = e2;\n      this.size--;\n    }\n  }\n}\nfunction maxNumEdgesToRemove(n: number, edges: number[][]): number {\n  let ans = 0;\n  const uf1 = new UnionFind(n);\n  const uf2 = new UnionFind(n);\n  edges.sort(([type1], [type2]) => (type1 === 3 ? -1 : 0));\n  for (let [type, u, v] of edges) {\n    u--;\n    v--;\n    if (type === 1) {\n      if (uf1.same(u, v)) ans++;\n      else uf1.union(u, v);\n    } else if (type === 2) {\n      if (uf2.same(u, v)) ans++;\n      else uf2.union(u, v);\n    } else {\n      if (uf1.same(u, v) && uf2.same(u, v)) ans++;\n      uf1.union(u, v);\n      uf2.union(u, v);\n    }\n  }\n  if (uf1.size !== 1 || uf2.size !== 1) return -1;\n  return ans;\n}"
        }
    ],
    "tagList": [
        "并查集",
        "图"
    ],
    "level": "Hard"
}