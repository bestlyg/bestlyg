{
    "id": "1679",
    "name": "1574.删除最短的子数组使剩余数组有序",
    "url": "https://leetcode.cn/problems/shortest-subarray-to-be-removed-to-make-array-sorted",
    "difficulty": "中等",
    "tag": [
        "栈",
        "数组",
        "双指针",
        "二分查找",
        "单调栈"
    ],
    "desc": "给你一个整数数组 arr ，请你删除一个子数组（可以为空），使得 arr 中剩下的元素是 非递减 的。",
    "solutions": [
        {
            "script": "cpp",
            "time": 100,
            "memory": 65.37,
            "desc": "贪心的取左右最长递增。",
            "code": "class Solution {\npublic:\n    int findLengthOfShortestSubarray(vector<int>& arr) {\n        int n = arr.size(), right = n - 1;\n        while (right - 1 >= 0 && arr[right - 1] <= arr[right]) right--;\n        if (right == 0) return 0;\n        int res = right;\n        for (int left = 0; left < n; left++) {\n            if (left && arr[left] < arr[left - 1]) break;\n            while (right < n && arr[right] < arr[left]) right++;\n            res = min(res, right - left - 1);\n        }\n        return res;\n    }\n};",
            "date": 1679673600000
        },
        {
            "script": "python",
            "time": 72,
            "memory": 29.8,
            "desc": "同上。",
            "code": "class Solution:\n    def findLengthOfShortestSubarray(self, arr: List[int]) -> int:\n        n = len(arr)\n        r = n-1\n        while r - 1 >= 0 and arr[r-1] <= arr[r]:\n            r -= 1\n        if r == 0:\n            return 0\n        res = r\n        for l in range(n):\n            if l and arr[l] < arr[l-1]:\n                break\n            while r < n and arr[r] < arr[l]:\n                r += 1\n            res = min(res, r-l-1)\n        return res",
            "date": 1679673600000
        },
        {
            "script": "rust",
            "time": 12,
            "memory": 3.5,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn find_length_of_shortest_subarray(arr: Vec<i32>) -> i32 {\n        let n = arr.len();\n        let mut right = n - 1;\n        while right != 0 && arr[right - 1] <= arr[right] {\n            right -= 1;\n        }\n        if right == 0 {\n            0\n        } else {\n            let mut res = right;\n            for left in 0..n {\n                if left > 0 && arr[left] < arr[left - 1] {\n                    break;\n                }\n                while right < n && arr[right] < arr[left] {\n                    right += 1\n                }\n                res = res.min(right - left - 1)\n            }\n            res as i32\n        }\n    }\n}",
            "date": 1679673600000
        }
    ]
}