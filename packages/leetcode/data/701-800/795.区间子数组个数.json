{
    "id": "811",
    "name": "795.区间子数组个数",
    "url": "https://leetcode.cn/problems/number-of-subarrays-with-bounded-maximum",
    "difficulty": "中等",
    "tag": ["数组", "双指针"],
    "desc": "给你一个整数数组 nums 和两个整数：left 及 right 。找出 nums 中连续、非空且其中最大元素在范围  [left, right] 内的子数组，并返回满足条件的子数组的个数。",
    "solutions": [
        {
            "date": 1669219200000,
            "time": 108,
            "memory": 56.3,
            "script": "cpp",
            "desc": "单调栈求出每个点最近比他大的左值和右值，判断当前点是最大值的情况。",
            "code": "class Solution {\npublic:\n    int numSubarrayBoundedMax(vector<int>& nums, int left, int right) {\n        int n = nums.size(), ans = 0;\n        vector<int> llist(n, -1), rlist(n, n);\n        stack<int> s;\n        for (int i = 0; i < n; i++) {\n            while (s.size() && nums[s.top()] <= nums[i]) {\n                rlist[s.top()] = i;\n                s.pop();\n            }\n            llist[i] = s.empty() ? -1 : s.top();\n            s.push(i);\n        }\n        for (int i = 0; i < n; i++) {\n            if (nums[i] > right || nums[i] < left) continue;\n            int left = i - llist[i] - 1, right = rlist[i] - i;\n            ans += left + right + (left * (right - 1));\n        }\n        return ans;\n    }\n};"
        },
        {
            "date": 1669219200000,
            "time": 48,
            "memory": 51.1,
            "script": "cpp",
            "desc": "一次遍历，统计出不包含>right 的值且最少包含一个>=left 的值的个数。",
            "code": "class Solution {\npublic:\n    int numSubarrayBoundedMax(vector<int>& nums, int left, int right) {\n        int n = nums.size(), ans = 0, prev = -1, cur = -1;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] <= right && nums[i] >= left) cur = i;\n            else if (nums[i] > right) prev = i, cur = -1;\n            if (cur != -1) ans += cur - prev;\n        }\n        return ans;\n    }\n};"
        }
    ]
}
