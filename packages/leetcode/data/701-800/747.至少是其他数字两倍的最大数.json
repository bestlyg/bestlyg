{
    "name": "747. 至少是其他数字两倍的最大数",
    "url": "https://leetcode-cn.com/problems/largest-number-at-least-twice-of-others/",
    "difficulty": "简单",
    "tag": [
        "数组",
        "排序"
    ],
    "desc": "给你一个整数数组 nums ，其中总是存在 唯一的 一个最大整数 。请你找出数组中的最大元素并检查它是否 至少是数组中每个其他数字的两倍 。",
    "solutions": [
        {
            "date": 1642003200000,
            "time": 4,
            "memory": 10.5,
            "script": "c++",
            "desc": "遍历两次，第一次记录最大值，第二次判断其他值的两倍是否超过最大值。",
            "code": "class Solution {\n   public:\n    int dominantIndex(vector<int>& nums) {\n        int maxn = INT_MIN, maxi;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums[i] > maxn) {\n                maxn = nums[i];\n                maxi = i;\n            }\n        }\n        for (auto& num : nums) {\n            if (num != maxn && num * 2 > maxn) return -1;\n        }\n        return maxi;\n    }\n};"
        },
        {
            "date": 1642003200000,
            "time": 8,
            "memory": 10.7,
            "script": "c++",
            "desc": "排序。",
            "code": "class Solution {\n   public:\n    int dominantIndex(vector<int>& nums) {\n        int n = nums.size();\n        if (n == 1) return 0;\n        int arr[n];\n        for (int i = 0; i < n; i++) arr[i] = i;\n        sort(arr, arr + n,\n             [&](int i1, int i2) -> bool { return nums[i1] < nums[i2]; });\n        return nums[arr[n - 1]] >= nums[arr[n - 2]] * 2 ? arr[n - 1] : -1;\n    }\n};"
        }
    ]
}