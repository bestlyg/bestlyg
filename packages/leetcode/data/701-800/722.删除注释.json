{
    "name": "722.删除注释",
    "url": "https://leetcode.cn/problems/card-flipping-game/",
    "difficulty": "简单",
    "tag": [],
    "desc": "从源代码中删除注释后，需要以相同的格式返回源代码。",
    "solutions": [
        {
            "script": "cpp",
            "time": 0,
            "memory": 7.54,
            "desc": "逐行遍历。",
            "code": "class Solution {\npublic:\n    vector<string> removeComments(vector<string>& source) {\n        vector<string> res;\n        int check = false;\n        string s = \"\";\n        for (auto &line : source) {\n            for (int i = 0; i < line.size(); i++) {\n                if (line[i] == '*' && i + 1 < line.size() && line[i + 1] == '/' && check) {\n                    check = false;\n                    i += 1;\n                } else if (check) {\n                } else if (line[i] == '/' && i + 1 < line.size() && line[i + 1] == '*') {\n                    check = true;\n                    i += 1;\n                } else if (line[i] == '/' && i + 1 < line.size() && line[i + 1] == '/') {\n                    break;\n                } else {\n                    s += line[i];\n                }\n            }\n            if (!check && s.size()) {\n                res.push_back(s);\n                s = \"\";\n            }\n        }\n        return res;\n    }\n};",
            "date": 1690992000000
        },
        {
            "script": "python",
            "time": 44,
            "memory": 15.77,
            "desc": "同上。",
            "code": "class Solution:\n    def removeComments(self, source: List[str]) -> List[str]:\n        res = []\n        check = False\n        s = \"\"\n        for line in source:\n            i = 0\n            while i < len(line):\n                if line[i] == '*' and i + 1 < len(line) and line[i + 1] == '/' and check:\n                    check = False\n                    i += 1\n                elif check:\n                    pass\n                elif line[i] == '/' and i + 1 < len(line) and line[i + 1] == '*':\n                    check = True\n                    i += 1\n                elif line[i] == '/' and i + 1 < len(line) and line[i + 1] == '/':\n                    break\n                else:\n                    s += line[i]\n                i += 1\n            if not check and len(s):\n                res.append(s)\n                s = \"\"\n        return res",
            "date": 1690992000000
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 1.92,
            "desc": "同上。",
            "code": "pub fn str_to_vec(s: &String) -> Vec<char> {\n    s.chars().collect()\n}\nimpl Solution {\n    pub fn remove_comments(source: Vec<String>) -> Vec<String> {\n        let mut res = vec![];\n        let mut check = false;\n        let mut s = String::new();\n        for line in source {\n            let line = str_to_vec(&line);\n            let mut i = 0;\n            while i < line.len() {\n                if line[i] == '*' && i + 1 < line.len() && line[i + 1] == '/' && check {\n                    check = false;\n                    i += 1\n                } else if check {\n                } else if line[i] == '/' && i + 1 < line.len() && line[i + 1] == '*' {\n                    check = true;\n                    i += 1;\n                } else if line[i] == '/' && i + 1 < line.len() && line[i + 1] == '/' {\n                    break;\n                } else {\n                    s.push(line[i]);\n                }\n                i += 1;\n            }\n            if !check && !s.is_empty() {\n                res.push(s.clone());\n                s = String::new();\n            }\n        }\n        res\n    }\n}",
            "date": 1690992000000
        }
    ]
}