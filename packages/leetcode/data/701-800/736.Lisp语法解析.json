{
    "name": "736.Lisp语法解析",
    "url": "https://leetcode.cn/problems/parse-lisp-expression/",
    "difficulty": "困难",
    "tag": [
        "栈",
        "递归",
        "哈希表",
        "字符串"
    ],
    "desc": "给你一个类似 Lisp 语句的字符串表达式 expression，求出其计算结果。",
    "solutions": [
        {
            "date": 1657036800000,
            "time": 32,
            "memory": 26,
            "script": "cpp",
            "desc": "递归比较，每次存储当前变量。",
            "code": "class Solution {\n   public:\n    vector<unordered_map<string, int>> varStark;\n    int evaluate(string expression) {\n        if (expression[0] == '(')\n            expression = expression.substr(1, expression.size() - 2);\n        vector<string> list = toToken(expression);\n        return comp(list);\n    }\n    vector<string> toToken(string &expression) {\n        vector<string> list;\n        int i;\n        if (expression[0] == 'l') list.push_back(\"let\"), i = 4;\n        if (expression[0] == 'm') list.push_back(\"mult\"), i = 5;\n        if (expression[0] == 'a') list.push_back(\"add\"), i = 4;\n        while (i < expression.size()) {\n            int end = expression[i] == '(' ? findEndIdx1(expression, i)\n                                           : findEndIdx2(expression, i);\n            list.push_back(expression.substr(i, end - i));\n            i = end;\n            while (i < expression.size() && expression[i] == ' ' ||\n                   expression[i] == ')')\n                i++;\n        }\n        return list;\n    }\n    int comp(vector<string> &list) {\n        int ans;\n        if (list[0] == \"let\") ans = comp_let(list);\n        if (list[0] == \"add\") ans = comp_var(list[1]) + comp_var(list[2]);\n        if (list[0] == \"mult\") ans = comp_var(list[1]) * comp_var(list[2]);\n        return ans;\n    }\n    int comp_let(vector<string> &list) {\n        int n = list.size();\n        unordered_map<string, int> m;\n        for (int i = 1; i < n - 1; i += 2) {\n            int val;\n            varStark.push_back(m);\n            if (list[i + 1][0] == '(')\n                val = evaluate(list[i + 1]);\n            else\n                val = get_var(list[i + 1]);\n            varStark.pop_back();\n            m[list[i]] = val;\n        }\n        int val;\n        varStark.push_back(m);\n        if (list[n - 1][0] == '(') {\n            val = evaluate(list[n - 1]);\n        } else\n            val = get_var(list[n - 1]);\n        varStark.pop_back();\n        return val;\n    }\n    int comp_var(string &str) {\n        int val;\n        if (str[0] == '(')\n            val = evaluate(str);\n        else\n            val = get_var(str);\n        return val;\n    }\n    int get_var(string &str) {\n        for (int i = varStark.size() - 1; i >= 0; i--)\n            if (varStark[i].count(str)) return varStark[i][str];\n        return stoi(str);\n    }\n    int findEndIdx1(string &expression, int start) {\n        int end = start, deep = 0;\n        do {\n            if (expression[end] == '(')\n                deep++;\n            else if (expression[end] == ')')\n                deep--;\n            end++;\n        } while (deep > 0);\n        return end;\n    }\n    int findEndIdx2(string &expression, int start) {\n        int end = start;\n        while (end < expression.size() && expression[end] != ' ') end++;\n        return end;\n    }\n};"
        },
        {
            "date": 1657036800000,
            "time": 32,
            "memory": 26,
            "script": "cpp",
            "desc": "递归比较，每次存储当前变量。",
            "code": "class Solution {\n   public:\n    vector<unordered_map<string, int>> varStark;\n    int evaluate(string expression) {\n        if (expression[0] == '(')\n            expression = expression.substr(1, expression.size() - 2);\n        vector<string> list = toToken(expression);\n        return comp(list);\n    }\n    vector<string> toToken(string &expression) {\n        vector<string> list;\n        int i;\n        if (expression[0] == 'l') list.push_back(\"let\"), i = 4;\n        if (expression[0] == 'm') list.push_back(\"mult\"), i = 5;\n        if (expression[0] == 'a') list.push_back(\"add\"), i = 4;\n        while (i < expression.size()) {\n            int end = expression[i] == '(' ? findEndIdx1(expression, i)\n                                           : findEndIdx2(expression, i);\n            list.push_back(expression.substr(i, end - i));\n            i = end;\n            while (i < expression.size() && expression[i] == ' ' ||\n                   expression[i] == ')')\n                i++;\n        }\n        return list;\n    }\n    int comp(vector<string> &list) {\n        int ans;\n        if (list[0] == \"let\") ans = comp_let(list);\n        if (list[0] == \"add\") ans = comp_var(list[1]) + comp_var(list[2]);\n        if (list[0] == \"mult\") ans = comp_var(list[1]) * comp_var(list[2]);\n        return ans;\n    }\n    int comp_let(vector<string> &list) {\n        int n = list.size();\n        unordered_map<string, int> m;\n        for (int i = 1; i < n - 1; i += 2) {\n            int val;\n            varStark.push_back(m);\n            if (list[i + 1][0] == '(')\n                val = evaluate(list[i + 1]);\n            else\n                val = get_var(list[i + 1]);\n            varStark.pop_back();\n            m[list[i]] = val;\n        }\n        int val;\n        varStark.push_back(m);\n        if (list[n - 1][0] == '(') {\n            val = evaluate(list[n - 1]);\n        } else\n            val = get_var(list[n - 1]);\n        varStark.pop_back();\n        return val;\n    }\n    int comp_var(string &str) {\n        int val;\n        if (str[0] == '(')\n            val = evaluate(str);\n        else\n            val = get_var(str);\n        return val;\n    }\n    int get_var(string &str) {\n        for (int i = varStark.size() - 1; i >= 0; i--)\n            if (varStark[i].count(str)) return varStark[i][str];\n        return stoi(str);\n    }\n    int findEndIdx1(string &expression, int start) {\n        int end = start, deep = 0;\n        do {\n            if (expression[end] == '(')\n                deep++;\n            else if (expression[end] == ')')\n                deep--;\n            end++;\n        } while (deep > 0);\n        return end;\n    }\n    int findEndIdx2(string &expression, int start) {\n        int end = start;\n        while (end < expression.size() && expression[end] != ' ') end++;\n        return end;\n    }\n};"
        },
        {
            "date": 1657036800000,
            "time": 32,
            "memory": 26,
            "script": "cpp",
            "desc": "递归比较，每次存储当前变量。",
            "code": "class Solution {\n   public:\n    vector<unordered_map<string, int>> varStark;\n    int evaluate(string expression) {\n        if (expression[0] == '(')\n            expression = expression.substr(1, expression.size() - 2);\n        vector<string> list = toToken(expression);\n        return comp(list);\n    }\n    vector<string> toToken(string &expression) {\n        vector<string> list;\n        int i;\n        if (expression[0] == 'l') list.push_back(\"let\"), i = 4;\n        if (expression[0] == 'm') list.push_back(\"mult\"), i = 5;\n        if (expression[0] == 'a') list.push_back(\"add\"), i = 4;\n        while (i < expression.size()) {\n            int end = expression[i] == '(' ? findEndIdx1(expression, i)\n                                           : findEndIdx2(expression, i);\n            list.push_back(expression.substr(i, end - i));\n            i = end;\n            while (i < expression.size() && expression[i] == ' ' ||\n                   expression[i] == ')')\n                i++;\n        }\n        return list;\n    }\n    int comp(vector<string> &list) {\n        int ans;\n        if (list[0] == \"let\") ans = comp_let(list);\n        if (list[0] == \"add\") ans = comp_var(list[1]) + comp_var(list[2]);\n        if (list[0] == \"mult\") ans = comp_var(list[1]) * comp_var(list[2]);\n        return ans;\n    }\n    int comp_let(vector<string> &list) {\n        int n = list.size();\n        unordered_map<string, int> m;\n        for (int i = 1; i < n - 1; i += 2) {\n            int val;\n            varStark.push_back(m);\n            if (list[i + 1][0] == '(')\n                val = evaluate(list[i + 1]);\n            else\n                val = get_var(list[i + 1]);\n            varStark.pop_back();\n            m[list[i]] = val;\n        }\n        int val;\n        varStark.push_back(m);\n        if (list[n - 1][0] == '(') {\n            val = evaluate(list[n - 1]);\n        } else\n            val = get_var(list[n - 1]);\n        varStark.pop_back();\n        return val;\n    }\n    int comp_var(string &str) {\n        int val;\n        if (str[0] == '(')\n            val = evaluate(str);\n        else\n            val = get_var(str);\n        return val;\n    }\n    int get_var(string &str) {\n        for (int i = varStark.size() - 1; i >= 0; i--)\n            if (varStark[i].count(str)) return varStark[i][str];\n        return stoi(str);\n    }\n    int findEndIdx1(string &expression, int start) {\n        int end = start, deep = 0;\n        do {\n            if (expression[end] == '(')\n                deep++;\n            else if (expression[end] == ')')\n                deep--;\n            end++;\n        } while (deep > 0);\n        return end;\n    }\n    int findEndIdx2(string &expression, int start) {\n        int end = start;\n        while (end < expression.size() && expression[end] != ' ') end++;\n        return end;\n    }\n};"
        }
    ]
}