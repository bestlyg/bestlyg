{
    "id": "784",
    "name": "701.二叉搜索树中的插入操作",
    "url": "https://leetcode.cn/problems/insert-into-a-binary-search-tree",
    "desc": "给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 保证原始二叉搜索树中不存在新值。注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回任意有效的结果。",
    "solutions": [
        {
            "date": "2020-02-23",
            "time": 0,
            "memory": 41.8,
            "script": "java",
            "desc": "二分查找，若判断小则查找左节点，大则查找右节点，如果 null 则赋值。",
            "code": "class Solution {\n    public TreeNode insertIntoBST(TreeNode root, int val) {\n    \tif(root==null)return new TreeNode(val);\n    \tTreeNode node = root;\n    \twhile(node.val!=val) {\n    \t\tif(val>node.val) {\n    \t\t\tif(node.right==null) {\n    \t\t\t\tnode.right=new TreeNode(val);\n    \t\t\t\tbreak;\n    \t\t\t}else {\n    \t\t\t\tnode=node.right;\n    \t\t\t}\n    \t\t}else if(val<node.val){\n    \t\t\tif(node.left==null) {\n    \t\t\t\tnode.left=new TreeNode(val);\n    \t\t\t\tbreak;\n    \t\t\t}else {\n    \t\t\t\tnode=node.left;\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn root;\n    }\n}"
        },
        {
            "date": "2020-09-30",
            "time": 128,
            "memory": 45.7,
            "script": "typescript",
            "desc": "递归。",
            "code": "function insertIntoBST(root: TreeNode | null, val: number): TreeNode | null {\n  if (root === null) return new TreeNode(val);\n  const v = root.val;\n  if (v > val) {\n    if (root.left === null) {\n      root.left = new TreeNode(val);\n    } else {\n      insertIntoBST(root.left, val);\n    }\n  } else {\n    if (root.right === null) {\n      root.right = new TreeNode(val);\n    } else {\n      insertIntoBST(root.right, val);\n    }\n  }\n  return root;\n}"
        }
    ],
    "tagList": [
        "树",
        "二叉搜索树",
        "二叉树"
    ],
    "level": "Medium"
}