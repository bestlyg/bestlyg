{
    "id": "754",
    "name": "753.破解保险箱",
    "url": "https://leetcode.cn/problems/cracking-the-safe",
    "desc": "请返回一个能打开保险箱的最短字符串。",
    "solutions": [
        {
            "date": "2023-01-10",
            "time": 24,
            "memory": 28.6,
            "script": "cpp",
            "desc": "dfs。",
            "code": "class Solution {\npublic:\n    int n, k, nmax;\n    string ans;\n    unordered_set<string> visit;\n    string crackSafe(int n, int k) {\n        this->n = n;\n        this->k = k;\n        this->ans = \"\";\n        for (int i = 0; i < n; i++) ans += \"0\";\n        nmax = pow(k, n);\n        visit.insert(ans);\n        dfs(ans);\n        return ans;\n    }\n    bool dfs(string cur) {\n        string prefix = cur.substr(cur.size() - n + 1, n - 1);\n        if (visit.size() == nmax) {\n            ans = cur;\n            return true;\n        }\n        for (int i = 0; i < k; i++) {\n            string next = prefix + to_string(i);\n            if (visit.count(next)) continue;\n            visit.insert(next);\n            if (dfs(cur + to_string(i))) return true;\n            visit.erase(next);\n        }\n        return false;\n    }\n};"
        },
        {
            "date": "2023-01-10",
            "time": 12,
            "memory": 19.6,
            "script": "rust",
            "desc": "同上。",
            "code": "use std::collections::HashSet;\nimpl Solution {\n    pub fn crack_safe(n: i32, k: i32) -> String {\n        let mut visit = HashSet::<String>::new();\n        let mut cur = String::new();\n        for _ in 0..n {\n            cur.push('0');\n        }\n        visit.insert(cur.clone());\n        Solution::dfs(n, k, &mut visit, cur).1\n    }\n    fn dfs<'a>(n: i32, k: i32, visit: &mut HashSet<String>, cur: String) -> (bool, String) {\n        if visit.len() == k.pow(n as u32) as usize {\n            (true, cur)\n        } else {\n            let pre = &cur[(cur.len() as i32 - n + 1) as usize..cur.len()];\n            for i in 0..k {\n                let mut next = String::from(pre);\n                next.push(char::from(i as u8 + '0' as u8));\n                if visit.contains(&next) {\n                    continue;\n                }\n                visit.insert(next.clone());\n                let mut cur = cur.clone();\n                cur.push(char::from(i as u8 + '0' as u8));\n                let res = Solution::dfs(n, k, visit, cur);\n                if res.0 {\n                    return res;\n                }\n                visit.remove(&next);\n            }\n\n            (false, \"\".to_string())\n        }\n    }\n}"
        }
    ],
    "tagList": ["深度优先搜索", "图", "欧拉回路"],
    "level": "Hard"
}
