{
    "id": "718",
    "name": "718.最长重复子数组",
    "url": "https://leetcode.cn/problems/maximum-length-of-repeated-subarray",
    "desc": "给两个整数数组 A 和 B ，返回两个数组中公共的、长度最长的子数组的长度。",
    "solutions": [
        {
            "date": "2020-07-01",
            "time": 272,
            "memory": 93.5,
            "script": "typescript",
            "desc": "dp[i][j]= A[i]===B[i] ? dp[i+1][j+1] + 1 : 0，倒序动态规划。",
            "code": "function findLength(A: number[], B: number[]): number {\n  const aLen = A.length;\n  const bLen = B.length;\n  let max = 0;\n  const dp: number[][] = new Array(aLen + 1).fill(0).map(_ => new Array(bLen + 1).fill(0));\n  for (let i = aLen - 1; i >= 0; i--) {\n    for (let j = bLen - 1; j >= 0; j--) {\n      max = Math.max(max, (dp[i][j] = A[i] === B[j] ? dp[i + 1][j + 1] + 1 : 0));\n    }\n  }\n  return max;\n}"
        }
    ],
    "tagList": [
        "数组",
        "二分查找",
        "动态规划",
        "滑动窗口",
        "哈希函数",
        "滚动哈希"
    ],
    "level": "Medium"
}