{
    "name": "764. 最大加号标志",
    "url": "https://leetcode.cn/problems/largest-plus-sign/",
    "difficulty": "中等",
    "tag": [
        "数组",
        "动态规划"
    ],
    "desc": "返回 grid 中包含 1 的最大的 轴对齐 加号标志的阶数 。如果未找到加号标志，则返回 0 。",
    "solutions": [
        {
            "date": 1667923200000,
            "time": 1844,
            "memory": 235.8,
            "script": "cpp",
            "desc": "遍历统计每个点最上下左右的 1。",
            "code": "struct Node {\n    int top, bottom, left, right;\n    Node(): top(0), bottom(0), left(0), right(0) {}\n};\nclass Solution {\npublic:\n    unordered_map<int, unordered_map<int, bool>> m;\n    int n;\n    int orderOfLargestPlusSign(int n, vector<vector<int>>& mines) {\n        this->n = n;\n        for (auto &item : mines) m[item[0]][item[1]] = true;\n        int ans = 0;\n        vector<vector<Node>> list(n, vector<Node>(n));\n        for (int i = 0; i < n; i++) load_row(list, i), load_col(list, i);\n        // cout << \"n = \" << n << endl;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (m[i][j]) continue;\n                // cout << \"=====\" << endl << \"i = \" << i << \", j = \" << j << endl;\n                Node &node = list[i][j];\n                int left = j - node.left,\n                    right = node.right - j,\n                    top = i - node.top,\n                    bottom = node.bottom - i;\n                ans = max(ans, min(min(left, right), min(top, bottom)) + 1);\n                // cout << \"node_top = \" << list[i][j].top\n                //      << \", node_bottom = \" << list[i][j].bottom\n                //      << \", node_left = \" << list[i][j].left\n                //      << \", node_right = \" << list[i][j].right\n                //      << endl\n                //      << \"top = \" << top\n                //      << \", bottom = \" << bottom\n                //      << \", left = \" << left\n                //      << \", right = \" << right\n                //      << endl\n                //      << \"ans = \" << ans\n                //      << endl;\n            }\n        }\n        return ans;\n    }\n    void load_row(vector<vector<Node>> &list, int row) {\n        int l = 0;\n        for (int i = 0; i < n; i++) {\n            if (!m[row][i]) {\n                list[row][i].left = l;\n            } else {\n                l = i + 1;\n            }\n        }\n        int r = n - 1;\n        for (int i = n - 1; i >= 0; i--) {\n            if (!m[row][i]) {\n                list[row][i].right = r;\n            } else {\n                r = i - 1;\n            }\n        }\n    }\n    void load_col(vector<vector<Node>> &list, int col) {\n        int t = 0;\n        for (int i = 0; i < n; i++) {\n            if (!m[i][col]) {\n                list[i][col].top = t;\n            } else {\n                t = i + 1;\n            }\n        }\n        int b = n - 1;\n        for (int i = n - 1; i >= 0; i--) {\n            if (!m[i][col]) {\n                list[i][col].bottom = b;\n            } else {\n                b = i - 1;\n            }\n        }\n    }\n};"
        }
    ]
}