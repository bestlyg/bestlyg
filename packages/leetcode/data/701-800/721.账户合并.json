{
    "id": "721",
    "name": "721.账户合并",
    "url": "https://leetcode.cn/problems/accounts-merge",
    "difficulty": "中等",
    "tag": ["深度优先搜索", "广度优先搜索", "并查集", "数组", "哈希表", "字符串", "排序"],
    "desc": "给定一个列表 accounts，合并账户后，按以下格式返回账户：每个账户的第一个元素是名称，其余元素是按字符 ASCII 顺序排列的邮箱地址。账户本身可以以任意顺序返回。",
    "solutions": [
        {
            "date": 1619798400000,
            "time": 272,
            "memory": 53.2,
            "script": "typescript",
            "desc": "并查集。",
            "code": "class UnionFind {\n  elements: number[];\n  constructor(public size: number) {\n    this.elements = new Array(size).fill(0).map((_, i) => i);\n  }\n  same(v1: number, v2: number): boolean {\n    return this.find(v1) === this.find(v2);\n  }\n  find(v: number): number {\n    return v === this.elements[v] ? v : (this.elements[v] = this.find(this.elements[v]));\n  }\n  union(v1: number, v2: number): void {\n    const e1 = this.find(v1);\n    const e2 = this.find(v2);\n    if (e1 !== e2) {\n      this.elements[e1] = e2;\n      this.size--;\n    }\n  }\n}\nfunction accountsMerge(accounts: string[][]): string[][] {\n  const indexMap = new Map<string | number, number | string>();\n  const nameMap = new Map<string, string>();\n  let size = 0;\n  for (const [name, ...emails] of accounts)\n    emails.forEach(email => {\n      if (!indexMap.has(email)) {\n        indexMap.set(email, size);\n        indexMap.set(size, email);\n        size++;\n      }\n      nameMap.set(email, name);\n    });\n  const uf = new UnionFind(size);\n  for (const [, ...emails] of accounts) {\n    for (let i = 1, l = emails.length; i < l; i++) {\n      uf.union(indexMap.get(emails[i]) as number, indexMap.get(emails[i - 1]) as number);\n    }\n  }\n  const cache = new Map<number, number[]>();\n  for (let i = 0; i < size; i++) {\n    const index = uf.find(i);\n    let list = cache.get(index);\n    if (!list) cache.set(index, (list = []));\n    list.push(i);\n  }\n  const emailSort = (email1: string, email2: string): number => {\n    let i = 0;\n    const len = Math.min(email1.length, email2.length);\n    while (i < len) {\n      if (email1[i] === email2[i]) i++;\n      else return email1.codePointAt(i)! - email2.codePointAt(i)!;\n    }\n    return email1[i] === undefined ? -1 : 1;\n  };\n  const ans: string[][] = [];\n  for (const [k, v] of cache.entries()) {\n    ans.push([\n      nameMap.get(indexMap.get(k) as string) as string,\n      ...v.map(i => indexMap.get(i) as string).sort(emailSort),\n    ]);\n  }\n  return ans;\n}"
        },
        {
            "script": "python",
            "time": 1584,
            "memory": 19.45,
            "desc": "并查集合并数据。",
            "code": "class UnionFind:\n    def __init__(self, n) -> None:\n        self.n = n\n        self.data = [i for i in range(0, n)]\n        self.sizes = [1] * n\n        self.cnt = n\n    def size(self, v: int) -> int:\n        return self.sizes[self.find(v)]\n    def find(self, v: int) -> int:\n        if self.data[v] != v:\n            self.data[v] = self.find(self.data[v])\n        return self.data[v]\n    def uni(self, v1: int, v2: int):\n        p1 = self.find(v1)\n        p2 = self.find(v2)\n        if p1 != p2:\n            self.sizes[p1] += self.sizes[p2]\n            self.cnt -= self.sizes[p2]\n            self.data[p2] = p1\n    def same(self, v1: int, v2: int):\n        return self.find(v1) == self.find(v2)\n    def get_items(self) -> List[List[int]]:\n        map = defaultdict(list)\n        for i in range(self.n): map[self.find(i)].append(i)\n        return map.values()\nclass Solution:\n    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:\n        n = len(accounts)\n        uf = UnionFind(n)\n        for i in range(n):\n            name1 = accounts[i][0]\n            emails1 = set(accounts[i][1:])\n            for j in range(i):\n                name2 = accounts[j][0]\n                emails2 = set(accounts[j][1:])\n                if name1 == name2 and not emails1.isdisjoint(emails2):\n                    uf.uni(i, j)\n        res = []\n        for arr in uf.get_items():\n            item = []\n            res.append(item)\n            item.append(accounts[arr[0]][0])\n            emails = []\n            for idx in arr: emails += accounts[idx][1:]\n            item += sorted(set(emails))\n        return res",
            "date": 1720972800000
        }
    ]
}
