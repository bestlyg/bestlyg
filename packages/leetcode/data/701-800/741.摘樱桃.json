{
    "id": "741",
    "name": "741.摘樱桃",
    "url": "https://leetcode.cn/problems/cherry-pickup",
    "difficulty": "困难",
    "tag": [
        "数组",
        "动态规划",
        "矩阵"
    ],
    "desc": "你的任务是在遵守下列规则的情况下，尽可能的摘到最多樱桃。",
    "solutions": [
        {
            "date": 1657468800000,
            "time": 84,
            "memory": 34.2,
            "script": "cpp",
            "desc": "问题转化为两个人从起点到终点路径中共有多少个樱桃,dp[i][j][k]表示总共 i 步的时候第一个人 x 在 j 第二个人 x 在 k,此时最大的樱桃数。",
            "code": "class Solution {\n   public:\n    int cherryPickup(vector<vector<int>>& grid) {\n        int n = grid.size(), max_step = n * 2 - 1;\n        vector<vector<vector<int>>> dp(\n            max_step, vector<vector<int>>(n, vector<int>(n, INT_MIN)));\n        dp[0][0][0] = grid[0][0];\n        for (int step = 1; step < max_step; step++) {\n            int minCell = max(step - n + 1, 0), maxCell = min(n - 1, step);\n            for (\n                // x1最少走0格,如果step已经超过n,那x1最少也得n格\n                int x1 = minCell;\n                //  x1最多走到第n-1格\n                x1 <= maxCell; x1++) {\n                int y1 = step - x1;\n                if (grid[x1][y1] == -1) continue;\n                for (int x2 = minCell; x2 <= maxCell; x2++) {\n                    int y2 = step - x2;\n                    if (grid[x2][y2] == -1) continue;\n                    int cnt = dp[step - 1][x1][x2]; // 都向右走一步\n                    if (x1) cnt = max(cnt, dp[step - 1][x1 - 1][x2]); // x1向下走一步\n                    if (x2) cnt = max(cnt, dp[step - 1][x1][x2 - 1]); // x2向下走一步\n                    if (x1 && x2) cnt = max(cnt, dp[step - 1][x1 - 1][x2 - 1]); // 都向下走一步\n                    cnt += grid[x1][y1];\n                    if (x1 != x2) cnt += grid[x2][y2];\n                    dp[step][x1][x2] = cnt;\n                }\n            }\n        }\n        return max(0, dp[max_step - 1][n - 1][n - 1]);\n    }\n};"
        },
        {
            "script": "python",
            "time": 466,
            "memory": 26.72,
            "desc": "dp[step][x1][x2]表示共走了step步后，第一个人往垂直方向走x1步，第二个人在垂直方向走x2步，此时能获得的最大樱桃数。",
            "code": "class Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        MAX_STEP = (n - 1) * 2 + 1\n        dp = [[[-inf for _ in range(n + 1)] for _ in range(n + 1)] for _ in range(MAX_STEP)]\n        dp[0][0][0] = grid[0][0]\n        for step in range(1, MAX_STEP):\n            MAX_X = min(step, n - 1) + 1\n            for x1 in range(MAX_X):\n                y1 = step - x1\n                if y1 < n:\n                    for x2 in range(MAX_X):\n                        y2 = step - x2\n                        if y2 < n:\n                            if grid[x1][y1] != -1 and grid[x2][y2] != -1:\n                                dp[step][x1][x2] = max(\n                                    dp[step - 1][x1][x2],\n                                    dp[step - 1][x1 - 1][x2],\n                                    dp[step - 1][x1][x2 - 1],\n                                    dp[step - 1][x1 - 1][x2 - 1],\n                                )\n                                dp[step][x1][x2] += grid[x1][y1]\n                                if x1 != x2 or y1 != y2: dp[step][x1][x2] += grid[x2][y2]\n        res = 0\n        for item in dp[MAX_STEP - 1]:\n            res = max(res, max(item))\n        return res",
            "date": 1715011200000
        }
    ]
}