{
    "name": "797.所有可能的路径",
    "url": "https://leetcode-cn.com/problems/all-paths-from-source-to-target/",
    "difficulty": "中等",
    "tag": [
        "深度优先搜索",
        "广度优先搜索",
        "图",
        "回溯"
    ],
    "desc": "给你一个有 n 个节点的 有向无环图（DAG），请你找出所有从节点 0 到节点 n-1 的路径并输出。",
    "solutions": [
        {
            "date": 1629820800000,
            "time": 136,
            "memory": 45.4,
            "script": "typescript",
            "desc": "dfs。",
            "code": "class GNode {\n  prev: GNode[] = [];\n  next: GNode[] = [];\n  constructor(public val: number) {}\n}\nfunction allPathsSourceTarget(graph: number[][]): number[][] {\n  const n = graph.length;\n  const list: GNode[] = new Array(n);\n  for (let i = 0; i < n; i++) {\n    let node = list[i];\n    if (!node) list[i] = node = new GNode(i);\n    const nextList = graph[i];\n    for (const next of nextList) {\n      let nextNode = list[next];\n      if (!nextNode) list[next] = nextNode = new GNode(next);\n      node.next.push(nextNode);\n      nextNode.prev.push(node);\n    }\n  }\n  const ans: number[][] = [];\n  dfs(list[0]);\n  return ans;\n  function dfs(node: GNode, list: GNode[] = []) {\n    list.push(node);\n    if (node.val === n - 1) ans.push(list.map(v => v.val));\n    if (node.next.length !== 0) node.next.forEach(v => dfs(v, list));\n    list.pop();\n  }\n}"
        },
        {
            "date": 1629820800000,
            "time": 160,
            "memory": 49,
            "script": "typescript",
            "desc": "dfs。",
            "code": "function allPathsSourceTarget(graph: number[][]): number[][] {\n  const n = graph.length;\n  const ans: number[][] = [];\n  dfs(0);\n  return ans;\n  function dfs(node: number, list: number[] = []) {\n    list.push(node);\n    if (node === n - 1) ans.push(list.slice());\n    graph[node].forEach(v => dfs(v, list));\n    list.pop();\n  }\n}"
        }
    ]
}