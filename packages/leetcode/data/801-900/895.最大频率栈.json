{
    "id": "931",
    "name": "895.最大频率栈",
    "url": "https://leetcode.cn/problems/maximum-frequency-stack",
    "difficulty": "困难",
    "tag": ["栈", "设计", "哈希表", "有序集合"],
    "desc": "设计一个类似堆栈的数据结构，将元素推入堆栈，并从堆栈中弹出出现频率最高的元素。",
    "solutions": [
        {
            "date": 1669737600000,
            "time": 236,
            "memory": 123,
            "script": "cpp",
            "desc": "heap。",
            "code": "class Node {\npublic:\n    int val, cnt, idx;\n    stack<int> time;\n    Node(int val, int cnt): val(val), cnt(cnt), idx(0) {}\n    string toString() {\n        stringstream ss;\n        ss << \"Node: \"\n           << \"val = \" << val\n           << \", cnt = \" << cnt\n           << \", idx = \" << idx\n           << \", time = \" << (time.empty() ? -1 : time.top())\n           ;\n        return ss.str();\n    }\n};\nclass Heap {\npublic:\n    int time;\n    unordered_map<int, Node*> m;\n    vector<Node*> data;\n    Heap(): time(0) {}\n    void push(int val) {\n        Node *node = nullptr;\n        if (m.count(val)) {\n            node = m[val];\n            node->cnt++;\n            node->time.push(time++);\n            // cout << \"push -> \" << node->toString() << endl;\n            shiftUp(node->idx);\n        } else {\n            node = m[val] = new Node(val, 1);\n            node->time.push(time++);\n            push(node);\n        }\n        // print();\n    }\n    void push(Node *node) {\n        node->idx = data.size();\n        // cout << \"push -> \" << node->toString() << endl;\n        data.push_back(node);\n        shiftUp(node->idx);\n    }\n    int pop() {\n        // cout << \"pop -> \" << data[0]->toString() << endl;\n        int val = data[0]->val;\n        if (data.size() == 1 && data[0]->cnt == 1) data.clear();\n        else {\n            Node *node = data[0], *last = data.back();\n            data.pop_back();\n            last->idx = 0;\n            data[0] = last;\n            // cout << \"==\" << node->toString() << endl;\n            shiftDown(0);\n            if (node->cnt > 1) {\n                node->time.pop();\n                node->cnt--;\n                push(node);\n            } else {\n                // cout << \"in\" << endl;\n                m.erase(node->val);\n                delete node;\n                // cout << \"inend\" << endl;\n            };\n        }\n        // print();\n        return val;\n    }\n    void shiftUp(int idx) {\n        // cout << \"shiftup : \" << idx << endl;\n        if (idx == 0) return;\n        int p = (idx - 1) / 2;\n        Node *cnode = data[idx], *pnode = data[p];\n        if (cnode->cnt > pnode->cnt || cnode->cnt == pnode->cnt && cnode->time.top() > pnode->time.top()) {\n            swap(cnode->idx, pnode->idx);\n            swap(data[idx], data[p]);\n            shiftUp(p);\n        }\n    }\n    void shiftDown(int idx) {\n        // cout << \"shiftdown : \" << idx << endl;\n        int child = idx * 2 + 1;\n        if (child >= data.size()) return;\n        if (child + 1 < data.size() &&\n            (data[child]->cnt < data[child + 1]->cnt ||\n             data[child]->cnt == data[child + 1]->cnt && data[child]->time.top() < data[child + 1]->time.top())\n        ) child++;\n        Node *cnode = data[child], *pnode = data[idx];\n        if (pnode->cnt < cnode->cnt || pnode->cnt == cnode->cnt && pnode->time.top() < cnode->time.top()) {\n            swap(cnode->idx, pnode->idx);\n            swap(data[child], data[idx]);\n            shiftDown(child);\n        }\n    }\n    void print() {\n        cout << \"=======PRINT========\" << endl;\n        for (int i = 0; i < data.size(); i++) {\n            cout << \"idx = \" << i\n                 << \", child = \" << (i * 2 + 1) << \", \" << (i * 2 + 2)\n                 << \", \" << data[i]->toString()\n                 << endl;\n        }\n    }\n};\nclass FreqStack {\npublic:\n    Heap heap;\n    FreqStack() {}\n    void push(int val) {\n        heap.push(val);\n    }\n    int pop() {\n        return heap.pop();\n    }\n};"
        },
        {
            "date": 1669737600000,
            "time": 188,
            "memory": 97.7,
            "script": "cpp",
            "desc": "记录所有的值的次数，利用 map 对每种次数压栈处理。",
            "code": "class FreqStack {\npublic:\n    unordered_map<int, stack<int>> mstack;\n    unordered_map<int, int> mfreq;\n    int maxFreq = 0;\n    FreqStack() {}\n    void push(int val) {\n        int freq = ++mfreq[val];\n        mstack[freq].push(val);\n        maxFreq = max(maxFreq, freq);\n    }\n    int pop() {\n        int val = mstack[maxFreq].top();\n        mfreq[val]--;\n        mstack[maxFreq].pop();\n        if (mstack[maxFreq].size() == 0) maxFreq--;\n        return val;\n    }\n};"
        }
    ]
}
