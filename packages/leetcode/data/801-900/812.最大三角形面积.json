{
    "id": "830",
    "name": "812.最大三角形面积",
    "url": "https://leetcode.cn/problems/largest-triangle-area",
    "difficulty": "简单",
    "tag": [
        "几何",
        "数组",
        "数学"
    ],
    "desc": "给定包含多个点的集合，从其中取三个点组成三角形，返回能组成的最大三角形的面积。",
    "solutions": [
        {
            "date": 1647705600000,
            "time": 24,
            "memory": 7.4,
            "script": "cpp",
            "desc": "遍历。",
            "code": "class Solution {\n   public:\n    double largestTriangleArea(vector<vector<int>>& points) {\n        int n = points.size();\n        double ans = 0;\n        for (int i1 = 0; i1 < n; i1++) {\n            for (int i2 = i1 + 1; i2 < n; i2++) {\n                for (int i3 = i2 + 1; i3 < n; i3++) {\n                    if (check(points, i1, i2, i3)) continue;\n                    ans = max(ans, comp_area(points, i1, i2, i3));\n                }\n            }\n        }\n        return ans;\n    }\n    bool check(vector<vector<int>>& points, int i1, int i2, int i3) {\n        return points[i1][0] == points[i2][0] &&\n                   points[i1][0] == points[i3][0] ||\n               points[i1][1] == points[i2][1] && points[i1][1] == points[i3][1];\n    }\n    double comp_area(vector<vector<int>>& points, int i1, int i2, int i3) {\n        double line1 = comp_line(points, i1, i2),\n               line2 = comp_line(points, i1, i3),\n               line3 = comp_line(points, i2, i3),\n               p = (line1 + line2 + line3) / 2;\n        return sqrt(p * (p - line1) * (p - line2) * (p - line3));\n    }\n    double comp_line(vector<vector<int>>& points, int i1, int i2) {\n        double x = pow(points[i1][0] - points[i2][0], 2),\n               y = pow(points[i1][1] - points[i2][1], 2);\n        return sqrt(x + y);\n    }\n};"
        }
    ]
}