{
    "id": "925",
    "name": "889.根据前序和后序遍历构造二叉树",
    "url": "https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-postorder-traversal",
    "difficulty": "中等",
    "tag": [
        "树",
        "数组",
        "哈希表",
        "分治",
        "二叉树"
    ],
    "desc": "返回与给定的前序和后序遍历匹配的任何二叉树。",
    "solutions": [
        {
            "date": 1582300800000,
            "time": 3,
            "memory": 39.4,
            "script": "java",
            "desc": "通过前序的左节点头部和后序的左节点头部进行匹配获取左节点的最大下标，再通过分割数组进行递归遍历新左节点和右节点。",
            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode constructFromPrePost(int[] pre, int[] post) {\n    \tint len = pre.length;\n    \tif(len==0)return null;\n    \tTreeNode node = new TreeNode(pre[0]);\n    \tif(len==1)return node;\n    \tint L=0;\n    \tfor(int i=0;i<len;i++)\n    \t\tif(post[i]==pre[1])\n    \t\t\tL=i+1;\n    \tnode.left=constructFromPrePost(Arrays.copyOfRange(pre, 1, L+1), Arrays.copyOfRange(post, 0, L));\n    \tnode.right=constructFromPrePost(Arrays.copyOfRange(pre, L+1, len), Arrays.copyOfRange(post, L,len-1));\n    \treturn node;\n    }\n}"
        }
    ]
}