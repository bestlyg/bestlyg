{
    "id": "841",
    "name": "821.字符的最短距离",
    "url": "https://leetcode.cn/problems/shortest-distance-to-a-character",
    "difficulty": "简单",
    "tag": [
        "数组",
        "双指针",
        "字符串"
    ],
    "desc": "给你一个字符串 s 和一个字符 c ，且 c 是 s 中出现过的字符。返回一个整数数组 answer ，其中 answer.length == s.length 且 answer[i] 是 s 中从下标 i 到离它 最近 的字符 c 的 距离 。",
    "solutions": [
        {
            "date": 1647705600000,
            "time": 4,
            "memory": 6.7,
            "script": "cpp",
            "desc": "bfs。",
            "code": "class Solution {\n   public:\n    vector<int> shortestToChar(string s, char c) {\n        unordered_set<string> sset;\n        int n = s.size();\n        vector<int> ans(n, -1);\n        queue<int> q;\n        for (int i = 0; i < n; i++) {\n            if (s[i] == c) {\n                q.push(i);\n                ans[i] = 0;\n            }\n        }\n        int level = 1, size = q.size();\n        while (q.size()) {\n            int idx = q.front();\n            q.pop();\n            if (idx < n - 1 && ans[idx + 1] == -1) {\n                q.push(idx + 1);\n                ans[idx + 1] = level;\n            }\n            if (idx > 0 && ans[idx - 1] == -1) {\n                q.push(idx - 1);\n                ans[idx - 1] = level;\n            }\n            if (--size == 0) {\n                size = q.size();\n                level++;\n            }\n        }\n        return ans;\n    }\n};"
        },
        {
            "date": 1650297600000,
            "time": 4,
            "memory": 6.6,
            "script": "cpp",
            "desc": "bfs。",
            "code": "class Solution {\n   public:\n    vector<int> shortestToChar(string s, char c) {\n        int n = s.size();\n        vector<int> check(n, -1);\n        queue<pair<int, int>> q;\n        for (int i = 0; i < n; i++) {\n            if (s[i] == c) {\n                q.push(make_pair(i, 0));\n                check[i] = 0;\n            }\n        }\n        while (q.size()) {\n            pair<int, int> item = q.front();\n            q.pop();\n            int row = item.first, cnt = item.second;\n            if (row < n - 1 && check[row + 1] == -1) {\n                q.push(make_pair(row + 1, cnt + 1));\n                check[row + 1] = cnt + 1;\n            }\n            if (row > 0 && check[row - 1] == -1) {\n                q.push(make_pair(row - 1, cnt + 1));\n                check[row - 1] = cnt + 1;\n            }\n        }\n        return check;\n    }\n};"
        }
    ]
}