{
    "name": "870. 优势洗牌",
    "url": "https://leetcode.cn/problems/advantage-shuffle/",
    "difficulty": "中等",
    "tag": [
        "贪心",
        "数组",
        "双指针",
        "排序"
    ],
    "desc": "返回 nums1 的任意排列，使其相对于 nums2 的优势最大化。",
    "solutions": [
        {
            "date": 1665158400000,
            "time": 164,
            "memory": 58.3,
            "script": "cpp",
            "desc": "排序下标数组后，从大往小判断。",
            "code": "class Solution {\npublic:\n    vector<int> advantageCount(vector<int>& nums1, vector<int>& nums2) {\n        int n = nums1.size();\n        vector<int> ans(n), inums1(n), inums2(n);\n        for (int i = 0; i < n; i++) inums1[i] = inums2[i] = i;\n        sort(inums1.begin(), inums1.end(), [&](int i1, int i2){ return nums1[i1] < nums1[i2]; });\n        sort(inums2.begin(), inums2.end(), [&](int i1, int i2){ return nums2[i1] < nums2[i2]; });\n        int e1 = n - 1, s1 = 0, i2 = n - 1;\n        while (e1 >= s1) {\n            if (nums1[inums1[e1]] > nums2[inums2[i2]]) ans[inums2[i2]] = nums1[inums1[e1--]];\n            else ans[inums2[i2]] = nums1[inums1[s1++]];\n            i2--;\n        }\n        return ans;\n    }\n};"
        }
    ]
}