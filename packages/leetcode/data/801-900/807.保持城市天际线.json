{
    "id": "825",
    "name": "807.保持城市天际线",
    "url": "https://leetcode.cn/problems/max-increase-to-keep-city-skyline",
    "desc": "在二维数组 grid 中，grid[i][j]代表位于某处的建筑物的高度。 我们被允许增加任何数量（不同建筑物的数量可能不同）的建筑物的高度。 高度 0 也被认为是建筑物。建筑物高度可以增加的最大总和是多少？。",
    "solutions": [
        {
            "date": "2021-12-13",
            "time": 88,
            "memory": 40.1,
            "script": "typescript",
            "desc": "遍历后存储最大值数组。",
            "code": "function maxIncreaseKeepingSkyline(grid: number[][]): number {\n  const n = grid.length;\n  const m = grid[0].length;\n  const vmax = new Array(m).fill(0);\n  const hmax = new Array(n).fill(0);\n  let ans = 0;\n  for (let row = 0; row < n; row++) {\n    let max = 0;\n    for (let col = 0; col < m; col++) {\n      max = Math.max(max, grid[row][col]);\n    }\n    hmax[row] = max;\n  }\n  for (let col = 0; col < m; col++) {\n    let max = 0;\n    for (let row = 0; row < n; row++) {\n      max = Math.max(max, grid[row][col]);\n    }\n    vmax[col] = max;\n  }\n  for (let row = 0; row < n; row++) {\n    for (let col = 0; col < m; col++) {\n      ans += Math.min(vmax[col] - grid[row][col], hmax[row] - grid[row][col]);\n    }\n  }\n  return ans;\n}"
        },
        {
            "script": "python",
            "time": 54,
            "memory": 16.57,
            "desc": "遍历。",
            "code": "class Solution:\n    def maxIncreaseKeepingSkyline(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        rows = [0] * n\n        cols = [0] * n\n        for i in range(n):\n            for j in range(n):\n                rows[i] = max(rows[i], grid[i][j])\n                cols[j] = max(cols[j], grid[i][j])\n        return sum(min(rows[i], cols[j]) - grid[i][j] for i in range(n) for j in range(n))",
            "date": "2024-07-14"
        }
    ],
    "tagList": ["贪心", "数组", "矩阵"],
    "level": "Medium"
}
