{
    "id": "857",
    "name": "830.较大分组的位置",
    "url": "https://leetcode.cn/problems/positions-of-large-groups",
    "difficulty": "简单",
    "tag": [
        "字符串"
    ],
    "desc": "在一个由小写字母构成的字符串 s 中，包含由一些连续的相同字符所构成的分组。找到每一个 较大分组 的区间，按起始位置下标递增顺序排序后，返回结果。",
    "solutions": [
        {
            "date": 1609776000000,
            "time": 100,
            "memory": 42.1,
            "script": "typescript",
            "desc": "遍历后对每一项进行判断是否符合条件。",
            "code": "function largeGroupPositions(s: string): number[][] {\n  const len = s.length;\n  const ans: number[][] = [];\n  const comp = (index: number): number => {\n    const c = s[index];\n    let count = 1;\n    let i = index + 1;\n    for (; i < len; i++)\n      if (s[i] === c) count++;\n      else break;\n    if (count < 3) return index;\n    const nextI = index + count - 1;\n    ans.push([index, nextI]);\n    return nextI;\n  };\n  for (let i = 0; i < len; i++) i = comp(i);\n  return ans;\n}"
        },
        {
            "date": 1609776000000,
            "time": 136,
            "memory": 42.5,
            "script": "typescript",
            "desc": "从后往前遍历。",
            "code": "function largeGroupPositions(s: string): number[][] {\n  const len = s.length;\n  const ans: number[][] = [];\n  let startI = len - 1;\n  for (let i = startI - 1; i >= 0; i--) {\n    if (i === 0 && s[i] === s[startI]) {\n      startI - i + 1 >= 3 && ans.unshift([i, startI]);\n    } else if (s[i] !== s[startI]) {\n      startI - i >= 3 && ans.unshift([i + 1, startI]);\n      startI = i;\n    }\n  }\n  return ans;\n}"
        }
    ]
}