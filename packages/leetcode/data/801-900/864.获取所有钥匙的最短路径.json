{
    "name": "864. 获取所有钥匙的最短路径",
    "url": "https://leetcode.cn/problems/shortest-path-to-get-all-keys/",
    "difficulty": "困难",
    "tag": [
        "位运算",
        "广度优先搜索",
        "数组",
        "矩阵"
    ],
    "desc": "返回获取所有钥匙所需要的移动的最少次数。如果无法获取所有钥匙，返回 -1 。",
    "solutions": [
        {
            "date": 1668009600000,
            "time": 16,
            "memory": 9.9,
            "script": "cpp",
            "desc": "bfs，通过 mask 记录当前拿到的钥匙数。",
            "code": "const int dirs[4][2] = {\n    {0, 1}, {0, -1},\n    {1, 0}, {-1, 0}\n};\nstruct Node {\n    int x, y, mask;\n    Node(int x, int y, int mask = 0): x(x), y(y), mask(mask){}\n};\nclass Solution {\npublic:\n    int shortestPathAllKeys(vector<string>& grid) {\n        int n = grid.size(), m = grid[0].size(), sx = -1, sy = -1, mmap[35][35][70] = {0}, MAX_MASK = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == '@') sx = i, sy = j;\n                else if (islower(grid[i][j])) MAX_MASK |= (1 << grid[i][j] - 'a');\n            }\n        }\n        int size = 1, step = 0;\n        queue<Node> q;\n        q.push(Node(sx, sy));\n        mmap[sx][sy][0] = 1;\n        while (!q.empty()) {\n            Node node = q.front();\n            // cout << \"===\" << endl\n            //      << \"step = \" << step\n            //      << \", x = \" << node.x\n            //      << \", y = \" << node.y\n            //      << \", mask = \" << node.mask\n            //      << endl;\n            if (node.mask == MAX_MASK) return step;\n            q.pop();\n            for (int i = 0; i < 4; i++) {\n                int nx = node.x + dirs[i][0], ny = node.y + dirs[i][1];\n                if (nx < 0 || nx == n || ny < 0 || ny == m) continue;\n                char c = grid[nx][ny];\n                if (c == '#') continue;\n                if (isupper(c) && (node.mask & (1 << c - 'A')) == 0) continue;\n                Node next(nx, ny, node.mask);\n                if (islower(c)) next.mask |= 1 << c - 'a';\n                if (mmap[next.x][next.y][next.mask]) continue;\n                mmap[next.x][next.y][next.mask] = 1;\n                q.push(next);\n            }\n            if (--size == 0) {\n                size = q.size();\n                step++;\n            }\n        }\n        return -1;\n    }\n};"
        }
    ]
}