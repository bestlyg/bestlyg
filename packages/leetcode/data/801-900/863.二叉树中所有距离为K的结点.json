{
    "id": "893",
    "name": "863.二叉树中所有距离为K的结点",
    "url": "https://leetcode.cn/problems/all-nodes-distance-k-in-binary-tree",
    "difficulty": "中等",
    "tag": ["树", "深度优先搜索", "广度优先搜索", "哈希表", "二叉树"],
    "desc": "给定一个二叉树（具有根结点 root）， 一个目标结点 target ，和一个整数值 K 。",
    "solutions": [
        {
            "date": 1627142400000,
            "time": 88,
            "memory": 39.9,
            "script": "typescript",
            "desc": "向上寻找，向下寻找。",
            "code": "function distanceK(root: TreeNode | null, target: TreeNode | null, k: number): number[] {\n  const ans: number[] = [];\n  find();\n  return ans;\n  function find(node: TreeNode | null = root): number {\n    if (node === null) return -1;\n    if (node === target) {\n      dfs(node);\n      return k - 1;\n    }\n    let step = find(node.left);\n    if (step !== -1) {\n      if (step === 0) {\n        ans.push(node.val);\n        return -1;\n      } else {\n        dfs(node.right, step - 1);\n        return step - 1;\n      }\n    }\n    step = find(node.right);\n    if (step !== -1) {\n      if (step === 0) {\n        ans.push(node.val);\n        return -1;\n      } else {\n        dfs(node.left, step - 1);\n        return step - 1;\n      }\n    }\n    return -1;\n  }\n  function dfs(node: TreeNode | null, level = k): void {\n    if (node === null) return;\n    if (level === 0) {\n      ans.push(node.val);\n    } else {\n      dfs(node.left, level - 1);\n      dfs(node.right, level - 1);\n    }\n  }\n}"
        },
        {
            "date": 1627401600000,
            "time": 88,
            "memory": 40.1,
            "script": "typescript",
            "desc": "递归。",
            "code": "function distanceK(root: TreeNode | null, target: TreeNode | null, k: number): number[] {\n  const ans: number[] = [];\n  find(root);\n  return ans;\n  function find(node: TreeNode | null): number {\n    if (node === null) return -1;\n    if (node === target) {\n      dfs(node, k);\n      return k - 1;\n    }\n    let distance = find(node.left);\n    if (distance !== -1) {\n      if (distance === 0) ans.push(node.val);\n      else {\n        dfs(node.right, distance - 1);\n        return distance - 1;\n      }\n      return -1;\n    }\n    distance = find(node.right);\n    if (distance !== -1) {\n      if (distance === 0) ans.push(node.val);\n      else {\n        dfs(node.left, distance - 1);\n        return distance - 1;\n      }\n    }\n    return -1;\n  }\n  function dfs(node: TreeNode | null, k: number): void {\n    if (node === null) return;\n    if (k === 0) {\n      ans.push(node.val);\n    } else {\n      dfs(node.left, k - 1);\n      dfs(node.right, k - 1);\n    }\n  }\n}"
        }
    ]
}
