{
    "id": "910",
    "name": "878.第N个神奇数字",
    "url": "https://leetcode.cn/problems/nth-magical-number",
    "difficulty": "困难",
    "tag": ["数学", "二分查找"],
    "desc": "如果正整数可以被 A 或 B 整除，那么它是神奇的。",
    "solutions": [
        {
            "date": 1639152000000,
            "time": 76,
            "memory": 39.3,
            "script": "typescript",
            "desc": "求 1~n\\*min(a,b)中每一个数字，包括前面有的神奇数数量，用二分归为。",
            "code": "function gcd(a: bigint, b: bigint) {\n  return b ? gcd(b, a % b) : a;\n}\nfunction lcm(a: bigint, b: bigint) {\n  return (a * b) / gcd(a, b);\n}\nfunction f(x: bigint, a: bigint, b: bigint) {\n  return x / a + x / b - x / lcm(a, b);\n}\nfunction nthMagicalNumber(n: number, a: number, b: number): number {\n  let l = 1n;\n  let r = BigInt(n * Math.min(a, b));\n  const biga = BigInt(a);\n  const bigb = BigInt(b);\n  while (l < r) {\n    const mid = (l + r) / 2n;\n    const num = f(mid, biga, bigb);\n    if (num >= n) r = mid;\n    else l = mid + 1n;\n  }\n  return Number(l % BigInt(10 ** 9 + 7));\n}"
        },
        {
            "date": 1669046400000,
            "time": 4,
            "memory": 5.7,
            "script": "cpp",
            "desc": "二分，判断当前数是第几个数 = n / a + n / b - n / lcm。",
            "code": "class Solution {\npublic:\n    const int mod = 1e9 + 7;\n    int gcd(int a, int b) {\n        if (b > a) return gcd(b, a);\n        if (b == 0) return a;\n        return gcd(b, a % b);\n    }\n    int lcm(int a, int b) {\n        return a * b / gcd(a, b);\n    }\n    int nthMagicalNumber(int n, int a, int b) {\n        long long l = min(a, b), r = n * l, m, nlcm = lcm(a, b);\n        while (l < r) {\n            m = (l + r) >> 1;\n            int num = m / a + m / b - m / nlcm;\n            if (num >= n) r = m;\n            else l = m + 1;\n        }\n        return l % mod;\n    }\n};"
        }
    ]
}
