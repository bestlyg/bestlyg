{
    "id": "823",
    "name": "805.数组的均值分割",
    "url": "https://leetcode.cn/problems/split-array-with-same-average",
    "desc": "我们要将  nums  数组中的每个元素移动到  A  数组 或者  B  数组中，使得  A  数组和  B  数组不为空，并且  average(A) == average(B) 。",
    "solutions": [
        {
            "date": "2022-11-14",
            "time": 148,
            "memory": 18.1,
            "script": "cpp",
            "desc": "折半搜索，利用二进制统计前半部分取 n 个数的 sum 存入 map，再统计后半部分取 n 个数，两者相加。",
            "code": "class Solution {\npublic:\n    bool splitArraySameAverage(vector<int>& nums) {\n        int n = nums.size(), half = n / 2,\n            sum = accumulate(nums.begin(), nums.end(), 0);\n        unordered_map<int, unordered_set<int>> m;\n        for (int i = 0, len = 1 << half; i < len; i++) {\n            int total = 0, cnt = 0;\n            for (int j = 0; j < half; j++) {\n                if ((i & (1 << j)) == 0) continue;\n                total += nums[j];\n                cnt++;\n            }\n            m[cnt].insert(total);\n        }\n        for (int i = 0; i < (1 << (n - half)); i++) {\n            int total = 0, cnt = 0;\n            for (int j = half; j < n; j++) {\n                if ((i & 1 << (j - half)) == 0) continue;\n                total += nums[j];\n                cnt++;\n            }\n            // j : 左边拿几个数\n            for (int j = max(1, cnt); j < n - 1; j++) {\n                if (j * sum % n != 0) continue;\n                int prevCnt = j - cnt;\n                if (!m.count(prevCnt)) continue;\n                int leftTotal = j * sum / n;\n                int prevTotal = leftTotal - total;\n                if (!m[prevCnt].count(prevTotal)) continue;\n                return true;\n            }\n        }\n        return false;\n    }\n};"
        },
        {
            "date": "2022-11-14",
            "time": 176,
            "memory": 51.3,
            "script": "cpp",
            "desc": "同上。",
            "code": "class Solution {\npublic:\n    bool splitArraySameAverage(vector<int>& nums) {\n        int n = nums.size(), half = n / 2,\n            sum = accumulate(nums.begin(), nums.end(), 0);\n        unordered_map<int, unordered_set<int>> m;\n        for (int i = 0, len = 1 << half; i < len; i++) {\n            int total = 0, cnt = 0;\n            for (int j = 0; j < half; j++) {\n                if ((i & (1 << j)) == 0) continue;\n                total += nums[j];\n                cnt++;\n            }\n            m[total].insert(cnt);\n        }\n        for (int i = 0; i < (1 << (n - half)); i++) {\n\n            int total = 0, cnt = 0;\n            for (int j = half; j < n; j++) {\n                if ((i & 1 << (j - half)) == 0) continue;\n                total += nums[j];\n                cnt++;\n            }\n            // j : 左边拿几个数\n            for (int j = max(1, cnt); j < n - 1; j++) {\n                if (j * sum % n != 0) continue;\n                int need = j * sum / n - total;\n                if (!m.count(need)) continue;\n                if (!m[need].count(j - cnt)) continue;\n                return true;\n            }\n        }\n        return false;\n    }\n}"
        }
    ],
    "tagList": ["位运算", "数组", "数学", "动态规划", "状态压缩"],
    "level": "Hard"
}
