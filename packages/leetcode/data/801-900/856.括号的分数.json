{
    "id": "886",
    "name": "856.括号的分数",
    "url": "https://leetcode.cn/problems/score-of-parentheses",
    "desc": "给定一个平衡括号字符串  S，按下述规则计算该字符串的分数：() 得 1 分。AB 得  A + B  分，其中 A 和 B 是平衡括号字符串。(A) 得  2 \\* A  分，其中 A 是平衡括号字符串。",
    "solutions": [
        {
            "date": "2020-02-16",
            "time": 4,
            "memory": 41.3,
            "script": "java",
            "desc": "左括号压栈，右括号时判断当前括号里是否含有\\*，含有则出栈并把个数\\*2，最后算\\*的个数。",
            "code": "class Solution {\n    public int scoreOfParentheses(String S) {\n        Stack<Character> stack = new Stack<Character>();\n\t\tint len = S.length();\n\t\tint sum = 0, tem = 0;\n\t\tfor (int i = 0; i < len; i++) {\n//\t\t\tSystem.out.println(stack + \",sum:\" + sum + \",tem:\" + tem);\n\t\t\tchar c = S.charAt(i);\n\t\t\tif (c == '(') {\n\t\t\t\tstack.push(c);\n\t\t\t} else {\n\t\t\t\tchar d = stack.pop();\n\t\t\t\tif (d == '(') {\n\t\t\t\t\tstack.push('*');\n\t\t\t\t}\n\t\t\t\tif (d == '*') {\n\t\t\t\t\ttem++;\n\t\t\t\t\twhile (stack.pop() == '*') {\n\t\t\t\t\t\ttem++;\n\t\t\t\t\t}\n\t\t\t\t\ttem *= 2;\n//\t\t\t\t\tSystem.out.println(stack);\n//\t\t\t\t\tSystem.out.println(tem);\n\t\t\t\t\twhile (tem != 0) {\n\t\t\t\t\t\tstack.push('*');\n\t\t\t\t\t\ttem--;\n\t\t\t\t\t}\n//\t\t\t\t\tSystem.out.println(stack);\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\twhile (!stack.isEmpty()) {\n\t\t\tstack.pop();\n\t\t\tsum++;\n\t\t}\n\t\treturn sum;\n    }\n}"
        },
        {
            "date": "2022-10-09",
            "time": 0,
            "memory": 5.9,
            "script": "cpp",
            "desc": "栈。",
            "code": "class Solution {\npublic:\n    int scoreOfParentheses(string s) {\n        vector<int> st;\n        for (auto &c : s) {\n            if (c == '(') {\n                st.push_back(-1);\n            } else if (st.back() == -1) {\n                st.pop_back();\n                st.push_back(1);\n            } else {\n                int num = 0;\n                while (st.back() != -1) {\n                    num += st.back();\n                    st.pop_back();\n                }\n                st.pop_back();\n                st.push_back(num * 2);\n            }\n        }\n        return accumulate(st.begin(), st.end(), 0);\n    }\n};"
        }
    ],
    "tagList": ["栈", "字符串"],
    "level": "Medium"
}
