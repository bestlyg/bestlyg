{
    "id": "905",
    "name": "873.最长的斐波那契子序列的长度",
    "url": "https://leetcode.cn/problems/length-of-longest-fibonacci-subsequence",
    "difficulty": "中等",
    "tag": ["数组", "哈希表", "动态规划"],
    "desc": "给定一个严格递增的正整数数组形成序列 arr ，找到 arr 中最长的斐波那契式的子序列的长度。如果一个不存在，返回 0 。",
    "solutions": [
        {
            "date": 1657468800000,
            "time": 480,
            "memory": 11.6,
            "script": "cpp",
            "desc": "哈希存储后遍历每条最长链路。",
            "code": "class Solution {\n   public:\n    int lenLongestFibSubseq(vector<int> &arr) {\n        unordered_set<int> s;\n        for (auto &num : arr) s.insert(num);\n        int ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                ans = max(ans, check(s, arr[j], arr[i]) + 2);\n            }\n        }\n        return ans < 3 ? 0 : ans;\n    }\n    int check(unordered_set<int> &s, int num1, int num2) {\n        if (s.count(num1 + num2)) return 1 + check(s, num2, num1 + num2);\n        return 0;\n    }\n};"
        }
    ]
}
