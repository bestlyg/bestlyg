{
    "id": "896",
    "name": "865.具有所有最深节点的最小子树",
    "url": "https://leetcode.cn/problems/smallest-subtree-with-all-the-deepest-nodes",
    "difficulty": "中等",
    "tag": [
        "树",
        "深度优先搜索",
        "广度优先搜索",
        "哈希表",
        "二叉树"
    ],
    "desc": "给定一个根为 root 的二叉树，每个节点的深度是 该节点到根的最短距离 。返回包含原始树中所有 最深节点 的 最小子树 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 8,
            "memory": 13.76,
            "desc": "dfs。",
            "code": "class Solution {\npublic:\n    TreeNode* subtreeWithAllDeepest(TreeNode* root) {\n        function<pair<int, TreeNode*>(TreeNode*, int)> dfs = [&](TreeNode *node, int level) -> pair<int, TreeNode*> {\n            pair<int, TreeNode*> res = make_pair(level, node);\n            if (node->left) {\n                res = dfs(node->left, level + 1);\n            }\n            if (node->right) {\n                auto rres = dfs(node->right, level + 1);\n                if (rres.first > res.first) res = rres;\n                else if (rres.first == res.first) res.second = node;\n            }\n            return res;\n        };\n        return dfs(root, 0).second;\n    }\n};",
            "date": 1693929600000
        }
    ]
}