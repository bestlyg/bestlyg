{
    "id": "852",
    "name": "825.适龄的朋友",
    "url": "https://leetcode.cn/problems/friends-of-appropriate-ages",
    "desc": "在社交媒体网站上有 n 个用户。返回在该社交媒体网站上产生的好友请求总数。",
    "solutions": [
        {
            "date": "2021-12-27",
            "time": 1320,
            "memory": 36.5,
            "script": "cpp",
            "desc": "排序后双指针移动。",
            "code": "class Solution {\n   public:\n    int numFriendRequests(vector<int>& ages) {\n        sort(ages.begin(), ages.end());\n        int n = ages.size(), ans = 0;\n        for (int l = 0, r = 0; r < n; r++) {\n            while (l < r && ages[l] <= ages[r] / 2.0 + 7) l++;\n            ans += r - l;\n            if (ages[r] / 2.0 + 7 < ages[r]) {\n                int tmp = r;\n                while (tmp + 1 < n && ages[tmp + 1] == ages[tmp]) {\n                    ans++;\n                    tmp++;\n                }\n            }\n        }\n        return ans;\n    }\n};"
        },
        {
            "date": "2021-12-27",
            "time": 108,
            "memory": 36.2,
            "script": "cpp",
            "desc": "二分查找最小值和最大值。",
            "code": "class Solution {\n   public:\n    int bs(vector<int>& ages, double num) {\n        int l = 0, r = ages.size(), m;\n        while (l < r) {\n            m = (l + r) / 2;\n            if (ages[m] > num)\n                r = m;\n            else\n                l = m + 1;\n        }\n        return l;\n    }\n    int numFriendRequests(vector<int>& ages) {\n        sort(ages.begin(), ages.end());\n        int n = ages.size(), ans = 0;\n        for (int i = 0; i < n; i++) {\n            double min = ages[i] / 2.0 + 7, max = ages[i];\n            if (min > max) continue;\n            int imin = bs(ages, min), imax = bs(ages, max);\n            if (imin < imax) ans += imax - imin - 1;\n        }\n        return ans;\n    }\n};"
        },
        {
            "date": "2021-12-27",
            "time": 56,
            "memory": 36.3,
            "script": "cpp",
            "desc": "双指针移动。",
            "code": "class Solution {\n   public:\n    int numFriendRequests(vector<int>& ages) {\n        sort(ages.begin(), ages.end());\n        int n = ages.size(), l = 0, r = 0, ans = 0;\n        for (int i = 0; i < n; i++) {\n            if (ages[i] * 0.5 + 7 > ages[i]) continue;\n            while (r + 1 < n && ages[r + 1] <=ages[i]) r++;\n            while (l < r && ages[l] <= ages[i] * 0.5 + 7) l++;\n            ans += r - l;\n        }\n        return ans;\n    }\n};"
        },
        {
            "time": 205,
            "memory": 17.11,
            "desc": "对于每个用户进行二分查找合适的区间。",
            "code": "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        ages.sort()\n        res = 0\n        for x in range(len(ages)):\n            starty = bisect_right(ages, 0.5 * ages[x] + 7)\n            endy = bisect_right(ages, ages[x])\n            if ages[x] < 100: endy = min(endy, bisect_right(ages, 100))\n            if starty < endy: res += endy - starty\n            if starty <= x < endy: res -= 1\n        return res",
            "script": "python",
            "date": "2024-11-17"
        }
    ],
    "tagList": ["数组", "双指针", "二分查找", "排序"],
    "level": "Medium"
}
