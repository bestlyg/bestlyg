{
    "id": "1000370",
    "name": "LCP41.黑白翻转棋",
    "url": "https://leetcode.cn/problems/fHi6rV",
    "difficulty": "中等",
    "tag": [
        "广度优先搜索",
        "数组",
        "矩阵"
    ],
    "desc": "在 n*m 大小的棋盘中，有黑白两种棋子，黑棋记作字母 \"X\", 白棋记作字母 \"O\"，空余位置记作 \".\"。当落下的棋子与其他相同颜色的棋子在行、列或对角线完全包围（中间不存在空白位置）另一种颜色的棋子，则可以翻转这些棋子的颜色。若下一步可放置一枚黑棋，请问选手最多能翻转多少枚白棋。",
    "solutions": [
        {
            "script": "cpp",
            "time": 8,
            "memory": 11.4,
            "desc": "暴力枚举。",
            "code": "#define X first\n#define Y second\n#define pii pair<int, int>\n\nclass Solution {\npublic:\n    vector<vector<int>> dirs2 = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};\n\n    int flipChess(vector<string>& chessboard) {\n        int n = chessboard.size(), m = chessboard[0].size(), res = 0;\n        function<void(vector<string>&, int, int, int&)> dfs = [&](vector<string>& chessboard, int i, int j, int& sum) {\n            vector<pii> list;\n            for (auto &dir : dirs2) {\n                int ni = i + dir[0], nj = j + dir[1];\n                vector<pii> tmp;\n                while (ni >= 0 && ni < n && nj >= 0 && nj < m && chessboard[ni][nj] == 'O') {\n                    tmp.push_back(make_pair(ni, nj));\n                    ni += dir[0];\n                    nj += dir[1];\n                }\n                if (ni >= 0 && ni < n && nj >= 0 && nj < m && chessboard[ni][nj] == 'X') {\n                    for (auto &item : tmp) list.push_back(item);\n                }\n            }\n\n            sum += list.size();\n\n            for (auto &next : list) chessboard[next.X][next.Y] = 'X';\n            for (auto &next : list) dfs(chessboard, next.X, next.Y, sum);\n        };\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (chessboard[i][j] == '.') {\n                    auto board = chessboard;\n                    board[i][j] = 'X';\n                    int sum = 0;\n                    dfs(board, i, j, sum);\n                    res = max(res, sum);\n                }\n            }\n        }\n        return res;\n    }\n};",
            "date": 1687276800000
        },
        {
            "script": "python",
            "time": 88,
            "memory": 16,
            "desc": "同上。",
            "code": "dirs2 = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n\n    class Solution:\n        def flipChess(self, chessboard: List[str]) -> int:\n            n = len(chessboard)\n            m = len(chessboard[0])\n            sum = res = 0\n    \n            def dfs(board:List[List[str]],i:int,j:int):\n                nonlocal sum\n                list = []\n                for dir in dirs2:\n                    ni = i + dir[0]\n                    nj = j + dir[1]\n                    tmp = []\n                    while 0 <= ni < n and 0 <= nj < m and board[ni][nj] == 'O':\n                        tmp.append((ni,nj))\n                        ni += dir[0]\n                        nj += dir[1]\n                    if 0 <= ni < n and 0 <= nj < m and board[ni][nj] == 'X':\n                        for item in tmp:\n                            list.append(item)\n                sum += len(list)\n    \n                for i,j in list: board[i][j] = 'X'\n                for i,j in list: dfs(board,i,j)\n    \n            for i in range(n):\n                for j in range(m):\n                    if chessboard[i][j] == '.':\n                        board = []\n                        for item in chessboard:\n                            board.append(list(item))\n                        board[i][j] = 'X'\n                        sum = 0\n                        dfs(board, i, j)\n                        res = max(res, sum)\n            return res",
            "date": 1687276800000
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 2.1,
            "desc": "同上。",
            "code": "pub fn str_to_vec(s: &String) -> Vec<char> {\n    s.chars().collect()\n}\npub const dirs2: [[i32; 2]; 8] = [[0, 1], [0, -1], [1, 0], [-1, 0], [1, 1], [1, -1], [-1, 1], [-1, -1]];\n\nfn dfs(board: &mut Vec<Vec<char>>, sum: &mut i32, i: usize, j: usize) {\n    let mut list = vec![];\n    for dir in dirs2 {\n        let mut ni = i as i32 + dir[0];\n        let mut nj = j as i32 + dir[1];\n        let mut tmp = vec![];\n        while ni >= 0\n            && ni < board.len() as i32\n            && nj >= 0\n            && nj < board[0].len() as i32\n            && board[ni as usize][nj as usize] == 'O'\n        {\n            tmp.push((ni, nj));\n            ni += dir[0];\n            nj += dir[1];\n        }\n        if ni >= 0\n            && ni < board.len() as i32\n            && nj >= 0\n            && nj < board[0].len() as i32\n            && board[ni as usize][nj as usize] == 'X'\n        {\n            for item in tmp {\n                list.push(item);\n            }\n        }\n    }\n    *sum += list.len() as i32;\n    for (i, j) in &list {\n        board[*i as usize][*j as usize] = 'X';\n    }\n    for (i, j) in &list {\n        dfs(board, sum, *i as usize, *j as usize);\n    }\n}\n\nimpl Solution {\n    pub fn flip_chess(chessboard: Vec<String>) -> i32 {\n        let chessboard = chessboard\n            .into_iter()\n            .map(|item| str_to_vec(&item))\n            .collect::<Vec<Vec<char>>>();\n        let n = chessboard.len();\n        let m = chessboard[0].len();\n        let mut res = 0;\n        for i in 0..n {\n            for j in 0..m {\n                if chessboard[i][j] == '.' {\n                    let mut board = chessboard.clone();\n                    board[i][j] = 'X';\n                    let mut sum = 0;\n                    dfs(&mut board, &mut sum, i, j);\n                    res = res.max(sum);\n                }\n            }\n        }\n        res\n    }\n}",
            "date": 1687276800000
        }
    ]
}