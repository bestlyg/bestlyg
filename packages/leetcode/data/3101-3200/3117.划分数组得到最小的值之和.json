{
    "name": "3117.划分数组得到最小的值之和",
    "url": "https://leetcode.cn/problems/minimum-sum-of-values-by-dividing-array",
    "level": "Easy",
    "tagList": [],
    "desc": "返回将 nums 划分为 m 个子数组所能得到的可能的 最小 子数组 值 之和。如果无法完成这样的划分，则返回 -1 。",
    "solutions": [
        {
            "script": "python",
            "time": 1329,
            "memory": 419.88,
            "desc": "dfs记录当前遍历到的两个数组下标和当前记录的与值",
            "code": "class Solution:\n    def minimumValueSum(self, nums: List[int], andValues: List[int]) -> int:\n        nlen = len(nums)\n        alen = len(andValues)\n        @cache\n        def dfs(nidx: int, aidx: int, val: int) -> int:\n            if nidx == nlen: return 0 if aidx == alen else inf\n            if aidx == alen: return inf\n            if nlen - nidx < alen - aidx: return inf\n            val &= nums[nidx]\n            res = dfs(nidx + 1, aidx, val)\n            if val == andValues[aidx]: res = min(res, dfs(nidx + 1, aidx + 1, -1) + nums[nidx])\n            return res\n        res = dfs(0, 0, -1)\n        return res if res != inf else -1"
        }
    ]
}