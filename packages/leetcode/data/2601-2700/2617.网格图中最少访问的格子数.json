{
    "id": "2697",
    "name": "2617.网格图中最少访问的格子数",
    "url": "https://leetcode.cn/problems/minimum-number-of-visited-cells-in-a-grid",
    "difficulty": "困难",
    "tag": [
        "栈",
        "并查集",
        "树状数组",
        "线段树",
        "数组",
        "二分查找",
        "动态规划"
    ],
    "desc": "请你返回到达 右下角 格子 (m - 1, n - 1) 需要经过的最少移动格子数，如果无法到达右下角格子，请你返回 -1 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 1312,
            "memory": 340.1,
            "desc": "平衡树。",
            "code": "#define X first\n#define Y second\nclass Solution {\npublic:\n    typedef pair<int, int> pii;\n    int minimumVisitedCells(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        vector<set<int>> rows(n), cols(m);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                rows[i].insert(j);\n                cols[j].insert(i);\n            }\n        }\n        queue<pii> q;\n        q.push(make_pair(0, 0));\n        int size = 1, step = 1;\n        while (q.size()) {\n            auto cur = q.front();\n            q.pop();\n            if (cur.X == n - 1 && cur.Y == m - 1) return step;\n            int nmin = cur.Y + 1, nmax = grid[cur.X][cur.Y] + cur.Y;\n            auto it = rows[cur.X].lower_bound(nmin);\n            while (it != rows[cur.X].end() && *it <= nmax) {\n                q.push(make_pair(cur.X, *it));\n                it = rows[cur.X].erase(it);\n            }\n            nmin = cur.X + 1, nmax = grid[cur.X][cur.Y] + cur.X;\n            it = cols[cur.Y].lower_bound(nmin);\n            while (it != cols[cur.Y].end() && *it <= nmax) {\n                q.push(make_pair(*it, cur.Y));\n                it = cols[cur.Y].erase(it);\n            }\n            if (--size == 0) {\n                size = q.size();\n                step++;\n            }\n        }\n        return -1;\n    }\n};",
            "date": 1680969600000
        }
    ]
}