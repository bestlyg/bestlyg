{
    "id": "2737",
    "name": "2643.一最多的行",
    "url": "https://leetcode.cn/problems/row-with-maximum-ones",
    "difficulty": "简单",
    "tag": ["数组", "矩阵"],
    "desc": "给你一个大小为 m x n 的二进制矩阵 mat ，请你找出包含最多 1 的行的下标（从 0 开始）以及这一行中 1 的数目。如果有多行包含最多的 1 ，只需要选择 行下标最小 的那一行。返回一个由行下标和该行中 1 的数量组成的数组。",
    "solutions": [
        {
            "script": "cpp",
            "time": 104,
            "memory": 59.2,
            "desc": "遍历。",
            "code": "class Solution {\n    public:\n        vector<int> rowAndMaximumOnes(vector<vector<int>>& mat) {\n            vector<int> res(2, 0);\n            for (int i = 0; i < mat.size(); i++) {\n                int cnt = 0;\n                for (auto &v: mat[i]) {\n                    if (v == 1) cnt++;\n                }\n                if (res[1] < cnt) {\n                    res[0] = i;\n                    res[1] = cnt;\n                }\n            }\n            return res;\n        }\n    };",
            "date": 1681574400000
        },
        {
            "script": "python",
            "time": 88,
            "memory": 15.7,
            "desc": "同上。",
            "code": "class Solution:\n    def rowAndMaximumOnes(self, mat: List[List[int]]) -> List[int]:\n        res = [0, 0]\n        for i in range(len(mat)):\n            cnt = 0\n            for v in mat[i]:\n                if v == 1:\n                    cnt += 1\n            if res[1] < cnt:\n                res[0] = i\n                res[1] = cnt\n        return res",
            "date": 1681574400000
        },
        {
            "script": "rust",
            "time": 20,
            "memory": 2.3,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn row_and_maximum_ones(mat: Vec<Vec<i32>>) -> Vec<i32> {\n        let mut res = vec![0, 0];\n        for i in 0..mat.len() {\n            let mut cnt = 0;\n            for v in mat[i].iter() {\n                if *v == 1 {\n                    cnt += 1;\n                }\n            }\n            if res[1] < cnt {\n                res[0] = i;\n                res[1] = cnt;\n            }\n        }\n        res.into_iter().map(|v|v as i32).collect()\n    }\n}",
            "date": 1681574400000
        }
    ]
}
