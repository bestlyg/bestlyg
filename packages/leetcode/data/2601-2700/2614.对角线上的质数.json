{
    "id": "2722",
    "name": "2614.对角线上的质数",
    "url": "https://leetcode.cn/problems/prime-in-diagonal",
    "desc": "给你一个下标从 0 开始的二维整数数组 nums 。返回位于 nums 至少一条 对角线 上的最大 质数 。如果任一对角线上均不存在质数，返回 0 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 268,
            "memory": 69.8,
            "desc": "线性筛。",
            "code": "class Solution {\npublic:\n    int diagonalPrime(vector<vector<int>>& nums) {\n        int n = nums.size(), res = 0, MAX = 0;\n        unordered_set<int> s;\n        for (int i = 0; i < n; i++) {\n            s.insert(nums[i][i]);\n            s.insert(nums[i][n - 1 - i]);\n            MAX = max(MAX, nums[i][i]);\n            MAX = max(MAX, nums[i][n - 1 - i]);\n        }\n        MAX++;\n        vector<int> primes(MAX, 0);\n        for (int i = 2; i < MAX; i++) {\n            if (primes[i] == 0) {\n                primes[++primes[0]] = i;\n                if (s.count(i)) res = max(res, i);\n            }\n            for (int j = 1; j <= primes[0] && i * primes[j] < MAX; j++) {\n                primes[i * primes[j]] = 1;\n                if (i % primes[j] == 0) break;\n            }\n        }\n        return res;\n    }\n};",
            "date": "2023-04-09"
        },
        {
            "script": "cpp",
            "time": 72,
            "memory": 34.7,
            "desc": "枚举。",
            "code": "class Solution {\npublic:\n    bool check(int num) {\n        if (num == 1) return false;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n    int diagonalPrime(vector<vector<int>>& nums) {\n        int n = nums.size(), res = 0;\n        for (int i = 0; i < n; i++) {\n            if (check(nums[i][i])) res = max(res, nums[i][i]);\n            if (check(nums[i][n - 1 - i])) res = max(res, nums[i][n - 1 - i]);\n        }\n        return res;\n    }\n};",
            "date": "2023-04-09"
        },
        {
            "script": "python",
            "time": 216,
            "memory": 26.9,
            "desc": "同上。",
            "code": "def check(num: int):\n    if num == 1:\n        return False\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            return False\n        i += 1\n    return True\n\nclass Solution:\n    def diagonalPrime(self, nums: List[List[int]]) -> int:\n        n = len(nums)\n        res = 0\n        for i in range(n):\n            if check(nums[i][i]):\n                res = max(res, nums[i][i])\n            if check(nums[i][n - 1 - i]):\n                res = max(res, nums[i][n - 1 - i])\n        return res",
            "date": "2023-04-09"
        },
        {
            "script": "rust",
            "time": 16,
            "memory": 3.6,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn diagonal_prime(nums: Vec<Vec<i32>>) -> i32 {\n        use std::cmp::max;\n        let check = |num: i32| {\n            if num == 1 {\n                false\n            } else {\n                let mut i = 2;\n                while i * i <= num {\n                    if num % i == 0 {\n                        return false;\n                    }\n                    i += 1;\n                }\n                true\n            }\n        };\n        let n = nums.len();\n        let mut res = 0;\n        for i in 0..n {\n            if check(nums[i][i]) {\n                res = max(res, nums[i][i]);\n            }\n            if check(nums[i][n - 1 - i]) {\n                res = max(res, nums[i][n - 1 - i]);\n            }\n        }\n        res\n    }\n}",
            "date": "2023-04-09"
        }
    ],
    "tagList": [
        "数组",
        "数学",
        "矩阵",
        "数论"
    ],
    "level": "Easy"
}