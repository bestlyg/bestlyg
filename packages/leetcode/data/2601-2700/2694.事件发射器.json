{
    "id": "2797",
    "name": "2694.事件发射器",
    "url": "https://leetcode.cn/problems/event-emitter",
    "desc": "设计一个 EventEmitter 类。这个接口与 Node.js 或 DOM 的 Event Target 接口相似，但有一些差异。EventEmitter 应该允许订阅事件和触发事件。",
    "solutions": [
        {
            "script": "typescript",
            "time": 68,
            "memory": 44,
            "desc": "利用闭包map存储已经订阅的消息。",
            "code": "type Callback = (...args: any[]) => any;\ntype Subscription = {\n    unsubscribe: () => void;\n};\n\nclass EventEmitter {\n    map: Record<string, Set<Callback>> = {}\n    subscribe(eventName: string, callback: Callback): Subscription {\n        if (!this.map[eventName]) this.map[eventName] = new Set();\n        this.map[eventName].add(callback);\n        return {\n            unsubscribe: () => {\n                this.map[eventName].delete(callback);\n            },\n        };\n    }\n\n    emit(eventName: string, args: any[] = []): any {\n        return Array.from(this.map[eventName] ?? []).map(fn => fn(...args));\n    }\n}",
            "date": "2023-05-23"
        }
    ],
    "tagList": [],
    "level": "Medium"
}
