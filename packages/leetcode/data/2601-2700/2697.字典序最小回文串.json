{
    "id": "2816",
    "name": "2697.字典序最小回文串",
    "url": "https://leetcode.cn/problems/lexicographically-smallest-palindrome",
    "desc": "返回最终的回文字符串。",
    "solutions": [
        {
            "script": "python",
            "time": 148,
            "memory": 16.23,
            "desc": "遍历。",
            "code": "class Solution:\n    def makeSmallestPalindrome(self, s: str) -> str:\n        arr = list(s)\n        for i in range(len(arr) // 2):\n            arr[i] = arr[len(arr) - 1 - i]= min(arr[i], arr[len(arr) - 1 - i])\n        return ''.join(arr)",
            "date": "2023-12-13"
        },
        {
            "script": "cpp",
            "time": 32,
            "memory": 15.03,
            "desc": "同上。",
            "code": "class Solution {\npublic:\n    string makeSmallestPalindrome(string s) {\n        for (int i = 0; i < s.size() / 2; i++) {\n            s[i] = s[s.size() - 1 - i] = min(s[i], s[s.size() - 1 - i]);\n        }\n        return s;\n    }\n};",
            "date": "2023-12-13"
        },
        {
            "script": "rust",
            "time": 8,
            "memory": 2.35,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn make_smallest_palindrome(s: String) -> String {\n        let mut arr = s.chars().map(|c| c as u8).collect::<Vec<u8>>();\n        let n = arr.len();\n        for i in 0..n / 2 {\n            arr[i] = arr[i].min(arr[n - 1 - i]);\n            arr[n - 1 - i] = arr[i];\n        }\n        String::from_utf8(arr).unwrap()\n    }\n}",
            "date": "2023-12-13"
        }
    ],
    "tagList": ["贪心", "双指针", "字符串"],
    "level": "Easy"
}
