{
    "id": "2721",
    "name": "2615.等值距离和",
    "url": "https://leetcode.cn/problems/sum-of-distances",
    "difficulty": "中等",
    "tag": [],
    "desc": "给你一个下标从 0 开始的整数数组 nums 。现有一个长度等于 nums.length 的数组 arr 。对于满足 nums[j] == nums[i] 且 j != i 的所有 j ，arr[i] 等于所有 |i - j| 之和。如果不存在这样的 j ，则令 arr[i] 等于 0 。返回数组 arr 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 72,
            "memory": 34.7,
            "desc": "收集所有相同数字的下标，做前缀和进行左右比较。",
            "code": "class Solution {\npublic:\n    typedef long long ll;\n    vector<ll> distance(vector<int>& nums) {\n        int n = nums.size();\n        vector<ll> arr(n, 0);\n        unordered_map<int, vector<int>> m;\n        for (int i = 0; i < n; i++) {\n            m[nums[i]].push_back(i);\n        }\n        for (auto &item : m) {\n            auto &list = item.second;\n            ll sum = 0, left = 0;\n            for (auto &v : list) sum += v - list[0];\n            for (int i = 0; i < list.size(); i++) {\n                arr[list[i]] = sum + left;\n                if (i + 1 < list.size()) {\n                    left += (list[i + 1] - list[i]) * (i + 1);\n                    sum -= (list[i + 1] - list[i]) * (list.size() - 1 - i);\n                }\n            }\n        }\n        return arr;\n    }\n};",
            "date": 1680969600000
        },
        {
            "script": "python3",
            "time": 412,
            "memory": 52.2,
            "desc": "同上。",
            "code": "class Solution:\n    def distance(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        arr = [0] * n\n        m: dict[int, List[int]] = {}\n        for i in range(n):\n            if not nums[i] in m:\n                m[nums[i]] = []\n            m[nums[i]].append(i)\n        for _, list in m.items():\n            l, r = 0, 0\n            for v in list:\n                r += v - list[0]\n            for i in range(len(list)):\n                arr[list[i]] = r + l\n                if i + 1 < len(list):\n                    l += (list[i + 1] - list[i]) * (i + 1)\n                    r -= (list[i + 1] - list[i]) * (len(list) - 1 - i)\n        return arr",
            "date": 1680969600000
        },
        {
            "script": "rust",
            "time": 68,
            "memory": 12,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn distance(nums: Vec<i32>) -> Vec<i64> {\n        use std::collections::HashMap;\n        let n = nums.len();\n        let mut arr: Vec<i64> = vec![0; n];\n        let mut m = HashMap::<i32, Vec<usize>>::new();\n        for i in 0..n {\n            let item = m.entry(nums[i]).or_insert(Vec::new());\n            item.push(i);\n        }\n        for (_, list) in m.into_iter() {\n            let (mut r, mut l) = (0, 0);\n            for v in &list {\n                r += *v - list[0];\n            }\n            for i in 0..list.len() {\n                arr[list[i]] = (r + l) as i64;\n                if i + 1 < list.len() {\n                    l += (list[i + 1] - list[i]) * (i + 1);\n                    r -= (list[i + 1] - list[i]) * (list.len() - 1 - i);\n                }\n            }\n        }\n        arr\n    }\n}",
            "date": 1680969600000
        }
    ]
}