{
    "id": "2022",
    "name": "1911.最大子序列交替和",
    "url": "https://leetcode.cn/problems/maximum-alternating-subsequence-sum",
    "difficulty": "中等",
    "tag": ["数组", "动态规划"],
    "desc": "一个下标从 0 开始的数组的 交替和 定义为 偶数 下标处元素之 和 减去 奇数 下标处元素之 和 。给你一个数组 nums ，请你返回 nums 中任意子序列的 最大交替和 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 328,
            "memory": 149.5,
            "desc": "dp[i][j]表示以nums[i]结尾的时候，奇数和偶数时的最大结果。",
            "code": "class Solution {\npublic:\n    typedef long long ll;\n    ll maxAlternatingSum(vector<int>& nums) {\n        int n = nums.size();\n        vector<vector<ll>> dp(n, vector<ll>(2, 0));\n        dp[0][0] = nums[0];\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + nums[i]);\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - nums[i]);\n        }\n        return dp[n - 1][0];\n    }\n};",
            "date": 1689004800000
        },
        {
            "script": "python",
            "time": 1092,
            "memory": 30.2,
            "desc": "同上。",
            "code": "class Solution:\n    def maxAlternatingSum(self, nums: List[int]) -> int:\n        even = nums[0]\n        odd = 0\n        for i in range(1, len(nums)):\n            even, odd = max(even, odd + nums[i]), max(odd, even - nums[i])\n        return even",
            "date": 1689004800000
        },
        {
            "script": "rust",
            "time": 12,
            "memory": 2.8,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn max_alternating_sum(nums: Vec<i32>) -> i64 {\n        let mut odd = 0;\n        let mut even = nums[0] as i64;\n        for i in 1..nums.len() {\n            even = even.max(odd + nums[i] as i64);\n            odd = odd.max(even - nums[i] as i64);\n        }\n        even\n    }\n}",
            "date": 1689004800000
        }
    ]
}
