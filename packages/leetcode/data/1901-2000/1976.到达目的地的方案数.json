{
    "id": "2090",
    "name": "1976.到达目的地的方案数",
    "url": "https://leetcode.cn/problems/number-of-ways-to-arrive-at-destination",
    "difficulty": "中等",
    "tag": ["图", "拓扑排序", "动态规划", "最短路"],
    "desc": "请返回花费 最少时间 到达目的地的 路径数目 。",
    "solutions": [
        {
            "script": "python",
            "time": 59,
            "memory": 23.55,
            "desc": "最短路遍历时同时记录当前的最大cnt。",
            "code": "class Solution:\n    def countPaths(self, n: int, roads: List[List[int]]) -> int:\n        nodes = [[] for _ in range(n)]\n        for n1, n2, time in roads:\n            nodes[n1].append((n2, time))\n            nodes[n2].append((n1, time))\n        time_map = [inf] * n\n        time_map[0] = 0\n        cnt_map = [0] * n\n        cnt_map[0] = 1\n        heap = [(0, 0)]\n        while heap:\n            time, node = heappop(heap)\n            if time > time_map[node]: continue\n            for child, time2 in nodes[node]:\n                next_time = time + time2\n                if next_time == time_map[child]:\n                    cnt_map[child] = (cnt_map[node] + cnt_map[child]) % (10 ** 9 + 7)\n                elif next_time < time_map[child]:\n                    time_map[child] = next_time\n                    cnt_map[child] = cnt_map[node]\n                    heappush(heap, (next_time, child))\n        return cnt_map[n - 1]",
            "date": 1709568000000
        }
    ]
}
