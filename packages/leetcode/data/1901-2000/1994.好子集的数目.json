{
  "name": "1994. 好子集的数目",
  "url": "https://leetcode-cn.com/problems/the-number-of-good-subsets/",
  "difficulty": "困难",
  "tag": ["位运算", "数组", "数学", "动态规划", "状态压缩"],
  "desc": "请你返回 nums 中不同的 好 子集的数目对 109 + 7 取余 的结果。",
  "solutions": [
    {
      "date": 1645459200000,
      "time": 220,
      "memory": 179.2,
      "script": "c++",
      "desc": "dfs 遍历，对于所有可重合因子进行遍历，可在每个方案中增加 1 的可能性，每个方案都可以选择任意一个 1 或者不选择，总可能性为 pow(2, cnt1)。",
      "code": "int mod = 1e9 + 7;\n#define MAX 40\n\nunordered_map<int, int> m = {\n    {23, 0b00000000010000000000000000000000},\n    {19, 0b00000000000001000000000000000000},\n    {17, 0b00000000000000010000000000000000},\n    {15, 0b00000000000000000000000000010100},\n    {14, 0b00000000000000000000000001000010},\n    {13, 0b00000000000000000001000000000000},\n    {30, 0b00000000000000000000000000010110},\n    {11, 0b00000000000000000000010000000000},\n    {29, 0b00010000000000000000000000000000},\n    {10, 0b00000000000000000000000000010010},\n    {26, 0b00000000000000000001000000000010},\n    {7, 0b00000000000000000000000001000000},\n    {6, 0b00000000000000000000000000000110},\n    {5, 0b00000000000000000000000000010000},\n    {22, 0b00000000000000000000010000000010},\n    {3, 0b00000000000000000000000000000100},\n    {21, 0b00000000000000000000000001000100},\n    {2, 0b00000000000000000000000000000010},\n    {1, 0b00000000000000000000000000000001},\n};\nint mod = 1e9 + 7;\n\n#define MAX 40\n\nclass Solution {\n   public:\n    int arr[MAX] = {0}, num1;\n    int numberOfGoodSubsets(vector<int> &nums) {\n        for (auto &num : nums) {\n            if (m.count(num)) arr[num]++;\n        }\n        num1 = qpow(2, arr[1]);\n        long long ans = 0;\n        for (int num = 2; num < MAX; num++) {\n            if (arr[num]) dfs(ans, num, m[num], arr[num]);\n        }\n        return ans % mod;\n    }\n    void dfs(long long &ans, int num, int bits, long long sum) {\n        ans = (ans + sum * num1) % mod;\n        for (int nnum = num + 1; nnum < MAX; nnum++) {\n            if (arr[nnum] == 0 || m[nnum] & bits) continue;\n            dfs(ans, nnum, bits | m[nnum], sum * arr[nnum] % mod);\n        }\n    }\n    int qpow(int a, int b) {\n        long long ans = 1, tmp = a;\n        while (b) {\n            if (b & 1) ans = (ans * tmp) % mod;\n            tmp = (tmp * tmp) % mod;\n            b >>= 1;\n        }\n        return ans;\n    }\n};"
    }
  ]
}
