{
    "id": "2104",
    "name": "1993.树上的操作",
    "url": "https://leetcode.cn/problems/operations-on-tree",
    "difficulty": "中等",
    "tag": [
        "树",
        "深度优先搜索",
        "广度优先搜索",
        "设计",
        "数组",
        "哈希表"
    ],
    "desc": "给你一棵 n 个节点的树，编号从 0 到 n - 1 ，以父节点数组 parent 的形式给出，其中 parent[i] 是第 i 个节点的父节点。树的根节点为 0 号节点，所以 parent[0] = -1 ，因为它没有父节点。你想要设计一个数据结构实现树里面对节点的加锁，解锁和升级操作。",
    "solutions": [
        {
            "script": "python",
            "time": 52,
            "memory": 15.61,
            "desc": "模拟。",
            "code": "class Node:\n    def __init__(self, val: int):\n        self.val = val\n        self.parent = None\n        self.children = []\n        self.lock_state = 0\n\n    def lock(self, user: int) -> bool:\n        if self.lock_state:\n            return False\n        self.lock_state = user\n        return True\n\n    def unlock(self, user: int) -> bool:\n        if self.lock_state != user:\n            return False\n        self.lock_state = 0\n        return True\n\n    def unlock_children(self) -> bool:\n        for node in self.children:\n            node.lock_state = 0\n            node.unlock_children()\n\n    def is_lock(self) -> bool:\n        return self.lock_state != 0\n\n    def is_parent_unlock(self) -> bool:\n        return not self.parent or not self.parent.is_lock() and self.parent.is_parent_unlock()\n\n    def exist_children_lock(self) -> bool:\n        return any(child.is_lock() or child.exist_children_lock() for child in self.children)\n\n\nclass LockingTree:\n    def __init__(self, parent: List[int]):\n        self.nodes = [Node(i) for i in range(len(parent))]\n        self.root = self.nodes[0]\n        for i in range(1, len(parent)):\n            self.nodes[i].parent = self.nodes[parent[i]]\n            self.nodes[parent[i]].children.append(self.nodes[i])\n\n    def lock(self, num: int, user: int) -> bool:\n        return self.nodes[num].lock(user)\n\n    def unlock(self, num: int, user: int) -> bool:\n        return self.nodes[num].unlock(user)\n\n    def upgrade(self, num: int, user: int) -> bool:\n        node = self.nodes[num]\n        if not node.is_lock() and node.is_parent_unlock() and node.exist_children_lock():\n            node.lock(user)\n            node.unlock_children()\n            return True\n        return False",
            "date": 1695398400000
        }
    ]
}