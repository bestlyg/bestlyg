{
  "name": "1995. 统计特殊四元组",
  "url": "https://leetcode-cn.com/problems/count-special-quadruplets/",
  "difficulty": "简单",
  "tag": ["数组", "枚举"],
  "desc": "给你一个 下标从 0 开始 的整数数组 nums ，返回满足下述条件的 不同 四元组 (a, b, c, d) 的 数目。",
  "solutions": [
    {
      "date": 1640707200000,
      "time": 136,
      "memory": 10.2,
      "script": "c++",
      "desc": "内嵌四循环。",
      "code": "class Solution {\n   public:\n    int countQuadruplets(vector<int>& nums) {\n        int n = nums.size(), ans = 0;\n        for (int i1 = 0; i1 < n; i1++) {\n            for (int i2 = i1 + 1; i2 < n; i2++) {\n                for (int i3 = i2 + 1; i3 < n; i3++) {\n                    for (int i4 = i3 + 1; i4 < n; i4++) {\n                        if (nums[i1] + nums[i2] + nums[i3] == nums[i4]) ans++;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};"
    },
    {
      "date": 1640707200000,
      "time": 56,
      "memory": 13.9,
      "script": "c++",
      "desc": "内嵌三循环。",
      "code": "class Solution {\n   public:\n    int countQuadruplets(vector<int>& nums) {\n        unordered_map<int, int> m;\n        int n = nums.size(), ans = 0;\n        for (int i3 = n - 1; i3 >= 0; i3--) {\n            m.clear();\n            for (int i4 = i3 + 1; i4 < n; i4++) {\n                int key = nums[i4] - nums[i3];\n                if (m.count(key))\n                    m[key]++;\n                else\n                    m[key] = 1;\n            }\n            for (int i1 = 0; i1 < i3; i1++) {\n                for (int i2 = i1 + 1; i2 < i3; i2++) {\n                    int key = nums[i1] + nums[i2];\n                    if (m.count(key)) {\n                        ans += m[key];\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};"
    }
  ]
}
