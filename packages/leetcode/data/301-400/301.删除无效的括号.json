{
    "name": "301.删除无效的括号",
    "url": "https://leetcode-cn.com/problems/remove-invalid-parentheses/",
    "difficulty": "困难",
    "tag": [
        "广度优先搜索",
        "字符串",
        "回溯"
    ],
    "desc": "给你一个由若干括号和字母组成的字符串 s ，删除最小数量的无效括号，使得输入的字符串有效。",
    "solutions": [
        {
            "date": 1635264000000,
            "time": 104,
            "memory": 46.3,
            "script": "typescript",
            "desc": "dfs。",
            "code": "const map: Record<string, string[]> = {};\nfunction removeInvalidParentheses(s: string): string[] {\n  if (map[s]) return map[s];\n  const replaceStr = s.replace(new RegExp('[(]|[)]', 'g'), '');\n  const leftList: number[] = [];\n  const rightList: number[] = [];\n  const n = s.length;\n  for (let i = 0; i < n; i++) {\n    const ch = s[i];\n    if (ch === '(') leftList.push(i);\n    if (ch === ')') rightList.push(i);\n  }\n  if (leftList.length === 0 || rightList.length === 0) return [replaceStr];\n  let max = replaceStr.length;\n  const ans = new Set<string>(['', replaceStr]);\n  for (const left of leftList) {\n    let rightIdx = findRight(left);\n    for (let rlen = rightList.length; rightIdx < rlen; rightIdx++) {\n      const right = rightList[rightIdx];\n      for (const s0 of removeInvalidParentheses(s.substring(0, left))) {\n        for (const s1 of removeInvalidParentheses(s.substring(left + 1, right))) {\n          for (const s2 of removeInvalidParentheses(s.substring(right + 1))) {\n            const str = `${s0}(${s1})${s2}`;\n            max = Math.max(max, str.length);\n            ans.add(str);\n          }\n        }\n      }\n    }\n  }\n  return (map[s] = Array.from(ans).filter(v => v.length === max));\n  function findRight(leftIdx: number) {\n    let left = 0;\n    let right = rightList.length - 1;\n    if (rightList[right] < leftIdx) return Infinity;\n    while (left < right) {\n      const mid = (left + right) >> 1;\n      if (rightList[mid] >= leftIdx) right = mid;\n      else left = mid + 1;\n    }\n    return left;\n  }\n}"
        }
    ]
}