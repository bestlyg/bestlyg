{
    "id": "328",
    "name": "328.奇偶链表",
    "url": "https://leetcode.cn/problems/odd-even-linked-list",
    "difficulty": "中等",
    "tag": ["链表"],
    "desc": "给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。",
    "solutions": [
        {
            "date": 1605196800000,
            "time": 104,
            "memory": 42,
            "script": "typescript",
            "desc": "存入数组再一次赋值 next。",
            "code": "function oddEvenList(head: ListNode | null): ListNode | null {\n  if (head === null) return null;\n  const cache: ListNode[] = [];\n  let temp: ListNode | null = head;\n  const load = () => {\n    while (temp !== null) {\n      cache.push(temp);\n      temp = temp.next?.next ? temp.next.next : null;\n    }\n  };\n  load();\n  temp = head.next;\n  load();\n  cache.forEach((v, i, arr) => (v.next = i === arr.length - 1 ? null : arr[i + 1]));\n  return head;\n}"
        },
        {
            "date": 1605196800000,
            "time": 108,
            "memory": 41.5,
            "script": "typescript",
            "desc": "遍历 odd，even。",
            "code": "function oddEvenList(head: ListNode | null): ListNode | null {\n  if (head === null) return null;\n  let odd: ListNode | null = head;\n  let even: ListNode | null = head.next;\n  const evenHead = head.next;\n  while (even !== null && even.next !== null) {\n    odd.next = even.next;\n    odd = odd.next;\n    even.next = odd.next;\n    even = even.next;\n  }\n  odd.next = evenHead;\n  return head;\n}"
        }
    ]
}
