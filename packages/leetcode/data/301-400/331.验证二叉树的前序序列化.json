{
    "id": "331",
    "name": "331.验证二叉树的前序序列化",
    "url": "https://leetcode.cn/problems/verify-preorder-serialization-of-a-binary-tree",
    "desc": "验证二叉树的前序序列化。",
    "solutions": [
        {
            "date": "2021-03-12",
            "time": 88,
            "memory": 39.6,
            "script": "typescript",
            "desc": "计算深度。",
            "code": "function isValidSerialization(preorder: string): boolean {\n  let degree = 1;\n  for (const char of preorder.split(',')) {\n    if (!degree) return false;\n    char === '#' ? degree-- : degree++;\n  }\n  return degree === 0;\n}"
        },
        {
            "date": "2021-03-19",
            "time": 100,
            "memory": 39.3,
            "script": "typescript",
            "desc": "逐级替换叶子节点。",
            "code": "function isValidSerialization(preorder: string): boolean {\n  const leafReg = /d+,#,#/g;\n  while (leafReg.test(preorder)) preorder = preorder.replace(leafReg, '#');\n  return preorder === '#';\n}"
        },
        {
            "script": "python",
            "time": 40,
            "memory": 16.61,
            "desc": "dfs，对每一个节点遍历左右子节点看是否匹配。",
            "code": "class Solution:\n    def isValidSerialization(self, preorder: str) -> bool:\n        preorder = preorder.split(',')\n        def dfs(idx: int) -> int:\n            if idx == -1: return idx\n            if idx >= len(preorder): return -1\n            if preorder[idx] == '#': return idx + 1\n            return dfs(dfs(idx + 1))\n        return dfs(0) >= len(preorder)",
            "date": "2024-03-31"
        }
    ],
    "tagList": ["栈", "树", "字符串", "二叉树"],
    "level": "Medium"
}
