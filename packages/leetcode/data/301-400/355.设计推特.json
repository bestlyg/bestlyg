{
  "name": "355. 设计推特",
  "url": "https://leetcode-cn.com/problems/design-twitter/",
  "difficulty": "中等",
  "tag": ["堆", "设计", "哈希表"],
  "desc": "设计一个简化版的推特(Twitter)，可以让用户实现发送推文，关注/取消关注其他用户，能够看见关注人（包括自己）的最近十条推文。",
  "solutions": [
    {
      "date": 1586707200000,
      "time": 152,
      "memory": 46.8,
      "script": "javascript",
      "desc": "难点在于自己关注自己的情况和自己取关自己。",
      "code": "let count = 0;\nclass Tweet {\n  constructor(id) {\n    this.id = id;\n    this.time = count++;\n  }\n}\nclass User {\n  followSet = new Set();\n  tweet = new Set();\n  constructor() {}\n  postTweet(tweetId) {\n    this.tweet.add(new Tweet(tweetId));\n  }\n  follow(followeeUser) {\n    this.followSet.add(followeeUser);\n  }\n  unFollow(followeeUser) {\n    if (this.followSet.has(followeeUser)) {\n      this.followSet.delete(followeeUser);\n    }\n  }\n  getNewsFeed() {\n    let arr = [...this.tweet];\n    for (const user of this.followSet) {\n      arr = arr.concat([...user.tweet]);\n    }\n    return [\n      ...new Set(\n        arr\n          .sort((a, b) => b.time - a.time)\n          .map(v => v.id)\n          .filter((_, index) => index < 10)\n      ),\n    ];\n  }\n}\nclass Twitter {\n  user = {};\n  /**\n   * Compose a new tweet.\n   * @param {number} userId\n   * @param {number} tweetId\n   * @return {void}\n   */\n  postTweet(userId, tweetId) {\n    const user = this.user[userId];\n    if (user) {\n      user.postTweet(tweetId);\n    } else {\n      const newUser = new User();\n      newUser.postTweet(tweetId);\n      this.user[userId] = newUser;\n    }\n  }\n  /**\n   * Follower follows a followee. If the operation is invalid, it should be a no-op.\n   * @param {number} followerId\n   * @param {number} followeeId\n   * @return {void}\n   */\n  follow(followerId, followeeId) {\n    if (followerId === followeeId) return;\n    let followerUser = this.user[followerId];\n    let followeeUser = this.user[followeeId];\n    if (!followerUser) this.user[followerId] = followerUser = new User();\n    if (!followeeUser) this.user[followeeId] = followeeUser = new User();\n    followerUser.follow(followeeUser);\n  }\n  /**\n   * Follower unfollows a followee. If the operation is invalid, it should be a no-op.\n   * @param {number} followerId\n   * @param {number} followeeId\n   * @return {void}\n   */\n  unfollow(followerId, followeeId) {\n    const followerUser = this.user[followerId];\n    const followeeUser = this.user[followeeId];\n    if (followerUser && followeeUser) {\n      followerUser.unFollow(followeeUser);\n    }\n  }\n  /**\n   * Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\n   * @param {number} userId\n   * @return {number[]}\n   */\n  getNewsFeed(userId) {\n    const user = this.user[userId];\n    if (user) {\n      return user.getNewsFeed();\n    } else {\n      return [];\n    }\n  }\n}"
    }
  ]
}
