{
    "id": "386",
    "name": "386.字典序排数",
    "url": "https://leetcode.cn/problems/lexicographical-numbers",
    "desc": "给你一个整数 n ，按字典序返回范围 [1, n] 内所有整数。",
    "solutions": [
        {
            "date": "2022-03-21",
            "time": 16,
            "memory": 11.2,
            "script": "cpp",
            "desc": "dfs 遍历每一层。",
            "code": "class Solution {\n   public:\n    vector<int> lexicalOrder(int n) {\n        vector<int> ans;\n        for (int i = 1; i <= 9; i++) dfs(ans, n, i);\n        return ans;\n    }\n    void dfs(vector<int> &ans, int &max, int num) {\n        if (num > max) return;\n        ans.push_back(num);\n        for (int i = 0; i <= 9; i++) dfs(ans, max, num * 10 + i);\n    }\n};"
        },
        {
            "date": "2022-04-18",
            "time": 12,
            "memory": 11.2,
            "script": "cpp",
            "desc": "dfs。",
            "code": "class Solution {\n   public:\n    vector<int> lexicalOrder(int n) {\n        vector<int> ans;\n        for (int i = 1; i <= 9; i++) dfs(ans, n, i);\n        return ans;\n    }\n    void dfs(vector<int> &ans, int &n, int num) {\n        if (num > n) return;\n        ans.push_back(num);\n        for (int i = 0; i <= 9; i++) dfs(ans, n, num * 10 + i);\n    }\n};"
        },
        {
            "date": "2022-04-18",
            "time": 8,
            "memory": 10.2,
            "script": "cpp",
            "desc": "遍历。",
            "code": "class Solution {\n   public:\n    vector<int> lexicalOrder(int n) {\n        vector<int> ans(n);\n        int num = 1;\n        for (int i = 0; i < n; i++) {\n            ans[i] = num;\n            if (num * 10 <= n)\n                num *= 10;\n            else {\n                while (num % 10 == 9 || num + 1 > n) num /= 10;\n                num++;\n            }\n        }\n        return ans;\n    }\n};"
        }
    ],
    "tagList": ["深度优先搜索", "字典树"],
    "level": "Medium"
}
