{
    "id": "385",
    "name": "385.迷你语法分析器",
    "url": "https://leetcode.cn/problems/mini-parser",
    "difficulty": "中等",
    "tag": ["栈", "深度优先搜索", "字符串"],
    "desc": "给定一个字符串 s 表示一个整数嵌套列表，实现一个解析它的语法分析器并返回解析的结果 NestedInteger 。",
    "solutions": [
        {
            "date": 1647619200000,
            "time": 12,
            "memory": 12.9,
            "script": "cpp",
            "desc": "遍历。",
            "code": "class Solution {\n   public:\n    NestedInteger deserialize(string s) {\n        if (s[0] == '[') return analysis(s.substr(1, s.size() - 2));\n        NestedInteger ans;\n        ans.setInteger(stoi(s));\n        return ans;\n    }\n    NestedInteger analysis(const string &s) {\n        NestedInteger ans;\n        vector<int> res = find_split(s);\n        int prev = -1;\n        for (auto &split : res) {\n            ans.add(deserialize(s.substr(prev + 1, split - prev - 1)));\n            prev = split;\n        }\n        string last = s.substr(prev + 1, s.size() - prev - 1);\n        if (last != \"\") ans.add(deserialize(last));\n        return ans;\n    }\n    vector<int> find_split(const string &s) {\n        int deep = 0;\n        vector<int> ans;\n        for (int i = 0; i < s.size(); i++) {\n            if (deep == 0 && s[i] == ',')\n                ans.push_back(i);\n            else if (s[i] == '[')\n                deep++;\n            else if (s[i] == ']')\n                deep--;\n        }\n        return ans;\n    }\n};"
        },
        {
            "date": 1649952000000,
            "time": 8,
            "memory": 12.3,
            "script": "cpp",
            "desc": "递归遍历。",
            "code": "class Solution {\n   public:\n    NestedInteger deserialize(string s) {\n        NestedInteger res;\n        if (s == \"[]\")\n            return res;\n        else if (s[0] == '[')\n            split(res, s.substr(1, s.size() - 2));\n        else\n            res.setInteger(stoi(s));\n        return res;\n    }\n    void split(NestedInteger &obj, string s) {\n        int level = 0, start = 0, n = s.size();\n        for (int i = 0; i < n; i++) {\n            char ch = s[i];\n            if (ch == '[')\n                level++;\n            else if (ch == ']')\n                level--;\n            else if (ch == ',' && level == 0)\n                obj.add(deserialize(s.substr(start, i - start))), start = i + 1;\n        }\n        obj.add(deserialize(s.substr(start, n - start)));\n    }\n};"
        }
    ]
}
