{
    "id": "318",
    "name": "318.最大单词长度乘积",
    "url": "https://leetcode.cn/problems/maximum-product-of-word-lengths",
    "difficulty": "中等",
    "tag": [
        "位运算",
        "数组",
        "字符串"
    ],
    "desc": "给定一个字符串数组  words，找到  length(word[i]) \\* length(word[j])  的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。",
    "solutions": [
        {
            "date": 1627056000000,
            "time": 140,
            "memory": 40.2,
            "script": "typescript",
            "desc": "利用二进制从储存每个单词的哈希值。",
            "code": "function maxProduct(words: string[]): number {\n  const map: Record<string, number> = {};\n  for (const word of words) {\n    let v = 0;\n    for (let i = 0, l = word.length; i < l; i++) {\n      v |= 1 << word.codePointAt(i)!;\n    }\n    map[word] = v;\n  }\n  let ans = 0;\n  for (let i = 0; i < words.length; i++) {\n    for (let j = i + 1; j < words.length; j++) {\n      if ((map[words[i]] & map[words[j]]) === 0) {\n        ans = Math.max(ans, words[i].length * words[j].length);\n      }\n    }\n  }\n  return ans;\n}"
        },
        {
            "date": 1637078400000,
            "time": 96,
            "memory": 41.5,
            "script": "typescript",
            "desc": "位运算统计每个词出现的字母。",
            "code": "function maxProduct(words: string[]): number {\n  const n = words.length;\n  const bit_words = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    const word = words[i];\n    for (let pos = 0, l = word.length; pos < l; pos++) {\n      bit_words[i] |= 1 << (word.codePointAt(pos)! - 97);\n    }\n  }\n  let ans = 0;\n  for (let i = 0; i < n; i++) {\n    const len1 = words[i].length;\n    const bit1 = bit_words[i];\n    for (let j = i + 1; j < n; j++) {\n      const len2 = words[j].length;\n      const bit2 = bit_words[j];\n      if (bit1 & bit2) continue;\n      ans = Math.max(ans, len1 * len2);\n    }\n  }\n  return ans;\n}"
        },
        {
            "date": 1637078400000,
            "time": 32,
            "memory": 7.6,
            "script": "c",
            "desc": "位运算统计每个词出现的字母。",
            "code": "void formatWord(char *word, int *bit, int *size){\n    for(int i = 0; word[i] != '\\0'; i++){\n        *bit |= 1 << (word[i] - 'a');\n        *size += 1;\n    }\n}\nint maxProduct(char ** words, int wordsSize){\n    int word_bit[wordsSize], word_size[wordsSize];\n    for (int i = 0; i < wordsSize; i++) word_bit[i] = 0, word_size[i] = 0;\n    for (int i = 0; i < wordsSize; i++) {\n        char *word = words[i];\n        formatWord(word, &word_bit[i], &word_size[i]);\n    }\n    int ans = 0;\n    for (int i = 0; i < wordsSize; i++) {\n        for (int j = 0; j < wordsSize; j++) {\n            if (word_bit[i] & word_bit[j]) continue;\n            int len = word_size[i] * word_size[j];\n            ans = ans < len ? len : ans;\n        }\n    }\n    return ans;\n}"
        },
        {
            "date": 1640275200000,
            "time": 364,
            "memory": 20.4,
            "script": "cpp",
            "desc": "用二进制存储每个字符串存在的字符，两个字符串值与运算为 0 说明无重复。",
            "code": "class Solution {\n   public:\n    int s2i(string str) {\n        int ans = 0;\n        for (auto &ch : str) ans |= 1 << (ch - 'a');\n        return ans;\n    }\n    int maxProduct(vector<string> &words) {\n        unordered_map<string, int> mmap;\n        for (auto &word : words) mmap[word] = s2i(word);\n        int ans = 0;\n        for (int i = 0; i < words.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (mmap[words[i]] & mmap[words[j]]) continue;\n                ans = max(ans, (int)(words[i].size() * words[j].size()));\n            }\n        }\n        return ans;\n    }\n};"
        },
        {
            "script": "python",
            "time": 844,
            "memory": 18.57,
            "desc": "哈希存储。",
            "code": "class Solution:\n    def maxProduct(self, words: List[str]) -> int:\n        m = { word: reduce(lambda n, c: n | 1 << ord(c), word, 0) for word in words}\n        return max(len(word1) * len(word2) if m[word1] & m[word2] == 0 else 0 for word1 in words for word2 in words)",
            "date": 1699200000000
        }
    ]
}