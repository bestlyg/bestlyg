{
    "name": "384. 打乱数组",
    "url": "https://leetcode-cn.com/problems/shuffle-an-array/",
    "difficulty": "中等",
    "tag": [
        "数学",
        "数组",
        "随机化"
    ],
    "desc": "给你一个整数数组 nums ，设计算法来打乱一个没有重复元素的数组。",
    "solutions": [
        {
            "date": 1627574400000,
            "time": 236,
            "memory": 54.1,
            "script": "typescript",
            "desc": "生成随机数，利用交换打乱。",
            "code": "class Solution {\n  constructor(private nums: number[]) {}\n  reset(): number[] {\n    return this.nums;\n  }\n  shuffle(): number[] {\n    const ans: number[] = this.nums.slice();\n    for (let i = 0; i < ans.length; i++) {\n      const random = this.random(i);\n      [ans[i], ans[random]] = [ans[random], ans[i]];\n    }\n    return ans;\n  }\n  private random(minNum: number) {\n    const maxNum = this.nums.length - 1;\n    return parseInt((Math.random() * (maxNum - minNum + 1) + minNum) as any, 10);\n  }\n}"
        },
        {
            "date": 1629388800000,
            "time": 228,
            "memory": 52.6,
            "script": "typescript",
            "desc": "随机交换下标。",
            "code": "class Solution {\n  constructor(public nums: number[]) {}\n  reset(): number[] {\n    return this.nums;\n  }\n  shuffle(): number[] {\n    const arr = [...this.nums];\n    for (let i = 0; i < arr.length; i++) {\n      const random = this.random(i, arr.length - 1);\n      [arr[i], arr[random]] = [arr[random], arr[i]];\n    }\n    return arr;\n  }\n  random(min: number, max: number): number {\n    return min + ~~(Math.random() * (max - min + 1));\n  }\n}"
        }
    ]
}