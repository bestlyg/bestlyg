{
    "id": "395",
    "name": "395.至少有K个重复字符的最长子串",
    "url": "https://leetcode.cn/problems/longest-substring-with-at-least-k-repeating-characters",
    "difficulty": "中等",
    "tag": ["哈希表", "字符串", "分治", "滑动窗口"],
    "desc": "给你一个二维整数数组 matrix， 返回 matrix 的 转置矩阵 。",
    "solutions": [
        {
            "date": 1614355200000,
            "time": 148,
            "memory": 42.2,
            "script": "typescript",
            "desc": "读取可能值进行最长比较。",
            "code": "function longestSubstring(s: string, k: number): number {\n  const len = s.length;\n  if (len === 1) return +(k === 1);\n  const map: Record<string, number> = {};\n  for (const c of s) map[c] = (map[c] ?? 0) + 1;\n  const set = new Set(\n    Object.entries(map)\n      .filter(([, v]) => v < k)\n      .map(([k]) => k)\n  );\n  const runtimeMap = new Map<string, number>();\n  const runtimeSet = new Set<string>();\n  let ans = 0;\n  for (let i = 0; i < len; i++) {\n    const c = s[i];\n    if (set.has(c)) continue;\n    runtimeMap.clear();\n    runtimeSet.clear();\n    runtimeMap.set(c, 1);\n    if (k > 1) runtimeSet.add(c);\n    let lastIndex = i;\n    while (++lastIndex < len) {\n      const newChar = s[lastIndex];\n      if (set.has(newChar)) break;\n      const charCount = (runtimeMap.get(newChar) ?? 0) + 1;\n      runtimeMap.set(newChar, charCount);\n      charCount >= k ? runtimeSet.delete(newChar) : runtimeSet.add(newChar);\n      if (runtimeSet.size === 0) ans = Math.max(ans, lastIndex - i + 1);\n    }\n  }\n  return ans;\n}"
        },
        {
            "date": 1614355200000,
            "time": 100,
            "memory": 40.4,
            "script": "typescript",
            "desc": "递归,分治。",
            "code": "function longestSubstring(s: string, k: number): number {\n  const len = s.length;\n  if (len === 0) return 0;\n  if (len === 1) return +(k === 1);\n  const map: Record<string, number> = {};\n  for (const c of s) map[c] = (map[c] ?? 0) + 1;\n  const regStr = Object.entries(map)\n    .filter(([, v]) => v < k)\n    .map(([k]) => k)\n    .join('|');\n  if (regStr.length === 0) return s.length;\n  const arr = s.split(new RegExp(regStr));\n  return Math.max(...arr.map(str => longestSubstring(str, k)));\n}"
        },
        {
            "date": 1614355200000,
            "time": 88,
            "memory": 40.3,
            "script": "typescript",
            "desc": "递归,分治。",
            "code": "function longestSubstring(s: string, k: number): number {\n  const len = s.length;\n  if (len === 0) return 0;\n  if (len === 1) return +(k === 1);\n  const map: Record<string, number> = {};\n  for (const c of s) map[c] = (map[c] ?? 0) + 1;\n  const regStr = Object.keys(map)\n    .filter(key => map[key] < k)\n    .join('|');\n  if (regStr.length === 0) return s.length;\n  const arr = s.split(new RegExp(regStr));\n  return Math.max(...arr.map(str => longestSubstring(str, k)));\n}"
        },
        {
            "date": 1614355200000,
            "time": 88,
            "memory": 40.3,
            "script": "typescript",
            "desc": "递归,分治。",
            "code": "function longestSubstring(s: string, k: number): number {\n  const len = s.length;\n  if (len === 0) return 0;\n  if (len === 1) return +(k === 1);\n  const map: Record<string, number> = {};\n  for (const c of s) map[c] = (map[c] ?? 0) + 1;\n  const regStr = Object.keys(map)\n    .filter(key => map[key] < k)\n    .join('|');\n  if (regStr.length === 0) return s.length;\n  const arr = s.split(new RegExp(regStr));\n  return Math.max(...arr.map(str => longestSubstring(str, k)));\n}"
        },
        {
            "date": 1627488000000,
            "time": 80,
            "memory": 40.4,
            "script": "typescript",
            "desc": "分割字符串分别统计。",
            "code": "function longestSubstring(s: string, k: number): number {\n  const map: Record<string, number> = {};\n  for (const c of s) map[c] = (map[c] ?? 0) + 1;\n  const splits: number[] = [];\n  for (let i = 0; i < s.length; i++) {\n    if (map[s[i]] < k) splits.push(i);\n  }\n  splits.push(s.length);\n  if (splits.length === 1) return s.length;\n  let pre = 0;\n  let ans = 0;\n  for (const p of splits) {\n    const len = p - pre;\n    if (len >= k) {\n      ans = Math.max(ans, longestSubstring(s.substr(pre, len), k));\n    }\n    pre = p + 1;\n  }\n  return ans;\n}"
        }
    ]
}
