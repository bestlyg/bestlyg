{
    "name": "3007.价值和小于等于K的最大数字",
    "url": "https://leetcode.cn/problems/maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k",
    "level": "Medium",
    "tagList": [
        "位运算",
        "二分查找",
        "动态规划"
    ],
    "desc": "num 的 累加价值 是从 1 到 num 的数字的 总 价值。如果 num 的累加价值小于或等于 k 则被认为是 廉价 的。请你返回 最大 的廉价数字。",
    "solutions": [
        {
            "script": "python",
            "time": 387,
            "memory": 24.11,
            "desc": "二分快速计算，利用数位dp求一个数的累加值",
            "code": "class Solution:\n    def findMaximumNumber(self, k: int, x: int) -> int:\n        @cache\n        def get_val(num: int):\n            if num == 0: return 0\n            if num == 1: return int(num % x == 0)\n            # 最高位1是在第几位， 0b111就是第三位，n就是3\n            n = len(bin(num)) - 2\n            # 除了最高位，其他位共有几位被x命中，比如0b1010，在x=2时，只有1位时命中x的\n            nx = (n - 1) // x\n            # 在非最高位中，总共能产出几个命中x的总和\n            # 0b1010总共3个非最高位，命中了1位，相当于在000-111中找命中的1位的总和\n            val = nx * (2 ** (n - 1)) // 2\n            # 减去最高位后，剩下的递归求值\n            val += get_val(num - (1 << (n - 1)))\n            # 如果最高位能命中x，直接加上最高位存在几个1\n            if n % x == 0: val += num - (1 << (n - 1)) + 1\n            return val\n        l = 1\n        r = 10 ** 15\n        while l < r:\n            m = (l + r + 1) // 2\n            if get_val(m) <= k: l = m\n            else: r = m - 1\n        return l",
            "date": "2024-08-23"
        }
    ],
    "id": "3240"
}