{
    "name": "2299.强密码检验器II",
    "url": "https://leetcode.cn/problems/strong-password-checker-ii/",
    "difficulty": "简单",
    "tag": [
        "字符串"
    ],
    "desc": "给你一个字符串 password ，如果它是一个 强 密码，返回 true，否则返回 false 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 0,
            "memory": 5.9,
            "desc": "遍历。",
            "code": "class Solution {\npublic:\n    bool strongPasswordCheckerII(string password) {\n        bool f[4] = {false};\n        string spec = \"!@#$%^&*()-+\";\n        for (int i = 0; i < password.size(); i++) {\n            if (islower(password[i])) f[0] = true;\n            if (isupper(password[i])) f[1] = true;\n            if (isdigit(password[i])) f[2] = true;\n            if (spec.find(password[i]) != string::npos) f[3] = true;\n            if (i != 0 && password[i] == password[i - 1]) return false;\n        }\n        return f[0] && f[1] && f[2] && f[3] && password.size() >= 8;\n    }\n};",
            "date": 1674057600000
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 2,
            "desc": "同上。",
            "code": "impl Solution {\npub fn strong_password_checker_ii(password: String) -> bool {\n    let spec = \"!@#$%^&*()-+\";\n    let s = password.chars().collect::<Vec<char>>();\n    let mut f = [false; 4];\n    for i in 0..s.len() {\n        if s[i].is_lowercase() {\n            f[0] = true;\n        }\n        if s[i].is_uppercase() {\n            f[1] = true;\n        }\n        if s[i].is_digit(10) {\n            f[2] = true;\n        }\n        if spec.contains(s[i]) {\n            f[3] = true;\n        }\n        if i > 0 && s[i] == s[i - 1] {\n            return false;\n        }\n    }\n    s.len() >= 8 && f[0] && f[1] && f[2] && f[3]\n}",
            "date": 1674057600000
        },
        {
            "script": "python3",
            "time": 40,
            "memory": 14.9,
            "desc": "同上。",
            "code": "class Solution:\ndef strongPasswordCheckerII(self, password: str) -> bool:\n    spec = \"!@#$%^&*()-+\"\n    f = [False for _ in range(4)]\n    for i, c in enumerate(password):\n        f[0] |= c.islower()\n        f[1] |= c.isupper()\n        f[2] |= c.isdigit()\n        f[3] |= spec.find(c) != -1\n        if i != 0 and password[i - 1] == c:\n            return False\n    return len(password) >= 8 and f[0] and f[1] and f[2] and f[3]",
            "date": 1674057600000
        }
    ]
}