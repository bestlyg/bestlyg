{
    "id": "1748",
    "name": "1626.无矛盾的最佳球队",
    "url": "https://leetcode.cn/problems/best-team-with-no-conflicts",
    "desc": "给你两个列表 scores 和 ages，其中每组 scores[i] 和 ages[i] 表示第 i 名球员的分数和年龄。请你返回 所有可能的无矛盾球队中得分最高那支的分数 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 452,
            "memory": 18.4,
            "desc": "dp[i]表示以i为结尾时的最大分数。",
            "code": "class Solution {\npublic:\n    int bestTeamScore(vector<int>& scores, vector<int>& ages) {\n        int n = scores.size(), res = 0;\n        vector<int> idx(n), dp(n, 0);\n        for (int i = 0; i < n; i++) idx[i] = i;\n        sort(idx.begin(), idx.end(), [&](auto &a, auto &b){\n            return ages[a] != ages[b] ? ages[a] < ages[b] : scores[a] < scores[b];\n        });\n        for (int i = 0; i < n; i++) {\n            for (int j = i - 1; j >= 0; j--) {\n                if (ages[idx[i]] == ages[idx[j]] || ages[idx[i]] > ages[idx[j]] && scores[idx[i]] >= scores[idx[j]])\n                    dp[i] = max(dp[i], dp[j]);\n            }\n            dp[i] += scores[idx[i]];\n            res = max(res, dp[i]);\n        }\n        return res;\n    }\n};",
            "date": "2023-03-22"
        },
        {
            "script": "python",
            "time": 2676,
            "memory": 15.1,
            "desc": "同上。",
            "code": "class Solution:\n    def bestTeamScore(self, scores: List[int], ages: List[int]) -> int:\n        n, res = len(scores), 0\n        l = sorted(zip(ages, scores))\n        dp = [0] * n\n        for i in range(n):\n            for j in range(i-1, -1, -1):\n                if l[i][0] == l[j][0] or (l[i][0] > l[j][0] and l[i][1] >= l[j][1]):\n                    dp[i] = max(dp[i], dp[j])\n            dp[i] += l[i][1]\n            res = max(res, dp[i])\n        return res",
            "date": "2023-03-22"
        },
        {
            "script": "rust",
            "time": 44,
            "memory": 2.1,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn best_team_score(scores: Vec<i32>, ages: Vec<i32>) -> i32 {\n        let (n, mut res) = (scores.len(), 0);\n        let mut idx = (0..n).collect::<Vec<usize>>();\n        idx.sort_by(|a, b| {\n            if ages[*a] != ages[*b] {\n                ages[*a].cmp(&ages[*b])\n            } else {\n                scores[*a].cmp(&scores[*b])\n            }\n        });\n        let mut dp = vec![0; n];\n        for i in 0..n as i32 {\n            for j in ((0i32)..=(i - 1)).rev() {\n                let (i, j) = (i as usize, j as usize);\n                if ages[idx[i]] == ages[idx[j]]\n                    || ages[idx[i]] > ages[idx[j]] && scores[idx[i]] >= scores[idx[j]]\n                {\n                    dp[i] = dp[i].max(dp[j]);\n                }\n            }\n\n            dp[i as usize] += scores[idx[i as usize]];\n            res = res.max(dp[i as usize]);\n        }\n        res\n    }\n}",
            "date": "2023-03-22"
        }
    ],
    "tagList": [
        "数组",
        "动态规划",
        "排序"
    ],
    "level": "Medium"
}