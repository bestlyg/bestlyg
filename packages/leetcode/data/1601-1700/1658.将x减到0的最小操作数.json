{
    "id": "1776",
    "name": "1658.将x减到0的最小操作数",
    "url": "https://leetcode.cn/problems/minimum-operations-to-reduce-x-to-zero",
    "difficulty": "中等",
    "tag": ["数组", "哈希表", "二分查找", "前缀和", "滑动窗口"],
    "desc": "给你一个整数数组 nums 和一个整数 x 。如果可以将 x 恰好 减到 0 ，返回 最小操作数 。",
    "solutions": [
        {
            "date": 1626883200000,
            "time": 192,
            "memory": 60.9,
            "script": "typescript",
            "desc": "前缀和。",
            "code": "function minOperations(nums: number[], x: number): number {\n  const sumsL = [0];\n  const sumsR = [0];\n  const n = nums.length;\n  for (let i = 0; i < n; i++) sumsL.push(nums[i] + sumsL[i]);\n  for (let i = 0; i < n; i++) sumsR.push(nums[n - 1 - i] + sumsR[i]);\n  let ans = Infinity;\n  for (let i = 0; i <= n; i++) {\n    const num = sumsL[i];\n    const need = x - num;\n    if (need < 0) break;\n    let l = 0;\n    let r = sumsR.length - 1;\n    let mid!: number;\n    while (l <= r) {\n      mid = (l + r) >> 1;\n      const midNum = sumsR[mid];\n      if (midNum < need) l = mid + 1;\n      else if (midNum > need) r = mid - 1;\n      else break;\n    }\n    if (need === sumsR[mid] && i + mid <= n) {\n      ans = Math.min(ans, i + mid);\n    }\n  }\n  return ans === Infinity ? -1 : ans;\n}"
        },
        {
            "date": 1673020800000,
            "time": 404,
            "memory": 164.3,
            "script": "cpp",
            "desc": "哈希存储。",
            "code": "class Solution {\npublic:\n    int minOperations(vector<int>& nums, int x) {\n        unordered_map<int, int> lmap;\n        lmap[0] = 0;\n        int ans = 0x7fffffff, n = nums.size();\n        for (int i = 0, sum = 0; i < n; i++) {\n            sum += nums[i];\n            if (sum == x) ans = min(ans, i + 1);\n            if (!lmap.count(sum)) lmap[sum] = i + 1;\n        }\n        for (int i = n - 1, sum = 0; i >= 0; i--) {\n            sum += nums[i];\n            if (sum > x) break;\n            if (!lmap.count(x - sum)) continue;\n            if (lmap[x - sum] + n - i > n) continue;\n            ans = min(ans, lmap[x - sum] + n - i);\n        }\n        return ans == 0x7fffffff ? -1 : ans;\n    }\n};"
        },
        {
            "date": 1673020800000,
            "time": 128,
            "memory": 96.3,
            "script": "cpp",
            "desc": "滑动窗口。",
            "code": "class Solution {\npublic:\n    int minOperations(vector<int>& nums, int x) {\n        int ans = 0x7fffffff, n = nums.size(), r = 0, rsum = accumulate(nums.begin(), nums.end(), 0);\n        if (rsum < x) return -1;\n        while (r < n && rsum > x) rsum -= nums[r++];\n        if (rsum == x) ans = n - r;\n        for (int l = 0, lsum = 0; l < n; l++) {\n            lsum += nums[l];\n            while (r < n && (l + 1 + n - r > n || lsum + rsum > x)) rsum -= nums[r++];\n            if (lsum + rsum == x) ans = min(ans, l + 1 + n - r);\n        }\n        return ans == 0x7fffffff ? -1 : ans;\n    }\n};"
        },
        {
            "date": 1673020800000,
            "time": 20,
            "memory": 2.8,
            "script": "rust",
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn min_operations(nums: Vec<i32>, x: i32) -> i32 {\n        let mut ans = i32::MAX;\n        let n = nums.len();\n        let (mut r, mut rsum) = (0, nums.iter().fold(0, |sum, cur| sum + cur));\n        if rsum < x {\n            return -1;\n        }\n        while r < n && rsum > x {\n            rsum -= nums[r];\n            r += 1;\n        }\n        if rsum == x {\n            ans = (n - r) as i32;\n        }\n        let (mut l, mut lsum) = (0, 0);\n        while l < n {\n            lsum += nums[l];\n            while r < n && (l + 1 + n - r > n || lsum + rsum > x) {\n                rsum -= nums[r];\n                r += 1;\n            }\n            if lsum + rsum == x {\n                ans = ans.min((l + 1 + n - r) as i32);\n            }\n            l += 1;\n        }\n        if ans == i32::MAX {\n            -1\n        } else {\n            ans\n        }\n    }\n}"
        }
    ]
}
