{
    "id": "1723",
    "name": "1601.最多可达成的换楼请求数目",
    "url": "https://leetcode.cn/problems/maximum-number-of-achievable-transfer-requests",
    "difficulty": "困难",
    "tag": ["位运算", "数组", "回溯", "枚举"],
    "desc": "请你从原请求列表中选出若干个请求，使得它们是一个可行的请求列表，并返回所有可行列表中最大请求数目。",
    "solutions": [
        {
            "date": 1645977600000,
            "time": 416,
            "memory": 24.1,
            "script": "cpp",
            "desc": "统计所有环，依次选择环。",
            "code": "class Solution {\n   public:\n    struct node {\n        int data, cnt;\n        unordered_map<int, int> next;\n    };\n    int maximumRequests(int n, vector<vector<int>> &requests) {\n        vector<node> list(n);\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            list[i].data = i;\n            list[i].cnt = 0;\n        }\n        for (auto &request : requests) {\n            int from = request[0], to = request[1];\n            if (from == to) {\n                ans++;\n                continue;\n            }\n            list[from].next[to]++;\n            list[from].cnt++;\n        }\n        unordered_set<int> s;\n        vector<vector<int>> arr;\n        for (int i = 0; i < n; i++) {\n            vector<vector<int>> res = getlist(list, i, s, i, 1);\n            for (auto &item : res) {\n                reverse(item.begin(), item.end());\n                arr.push_back(item);\n            }\n        }\n        return dfs(list, arr, s) + ans;\n    }\n\n    int dfs(vector<node> &list, vector<vector<int>> &arr,\n            unordered_set<int> &used) {\n        int n = arr.size(), ans = 0;\n        for (int i = 0; i < n; i++) {\n            if (used.count(i) || !check(list, arr[i])) continue;\n            int cur = 0, cnt = 0;\n            while (check(list, arr[i])) {\n                cnt++;\n                cur += arr[i].size() - 1;\n                setlist(list, arr[i], -1);\n            }\n            used.insert(i);\n            cur += dfs(list, arr, used);\n            used.erase(i);\n            while (cnt--) setlist(list, arr[i], 1);\n            ans = max(ans, cur);\n        }\n        return ans;\n    }\n\n    void setlist(vector<node> &list, vector<int> &arr, int add) {\n        for (int i = 0; i < arr.size() - 1; i++) {\n            list[arr[i]].next[arr[i + 1]] += add;\n        }\n    }\n    bool check(vector<node> &list, vector<int> &arr) {\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (list[arr[i]].next[arr[i + 1]] == 0) return 0;\n        }\n        return 1;\n    }\n    vector<vector<int>> getlist(vector<node> &list, int &find,\n                                unordered_set<int> &s, int cur, int init) {\n        vector<vector<int>> ans;\n        if (init == 0 && cur == find) {\n            vector<int> res(1, cur);\n            ans.push_back(res);\n            return ans;\n        }\n        s.insert(cur);\n        for (auto &item : list[cur].next) {\n            if (!s.count(item.first) || init == 0 && item.first == find) {\n                vector<vector<int>> nextlist =\n                    getlist(list, find, s, item.first, 0);\n                if (nextlist.size() == 0) continue;\n                for (auto &next : nextlist) {\n                    next.push_back(cur);\n                    ans.push_back(next);\n                }\n            }\n        }\n        s.erase(cur);\n        return ans;\n    }\n};"
        },
        {
            "date": 1645977600000,
            "time": 36,
            "memory": 8.6,
            "script": "cpp",
            "desc": "对于每个请求都选择或不选择。",
            "code": "class Solution {\n   public:\n    int ans = 0, samecnt = 0;\n    vector<vector<int>> list;\n    vector<int> houses = vector<int>(20, 0);\n    int maximumRequests(int n, vector<vector<int>> &requests) {\n        for (auto &request : requests) {\n            if (request[0] == request[1]) {\n                samecnt++;\n                continue;\n            }\n            list.push_back(request);\n        }\n        dfs(0, 0);\n        return ans + samecnt;\n    }\n    void dfs(int idx, int cnt) {\n        if (idx == list.size()) {\n            for (auto &house : houses) {\n                if (house) return;\n            }\n            ans = max(ans, cnt);\n            return;\n        }\n        dfs(idx + 1, cnt);\n        houses[list[idx][0]]++;\n        houses[list[idx][1]]--;\n        dfs(idx + 1, cnt + 1);\n        houses[list[idx][0]]--;\n        houses[list[idx][1]]++;\n    }\n};"
        }
    ]
}
