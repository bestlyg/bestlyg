{
    "name": "1687. 从仓库到码头运输箱子",
    "url": "https://leetcode.cn/problems/delivering-boxes-from-storage-to-ports/",
    "difficulty": "困难",
    "tag": [
        "线段树",
        "队列",
        "数组",
        "动态规划",
        "单调队列",
        "堆(优先队列)"
    ],
    "desc": "请你返回将所有箱子送到相应码头的 最少行程 次数。",
    "solutions": [
        {
            "date": 1670169600000,
            "time": null,
            "memory": null,
            "script": "cpp",
            "desc": "动态规划，背包法，超时。",
            "code": "#include <iostream>\n#include <vector>\n// bestlyg\n# define X first\n# define Y second\n# define lb(x) ((x) & (-x))\n# define mem(a,b) memset(a,b,sizeof(a))\n# define debug freopen(\"r.txt\",\"r\",stdin)\n# define pi pair<int,int>\n\n#ifdef DEBUG\n#define log(frm, args...) {\\\n    printf(frm, ##args); \\\n}\n#else\n#define log(frm, args...)\n#endif\ntypedef long long ll;\nusing namespace std;\n\nclass Solution {\npublic:\n    int boxDelivering(vector<vector<int>>& boxes, int portsCount, int maxBoxes, int maxWeight) {\n        int n = boxes.size(), ans = 0x7fffffff;\n        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0x3f3f3f3f));\n        dp[0][0] = 0;\n        // cnt 第几次从码头拿货\n        // box 总共有几个箱子\n        for (int cnt = 1; cnt <= n; cnt++) {\n            log(\"cnt = %d\\n\", cnt);\n            for (int ibox = n; ibox >= 1; ibox--) {\n                log(\"=====\\nibox = %d\\n\", ibox);\n                int curIdx = ibox - 1, curP = boxes[curIdx][0], curW = boxes[curIdx][1], curCnt = 1, curSum = 2;\n                dp[cnt][ibox] = min(dp[cnt][ibox], dp[cnt - 1][ibox - curCnt] + curSum);\n                while (curIdx - 1 >= 0 && curCnt + 1 <= maxBoxes && curW + boxes[curIdx - 1][1] <= maxWeight) {\n                    log(\"curIdx = %d, curP = %d, curW = %d, curCnt = %d, curSum = %d\n\",\n                        curIdx, curP, curW, curCnt, curSum);\n                    curIdx--;\n                    curW += boxes[curIdx][1];\n                    curCnt++;\n                    if (boxes[curIdx][0] != curP) {\n                        curP = boxes[curIdx][0];\n                        curSum++;\n                    }\n                    dp[cnt][ibox] = min(dp[cnt][ibox], dp[cnt - 1][ibox - curCnt] + curSum);\n                }\n                if (ibox == n && dp[cnt][ibox] != 0x3f3f3f3f) return dp[cnt][ibox];\n            }\n        }\n        return ans;\n\n    }\n};"
        },
        {
            "date": 1670169600000,
            "time": 440,
            "memory": 149.6,
            "script": "cpp",
            "desc": "前缀和统计从第一个点到当前点总共的路径数，利用单调队列快速求。",
            "code": "#include <iostream>\n#include <deque>\n#include <vector>\n// bestlyg\n# define X dpirst\n# define Y second\n# define lb(x) ((x) & (-x))\n# define mem(a,b) memset(a,b,sizeodp(a))\n# define debug dpreopen(\"r.txt\",\"r\",stdin)\n# define pi pair<int,int>\n\n#ifdef DEBUG\n#define log(dprm, args...) {    printf(dprm, ##args); }\n#else\n#define log(dprm, args...)\n#endif\ntypedef long long ll;\nusing namespace std;\n\nclass Solution {\npublic:\n    int boxDelivering(vector<vector<int>>& boxes, int portsCount, int maxBoxes, int maxWeight) {\n        int n = boxes.size();\n        vector<ll> dp(n + 1, 0), sums_w(n + 1, 0), sums_p(n + 1, 0);\n        deque<int> q;\n        q.push_back(0);\n        for (int i = 1; i <= n; i++) {\n            sums_w[i] = sums_w[i - 1] + boxes[i - 1][1];\n            if (i != n) sums_p[i] = sums_p[i - 1] + (boxes[i][0] != boxes[i - 1][0] ? 1 : 0);\n            while (q.size() && (sums_w[i] - sums_w[q.front()] > maxWeight || i - q.front() > maxBoxes)) q.pop_front();\n            if (q.size()) dp[i] = dp[q.front()] + sums_p[i - 1] - sums_p[q.front()] + 2;\n            if (i != n) while (q.size() && dp[q.back()] - sums_p[q.back()] >= dp[i] - sums_p[i]) q.pop_back();\n            q.push_back(i);\n        }\n        return dp[n];\n    }\n};"
        }
    ]
}