{
    "name": "1617.统计子树中城市之间最大距离",
    "url": "https://leetcode.cn/problems/count-subtrees-with-max-distance-between-cities/////",
    "difficulty": "中等",
    "tag": [
        "广度优先搜索",
        "数组",
        "矩阵"
    ],
    "desc": "请你返回一个大小为 n-1 的数组，其中第 d 个元素（下标从 1 开始）是城市间 最大距离 恰好等于 d 的子树数目。",
    "solutions": [
        {
            "script": "cpp",
            "time": 156,
            "memory": 251.6,
            "desc": "二进制枚举所有子树，对每个子树求树的直径。",
            "code": "class Solution {\npublic:\n    vector<int> countSubgraphsForEachDiameter(int n, vector<vector<int>>& edges) {\n        vector<vector<int>> nodes(n);\n        for (auto &edge : edges) {\n            nodes[edge[0] - 1].push_back(edge[1] - 1);\n            nodes[edge[1] - 1].push_back(edge[0] - 1);\n        }\n        vector<int> res(n - 1, 0);\n        for (int i = 1; i < (1 << n); i++) {\n            int root = 0, mask = i, last = 0;\n            while (((1 << root) & i) == 0) root++;\n            queue<int> q;\n            q.push(root);\n            mask &= ~(1 << root);\n            while (q.size()) {\n                int cur = q.front();\n                last = cur;\n                q.pop();\n                for (auto &next : nodes[cur]) {\n                    if (mask & (1 << next)) {\n                        mask &= ~(1 << next);\n                        q.push(next);\n                    }\n                }\n            }\n            if (mask == 0) {\n                int d = dfs(nodes, last, i & ~(1 << last));\n                if (d >= 1) res[d - 1]++;\n            }\n        }\n        return res;\n    }\n    int dfs(vector<vector<int>> &nodes, int root, int mask) {\n        if (mask == 0) return 0;\n        int res = 0;\n        for (auto &next : nodes[root]) {\n            if (mask & (1 << next)) {\n                res = max(res, dfs(nodes, next, mask & ~(1 << next)) + 1);\n            }\n        }\n        return res;\n    }\n};",
            "date": 1678550400000
        },
        {
            "script": "python3",
            "time": 4088,
            "memory": 14.9,
            "desc": "同上。",
            "code": "from queue import Queue\nclass Solution:\n    def countSubgraphsForEachDiameter(self, n: int, edges: List[List[int]]) -> List[int]:\n        nodes = [[] for _ in range(n)]\n        for n1, n2 in edges:\n            nodes[n1-1].append(n2-1)\n            nodes[n2-1].append(n1-1)\n        def dfs(root: int, mask: int):\n            if mask == 0:\n                return 0\n            res = 0\n            for nextNode in nodes[root]:\n                if mask & (1 << nextNode):\n                    resd = dfs(nextNode, mask & ~(1 << nextNode))\n                    if resd != -1:\n                        res = max(res, resd+1)\n            return res\n\n        res = [0] * (n-1)\n        for i in range(1, 1 << n):\n            root, mask, last = 0, i, 0\n            while ((1 << root) & i) == 0:\n                root += 1\n            q = Queue()\n            q.put(root)\n            mask &= ~(1 << root)\n            while q.qsize():\n                cur = q.get()\n                last = cur\n                for nextNode in nodes[cur]:\n                    if mask & (1 << nextNode):\n                        mask &= ~(1 << nextNode)\n                        q.put(nextNode)\n            if mask == 0:\n                d = dfs(last, i & ~(1 << last))\n                if d >= 1:\n                    res[d-1] += 1\n        return res",
            "date": 1678550400000
        },
        {
            "script": "rust",
            "time": 16,
            "memory": 2.2,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn count_subgraphs_for_each_diameter(n: i32, edges: Vec<Vec<i32>>) -> Vec<i32> {\n        let n = n as usize;\n        let mut nodes: Vec<Vec<usize>> = vec![vec![]; n];\n        for edge in edges {\n            let (n1, n2) = (edge[0] as usize, edge[1] as usize);\n            nodes[n1 - 1].push(n2 - 1);\n            nodes[n2 - 1].push(n1 - 1);\n        }\n        let mut res = vec![0; n - 1];\n        for i in 1..(1 << n) {\n            let i = i as usize;\n            let (mut root, mut mask, mut last) = (0, i, 0);\n            while ((1 << root) & i) == 0 {\n                root += 1;\n            }\n            let mut q = std::collections::VecDeque::<usize>::new();\n            q.push_back(root);\n            mask &= !(1 << root);\n            while !q.is_empty() {\n                let cur = q.pop_front().unwrap();\n                last = cur;\n                for next in nodes[cur].iter() {\n                    if (mask & (1 << next)) != 0 {\n                        mask &= !(1 << next);\n                        q.push_back(*next);\n                    }\n                }\n            }\n            if mask == 0 {\n                let d = Solution::dfs(&nodes, last, i & !(1 << last));\n                if d >= 1 {\n                    res[d - 1] += 1;\n                }\n            }\n        }\n        res\n    }\n    fn dfs(nodes: &Vec<Vec<usize>>, root: usize, mask: usize) -> usize {\n        if mask == 0 {\n            0\n        } else {\n            let mut res = 0;\n            for next in nodes[root].iter() {\n                if (mask & (1 << next)) != 0 {\n                    res = res.max(Solution::dfs(nodes, *next, mask & !(1 << *next)) + 1)\n                }\n            }\n            res\n        }\n    }\n}",
            "date": 1678550400000
        }
    ]
}