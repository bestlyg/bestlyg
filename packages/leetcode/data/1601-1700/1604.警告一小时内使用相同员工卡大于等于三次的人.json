{
    "id": "1709",
    "name": "1604.警告一小时内使用相同员工卡大于等于三次的人",
    "url": "https://leetcode.cn/problems/alert-using-same-key-card-three-or-more-times-in-a-one-hour-period",
    "desc": "请你返回去重后的收到系统警告的员工名字，将它们按 字典序升序 排序后返回。",
    "solutions": [
        {
            "script": "cpp",
            "time": 236,
            "memory": 97.4,
            "desc": "遍历。",
            "code": "class Solution {\npublic:\n    vector<string> alertNames(vector<string>& keyName, vector<string>& keyTime) {\n        unordered_map<string, vector<int>> m;\n        vector<string> ans;\n        for (int i = 0; i < keyName.size(); i++) {\n            string &name = keyName[i];\n            int time = (keyTime[i][0] * 10 + keyTime[i][1]) * 60 + keyTime[i][3] * 10 + keyTime[i][4];\n            m[name].push_back(time);\n        }\n        for (auto &item : m) {\n            sort(item.second.begin(), item.second.end());\n            for (int i = 2; i < item.second.size(); i++) {\n                if (item.second[i] - item.second[i - 2] <= 60) {\n                    ans.push_back(item.first);\n                    break;\n                }\n            }\n        }\n        sort(ans.begin(), ans.end());\n        return ans;\n    }\n};",
            "date": "2023-02-07"
        },
        {
            "script": "python",
            "time": 188,
            "memory": 36.8,
            "desc": "同上。",
            "code": "class Solution:\n    def alertNames(self, keyName: List[str], keyTime: List[str]) -> List[str]:\n        m = defaultdict(list)\n        for i in range(len(keyName)):\n            time = (ord(keyTime[i][0]) * 10 + ord(keyTime[i][1])) *                 60 + ord(keyTime[i][3]) * 10 + ord(keyTime[i][4])\n            m[keyName[i]].append(time)\n        ans = []\n        for k, v in m.items():\n            v.sort()\n            for i in range(2, len(v)):\n                if v[i] - v[i - 2] <= 60:\n                    ans.append(k)\n                    break\n        ans.sort()\n        return ans",
            "date": "2023-02-07"
        },
        {
            "script": "rust",
            "time": 76,
            "memory": 18.6,
            "desc": "同上。",
            "code": "impl Solution {\n  pub fn alert_names(key_name: Vec<String>, key_time: Vec<String>) -> Vec<String> {\n      use std::collections::HashMap;\n      let mut m = HashMap::<String, Vec<i32>>::new();\n      let mut key_name = key_name.into_iter();\n      let mut key_time = key_time.into_iter();\n      loop {\n          let key_name = key_name.next();\n          let key_time = key_time.next().map(|time| {\n              let time = time.chars().map(|v| v as i32).collect::<Vec<i32>>();\n              (time[0] * 10 + time[1]) * 60 + time[3] * 10 + time[4]\n          });\n          if key_name.is_none() {\n              break;\n          }\n          let list = m.entry(key_name.unwrap()).or_insert(Vec::new());\n          list.push(key_time.unwrap());\n      }\n      let mut ans = Vec::new();\n      for (k, mut v) in m {\n          v.sort();\n          for i in 2..v.len() {\n              if v[i] - v[i - 2] <= 60 {\n                  ans.push(k);\n                  break;\n              }\n          }\n      }\n      ans.sort();\n      ans\n  }",
            "date": "2023-02-07"
        }
    ],
    "tagList": [
        "数组",
        "哈希表",
        "字符串",
        "排序"
    ],
    "level": "Medium"
}