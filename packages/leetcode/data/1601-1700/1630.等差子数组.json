{
    "id": "1752",
    "name": "1630.等差子数组",
    "url": "https://leetcode.cn/problems/arithmetic-subarrays",
    "difficulty": "中等",
    "tag": [
        "数组",
        "排序"
    ],
    "desc": "返回 boolean 元素构成的答案列表 answer 。如果子数组 nums[l[i]], nums[l[i]+1], ... , nums[r[i]] 可以 重新排列 形成 等差数列 ，answer[i] 的值就是 true；否则answer[i] 的值就是 false 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 20,
            "memory": 20.2,
            "desc": "多次遍历，对每个区间枚举所有值。",
            "code": "class Solution {\npublic:\n    vector<bool> checkArithmeticSubarrays(vector<int>& nums, vector<int>& l, vector<int>& r) {\n        vector<bool> res(l.size(), 0);\n        for (int i = 0; i < l.size(); i++) {\n            int left = l[i], right = r[i], size = right - left,\n                nmax = *max_element(nums.begin() + left, nums.begin() + right + 1), \n                nmin = *min_element(nums.begin() + left, nums.begin() + right + 1);\n            if ((nmax - nmin) % size != 0) res[i] = false;\n            else if (nmin == nmax) res[i] = true;\n            else {\n                bool f = true;\n                int step = (nmax - nmin) / size, list[size + 1];\n                memset(list, 0, sizeof(int) * (size + 1));\n                for (int i = left; i <= right && f; i++) {\n                    int val = (nums[i] - nmin) / step;\n                    if ((nums[i] - nmin) % step != 0 || list[val] != 0) f = false;\n                    else list[val] = 1;\n                }\n                res[i] = f;\n            }\n        }\n        return res;\n    }\n};",
            "date": 1679500800000
        },
        {
            "script": "python",
            "time": 96,
            "memory": 15,
            "desc": "同上。",
            "code": "class Solution:\n    def checkArithmeticSubarrays(self, nums: List[int], l: List[int], r: List[int]) -> List[bool]:\n        def check(i: int):\n            left, right = l[i], r[i]\n            size = right-left\n            nmax, nmin = max(nums[left:right + 1]), min(nums[left:right+1])\n            if (nmax - nmin) % size != 0:\n                return False\n            elif nmin == nmax:\n                return True\n            else:\n                step = (nmax - nmin) // size\n                arr = [False] * (size + 1)\n                for i in range(left, right+1):\n                    val = (nums[i] - nmin) // step\n                    if (nums[i] - nmin) % step != 0 or arr[val]:\n                        return False\n                    else:\n                        arr[val] = True\n                return True\n        return [check(i) for i in range(len(l))]",
            "date": 1679500800000
        },
        {
            "script": "rust",
            "time": 8,
            "memory": 2,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn check_arithmetic_subarrays(nums: Vec<i32>, l: Vec<i32>, r: Vec<i32>) -> Vec<bool> {\n        let check = |i| -> bool {\n            let (left, right) = (l[i] as usize, r[i] as usize);\n            let size = right - left;\n            let (nmax, nmin) = (*nums[left..=right].iter().max().unwrap(), *nums[left..=right].iter().min().unwrap());\n            if (nmax - nmin) % (size as i32) != 0 {\n                false\n            } else if nmax == nmin {\n                true\n            } else {\n                let step = (nmax - nmin) / (size as i32);\n                let mut arr = vec![false; (size + 1) as usize];\n                for i in left..=right {\n                    let val = ((nums[i] - nmin) / step) as usize;\n                    if (nums[i] - nmin) % step != 0 || arr[val] {\n                        return false;\n                    }\n                    arr[val] = true;\n                }\n                true\n            }\n        };\n        (0..l.len()).map(|i| check(i)).collect::<Vec<bool>>()\n    }\n}",
            "date": 1679500800000
        }
    ]
}