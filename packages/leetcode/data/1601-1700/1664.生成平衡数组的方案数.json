{
    "id": "1783",
    "name": "1664.生成平衡数组的方案数",
    "url": "https://leetcode.cn/problems/ways-to-make-a-fair-array",
    "difficulty": "中等",
    "tag": ["数组", "前缀和"],
    "desc": "如果一个数组满足奇数下标元素的和与偶数下标元素的和相等，该数组就是一个 平衡数组 。请你返回删除操作后，剩下的数组 nums 是 平衡数组 的 方案数 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 108,
            "memory": 92,
            "desc": "遍历。",
            "code": "class Solution {\npublic:\n    int waysToMakeFair(vector<int>& nums) {\n        int l[2] = {0}, r[2] = {0}, ans = 0;\n        for (int i = 0; i < nums.size(); i++) r[i % 2] += nums[i];\n        for (int i = 0; i < nums.size(); i++) {\n            r[i % 2] -= nums[i];\n            if (l[0] + r[1] == l[1] + r[0]) ans++;\n            l[i % 2] += nums[i];\n        }\n        return ans;\n    }\n};",
            "date": 1674835200000
        },
        {
            "script": "python",
            "time": 328,
            "memory": 19.7,
            "desc": "同上。",
            "code": "class Solution:\ndef waysToMakeFair(self, nums: List[int]) -> int:\n    l = [0] * 2\n    r = [0] * 2\n    ans = 0\n    for i, num in enumerate(nums):\n        r[i % 2] += num\n    for i, num in enumerate(nums):\n        r[i % 2] -= num\n        if l[0] + r[1] == l[1] + r[0]:\n            ans += 1\n        l[i % 2] += num\n    return ans",
            "date": 1674835200000
        },
        {
            "script": "rust",
            "time": 8,
            "memory": 2.5,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn ways_to_make_fair(nums: Vec<i32>) -> i32 {\n        let mut l = [0; 2];\n        let mut r = [0; 2];\n        let mut ans = 0;\n        for i in 0..nums.len() {\n            r[i % 2] += nums[i];\n        }\n        for i in 0..nums.len() {\n            r[i % 2] -= nums[i];\n            if l[0] + r[1] == l[1] + r[0] {\n                ans += 1;\n            }\n            l[i % 2] += nums[i];\n        }\n        ans\n    }\n}",
            "date": 1674835200000
        }
    ]
}
