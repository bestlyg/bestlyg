{
    "id": "1747",
    "name": "1625.执行操作后字典序最小的字符串",
    "url": "https://leetcode.cn/problems/lexicographically-smallest-string-after-applying-operations",
    "difficulty": "中等",
    "tag": ["广度优先搜索", "字符串"],
    "desc": "请你返回在 s 上执行上述操作任意次后可以得到的 字典序最小 的字符串。",
    "solutions": [
        {
            "script": "cpp",
            "time": 340,
            "memory": 99,
            "desc": "bfs。",
            "code": "class Solution {\npublic:\n    string findLexSmallestString(string s, int a, int b) {\n        set<string> sset;\n        sset.insert(s);\n        queue<string> q;\n        q.push(s);\n        auto t1 = [&](string s) {\n            for (int i = 1; i < s.size(); i += 2) s[i] = ((s[i] - '0' + a) % 10) + '0';\n            return s;\n        };\n        auto t2 = [&](string &s) {\n            return s.substr(s.size() - b, b + 1) + s.substr(0, s.size() - b);\n        };\n        while (q.size()) {\n            string cur = q.front();\n            q.pop();\n            string n1 = t1(cur), n2 = t2(cur);\n            if (!sset.count(n1)) sset.insert(n1), q.push(n1);\n            if (!sset.count(n2)) sset.insert(n2), q.push(n2);\n        }\n        return *sset.begin();\n    }\n};",
            "date": 1679155200000
        },
        {
            "script": "python",
            "time": 1652,
            "memory": 17.6,
            "desc": "同上。",
            "code": "class Solution:\n    def findLexSmallestString(self, s: str, a: int, b: int) -> str:\n        set = SortedSet()\n        set.add(s)\n        q = Queue()\n        q.put(s)\n\n        def t1(s: str):\n            res = \"\"\n            for i in range(len(s)):\n                if i % 2:\n                    res += str((ord(s[i]) - ord('0') + a) % 10)\n                else:\n                    res += s[i]\n            return res\n\n        def t2(s: str):\n            return s[len(s)-b:] + s[0:len(s)-b]\n        while q.qsize():\n            cur = q.get()\n            n1, n2 = t1(cur), t2(cur)\n            if not n1 in set:\n                set.add(n1)\n                q.put(n1)\n            if not n2 in set:\n                set.add(n2)\n                q.put(n2)\n        return set.pop(0)",
            "date": 1679155200000
        },
        {
            "script": "rust",
            "time": 104,
            "memory": 3.9,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn find_lex_smallest_string(s: String, a: i32, b: i32) -> String {\n        let mut set = std::collections::BTreeSet::<String>::new();\n        set.insert(s.clone());\n        let mut q = std::collections::VecDeque::<String>::new();\n        q.push_back(s.clone());\n        let t1 = |s: String| -> String {\n            let mut s = s.chars().map(|v| v as u8).collect::<Vec<u8>>();\n            let mut i = 1;\n            while i < s.len() {\n                s[i] = (s[i] - '0' as u8 + a as u8) % 10 + '0' as u8;\n                i += 2;\n            }\n            String::from_utf8(s).unwrap()\n        };\n        let t2 = |s: String| -> String {\n            let s = s.chars().collect::<Vec<char>>();\n            let s1 = &s[s.len() - b as usize..];\n            let s2 = &s[0..s.len() - b as usize];\n            let s1 = String::from_utf8(s1.iter().map(|v| *v as u8).collect::<Vec<u8>>()).unwrap();\n            let s2 = String::from_utf8(s2.iter().map(|v| *v as u8).collect::<Vec<u8>>()).unwrap();\n            [s1, s2].concat()\n        };\n        while !q.is_empty() {\n            let cur = q.pop_front().unwrap();\n            let (n1, n2) = (t1(cur.clone()), t2(cur.clone()));\n            if !set.contains(&n1) {\n                set.insert(n1.clone());\n                q.push_front(n1.clone());\n            }\n            if !set.contains(&n2) {\n                set.insert(n2.clone());\n                q.push_front(n2.clone());\n            }\n        }\n        set.into_iter().next().unwrap()\n    }\n}",
            "date": 1679155200000
        }
    ]
}
