{
    "id": "1739",
    "name": "1616.分割两个字符串得到回文串",
    "url": "https://leetcode.cn/problems/split-two-strings-to-make-palindrome",
    "desc": "请你判断 aprefix + bsuffix 或者 bprefix + asuffix 能否构成回文串。",
    "solutions": [
        {
            "script": "cpp",
            "time": 52,
            "memory": 28.5,
            "desc": "贪心a前缀和b后缀最大匹配个数，a后缀和b前缀最大匹配个数。",
            "code": "class Solution {\npublic:\n    bool checkPalindromeFormation(string a, string b) {\n        int n = a.size(), cnt = 0;\n        while (cnt < n && a[cnt] == b[n - 1 - cnt]) cnt++;\n        if (cnt >= n / 2 || check(a.substr(cnt, n - cnt * 2)) || check(b.substr(cnt, n - cnt * 2))) return true;\n        cnt = 0;\n        while (cnt < n && b[cnt] == a[n - 1 - cnt]) cnt++;\n        if (cnt >= n / 2 || check(a.substr(cnt, n - cnt * 2)) || check(b.substr(cnt, n - cnt * 2))) return true;\n        return false;\n    }\n    bool check(string s) {\n        for (int l = 0, r = s.size() - 1; l < r; l++, r--)\n            if (s[l] != s[r]) return false;\n        return true;\n    }\n};",
            "date": "2023-03-18"
        },
        {
            "script": "python",
            "time": 108,
            "memory": 15.6,
            "desc": "同上。",
            "code": "class Solution:\n    def checkPalindromeFormation(self, a: str, b: str) -> bool:\n        def check(s: str):\n            l, r = 0, len(s)-1\n            while l < r:\n                if s[l] != s[r]:\n                    return False\n                l += 1\n                r -= 1\n            return True\n\n        n, cnt = len(a), 0\n        while cnt < n and a[cnt] == b[n-1-cnt]:\n            cnt += 1\n        if cnt >= n//2 or check(a[cnt:n-cnt]) or check(b[cnt:n-cnt]):\n            return True\n        cnt = 0\n        while cnt < n and b[cnt] == a[n-1-cnt]:\n            cnt += 1\n        if cnt >= n//2 or check(a[cnt:n-cnt]) or check(b[cnt:n-cnt]):\n            return True\n        return False",
            "date": "2023-03-18"
        },
        {
            "script": "rust",
            "time": 12,
            "memory": 3.1,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn check_palindrome_formation(a: String, b: String) -> bool {\n        let check = |s: &[char]| {\n            let (mut l, mut r) = (0, s.len() - 1);\n            while l < r {\n                if s[l] != s[r] {\n                    return false;\n                }\n                l += 1;\n                r -= 1;\n            }\n            true\n        };\n        let a = a.chars().collect::<Vec<char>>();\n        let b = b.chars().collect::<Vec<char>>();\n        let (n, mut cnt) = (a.len(), 0);\n        while cnt < n && a[cnt] == b[n - 1 - cnt] {\n            cnt += 1;\n        }\n        if cnt >= n / 2 || check(&a[cnt..n - cnt]) || check(&b[cnt..n - cnt]) {\n            return true;\n        }\n        cnt = 0;\n        while cnt < n && b[cnt] == a[n - 1 - cnt] {\n            cnt += 1;\n        }\n        if cnt >= n / 2 || check(&a[cnt..n - cnt]) || check(&b[cnt..n - cnt]) {\n            return true;\n        }\n        false\n    }\n}",
            "date": "2023-03-18"
        }
    ],
    "tagList": ["双指针", "字符串"],
    "level": "Medium"
}
