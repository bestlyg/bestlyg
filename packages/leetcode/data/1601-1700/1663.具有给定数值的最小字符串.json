{
    "name": "1663.具有给定数值的最小字符串",
    "url": "https://leetcode.cn/problems/smallest-string-with-a-given-numeric-value/",
    "difficulty": "中等",
    "tag": [
        "贪心",
        "字符串"
    ],
    "desc": "给你两个整数 n 和 k 。返回 长度 等于 n 且 数值 等于 k 的 字典序最小 的字符串。",
    "solutions": [
        {
            "script": "cpp",
            "time": 64,
            "memory": 26.5,
            "desc": "贪心遍历。",
            "code": "class Solution {\npublic:\n    string getSmallestString(int n, int k) {\n        k -= n;\n        string ans = \"\";\n        while (n--) ans += \"a\";\n        for (int i = ans.size() - 1; i >= 0 && k; i--) {\n            if (k >= 25) ans[i] = 'z', k -= 25;\n            else ans[i] += k, k = 0;\n        }\n        return ans;\n    }\n};",
            "date": 1674662400000
        },
        {
            "script": "python3",
            "time": 7856,
            "memory": 17.3,
            "desc": "同上。",
            "code": "class Solution:\n    def getSmallestString(self, n: int, k: int) -> str:\n        ans = ''.join(['a'] * n)\n        k -= n\n        for i in range(n - 1, -1, -1):\n            if k >= 25:\n                ans = ans[:i] + \"z\" + ans[i + 1:]\n                k -= 25\n            else:\n                ans = ans[:i] + chr(k + ord('a')) + ans[i + 1:]\n                k = 0\n            if not k:\n                break\n        return ans",
            "date": 1674662400000
        },
        {
            "script": "rust",
            "time": 8,
            "memory": 2.5,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn get_smallest_string(n: i32, k: i32) -> String {\n        let mut k = k;\n        k -= n;\n        let mut ans = vec!['a'; n as usize];\n        let mut i = n as usize - 1;\n        while k != 0 {\n            if k >= 25 {\n                ans[i] = 'z';\n                k -= 25;\n            } else {\n                ans[i] = ('a' as i32 + k) as u8 as char;\n                k = 0\n            }\n            i -= 1;\n        }\n        ans.into_iter().collect::<String>()\n    }\n}",
            "date": 1674662400000
        }
    ]
}