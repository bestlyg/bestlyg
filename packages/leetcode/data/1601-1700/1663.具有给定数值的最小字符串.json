{
    "id": "1782",
    "name": "1663.具有给定数值的最小字符串",
    "url": "https://leetcode.cn/problems/smallest-string-with-a-given-numeric-value",
    "desc": "给你两个整数 n 和 k 。返回 长度 等于 n 且 数值 等于 k 的 字典序最小 的字符串。",
    "solutions": [
        {
            "script": "cpp",
            "time": 8,
            "memory": 6.4,
            "desc": "遍历。",
            "code": "class Solution {\npublic:\n    string greatestLetter(string s) {\n        string ans = \"\";\n        int map[128] = {0};\n        for (auto &c : s) {\n            map[c]++;\n            if (isupper(c) && map[tolower(c)] && (ans == \"\" || ans[0] < c) ||\n                islower(c) && map[toupper(c)] && (ans == \"\" || ans[0] < toupper(c))) ans = toupper(c);\n        }\n        return ans;\n    }\n};",
            "date": "2023-01-27"
        },
        {
            "script": "python",
            "time": 56,
            "memory": 15,
            "desc": "同上。",
            "code": "class Solution:\ndef greatestLetter(self, s: str) -> str:\n    ans = \"\"\n    sset = set()\n    for i, c in enumerate(s):\n        sset.add(c)\n        if c.isupper() and c.lower() in sset and (ans == \"\" or ans[0] < c) or c.islower() and c.upper() in sset and (ans == \"\" or ans[0] < c.upper()):\n             ans = c.upper()\n    return ans",
            "date": "2023-01-27"
        },
        {
            "script": "rust",
            "time": 4,
            "memory": 2,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn greatest_letter(s: String) -> String {\n        let s = s.chars().collect::<Vec<char>>();\n        let mut ans = 0usize;\n        let mut map = [0; 128];\n        for c in s {\n            map[c as usize] += 1;\n            let upper_c = c.to_uppercase().next().unwrap() as usize;\n            let lower_c = c.to_lowercase().next().unwrap() as usize;\n            if map[upper_c] > 0 && map[lower_c] > 0 && ans < upper_c {\n                ans = upper_c;\n            }\n        }\n        if ans == 0 {\n            \"\".to_string()\n        } else {\n            String::from(ans as u8 as char)\n        }\n    }\n}",
            "date": "2023-01-27"
        }
    ],
    "tagList": [
        "贪心",
        "字符串"
    ],
    "level": "Medium"
}