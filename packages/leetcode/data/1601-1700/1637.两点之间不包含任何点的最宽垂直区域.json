{
    "id": "1742",
    "name": "1637.两点之间不包含任何点的最宽垂直区域",
    "url": "https://leetcode.cn/problems/widest-vertical-area-between-two-points-containing-no-points",
    "desc": "给你 n 个二维平面上的点 points ，其中 points[i] = [xi, yi] ，请你返回两点之间内部不包含任何点的 最宽垂直区域 的宽度。",
    "solutions": [
        {
            "script": "cpp",
            "time": 272,
            "memory": 79.3,
            "desc": "Tree排序。",
            "code": "class Solution {\npublic:\n    int maxWidthOfVerticalArea(vector<vector<int>>& points) {\n        set<int> s;\n        for (auto &p : points) s.insert(p[0]);\n        auto it = s.begin();\n        int res = 0, prev = *it;\n        while (it != s.end()) res = max(res, *it - prev), prev = *it, it++;\n        return res;\n    }\n};",
            "date": "2023-03-30"
        },
        {
            "script": "cpp",
            "time": 280,
            "memory": 64.7,
            "desc": "排序。",
            "code": "class Solution {\npublic:\n    int maxWidthOfVerticalArea(vector<vector<int>>& points) {\n        sort(points.begin(), points.end(), [&](auto &a, auto &b){\n            return a[0] < b[0];\n        });\n        int res = 0;\n        for (int i = 1; i < points.size(); i++) {\n            if (points[i][0] != points[i - 1][0]) {\n                res = max(res, points[i][0] - points[i - 1][0]);\n            }\n        }\n        return res;\n    }\n};",
            "date": "2023-03-30"
        },
        {
            "script": "python",
            "time": 240,
            "memory": 45.1,
            "desc": "同上。",
            "code": "class Solution:\n    def maxWidthOfVerticalArea(self, points: List[List[int]]) -> int:\n        points.sort(key=lambda p: p[0])\n        res = 0\n        for i in range(1, len(points)):\n            if points[i][0] != points[i - 1][0]:\n                res = max(res, points[i][0] - points[i - 1][0])\n        return res",
            "date": "2023-03-30"
        },
        {
            "script": "rust",
            "time": 36,
            "memory": 9.3,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn max_width_of_vertical_area(mut points: Vec<Vec<i32>>) -> i32 {\n        points.sort_by_key(|p| p[0]);\n        let mut res = 0;\n        for i in 1..points.len() {\n            if (points[i][0] != points[i - 1][0]) {\n                res = res.max(points[i][0] - points[i - 1][0]);\n            }\n        }\n        res\n    }\n}",
            "date": "2023-03-30"
        }
    ],
    "tagList": ["数组", "排序"],
    "level": "Easy"
}
