{
    "id": "1290",
    "name": "1187.使数组严格递增",
    "url": "https://leetcode.cn/problems/make-array-strictly-increasing",
    "difficulty": "困难",
    "tag": [
        "数组",
        "二分查找",
        "动态规划",
        "排序"
    ],
    "desc": "给你两个整数数组 arr1 和 arr2，返回使 arr1 严格递增所需要的最小「操作」数（可能为 0）。每一步「操作」中，你可以分别从 arr1 和 arr2 中各选出一个索引，分别为 i 和 j，0 <= i < arr1.length 和 0 <= j < arr2.length，然后进行赋值运算 arr1[i] = arr2[j]。如果无法让 arr1 严格递增，请返回 -1。",
    "solutions": [
        {
            "script": "cpp",
            "time": 604,
            "memory": 71.1,
            "desc": "dfs，每次记录当前下标和上一个值，如果当前值替换，应该换成最大可换的值。",
            "code": "class Solution {\n    public:\n        int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {\n            set<int> s;\n            for (auto &num : arr2) s.insert(num);\n            unordered_map<int, unordered_map<int, int>> m;\n            function<int(int, int)> dfs = [&](int idx, int pre) -> int {\n                if (m[idx].count(pre)) return m[idx][pre];\n                if (idx == - 1) return m[idx][pre] = 0;\n                int res = INT_MAX;\n                if (arr1[idx] < pre) res = dfs(idx - 1, arr1[idx]);\n                auto find = s.lower_bound(pre);\n                if (find != s.begin()) {\n                    int next = dfs(idx - 1, *(--find));\n                    if (next != INT_MAX)\n                    res = min(res, 1 + next);\n                }\n                return m[idx][pre] = res;\n            };\n            int res = dfs(arr1.size() - 1, INT_MAX);\n            return res == INT_MAX ? -1 : res;\n        }\n    };",
            "date": 1681920000000
        },
        {
            "script": "python",
            "time": 724,
            "memory": 131.3,
            "desc": "同上。",
            "code": "class Solution:\n    def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n        arr2.sort()\n\n        @cache\n        def dfs(idx: int, pre: int) -> int:\n            if idx == -1:\n                return 0\n            res = inf\n            if arr1[idx] < pre:\n                res = dfs(idx-1, arr1[idx])\n            find = bisect_left(arr2, pre)\n            if find > 0:\n                res = min(res, dfs(idx-1, arr2[find - 1]) + 1)\n            return res\n        res = dfs(len(arr1) - 1, inf)\n        return res if res != inf else -1",
            "date": 1681920000000
        }
    ]
}