{
    "id": "1196",
    "name": "1105.填充书架",
    "url": "https://leetcode.cn/problems/filling-bookcase-shelves",
    "difficulty": "中等",
    "tag": [
        "数组",
        "动态规划"
    ],
    "desc": "给定一个数组 books ，其中 books[i] = [thicknessi, heighti] 表示第 i 本书的厚度和高度。你也会得到一个整数 shelfWidth 。每一层所摆放的书的最大高度就是这一层书架的层高，书架整体的高度为各层高之和。以这种方式布置书架，返回书架整体可能的最小高度。",
    "solutions": [
        {
            "script": "cpp",
            "time": 4,
            "memory": 7.9,
            "desc": "dp[i]表示以i为行末的最大高度。",
            "code": "class Solution {\npublic:\n    int minHeightShelves(vector<vector<int>>& books, int shelfWidth) {\n        int n = books.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        for (int i = 1; i <= n; i++) {\n            int sum = 0, h = 0;\n            for (int j = i - 1; j >= 0; j--) {\n                if (sum + books[j][0] > shelfWidth) break;\n                sum += books[j][0];\n                h = max(h, books[j][1]);\n                dp[i] = min(dp[i], dp[j] + h);\n            }\n        }\n        return dp[n];\n    }\n};",
            "date": 1682179200000
        },
        {
            "script": "python",
            "time": 40,
            "memory": 15.3,
            "desc": "同上。",
            "code": "class Solution:\n    def minHeightShelves(self, books: List[List[int]], shelfWidth: int) -> int:\n        n = len(books)\n        dp = [inf] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n+1):\n            sum = h = 0\n            for j in range(i-1, -1, -1):\n                if sum + books[j][0] > shelfWidth:\n                    break\n                sum += books[j][0]\n                h = max(h, books[j][1])\n                dp[i] = min(dp[i], dp[j]+h)\n        return dp[n]",
            "date": 1682179200000
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 2.3,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn min_height_shelves(books: Vec<Vec<i32>>, shelf_width: i32) -> i32 {\n        use std::cmp::{max, min};\n        let n = books.len();\n        let mut dp = vec![i32::MAX; n + 1];\n        dp[0] = 0;\n        for i in 1..=n {\n            let mut sum = 0;\n            let mut h = 0;\n            for j in (0..=i - 1).rev() {\n                if sum + books[j][0] > shelf_width {\n                    break;\n                }\n                sum += books[j][0];\n                h = max(h, books[j][1]);\n                dp[i] = min(dp[i], dp[j] + h);\n            }\n        }\n        dp[n]\n    }\n}",
            "date": 1682179200000
        }
    ]
}