{
    "id": "1116",
    "name": "1161.最大层内元素和",
    "url": "https://leetcode.cn/problems/maximum-level-sum-of-a-binary-tree",
    "difficulty": "中等",
    "tag": [
        "树",
        "深度优先搜索",
        "广度优先搜索",
        "二叉树"
    ],
    "desc": "请返回层内元素之和 最大 的那几层（可能只有一层）的层号，并返回其中 最小 的那个。",
    "solutions": [
        {
            "date": 1659283200000,
            "time": 156,
            "memory": 104.7,
            "script": "cpp",
            "desc": "层序遍历。",
            "code": "class Solution {\n   public:\n    int maxLevelSum(TreeNode *root) {\n        queue<TreeNode *> q;\n        q.push(root);\n        int max_level = 1, max_sum = root->val, cur = 0, size = 1, level = 1;\n        while (q.size()) {\n            TreeNode *node = q.front();\n            q.pop();\n            if (node->left) {\n                cur += node->left->val;\n                q.push(node->left);\n            }\n            if (node->right) {\n                cur += node->right->val;\n                q.push(node->right);\n            }\n            if (--size == 0) {\n                size = q.size();\n                level++;\n                if (size > 0 && cur > max_sum) {\n                    max_sum = cur;\n                    max_level = level;\n                }\n                cur = 0;\n            }\n        }\n        return max_level;\n    }\n};"
        },
        {
            "date": 1659283200000,
            "time": 24,
            "memory": 3.2,
            "script": "rust",
            "desc": "层序遍历。",
            "code": "use std::cell::RefCell;\nuse std::rc::Rc;\nimpl Solution {\n    pub fn max_level_sum(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        use std::collections::VecDeque;\n        let root = root.unwrap();\n        let mut q: VecDeque<Rc<RefCell<TreeNode>>> = VecDeque::new();\n        q.push_back(root.clone());\n        let (mut max_level, mut max_sum, mut cur, mut size, mut level) =\n            (1, root.borrow().val, 0, 1, 1);\n        while let Some(node) = q.pop_front() {\n            if node.as_ref().borrow().left.is_some() {\n                cur += node.as_ref().borrow().left.as_ref().unwrap().borrow().val;\n                q.push_back(node.as_ref().borrow().left.as_ref().unwrap().clone());\n            }\n            if node.as_ref().borrow().right.is_some() {\n                cur += node.as_ref().borrow().right.as_ref().unwrap().borrow().val;\n                q.push_back(node.as_ref().borrow().right.as_ref().unwrap().clone());\n            }\n            size -= 1;\n            if size == 0 {\n                size = q.len();\n                level += 1;\n                if size > 0 && cur > max_sum {\n                    max_sum = cur;\n                    max_level = level;\n                }\n                cur = 0;\n            }\n        }\n        max_level\n    }\n}"
        }
    ]
}