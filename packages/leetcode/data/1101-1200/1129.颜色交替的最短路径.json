{
    "id": "1229",
    "name": "1129.颜色交替的最短路径",
    "url": "https://leetcode.cn/problems/shortest-path-with-alternating-colors",
    "desc": "返回长度为 n 的数组 answer，其中 answer[X] 是从节点 0 到节点 X 的红色边和蓝色边交替出现的最短路径的长度。",
    "solutions": [
        {
            "script": "cpp",
            "time": 24,
            "memory": 14.2,
            "desc": "bfs。",
            "code": "struct Node {\n    vector<int> next[2];\n};\ntypedef pair<int, int> pii;\nclass Solution {\npublic:\n    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& redEdges, vector<vector<int>>& blueEdges) {\n        vector<int> ans(n, -1);\n        ans[0] = 0;\n        vector<vector<bool>> cache(2, vector<bool>(n, false));\n        vector<Node> list(n);\n        for (auto &item : redEdges) list[item[0]].next[0].push_back(item[1]);\n        for (auto &item : blueEdges) list[item[0]].next[1].push_back(item[1]);\n        queue<pii> q;\n        q.push(make_pair(0, -1));\n        int l = 0, size = 1;\n        while (q.size()) {\n            pii cur = q.front();\n            q.pop();\n            for (int i = 0; i < 2; i++) {\n                if (cur.second == i) continue;\n                for (auto &next : list[cur.first].next[i]) {\n                    if (cache[i][next]) continue;\n                    cache[i][next] = true;\n                    if (ans[next] == -1) ans[next] = l + 1;\n                    q.push(make_pair(next, i));\n                }\n            }\n            if (--size == 0) size = q.size(), l++;\n        }\n        return ans;\n    }\n};",
            "date": "2023-02-02"
        },
        {
            "script": "python",
            "time": 52,
            "memory": 15.2,
            "desc": "同上。",
            "code": "from queue import Queue\nclass Node:\n    def __init__(self) -> None:\n        self.next = [[] for _ in range(2)]\nclass Solution:\n    def shortestAlternatingPaths(self, n: int, redEdges: List[List[int]], blueEdges: List[List[int]]) -> List[int]:\n        ans = [-1] * n\n        ans[0] = 0\n        cache = [[False] * n for _ in range(2)]\n        list = [Node() for _ in range(n)]\n        for [v1, v2] in redEdges:\n            list[v1].next[0].append(v2)\n        for [v1, v2] in blueEdges:\n            list[v1].next[1].append(v2)\n        q = Queue()\n        q.put((0, -1))\n        l, size = 0, 1\n        while not q.empty():\n            (node, color) = q.get()\n            size -= 1\n            for i in range(2):\n                if color == i:\n                    continue\n                for val in list[node].next[i]:\n                    if cache[i][val]:\n                        continue\n                    cache[i][val] = True\n                    if ans[val] == -1:\n                        ans[val] = l + 1\n                    q.put((val, i))\n            if size == 0:\n                size = q.qsize()\n                l += 1\n        return ans",
            "date": "2023-02-02"
        },
        {
            "script": "rust",
            "time": 4,
            "memory": 2.3,
            "desc": "同上。",
            "code": "#[derive(Clone)]\nstruct Node {\n    next: Vec<Vec<i32>>,\n}\nimpl Node {\n    fn new() -> Self {\n        Self {\n            next: vec![vec![]; 2],\n        }\n    }\n}\n\nimpl Solution {\n    pub fn shortest_alternating_paths(\n        n: i32,\n        red_edges: Vec<Vec<i32>>,\n        blue_edges: Vec<Vec<i32>>,\n    ) -> Vec<i32> {\n        let n = n as usize;\n        let mut ans = vec![-1; n];\n        ans[0] = 0;\n        let mut cache = vec![vec![false; n]; 2];\n        let mut list = vec![Node::new(); n];\n        for item in red_edges {\n            list[item[0] as usize].next[0].push(item[1]);\n        }\n        for item in blue_edges {\n            list[item[0] as usize].next[1].push(item[1]);\n        }\n        use std::collections::VecDeque;\n        let mut q = VecDeque::<(usize, usize)>::new();\n        q.push_back((0, 2));\n        let (mut l, mut size) = (0, 1);\n        while !q.is_empty() {\n            let (node, color) = q.pop_front().unwrap();\n            for i in 0..2 {\n                if color == i {\n                    continue;\n                }\n                for next in list[node].next[i].iter() {\n                    let next = *next as usize;\n                    if cache[i][next] {\n                        continue;\n                    }\n                    cache[i][next] = true;\n                    if ans[next] == -1 {\n                        ans[next] = l + 1;\n                    }\n                    q.push_back((next, i));\n                }\n            }\n            size -= 1;\n            if size == 0 {\n                size = q.len();\n                l += 1\n            }\n        }\n        ans\n    }\n}",
            "date": "2023-02-02"
        }
    ],
    "tagList": ["广度优先搜索", "图"],
    "level": "Medium"
}
