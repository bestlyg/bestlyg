{
    "id": "1240",
    "name": "1140.石子游戏II",
    "url": "https://leetcode.cn/problems/stone-game-ii",
    "desc": "假设爱丽丝和鲍勃都发挥出最佳水平，返回爱丽丝可以得到的最大数量的石头。",
    "solutions": [
        {
            "script": "cpp",
            "time": 16,
            "memory": 14.3,
            "desc": "dp[i][m]=第i轮拾取时m情况下的最大数量。",
            "code": "class Solution {\npublic:\n    int stoneGameII(vector<int>& piles) {\n        int n = piles.size(), sum = 0;\n        vector<vector<int>> dp(n, vector<int>(n + 1));\n        for (int i = n - 1; i >= 0; i--) {\n            sum += piles[i];\n            for (int m = 1; m <= n; m++) {\n                if (i + 2 * m >= n) dp[i][m] = sum;\n                else for (int x = 1; x <= 2 * m; x++) dp[i][m] = max(dp[i][m], sum - dp[i + x][max(m, x)]);\n            }\n        }\n        return dp[0][1];\n    }\n};",
            "date": "2023-02-22"
        },
        {
            "script": "python",
            "time": 428,
            "memory": 15.3,
            "desc": "同上。",
            "code": "class Solution:\n    def stoneGameII(self, piles: List[int]) -> int:\n        n, sumv = len(piles), 0\n        dp = [[0] * (n + 1) for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            sumv += piles[i]\n            for m in range(1, n + 1):\n                if i + 2 * m >= n:\n                    dp[i][m] = sumv\n                else:\n                    for x in range(1, 2*m+1):\n                        dp[i][m] = max(dp[i][m], sumv - dp[i + x][max(x, m)])\n        return dp[0][1]",
            "date": "2023-02-22"
        },
        {
            "script": "rust",
            "time": 4,
            "memory": 2.2,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn stone_game_ii(piles: Vec<i32>) -> i32 {\n        let n = piles.len();\n        let mut sum = 0;\n        let mut dp = vec![vec![0; n + 1]; n];\n        for i in (0..n).rev() {\n            sum += piles[i];\n            for m in 1..=n {\n                if i + 2 * m >= n {\n                    dp[i][m] = sum\n                } else {\n                    for x in 1..=(2 * m) {\n                        dp[i][m] = dp[i][m].max(sum - dp[i + x][x.max(m)])\n                    }\n                }\n            }\n        }\n        dp[0][1]\n    }\n}",
            "date": "2023-02-22"
        }
    ],
    "tagList": [
        "数组",
        "数学",
        "动态规划",
        "博弈",
        "前缀和"
    ],
    "level": "Medium"
}