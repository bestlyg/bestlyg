{
    "id": "1219",
    "name": "1124.表现良好的最长时间段",
    "url": "https://leetcode.cn/problems/longest-well-performing-interval",
    "difficulty": "中等",
    "tag": [
        "栈",
        "数组",
        "哈希表",
        "前缀和",
        "单调栈"
    ],
    "desc": "给你一份工作时间表 hours，上面记录着某一位员工每天的工作小时数。",
    "solutions": [
        {
            "date": 1616169600000,
            "time": 1044,
            "memory": 42.8,
            "script": "typescript",
            "desc": "前缀和。",
            "code": "function longestWPI(hours: number[]): number {\n  hours = hours.map(v => (v > 8 ? 1 : -1));\n  const len = hours.length;\n  const sums = [0];\n  let sum = 0;\n  hours.forEach(hour => sums.push((sum += hour)));\n  let max = 0;\n  for (let i = 1; i < len + 1; i++) {\n    for (let j = 0; j < i; j++) {\n      if (sums[i] - sums[j] > 0) max = Math.max(max, i - j);\n    }\n  }\n  return max;\n}"
        },
        {
            "script": "cpp",
            "time": 32,
            "memory": 23.3,
            "desc": "单调栈，找出最远最小的值。",
            "code": "class Solution {\npublic:\n    int longestWPI(vector<int>& hours) {\n        int n = hours.size(), ans = 0;\n        for (auto &h : hours) h = h > 8 ? 1 : -1;\n        vector<int> sums(1, 0);\n        for (auto &h : hours) sums.push_back(sums.back() + h);\n        stack<int> s; s.push(0);\n        for (int i = 1; i <= n; i++) {\n            if (sums[s.top()] > sums[i]) s.push(i);\n        }\n        for (int i = n; i >= 1; i--) {\n            while (s.size() && sums[s.top()] < sums[i]) {\n                ans = max(ans, i - s.top());\n                s.pop();\n            }\n        }\n        return ans;\n    }\n};",
            "date": 1676304000000
        },
        {
            "script": "python3",
            "time": 72,
            "memory": 15.7,
            "desc": "同上。",
            "code": "class Solution:\n    def longestWPI(self, hours: List[int]) -> int:\n        n = len(hours)\n        ans = 0\n        sums = [0]\n        for h in hours:\n            v = -1\n            if (h > 8):\n                v = 1\n            sums.append(sums[-1] + v)\n        s = [0]\n        for i in range(1, n+1):\n            if sums[s[-1]] > sums[i]:\n                s.append(i)\n        for i in range(n, 0, -1):\n            while len(s) and sums[s[-1]] < sums[i]:\n                ans = max(ans, i - s.pop())\n        return ans",
            "date": 1676304000000
        },
        {
            "script": "rust",
            "time": 12,
            "memory": 2.4,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn longest_wpi(hours: Vec<i32>) -> i32 {\n        use std::collections::VecDeque;\n        let n = hours.len();\n        let mut ans = 0;\n        let mut sums = vec![0; 1];\n        for h in hours {\n            let h: i32 = if h > 8 { 1 } else { -1 };\n            sums.push(sums.last().unwrap() + h);\n        }\n        let mut s = VecDeque::<usize>::new();\n        s.push_back(0);\n        for i in 1..=n {\n            if sums[*s.back().unwrap()] > sums[i] {\n                s.push_back(i);\n            }\n        }\n        let mut i = n;\n        while i >= 1 {\n            while !s.is_empty() && sums[*s.back().unwrap()] < sums[i] {\n                ans = ans.max(i as i32 - s.pop_back().unwrap() as i32);\n            }\n            i -= 1;\n        }\n        ans\n    }\n}",
            "date": 1676304000000
        }
    ]
}