{
    "id": "1281",
    "name": "1177.构建回文串检测",
    "url": "https://leetcode.cn/problems/can-make-palindrome-from-substring",
    "difficulty": "中等",
    "tag": ["位运算", "数组", "哈希表", "字符串", "前缀和"],
    "desc": "给你一个字符串 s，请你对 s 的子串进行检测。每次检测，待检子串都可以表示为 queries[i] = [left, right, k]。我们可以 重新排列 子串 s[left], ..., s[right]，并从中选择 最多 k 项替换成任何小写英文字母。     如果在上述检测过程中，子串可以变成回文形式的字符串，那么检测结果为 true，否则结果为 false。    返回答案数组 answer[]，其中 answer[i] 是第 i 个待检子串 queries[i] 的检测结果。",
    "solutions": [
        {
            "script": "cpp",
            "time": 284,
            "memory": 92.6,
            "desc": "因为可以重新排列，所以只需要考虑区间内的奇偶即可。",
            "code": "class Solution {\npublic:\n    vector<bool> canMakePaliQueries(string s, vector<vector<int>>& queries) {\n        vector<int> list(1, 0);\n        for (auto &c : s) list.push_back(list.back() ^ (1 << (c - 'a')));\n        vector<bool> res;\n        for (auto &q : queries) {\n            int l = q[0], r = q[1], k = q[2], val = list[r + 1] ^ list[l], cnt = 0;\n            for (int i = 0; i < 26; i++) \n                if (val & (1 << i)) cnt++;\n            if ((r - l + 1) % 2 == 0) res.push_back(2 * k >= cnt);\n            else res.push_back(2 * k >= cnt - 1);\n        }\n        return res;\n    }\n};",
            "date": 1686758400000
        },
        {
            "script": "python",
            "time": 588,
            "memory": 56.4,
            "desc": "同上。",
            "code": "class Solution:\n    def canMakePaliQueries(self, s: str, queries: List[List[int]]) -> List[bool]:\n        list = [1]\n        for c in s:\n            list.append(list[-1] ^ (1 << (ord(c) - ord('a'))))\n\n        def check(q: List[int]):\n            l, r, k = q[0], q[1], q[2]\n            val = list[r+1] ^ list[l]\n            cnt = 0\n            for i in range(26):\n                if val & (1 << i):\n                    cnt += 1\n            if (r-l+1) % 2:\n                return 2 * k >= cnt - 1\n            else:\n                return 2 * k >= cnt\n\n        return [check(q) for q in queries]",
            "date": 1686758400000
        },
        {
            "script": "rust",
            "time": 28,
            "memory": 9.5,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn can_make_pali_queries(s: String, queries: Vec<Vec<i32>>) -> Vec<bool> {\n        let mut list = vec![0];\n        for c in s.as_bytes() {\n            list.push(list.last().unwrap() ^ (1 << (*c - b'a')));\n        }\n        let check = |q: Vec<i32>| -> bool {\n            let l = q[0] as usize;\n            let r = q[1] as usize;\n            let k = q[2];\n            let val = list[r + 1] ^ list[l];\n            let mut cnt = 0;\n            for i in 0..26 {\n                if (val & (1 << i)) != 0 {\n                    cnt += 1;\n                }\n            }\n            if (r - l + 1) % 2 == 0 {\n                2 * k >= cnt\n            } else {\n                2 * k >= cnt - 1\n            }\n        };\n        queries.into_iter().map(|q| check(q)).collect()\n    }\n}",
            "date": 1686758400000
        }
    ]
}
