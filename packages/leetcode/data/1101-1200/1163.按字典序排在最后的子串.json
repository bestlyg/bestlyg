{
    "id": "1133",
    "name": "1163.按字典序排在最后的子串",
    "url": "https://leetcode.cn/problems/last-substring-in-lexicographical-order",
    "desc": "给你一个字符串 s ，找出它的所有子串并按字典序排列，返回排在最后的那个子串。",
    "solutions": [
        {
            "script": "python",
            "time": 6360,
            "memory": 18,
            "desc": "对所有末尾字符串做比较。",
            "code": "class Solution:\n  def lastSubstring(self, s: str) -> str:\n      return max(s[i:] for i in range(len(s)))",
            "date": "2023-04-24"
        },
        {
            "script": "typescript",
            "time": 2020,
            "memory": 51,
            "desc": "同上。",
            "code": "function lastSubstring(s: string): string {\n    let max = s;\n    for (let i = 1; i < s.length; i++) {\n        const subs = s.substring(i);\n        if (max < subs) max = subs;\n    }\n    return max;\n};",
            "date": "2023-04-24"
        },
        {
            "script": "cpp",
            "time": 44,
            "memory": 25.8,
            "desc": "先找到最末尾的字符，再对该字符为起点到结尾的字符串进行比较。",
            "code": "class Solution {\npublic:\n    string lastSubstring(string s) {\n        int n = s.size(), imax = 0;\n        vector<int> idxs;\n        for (int i = 0; i < n; i++) {\n            if (s[imax] < s[i]) imax = i, idxs.clear();\n            if (s[imax] == s[i]) idxs.push_back(i);\n        }\n        imax = 0;\n        for (int i = 1; i < idxs.size(); i++) {\n            int i1 = idxs[imax] + 1, i2 = idxs[i] + 1;\n            while (i2 < n && s[i1] == s[i2]) i1++, i2++;\n            if (i2 == n) break;\n            if (s[i1] < s[i2]) imax = i;\n        }\n        return s.substr(idxs[imax], n - idxs[imax]);\n    }\n};",
            "date": "2023-04-24"
        },
        {
            "script": "rust",
            "time": 16,
            "memory": 5.9,
            "desc": "同上。",
            "code": "fn str_to_vec(s: &String) -> Vec<char> {\n    s.chars().collect()\n}\nimpl Solution {\n    pub fn last_substring(s: String) -> String {\n        let s = str_to_vec(&s);\n        let n = s.len();\n        let mut imax = 0;\n        let mut idxs = vec![];\n        for i in 0..n {\n            if (s[imax] as u8) < (s[i] as u8) {\n                imax = i;\n                idxs.clear();\n            }\n            if (s[imax] as u8) == (s[i] as u8) {\n                idxs.push(i);\n            }\n        }\n        imax = 0;\n        for i in 1..idxs.len() {\n            let (mut i1, mut i2) = (idxs[imax] + 1, idxs[i] + 1);\n            while i2 < n && s[i1] == s[i2] {\n                i1 += 1;\n                i2 += 1;\n            }\n            if i2 == n {\n                break;\n            }\n            if s[i1] < s[i2] {\n                imax = i;\n            }\n        }\n        String::from_utf8(s[idxs[imax]..].iter().map(|v| *v as u8).collect()).unwrap()\n    }\n}",
            "date": "2023-04-24"
        }
    ],
    "tagList": ["双指针", "字符串"],
    "level": "Hard"
}
