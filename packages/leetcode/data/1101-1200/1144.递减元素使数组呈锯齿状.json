{
    "id": "1247",
    "name": "1144.递减元素使数组呈锯齿状",
    "url": "https://leetcode.cn/problems/decrease-elements-to-make-array-zigzag",
    "difficulty": "中等",
    "tag": ["贪心", "数组"],
    "desc": "返回将数组 nums 转换为锯齿数组所需的最小操作次数。",
    "solutions": [
        {
            "script": "cpp",
            "time": 0,
            "memory": 7,
            "desc": "遍历。",
            "code": "class Solution {\npublic:\n    int movesToMakeZigzag(vector<int>& nums) {\n        if (nums.size() == 1) return 0;\n        return min(try1(nums), try2(nums));\n    }\n    int try1(vector<int> &nums) {\n        int res = 0;\n        for (int i = 1; i < nums.size(); i += 2) {\n            int p = nums[i - 1];\n            if (i + 1 < nums.size()) p = min(p, nums[i + 1]);\n            if (nums[i] >= p) res += nums[i] - p + 1;\n        }\n        return res;\n    }\n    int try2(vector<int> &nums) {\n        int res = 0;\n        if (nums[0] >= nums[1]) res += nums[0] - nums[1] + 1;\n        for (int i = 2; i < nums.size(); i += 2) {\n            int p = nums[i - 1];\n            if (i + 1 < nums.size()) p = min(p, nums[i + 1]);\n            if (nums[i] >= p) res += nums[i] - p + 1;\n        }\n        return res;\n    }\n};",
            "date": 1677427200000
        },
        {
            "script": "python",
            "time": 32,
            "memory": 14.9,
            "desc": "同上。",
            "code": "class Solution:\n    def movesToMakeZigzag(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n == 1:\n            return 0\n  \n        def try1():\n            res = 0\n            for i in range(1, n, 2):\n                p = nums[i-1]\n                if i+1 < n:\n                    p = min(p, nums[i+1])\n                if nums[i] >= p:\n                    res += nums[i] - p + 1\n            return res\n  \n        def try2():\n            res = 0\n            if nums[0] >= nums[1]:\n                res += nums[0] - nums[1] + 1\n            for i in range(2, n, 2):\n                p = nums[i - 1]\n                if i + 1 < n:\n                    p = min(p, nums[i + 1])\n                if nums[i] >= p:\n                    res += nums[i] - p + 1\n            return res\n        return min(try1(), try2())",
            "date": 1677427200000
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 1.9,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn moves_to_make_zigzag(nums: Vec<i32>) -> i32 {\n        let n = nums.len();\n        if n == 1 {\n            0\n        } else {\n            let try1 = || {\n                let mut res = 0;\n                let mut i = 1;\n                while i < n {\n                    let mut p = nums[i - 1];\n                    if i + 1 < n {\n                        p = p.min(nums[i + 1]);\n                    }\n                    if nums[i] >= p {\n                        res += nums[i] - p + 1;\n                    }\n                    i += 2;\n                }\n                res\n            };\n            let try2 = || {\n                let mut res = 0;\n                if nums[0] >= nums[1] {\n                    res += nums[0] - nums[1] + 1;\n                }\n                let mut i = 2;\n                while i < n {\n                    let mut p = nums[i - 1];\n                    if i + 1 < n {\n                        p = p.min(nums[i + 1]);\n                    }\n                    if nums[i] >= p {\n                        res += nums[i] - p + 1;\n                    }\n                    i += 2;\n                }\n                res\n            };\n            try1().min(try2())\n        }\n    }\n}",
            "date": 1677427200000
        }
    ]
}
