{
    "id": "1261",
    "name": "1156.单字符重复子串的最大长度",
    "url": "https://leetcode.cn/problems/swap-for-longest-repeated-character-substring",
    "difficulty": "中等",
    "tag": ["哈希表", "字符串", "滑动窗口"],
    "desc": "给你一个字符串 text，你只能交换其中两个字符一次或者什么都不做，然后得到一些单字符重复的子串。返回其中最长的子串的长度。",
    "solutions": [
        {
            "script": "cpp",
            "time": 4,
            "memory": 7.9,
            "desc": "按字符统计数据。",
            "code": "#define pii pair<int, int>\n#define X first\n#define Y second\nclass Solution {\npublic:\n    int maxRepOpt1(string text) {\n        vector<vector<pii>> m(26);\n        int res = 0, n = text.size();\n        for (int i = 0; i < n; i++) {\n            int start = i;\n            while (i + 1 < n && text[i + 1] == text[start]) i++;\n            m[text[start] - 'a'].push_back(make_pair(start, i));\n            res = max(res, i - start + 1);\n        }\n        for (auto &list : m) {\n            int n = list.size();\n            for (int i = 0; i < n; i++) {\n                if (n != 1) res = max(res, list[i].Y - list[i].X + 2);\n                if (i + 1 < n && list[i].Y + 1 == list[i + 1].X - 1) {\n                    int val = list[i].Y - list[i].X + 1 + list[i + 1].Y - list[i + 1].X + 1;\n                    if (!(i == 0 && i + 2 == n)) val += 1;\n                    res = max(res, val);\n                }\n            }\n        }\n        return res;\n    }\n};",
            "date": 1685721600000
        },
        {
            "script": "python",
            "time": 100,
            "memory": 18.1,
            "desc": "同上。",
            "code": "class Solution:\n    def maxRepOpt1(self, text: str) -> int:\n        m = [[] for _ in range(26)]\n        res = 0\n        n = len(text)\n        i = 0\n        while i < n:\n            start = i\n            while i + 1 < n and text[i + 1] == text[start]:\n                i += 1\n            m[ord(text[start]) - ord('a')].append((start, i))\n            res = max(res, i - start + 1)\n            i += 1\n        for list in m:\n            n = len(list)\n            for i in range(n):\n                if n != 1:\n                    res = max(res, list[i][1] - list[i][0] + 2)\n                if i + 1 < n and list[i][1] + 1 == list[i + 1][0] - 1:\n                    val = list[i][1] - list[i][0] + 1 +                         list[i + 1][1] - list[i + 1][0] + 1\n                    if not (i == 0 and i + 2 == n):\n                        val += 1\n                    res = max(res, val)\n        return res",
            "date": 1685721600000
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 2.3,
            "desc": "同上。",
            "code": "pub fn str_to_vec(s: &String) -> Vec<char> {\n    s.chars().collect()\n}\nimpl Solution {\n    pub fn max_rep_opt1(text: String) -> i32 {\n        let text = str_to_vec(&text);\n        let mut m = vec![vec![]; 26];\n        let mut res = 0;\n        let mut n = text.len();\n        {\n            let mut i = 0;\n            while i < n {\n                let start = i;\n                while i + 1 < n && text[i + 1] == text[start] {\n                    i += 1;\n                }\n                m[text[start] as usize - 'a' as usize].push((start, i));\n                res = res.max(i - start + 1);\n                i += 1;\n            }\n        }\n        for list in m {\n            let n = list.len();\n            for i in 0..n {\n                if n != 1 {\n                    res = res.max(list[i].1 - list[i].0 + 2);\n                }\n                if i + 1 < n && list[i].1 + 1 == list[i + 1].0 - 1 {\n                    let mut val = list[i].1 - list[i].0 + 1 + list[i + 1].1 - list[i + 1].0 + 1;\n                    if !(i == 0 && i + 2 == n) {\n                        val += 1;\n                    }\n                    res = res.max(val);\n                }\n            }\n        }\n        res as i32\n    }\n}",
            "date": 1685721600000
        }
    ]
}
