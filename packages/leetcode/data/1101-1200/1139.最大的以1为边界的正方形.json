{
    "id": "1239",
    "name": "1139.最大的以1为边界的正方形",
    "url": "https://leetcode.cn/problems/largest-1-bordered-square",
    "difficulty": "中等",
    "tag": [
        "数组",
        "动态规划",
        "矩阵"
    ],
    "desc": "给你一个由若干 0 和 1 组成的二维网格 grid，请你找出边界全部由 1 组成的最大 正方形 子网格，并返回该子网格中的元素数量。如果不存在，则返回 0。",
    "solutions": [
        {
            "script": "cpp",
            "time": 12,
            "memory": 10.6,
            "desc": "预处理每个点的最大延长后遍历。",
            "code": "#define MAX 105\nclass Solution {\npublic:\n    int largest1BorderedSquare(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        // 0: l, 1: r, 2 : t, 3: b\n        int cache[MAX][MAX][4] = {0}, cnt;\n        for (int i = 0; i < n; i++) {\n            cnt = 0;\n            for (int j = 0; j < m; j++) {\n                cache[i][j][0] = cnt;\n                cnt = grid[i][j] == 1 ? cnt + 1 : 0;\n            }\n            cnt = 0;\n            for (int j = m - 1; j >= 0; j--) {\n                cache[i][j][1] = cnt;\n                cnt = grid[i][j] == 1 ? cnt + 1 : 0;\n            }\n        }\n        for (int j = 0; j < m; j++) {\n            cnt = 0;\n            for (int i = 0; i < n; i++) {\n                cache[i][j][2] = cnt;\n                cnt = grid[i][j] == 1 ? cnt + 1 : 0;\n            }\n            cnt = 0;\n            for (int i = n - 1; i >= 0; i--) {\n                cache[i][j][3] = cnt;\n                cnt = grid[i][j] == 1 ? cnt + 1 : 0;\n            }\n        }\n\n        cnt = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 0) continue;\n                cnt = max(cnt, 1);\n                for (int k = 1; k <= min(cache[i][j][1], cache[i][j][3]); k++) {\n                    if (cache[i + k][j][1] >= k && cache[i][j + k][3] >= k) cnt = max(cnt, (int)pow(k + 1, 2));\n                }\n            }\n        }\n\n        return cnt;\n    }\n};",
            "date": 1676563200000
        },
        {
            "script": "python3",
            "time": 272,
            "memory": 16.3,
            "desc": "同上。",
            "code": "class Solution:\n    def largest1BorderedSquare(self, grid: List[List[int]]) -> int:\n        n, m, cnt = len(grid), len(grid[0]), 0\n        MAX = 105\n        cache = [[[0] * 4 for _ in range(MAX)] for _ in range(MAX)]\n        for i in range(n):\n            cnt = 0\n            for j in range(m):\n                cache[i][j][0] = cnt\n                cnt = cnt + 1 if grid[i][j] == 1 else 0\n            cnt = 0\n            for j in range(m - 1, -1, -1):\n                cache[i][j][1] = cnt\n                cnt = cnt + 1 if grid[i][j] == 1 else 0\n        for j in range(m):\n            cnt = 0\n            for i in range(n):\n                cache[i][j][2] = cnt\n                cnt = cnt + 1 if grid[i][j] == 1 else 0\n            cnt = 0\n            for i in range(n - 1, -1, -1):\n                cache[i][j][3] = cnt\n                cnt = cnt + 1 if grid[i][j] == 1 else 0\n        cnt = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 0:\n                    continue\n                cnt = max(cnt, 1)\n                for k in range(1, min(cache[i][j][1], cache[i][j][3]) + 1):\n                    if cache[i + k][j][1] >= k and cache[i][j + k][3] >= k:\n                        cnt = max(cnt, pow(k + 1, 2))\n        return cnt",
            "date": 1676563200000
        },
        {
            "script": "rust",
            "time": 4,
            "memory": 2.5,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn largest1_bordered_square(grid: Vec<Vec<i32>>) -> i32 {\n        const MAX: usize = 105;\n        let n = grid.len();\n        let m = grid[0].len();\n        let mut cnt = 0;\n        let mut cache = [[[0; 4]; MAX]; MAX];\n        for i in 0..n {\n            cnt = 0;\n            for j in 0..m {\n                cache[i][j][0] = cnt;\n                cnt = if grid[i][j] == 1 { cnt + 1 } else { 0 };\n            }\n            cnt = 0;\n            for j in (0..m).rev() {\n                cache[i][j][1] = cnt;\n                cnt = if grid[i][j] == 1 { cnt + 1 } else { 0 };\n            }\n        }\n        for j in 0..m {\n            cnt = 0;\n            for i in 0..n {\n                cache[i][j][2] = cnt;\n                cnt = if grid[i][j] == 1 { cnt + 1 } else { 0 };\n            }\n            cnt = 0;\n            for i in (0..n).rev() {\n                cache[i][j][3] = cnt;\n                cnt = if grid[i][j] == 1 { cnt + 1 } else { 0 };\n            }\n        }\n        cnt = 0;\n        for i in 0..n {\n            for j in 0..m {\n                if grid[i][j] == 0 {\n                    continue;\n                }\n                cnt = cnt.max(1);\n                for k in 1..=cache[i][j][1].min(cache[i][j][3]) {\n                    if cache[i + k][j][1] >= k && cache[i][j + k][3] >= k {\n                        cnt = cnt.max((k + 1).pow(2));\n                    }\n                }\n            }\n        }\n        cnt as i32\n    }\n}",
            "date": 1676563200000
        }
    ]
}