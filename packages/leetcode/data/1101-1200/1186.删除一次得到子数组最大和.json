{
    "name": "1186.删除一次得到子数组最大和",
    "url": "https://leetcode.cn/problems/maximum-subarray-sum-with-one-deletion/submissions/",
    "desc": "给你一个整数数组，返回它的某个 非空 子数组（连续元素）在执行一次可选的删除操作后，所能得到的最大元素总和。换句话说，你可以从原数组中选出一个子数组，并可以决定要不要从中删除一个元素（只能删一次哦），（删除后）子数组中至少应当有一个元素，然后该子数组（剩下）的元素总和是所有子数组之中最大的。",
    "solutions": [
        {
            "script": "cpp",
            "time": 32,
            "memory": 22.6,
            "desc": "dp[i]表示以arr[i]为结尾的删0个和1个时的最大值。",
            "code": "#define MIN -0x3f3f3f3f\nclass Solution {\npublic:\n    int maximumSum(vector<int>& arr) {\n        int n = arr.size(), dp0 = MIN, dp1 = MIN, res = MIN;\n        for (int i = 0; i < n; i++) {\n            dp1 = max(dp0, dp1 + arr[i]);\n            dp0 = max(dp0, 0) + arr[i];\n            res = max(res, max(dp0, dp1));\n        }\n        return res;\n    }\n};",
            "date": "2023-06-27"
        },
        {
            "script": "python",
            "time": 104,
            "memory": 24.2,
            "desc": "同上。",
            "code": "class Solution:\n    def maximumSum(self, arr: List[int]) -> int:\n        dp0 = dp1 = res = -inf\n        for num in arr:\n            dp1 = max(dp0, dp1 + num)\n            dp0 = max(dp0, 0) + num\n            res = max(res, max(dp0, dp1))\n        return res",
            "date": "2023-06-27"
        },
        {
            "script": "rust",
            "time": 8,
            "memory": 3,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn maximum_sum(arr: Vec<i32>) -> i32 {\n        use std::cmp::max;\n        let (mut dp0, mut dp1, mut res) = (-0x3f3f3f3f, -0x3f3f3f3f, -0x3f3f3f3f);\n        for num in arr {\n            dp1 = max(dp0, dp1 + num);\n            dp0 = max(dp0, 0) + num;\n            res = max(res, max(dp0, dp1));\n        }\n        res\n    }\n}",
            "date": "2023-06-27"
        },
        {
            "script": "python",
            "time": 110,
            "memory": 40.88,
            "desc": "dp[i][j]表示以i为结尾的数组，当前已经删除了j个元素时的最大和。",
            "code": "class Solution:\n    def maximumSum(self, arr: List[int]) -> int:\n        n = len(arr)\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0] = arr[0]\n        dp[0][1] = 0\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], 0) + arr[i]\n            dp[i][1] = max(dp[i - 1][1] + arr[i], dp[i - 1][0])\n        return max([v for item in dp[1:] for v in item], default = arr[0])",
            "date": "2024-07-21"
        }
    ],
    "tagList": [],
    "level": "Easy"
}