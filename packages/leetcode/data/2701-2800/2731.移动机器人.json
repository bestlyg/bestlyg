{
    "id": "2787",
    "name": "2731.移动机器人",
    "url": "https://leetcode.cn/problems/movement-of-robots",
    "desc": "请你返回指令重复执行 d 秒后，所有机器人之间两两距离之和。",
    "solutions": [
        {
            "script": "cpp",
            "time": 108,
            "memory": 97.32,
            "desc": "贪心，忽略碰撞。",
            "code": "class Solution {\npublic:\n    int sumDistance(vector<int>& nums, string s, int d) {\n        long long n = nums.size(), res = 0, MOD = 1e9 + 7;\n        vector<long long> arr;\n        for (int i = 0; i < n; i++) {\n            arr.push_back(s[i] == 'L' ? nums[i] - d : nums[i] + d);\n        }\n        sort(arr.begin(), arr.end());\n        for (int i = 1; i < n; i++) {\n            long long v = (arr[i] - arr[i - 1]) % MOD * (n - i) * i % MOD;\n            res = (res + v) % MOD;\n        }\n        return res;\n    }\n};",
            "date": "2023-10-10"
        },
        {
            "script": "python",
            "time": 136,
            "memory": 26.55,
            "desc": "同上。",
            "code": "class Solution:\n    def sumDistance(self, nums: List[int], s: str, d: int) -> int:\n        n = len(nums)\n        arr = [nums[i] - d if s[i] == 'L' else nums[i] + d for i in range(n)]\n        arr.sort()\n        return sum((arr[i] - arr[i - 1]) * (n - i) * i for i in range(1, n)) % 1000000007",
            "date": "2023-10-10"
        },
        {
            "script": "rust",
            "time": 24,
            "memory": 4.51,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn sum_distance(nums: Vec<i32>, s: String, d: i32) -> i32 {\n        let s = s.chars().into_iter().collect::<Vec<_>>();\n        let n = nums.len();\n        let mut res = 0;\n        const MOD: i64 = 1000000007;\n        let mut arr = vec![];\n        for i in 0..n {\n            arr.push(if s[i] == 'L' {\n                (nums[i] - d) as i64\n            } else {\n                (nums[i] + d) as i64\n            })\n        }\n        arr.sort();\n        for i in 1..n {\n            let v = (arr[i] - arr[i - 1]) % MOD * ((n as i64) - i as i64) * (i as i64);\n            res = (res + v) % MOD;\n        }\n        res as i32\n    }\n}",
            "date": "2023-10-10"
        }
    ],
    "tagList": [
        "脑筋急转弯",
        "数组",
        "前缀和",
        "排序"
    ],
    "level": "Medium"
}