{
    "name": "2867.统计树中的合法路径数目",
    "url": "https://leetcode.cn/problems/count-valid-paths-in-a-tree/",
    "difficulty": "简单",
    "tag": [],
    "desc": "请你返回树中的 合法路径数目 。",
    "solutions": [
        {
            "script": "python",
            "time": 322,
            "memory": 58.63,
            "desc": "预处理好质数表，通过遍历所有质数，找到以当前质数为根结点的时候，所有子树的长度，进行两两相乘。",
            "code": "def get_primes2(n: int) -> List[bool]:\n        n += 1\n        primes = [True for _ in range(n)]\n        primes[0] = primes[1] = False\n        for i in range(2, n):\n            if primes[i]:\n                j = 2\n                while i * j < n:\n                    primes[i*j] = False\n                    j += 1\n        return primes\n    primes = get_primes2(10 ** 5 + 1)\n    \n    class Solution:\n        def countPaths(self, n: int, edges: List[List[int]]) -> int:\n            nodes = [[] for _ in range(n + 1)]\n            for n1, n2 in edges:\n                nodes[n1].append(n2)\n                nodes[n2].append(n1)\n            ans = 0\n    \n            cache = defaultdict(int)\n            def dfs(arr: List[int], node: int, parent: int):\n                if primes[node]: return\n                arr.append(node)\n                ans = 1\n                for child in nodes[node]:\n                    if not primes[child] and child != parent:\n                        ans += dfs(arr, child, node)\n                return ans\n    \n            for node in range(1, n + 1):\n                if primes[node]:\n                    cur = 0\n                    for child in nodes[node]:\n                        if not primes[child]:\n                            if child not in cache:\n                                arr = []\n                                res = dfs(arr, child, node)\n                                for item in arr: cache[item] = res\n                            ans += cache[child] * cur\n                            cur += cache[child]\n                    ans += cur\n        return ans",
            "date": 1708963200000
        }
    ]
}