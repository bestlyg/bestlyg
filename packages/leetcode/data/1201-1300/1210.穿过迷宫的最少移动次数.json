{
    "id": "1322",
    "name": "1210.穿过迷宫的最少移动次数",
    "url": "https://leetcode.cn/problems/minimum-moves-to-reach-target-with-rotations",
    "difficulty": "困难",
    "tag": [
        "广度优先搜索",
        "数组",
        "矩阵"
    ],
    "desc": "返回蛇抵达目的地所需的最少移动次数。",
    "solutions": [
        {
            "script": "cpp",
            "time": 24,
            "memory": 12.9,
            "desc": "bfs。",
            "code": "struct Node {\n    int x, y, dir;\n    Node(int x, int y, int dir): x(x), y(y), dir(dir) {}\n};\nclass Solution {\npublic:\n    int minimumMoves(vector<vector<int>>& grid) {\n        int n = grid.size();\n        bool cache[n][n][2];\n        memset(cache, false, sizeof(bool) * n * n * 2);\n        cache[0][0][0] = true;\n        queue<Node> q;\n        q.push(Node(0, 0, 0));\n        int step = 0, size = 1;\n        while (q.size()) {\n            Node node = q.front();\n            q.pop();\n            int x = node.x, y = node.y, dir = node.dir;\n            if (x == n - 1 && y == n - 2 && dir == 0) return step;\n            if (dir == 0 && y + 2 < n && grid[x][y + 2] == 0 && !cache[x][y + 1][0]) {\n                q.push(Node(x, y + 1, 0));\n                cache[x][y + 1][0] = true;\n            }\n            if (dir == 0 && x + 1 < n && grid[x + 1][y + 1] == 0 && grid[x + 1][y] == 0 && !cache[x][y][1]) {\n                q.push(Node(x, y, 1));\n                cache[x][y][1] = true;\n            }\n            if (dir == 0 && x + 1 < n && grid[x + 1][y] == 0 && grid[x + 1][y + 1] == 0 && !cache[x + 1][y][0]) {\n                q.push(Node(x + 1, y, 0));\n                cache[x + 1][y][0] = true;\n            }\n\n            if (dir == 1 && x + 2 < n && grid[x + 2][y] == 0 && !cache[x + 1][y][1]) {\n                q.push(Node(x + 1, y, 1));\n                cache[x + 1][y][1] = true;\n            }\n            if (dir == 1 && y + 1 < n && grid[x + 1][y + 1] == 0 && grid[x][y + 1] == 0 && !cache[x][y][0]) {\n                q.push(Node(x, y, 0));\n                cache[x][y][0] = true;\n            }\n            if (dir == 1 && y + 1 < n && grid[x + 1][y + 1] == 0 && grid[x][y + 1] == 0 && !cache[x][y + 1][1]) {\n                q.push(Node(x, y + 1, 1));\n                cache[x][y + 1][1] = true;\n            }\n            if (--size == 0) step += 1, size = q.size();\n        }\n        return -1;\n    }\n};",
            "date": 1675526400000
        },
        {
            "script": "python3",
            "time": 364,
            "memory": 16.4,
            "desc": "同上。",
            "code": "from queue import Queue\nclass Solution:\n    def minimumMoves(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        cache = [[[False for _ in range(2)] for _ in range(n)] for _ in range(n)]\n        cache[0][0][0] = True\n        q = Queue()\n        q.put((0, 0, 0))\n        step, size = 0, 1\n        while q.qsize():\n            (x, y, d) = q.get()\n            if x == n - 1 and y == n - 2 and d == 0:\n                return step\n            if d == 0 and y + 2 < n and grid[x][y + 2] == 0 and not cache[x][y + 1][0]:\n                q.put((x, y + 1, 0))\n                cache[x][y + 1][0] = True\n            if d == 0 and x + 1 < n and grid[x + 1][y + 1] == 0 and grid[x + 1][y] == 0 and not cache[x][y][1]:\n                q.put((x, y, 1))\n                cache[x][y][1] = True\n            if d == 0 and x + 1 < n and grid[x + 1][y] == 0 and grid[x + 1][y + 1] == 0 and not cache[x + 1][y][0]:\n                q.put((x + 1, y, 0))\n                cache[x + 1][y][0] = True\n            if d == 1 and x + 2 < n and grid[x + 2][y] == 0 and not cache[x + 1][y][1]:\n                q.put((x + 1, y, 1))\n                cache[x + 1][y][1] = True\n            if d == 1 and y + 1 < n and grid[x + 1][y + 1] == 0 and grid[x][y + 1] == 0 and not cache[x][y][0]:\n                q.put((x, y, 0))\n                cache[x][y][0] = True\n            if d == 1 and y + 1 < n and grid[x + 1][y + 1] == 0 and grid[x][y + 1] == 0 and not cache[x][y + 1][1]:\n                q.put((x, y + 1, 1))\n                cache[x][y + 1][1] = True\n            size -= 1\n            if size == 0:\n                 step += 1\n                 size = q.qsize()\n        return -1",
            "date": 1675526400000
        },
        {
            "script": "rust",
            "time": 4,
            "memory": 2.7,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn minimum_moves(grid: Vec<Vec<i32>>) -> i32 {\n        use std::collections::VecDeque;\n        let n = grid.len();\n        let mut cache = vec![vec![vec![false; 2]; n]; n];\n        cache[0][0][0] = true;\n        let mut q = VecDeque::<(usize, usize, usize)>::new();\n        q.push_back((0, 0, 0));\n        let (mut step, mut size) = (0, 1);\n        while !q.is_empty() {\n            let (x, y, dir) = q.pop_front().unwrap();\n            if x == n - 1 && y == n - 2 && dir == 0 {\n                return step;\n            }\n            if dir == 0 && y + 2 < n && grid[x][y + 2] == 0 && !cache[x][y + 1][0] {\n                q.push_back((x, y + 1, 0));\n                cache[x][y + 1][0] = true;\n            }\n            if dir == 0\n                && x + 1 < n\n                && grid[x + 1][y + 1] == 0\n                && grid[x + 1][y] == 0\n                && !cache[x][y][1]\n            {\n                q.push_back((x, y, 1));\n                cache[x][y][1] = true;\n            }\n            if dir == 0\n                && x + 1 < n\n                && grid[x + 1][y] == 0\n                && grid[x + 1][y + 1] == 0\n                && !cache[x + 1][y][0]\n            {\n                q.push_back((x + 1, y, 0));\n                cache[x + 1][y][0] = true;\n            }\n            if dir == 1 && x + 2 < n && grid[x + 2][y] == 0 && !cache[x + 1][y][1] {\n                q.push_back((x + 1, y, 1));\n                cache[x + 1][y][1] = true;\n            }\n            if dir == 1\n                && y + 1 < n\n                && grid[x + 1][y + 1] == 0\n                && grid[x][y + 1] == 0\n                && !cache[x][y][0]\n            {\n                q.push_back((x, y, 0));\n                cache[x][y][0] = true;\n            }\n            if dir == 1\n                && y + 1 < n\n                && grid[x + 1][y + 1] == 0\n                && grid[x][y + 1] == 0\n                && !cache[x][y + 1][1]\n            {\n                q.push_back((x, y + 1, 1));\n                cache[x][y + 1][1] = true;\n            }\n            size -= 1;\n            if size == 0 {\n                step += 1;\n                size = q.len();\n            }\n        }\n        -1\n    }\n}",
            "date": 1675526400000
        }
    ]
}