{
  "name": "1224. 最大相等频率",
  "url": "https://leetcode.cn/problems/maximum-equal-frequency/",
  "difficulty": "困难",
  "tag": ["数组", "哈希表"],
  "desc": "给你一个正整数数组 nums，请你帮忙从该数组中找出能满足下面要求的 最长 前缀，并返回该前缀的长度。",
  "solutions": [
    {
      "date": 1660752000000,
      "time": 52,
      "memory": 3.4,
      "script": "rust",
      "desc": "只有三种情况可以成立，1.最大频率只有一，2.所有数只有最大频率和第二大频率且最大频率只有一种数，3.所有数除了一个都是最大频率，剩下的一个数频率是 1。",
      "code": "impl Solution {\n    pub fn max_equal_freq(nums: Vec<i32>) -> i32 {\n        use std::collections::HashMap;\n        let (mut freq_map, mut cnt_map) =\n            (HashMap::<usize, usize>::new(), HashMap::<i32, usize>::new());\n        let mut ans = 0;\n        let mut max_freq = 0;\n        for i in 0..nums.len() {\n            let num = nums[i];\n            let cnt = cnt_map.get(&num).unwrap_or(&0);\n            let prev_freq = freq_map.get_mut(cnt);\n            if prev_freq.is_some() {\n                *prev_freq.unwrap() -= 1;\n            }\n            let cnt = *cnt + 1;\n            cnt_map.insert(num, cnt);\n            freq_map.insert(cnt, freq_map.get(&cnt).unwrap_or(&0) + 1);\n            max_freq = max_freq.max(cnt);\n            if max_freq == 1\n                || freq_map.get(&max_freq).unwrap_or(&0) * max_freq\n                    + freq_map.get(&(max_freq - 1)).unwrap_or(&0) * (max_freq - 1)\n                    == i + 1\n                    && *freq_map.get(&max_freq).unwrap_or(&0) == 1\n                || freq_map.get(&max_freq).unwrap_or(&0) * max_freq == i\n                    && *freq_map.get(&1).unwrap_or(&0) == 1\n            {\n                ans = i + 1;\n            }\n        }\n        ans as i32\n    }\n}"
    }
  ]
}
