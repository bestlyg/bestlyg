{
    "id": "1224",
    "name": "1289.下降路径最小和II",
    "url": "https://leetcode.cn/problems/minimum-falling-path-sum-ii",
    "desc": "给你一个 n x n 整数矩阵 grid ，请你返回 非零偏移下降路径 数字和的最小值。",
    "solutions": [
        {
            "script": "cpp",
            "time": 40,
            "memory": 13.82,
            "desc": "遍历，只记录最小值和第二小值。",
            "code": "class Solution {\npublic:\n    int minFallingPathSum(vector<vector<int>>& grid) {\n        int n = grid.size(), min1, min2, res;\n        auto refresh = [&](int row) {\n            res = INT_MAX;\n            min1 = INT_MAX;\n            min2 = INT_MAX;\n            for (int j = 0; j < n; j++) {\n                res = min(res, grid[row][j]);\n                if (min1 == INT_MAX || grid[row][j] < grid[row][min1]) min2 = min1, min1 = j;\n                else if (min2 == INT_MAX || grid[row][j] < grid[row][min2]) min2 = j;\n            }\n        };\n        for (int row = 1; row < n; row++) {\n            refresh(row - 1);\n            for (int j = 0; j < n; j++) {\n                grid[row][j] += j == min1 ? grid[row - 1][min2] : grid[row - 1][min1];\n            }\n        }\n        refresh(n - 1);\n        return res;\n    }\n};",
            "date": "2023-08-10"
        },
        {
            "script": "python",
            "time": 128,
            "memory": 18.97,
            "desc": "同上。",
            "code": "class Solution:\n    def minFallingPathSum(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        min1 = min2 = res = 0\n\n        def refresh(row: int):\n            nonlocal res\n            nonlocal min1\n            nonlocal min2\n            res = min1 = min2 = inf\n            for j in range(n):\n                res = min(res, grid[row][j])\n                if min1 == inf or grid[row][j] < grid[row][min1]:\n                    min2 = min1\n                    min1 = j\n                elif min2 == inf or grid[row][j] < grid[row][min2]:\n                    min2 = j\n        for row in range(1, n):\n            refresh(row-1)\n            for j in range(n):\n                grid[row][j] += grid[row -\n                                        1][min2] if j == min1 else grid[row - 1][min1]\n        refresh(n-1)\n        return res",
            "date": "2023-08-10"
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 2.53,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn min_falling_path_sum(mut grid: Vec<Vec<i32>>) -> i32 {\n        let n = grid.len();\n        let mut min1 = 0;\n        let mut min2 = 0;\n        for row in 1..n {\n            min1 = usize::MAX;\n            min2 = usize::MAX;\n            for j in 0..n {\n                if min1 == usize::MAX || grid[row - 1][j] < grid[row - 1][min1] {\n                    min2 = min1;\n                    min1 = j;\n                } else if min2 == usize::MAX || grid[row - 1][j] < grid[row - 1][min2] {\n                    min2 = j;\n                }\n            }\n            for j in 0..n {\n                grid[row][j] += if j == min1 {\n                    grid[row - 1][min2]\n                } else {\n                    grid[row - 1][min1]\n                };\n            }\n        }\n        *grid[n - 1].iter().min().unwrap()\n    }\n}",
            "date": "2023-08-10"
        }
    ],
    "tagList": ["数组", "动态规划", "矩阵"],
    "level": "Hard"
}
