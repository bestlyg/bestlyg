{
    "id": "1359",
    "name": "1238.循环码排列",
    "url": "https://leetcode.cn/problems/circular-permutation-in-binary-representation",
    "difficulty": "中等",
    "tag": [
        "位运算",
        "数学",
        "回溯"
    ],
    "desc": "给你两个整数 n 和 start。你的任务是返回任意 (0,1,2,,...,2^n-1) 的排列 p，并且满足：, p[0] = start, p[i] 和 p[i+1] 的二进制表示形式只有一位不同, p[0] 和 p[2^n -1] 的二进制表示形式也只有一位不同。",
    "solutions": [
        {
            "script": "cpp",
            "time": 120,
            "memory": 57,
            "desc": "dfs。",
            "code": "class Solution {\npublic:\n    vector<int> circularPermutation(int n, int start) {\n        vector<int> ans(pow(2, n));\n        ans[0] = start;\n        unordered_set<int> used;\n        used.insert(start);\n        dfs(ans, used, n, start, 1);\n        return ans;\n    }\n    bool dfs(vector<int> &ans, unordered_set<int> &used, int n, int prev, int idx) {\n        if (idx == pow(2, n)) {\n            return compare(n, ans[0], ans[idx - 1]);\n        }\n        for (int i = 0; i < n; i++) {\n            int v = prev & (1 << i), next = prev;\n            if (v) next &= ~(1 << i);\n            else next |= (1 << i); \n            if (used.count(next)) continue;\n            used.insert(next);\n            ans[idx] = next;\n            if (dfs(ans, used, n, next, idx + 1)) return true;\n            used.erase(next);\n        }\n        return false;\n    }\n    bool compare(int n, int num1, int num2) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            int v1 = num1 & (1 << i), v2 = num2 & (1 << i);\n            if (v1 != v2) cnt++;\n        }\n        return cnt == 1;\n    }\n};",
            "date": 1677081600000
        },
        {
            "script": "python3",
            "time": 372,
            "memory": 106.3,
            "desc": "同上。",
            "code": "class Solution:\n        def circularPermutation(self, n: int, start: int) -> List[int]:\n            ans = [0] * pow(2, n)\n            ans[0] = start\n            used = set()\n            used.add(start)\n    \n            def compare(num1: int, num2: int) -> bool:\n                cnt = 0\n                for i in range(n):\n                    v1 = num1 & (1 << i)\n                    v2 = num2 & (1 << i)\n                    if v1 != v2:\n                        cnt += 1\n                return cnt == 1\n    \n            def dfs(prev: int, idx: int) -> bool:\n                if idx == pow(2, n):\n                    return compare(ans[0], ans[-1])\n                for i in range(n):\n                    v = prev & (1 << i)\n                    nextv = prev\n                    if v:\n                        nextv &= ~(1 << i)\n                    else:\n                        nextv |= (1 << i)\n                    if nextv in used:\n                        continue\n                    used.add(nextv)\n                    ans[idx] = nextv\n                    if dfs(nextv, idx+1):\n                        return True\n                    used.remove(nextv)\n                return False\n            dfs(start, 1)\n            return ans",
            "date": 1677081600000
        },
        {
            "script": "rust",
            "time": 44,
            "memory": 12.4,
            "desc": "同上。",
            "code": "use std::collections::HashSet;\nimpl Solution {\n    pub fn circular_permutation(n: i32, start: i32) -> Vec<i32> {\n        let n = n as u32;\n        let mut ans = vec![0; 2usize.pow(n)];\n        ans[0] = start;\n        let mut used = HashSet::<i32>::new();\n        used.insert(start);\n        Solution::dfs(&mut ans, &mut used, n, start, 1);\n        ans\n    }\n    fn dfs(ans: &mut Vec<i32>, used: &mut HashSet<i32>, n: u32, prev: i32, idx: usize) -> bool {\n        if idx == 2usize.pow(n) {\n            Solution::compare(n, *ans.first().unwrap(), *ans.last().unwrap())\n        } else {\n            for i in 0..n {\n                let v = prev & (1 << i);\n                let mut next = prev;\n                if v != 0 {\n                    next &= !(1 << i);\n                } else {\n                    next |= 1 << i;\n                }\n                if used.contains(&next) {\n                    continue;\n                }\n                used.insert(next);\n                ans[idx] = next;\n                if Solution::dfs(ans, used, n, next, idx + 1) {\n                    return true;\n                }\n                used.remove(&next);\n            }\n            false\n        }\n    }\n    fn compare(n: u32, num1: i32, num2: i32) -> bool {\n        let mut cnt = 0;\n        for i in 0..n {\n            let v1 = num1 & (1 << i);\n            let v2 = num2 & (1 << i);\n            if v1 != v2 {\n                cnt += 1;\n            }\n        }\n        cnt == 1\n    }\n}",
            "date": 1677081600000
        }
    ]
}