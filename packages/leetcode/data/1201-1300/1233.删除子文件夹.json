{
    "id": "1350",
    "name": "1233.删除子文件夹",
    "url": "https://leetcode.cn/problems/remove-sub-folders-from-the-filesystem",
    "difficulty": "中等",
    "tag": ["深度优先搜索", "字典树", "数组", "字符串"],
    "desc": "你是一位系统管理员，手里有一份文件夹列表 folder，你的任务是要删除该列表中的所有 子文件夹，并以 任意顺序 返回剩下的文件夹。",
    "solutions": [
        {
            "script": "cpp",
            "time": 208,
            "memory": 51.4,
            "desc": "trie。",
            "code": "struct Node {\n    bool end;\n    unordered_map<string, Node*> children;\n    Node(): end(false) {}\n};\nclass Solution {\npublic:\n    vector<string> removeSubfolders(vector<string>& folder) {\n        sort(folder.begin(), folder.end());\n        Node *root = new Node();\n        vector<string> ans;\n        for (auto &path : folder) {\n            Node *next = root;\n            istringstream iss(path);\n            string tmp;\n            getline(iss, tmp, '/');\n            while (getline(iss, tmp, '/')) {\n                if (!next->children.count(tmp)) next = next->children[tmp] = new Node();\n                else next = next->children[tmp];\n                if (next->end) break;\n            }\n            if (!next->end) ans.push_back(path);\n            next->end = true;\n        }\n        return ans;\n    }\n};",
            "date": 1675785600000
        },
        {
            "script": "python",
            "time": 140,
            "memory": 25.4,
            "desc": "同上。",
            "code": "class Node:\n    def __init__(self) -> None:\n        self.end = False\n        self.children = defaultdict(Node)\n\nclass Solution:\n    def removeSubfolders(self, folder: List[str]) -> List[str]:\n        folder.sort()\n        root = Node()\n        ans = []\n        for path in folder:\n            nextNode = root\n            l = path.split('/')\n            for i in range(1, len(l)):\n                nextNode = nextNode.children[l[i]]\n                if nextNode.end:\n                    break\n            if not nextNode.end:\n                ans.append(path)\n            nextNode.end = True\n        return ans",
            "date": 1675785600000
        },
        {
            "script": "rust",
            "time": 56,
            "memory": 6.8,
            "desc": "同上。",
            "code": "use std::collections::HashMap;\n#[derive(Clone)]\nstruct Node {\n    end: bool,\n    children: HashMap<String, Node>,\n}\nimpl Node {\n    fn new() -> Self {\n        Self {\n            end: false,\n            children: HashMap::new(),\n        }\n    }\n}\n\nimpl Solution {\n    pub fn remove_subfolders(folder: Vec<String>) -> Vec<String> {\n        let mut folder = folder;\n        folder.sort();\n        let mut root = Node::new();\n        let mut ans = vec![];\n        for path in folder {\n            let mut next = &mut root;\n            let l: Vec<&str> = path.split(\"/\").collect();\n            for i in 1..l.len() {\n                if !next.children.contains_key(l[i]) {\n                    next.children.insert(l[i].to_string(), Node::new());\n                }\n                next = next.children.get_mut(l[i]).unwrap();\n                if next.end {\n                    break;\n                }\n            }\n            if !next.end {\n                ans.push(path);\n            }\n            next.end = true;\n        }\n        ans\n    }\n}",
            "date": 1675785600000
        }
    ]
}
