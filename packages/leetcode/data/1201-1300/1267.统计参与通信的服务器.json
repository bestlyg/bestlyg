{
    "id": "1396",
    "name": "1267.统计参与通信的服务器",
    "url": "https://leetcode.cn/problems/count-servers-that-communicate",
    "difficulty": "中等",
    "tag": ["深度优先搜索", "广度优先搜索", "并查集", "数组", "计数", "矩阵"],
    "desc": "请你统计并返回能够与至少一台其他服务器进行通信的服务器的数量。",
    "solutions": [
        {
            "script": "cpp",
            "time": 40,
            "memory": 21.36,
            "desc": "两次遍历。",
            "code": "class Solution {\npublic:\n    int countServers(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size(), mmap[250][250] = {0};\n        pair<int, int> prev = make_pair(-1, -1);\n        for (int i = 0; i < n; i++) {\n            prev = make_pair(-1, -1);\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    if (prev.first == -1) prev = make_pair(i, j);\n                    else {\n                        mmap[prev.first][prev.second] = true;\n                        mmap[i][j] = true;\n                    }\n                }\n            }\n        }\n        for (int j = 0; j < m; j++) {\n            prev = make_pair(-1, -1);\n            for (int i = 0; i < n; i++) {\n                if (grid[i][j] == 1) {\n                    if (prev.first == -1) prev = make_pair(i, j);\n                    else {\n                        mmap[prev.first][prev.second] = true;\n                        mmap[i][j] = true;\n                    }\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < m; j++)\n                if (mmap[i][j]) res += 1;\n        return res;\n    }\n};",
            "date": 1692806400000
        },
        {
            "script": "python",
            "time": 100,
            "memory": 17.79,
            "desc": "同上。",
            "code": "class Solution:\n    def countServers(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        m = len(grid[0])\n        mmap = [[0 for _ in range(m)] for _ in range(n)]\n        prev = (-1, -1)\n        for i in range(n):\n            prev = (-1, -1)\n            for j in range(m):\n                if grid[i][j] == 1:\n                    if prev[0] == -1:\n                        prev = (i, j)\n                    else:\n                        mmap[prev[0]][prev[1]] = True\n                        mmap[i][j] = True\n        for j in range(m):\n            prev = (-1, -1)\n            for i in range(n):\n                if grid[i][j] == 1:\n                    if prev[0] == -1:\n                        prev = (i, j)\n                    else:\n                        mmap[prev[0]][prev[1]] = True\n                        mmap[i][j] = True\n        res = 0\n        for i in range(n):\n            for j in range(m):\n                if mmap[i][j]:\n                    res += 1\n        return res",
            "date": 1692806400000
        },
        {
            "script": "rust",
            "time": 8,
            "memory": 2.26,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn count_servers(grid: Vec<Vec<i32>>) -> i32 {\n        let n = grid.len();\n        let m = grid[0].len();\n        let mut mmap = vec![vec![false; m]; n];\n        let mut prev = (usize::MAX, usize::MAX);\n        for i in 0..n {\n            prev = (usize::MAX, usize::MAX);\n            for j in 0..m {\n                if grid[i][j] == 1 {\n                    if prev.0 == usize::MAX {\n                        prev = (i, j);\n                    } else {\n                        mmap[prev.0][prev.1] = true;\n                        mmap[i][j] = true;\n                    }\n                }\n            }\n        }\n        for j in 0..m {\n            prev = (usize::MAX, usize::MAX);\n            for i in 0..n {\n                if grid[i][j] == 1 {\n                    if prev.0 == usize::MAX {\n                        prev = (i, j);\n                    } else {\n                        mmap[prev.0][prev.1] = true;\n                        mmap[i][j] = true;\n                    }\n                }\n            }\n        }\n        let mut res = 0;\n        for i in 0..n {\n            for j in 0..m {\n                if mmap[i][j] {\n                    res += 1;\n                }\n            }\n        }\n        res\n    }\n}",
            "date": 1692806400000
        }
    ]
}
