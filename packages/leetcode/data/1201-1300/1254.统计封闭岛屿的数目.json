{
    "id": "1380",
    "name": "1254.统计封闭岛屿的数目",
    "url": "https://leetcode.cn/problems/number-of-closed-islands",
    "desc": "二维矩阵 grid 由 0 （土地）和 1 （水）组成。岛是由最大的4个方向连通的 0 组成的群，封闭岛是一个 完全 由1包围（左、上、右、下）的岛。请返回 封闭岛屿 的数目。",
    "solutions": [
        {
            "script": "cpp",
            "time": 20,
            "memory": 13,
            "desc": "bfs。",
            "code": "#define X first\n#define Y second\n#define pii pair<int, int>\nvector<vector<int>> dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n\nclass Solution {\npublic:\n    int closedIsland(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size(), res = 0;\n        bool used[100][100] = {0};\n        auto check = [&](int i, int j) {\n            bool res = true;\n            queue<pii> q;\n            q.push(make_pair(i, j));\n            used[i][j] = true;\n            while (q.size()) {\n                auto cur = q.front();\n                q.pop();\n                for (auto &dir : dirs) {\n                    int ni = cur.X + dir[0], nj = cur.Y + dir[1];\n                    if (ni < 0 || ni >= n || nj < 0 || nj >= m || grid[ni][nj] == 1 || used[ni][nj]) continue;\n                    if (ni == 0 || ni == n - 1 || nj == 0 || nj == m - 1) res = false;\n                    q.push(make_pair(ni, nj));\n                    used[ni][nj] = true;\n                }\n            }\n            return res;\n        };\n        for (int i = 1; i < n - 1; i++) {\n            for (int j = 1; j < m - 1; j++) {\n                if (grid[i][j] == 0 && !used[i][j] && check(i, j)) res += 1;\n            }\n        }\n        return res;\n    }\n};",
            "date": "2023-06-18"
        }
    ],
    "tagList": ["深度优先搜索", "广度优先搜索", "并查集", "数组", "矩阵"],
    "level": "Medium"
}
