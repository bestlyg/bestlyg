{
    "id": "1379",
    "name": "1253.重构2行二进制矩阵",
    "url": "https://leetcode.cn/problems/reconstruct-a-2-row-binary-matrix",
    "difficulty": "中等",
    "tag": [
        "贪心",
        "数组",
        "矩阵"
    ],
    "desc": "给你一个 2 行 n 列的二进制数组。你需要利用 upper，lower 和 colsum 来重构这个矩阵，并以二维整数数组的形式返回它。",
    "solutions": [
        {
            "script": "cpp",
            "time": 56,
            "memory": 60.9,
            "desc": "贪心，先填充2的列，再依次填充1的列。",
            "code": "class Solution {\npublic:\n    vector<vector<int>> reconstructMatrix(int upper, int lower, vector<int>& colsum) {\n        int n = colsum.size();\n        vector<int> list1(n, 0), list2(n, 0);\n        for (int i = 0; i < n; i++) {\n            if (colsum[i] == 2) {\n                list1[i] = list2[i] = 1;\n                if (upper <= 0 || lower <= 0) return {};\n                upper -= 1;\n                lower -= 1;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (colsum[i] == 1) {\n                if (upper > 0) {\n                    list1[i] = 1;\n                    upper--;\n                } else if (lower > 0) {\n                    list2[i] = 1;\n                    lower--;\n                } else {\n                    return {};\n                }\n            }\n        }\n        if (upper > 0 || lower > 0) return {};\n        return { list1, list2 };\n    }\n};",
            "date": 1687968000000
        },
        {
            "script": "python",
            "time": 132,
            "memory": 22.5,
            "desc": "同上。",
            "code": "class Solution:\n    def reconstructMatrix(self, upper: int, lower: int, colsum: List[int]) -> List[List[int]]:\n        n = len(colsum)\n        list1 = [0 for _ in range(n)]\n        list2 = [0 for _ in range(n)]\n        for i in range(n):\n            if colsum[i] == 2:\n                list1[i] = list2[i] = 1\n                if upper <= 0 or lower <= 0:\n                    return []\n                upper -= 1\n                lower -= 1\n        for i in range(n):\n            if colsum[i] == 1:\n                if upper > 0:\n                    list1[i] = 1\n                    upper -= 1\n                elif lower > 0:\n                    list2[i] = 1\n                    lower -= 1\n                else:\n                    return []\n        return [list1, list2] if upper == 0 and lower == 0 else []",
            "date": 1687968000000
        },
        {
            "script": "rust",
            "time": 28,
            "memory": 3.6,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn reconstruct_matrix(mut upper: i32, mut lower: i32, colsum: Vec<i32>) -> Vec<Vec<i32>> {\n        let n = colsum.len();\n        let mut list1 = vec![0; n];\n        let mut list2 = vec![0; n];\n        for i in 0..n {\n            if colsum[i] == 2 {\n                list1[i] = 1;\n                list2[i] = 1;\n                if upper <= 0 || lower <= 0 {\n                    return vec![];\n                }\n                upper -= 1;\n                lower -= 1;\n            }\n        }\n        for i in 0..n {\n            if colsum[i] == 1 {\n                if upper > 0 {\n                    list1[i] = 1;\n                    upper -= 1;\n                } else if lower > 0 {\n                    list2[i] = 1;\n                    lower -= 1;\n                } else {\n                    return vec![];\n                }\n            }\n        }\n        if upper > 0 || lower > 0 {\n            vec![]\n        } else {\n            vec![list1, list2]\n        }\n    }\n}",
            "date": 1687968000000
        }
    ]
}