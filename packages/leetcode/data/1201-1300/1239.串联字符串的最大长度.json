{
    "name": "1239.串联字符串的最大长度",
    "url": "https://leetcode-cn.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters/",
    "difficulty": "中等",
    "tag": [
        "位运算",
        "回溯算法"
    ],
    "desc": "给定一个字符串数组 arr，字符串 s 是将 arr 某一子序列字符串连接所得的字符串，如果 s 中的每一个字符都只出现过一次，那么它就是一个可行解。请返回所有可行解 s 中最长长度。",
    "solutions": [
        {
            "date": 1624032000000,
            "time": 188,
            "memory": 43.8,
            "script": "typescript",
            "desc": "利用二进制储存，进行比较。",
            "code": "function maxLength(arr: string[]): number {\n  const masks = arr\n    .map(s => {\n      if (s === '') return -1;\n      let mask = 0;\n      for (const c of s) {\n        const num = c.codePointAt(0)!;\n        if ((mask >> num) & 1) return -1;\n        mask |= 1 << num;\n      }\n      return mask;\n    })\n    .filter(num => num !== -1);\n  let ans = 0;\n  const masksLen = masks.length;\n  const dfs = (index = 0, num = 0) => {\n    if (index === masksLen) {\n      ans = Math.max(ans, num.toString(2).split('0').join('').length);\n      return;\n    }\n    if ((num & masks[index]) === 0) dfs(index + 1, num | masks[index]);\n    dfs(index + 1, num);\n  };\n  dfs();\n  return ans;\n}"
        }
    ]
}