{
    "name": "1268. 搜索推荐系统",
    "url": "https://leetcode-cn.com/problems/search-suggestions-system/",
    "difficulty": "中等",
    "tag": [
        "字典树",
        "数组",
        "字符串"
    ],
    "desc": "请你以二维列表的形式，返回在输入 searchWord 每个字母后相应的推荐产品的列表。",
    "solutions": [
        {
            "date": 1635091200000,
            "time": 820,
            "memory": 66.6,
            "script": "typescript",
            "desc": "trie 中序遍历。",
            "code": "const MAX_COUNT = 26;\nconst getIdx = (ch: string) => ch.codePointAt(0)! - 'a'.codePointAt(0)!;\nclass TrieNode {\n  end = false;\n  children: TrieNode[] = new Array(MAX_COUNT);\n  constructor(public val: string) {}\n}\nclass Trie {\n  root = new TrieNode('');\n  insert(word: string): void {\n    let node = this.root;\n    for (const ch of word) {\n      const idx = getIdx(ch);\n      if (!node.children[idx]) node.children[idx] = new TrieNode(ch);\n      node = node.children[idx];\n    }\n    node.end = true;\n  }\n  findNode(word: string): TrieNode | null {\n    let node = this.root;\n    for (const ch of word) {\n      const idx = getIdx(ch);\n      if (!node.children[idx]) return null;\n      node = node.children[idx];\n    }\n    return node;\n  }\n  search(word: string): boolean {\n    return !!this.findNode(word)?.end;\n  }\n  startsWith(prefix: string): boolean {\n    return !!this.findNode(prefix);\n  }\n}\nfunction suggestedProducts(products: string[], searchWord: string): string[][] {\n  const trie = new Trie();\n  products.forEach(ch => trie.insert(ch));\n  let str = '';\n  const ans: string[][] = [];\n  for (const ch of searchWord) {\n    const node = trie.findNode(str + ch);\n    const list = dfs(node)\n      .slice(0, 3)\n      .map(v => str + v);\n    ans.push(list);\n    str += ch;\n  }\n  return ans;\n  function dfs(node: TrieNode | null): string[] {\n    const ans: string[] = [];\n    _dfs(node);\n    return ans;\n    function _dfs(node: TrieNode | null, str = ''): void {\n      if (!node) return;\n      str += node.val;\n      if (node.end) ans.push(str);\n      for (let i = 0; i < 26; i++) _dfs(node.children[i], str);\n    }\n  }\n}"
        }
    ]
}