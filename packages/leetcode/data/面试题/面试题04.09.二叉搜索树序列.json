{
    "id": "1000010",
    "name": "面试题04.09.二叉搜索树序列",
    "url": "https://leetcode.cn/problems/bst-sequences-lcci",
    "difficulty": "困难",
    "tag": ["树", "二叉搜索树", "回溯", "二叉树"],
    "desc": "从左向右遍历一个数组，通过不断将其中的元素插入树中可以逐步地生成一棵二叉搜索树。给定一个由不同节点组成的二叉搜索树，输出所有可能生成此树的数组。",
    "solutions": [
        {
            "date": 1628265600000,
            "time": 120,
            "memory": 46.1,
            "script": "typescript",
            "desc": "递归生成左右子树，保证左右子树顺序不变。",
            "code": "function BSTSequences(root: TreeNode | null): number[][] {\n  if (root === null) return [[]];\n  if (root.left === null && root.right === null) return [[root.val]];\n  if (root.left !== null && root.right === null) {\n    const sub = BSTSequences(root.left);\n    return sub.map(v => [root.val, ...v]);\n  }\n  if (root.right !== null && root.left === null) {\n    const sub = BSTSequences(root.right);\n    return sub.map(v => [root.val, ...v]);\n  }\n  const subl = BSTSequences(root.left);\n  const subr = BSTSequences(root.right);\n  const ans: number[][] = [];\n  for (const l of subl) {\n    for (const r of subr) {\n      merge(l, 0, r, 0, [], root.val);\n    }\n  }\n  return ans;\n  function merge(\n    l: number[],\n    idxl: number,\n    r: number[],\n    idxr: number,\n    list: number[],\n    root: number\n  ): void {\n    if (l.length === idxl) {\n      for (let i = idxr; i < r.length; i++) list.push(r[i]);\n      list.unshift(root);\n      ans.push(list);\n      return;\n    }\n    if (r.length === idxr) {\n      for (let i = idxl; i < l.length; i++) list.push(l[i]);\n      list.unshift(root);\n      ans.push(list);\n      return;\n    }\n    merge(l, idxl + 1, r, idxr, [...list, l[idxl]], root);\n    merge(l, idxl, r, idxr + 1, [...list, r[idxr]], root);\n  }\n}"
        }
    ]
}
