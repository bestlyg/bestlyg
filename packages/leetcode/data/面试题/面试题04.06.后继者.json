{
    "name": "面试题 04.06. 后继者",
    "url": "https://leetcode-cn.com/problems/successor-lcci/",
    "difficulty": "中等",
    "tag": [
        "树",
        "深度优先搜索",
        "二叉搜索树",
        "二叉树"
    ],
    "desc": "返回能够访问所有节点的最短路径的长度。",
    "solutions": [
        {
            "date": 1628179200000,
            "time": 96,
            "memory": 47.5,
            "script": "javascript",
            "desc": "找右侧最左，或者父节点的左子节点是目标节点的父节点。",
            "code": "var inorderSuccessor = function (root, p) {\n  if (root === null) return null;\n  const parentList = [];\n  return successor(find(root, p));\n  function find(node, target) {\n    if (node === target) return node;\n    parentList.push(node);\n    let ans;\n    if (node.val < target.val) {\n      ans = find(node.right, target, node);\n    } else {\n      ans = find(node.left, target, node);\n    }\n    if (ans) {\n      return ans;\n    } else {\n      parentList.pop();\n      return null;\n    }\n  }\n  function successor(node) {\n    if (node.right === null) {\n      console.log(parentList);\n      if (parentList.length === 0) return null;\n      let cur = node;\n      for (let i = parentList.length - 1; i >= 0; i--) {\n        const parent = parentList[i];\n        if (parent.left === cur) {\n          return parent;\n        } else {\n          cur = parent;\n        }\n      }\n      return null;\n    }\n    let ans = node.right;\n    while (ans.left) ans = ans.left;\n    return ans;\n  }\n};"
        },
        {
            "date": 1628265600000,
            "time": 96,
            "memory": 47.5,
            "script": "javascript",
            "desc": "中序遍历。",
            "code": "var inorderSuccessor = function (root, p) {\n  let pre;\n  return inorder(root, p);\n  function inorder(node, p) {\n    if (node === null) return null;\n    let ans;\n    ans = inorder(node.left, p);\n    if (ans) return ans;\n    if (pre === p) return node;\n    pre = node;\n    ans = inorder(node.right, p);\n    if (ans) return ans;\n    return null;\n  }\n};"
        },
        {
            "date": 1652630400000,
            "time": 32,
            "memory": 22.4,
            "script": "cpp",
            "desc": "递归。",
            "code": "class Solution {\n   public:\n    TreeNode* inorderSuccessor(TreeNode* root, TreeNode* p) {\n        if (root == p) {\n            if (p->right == nullptr) return nullptr;\n            TreeNode* next = p->right;\n            while (next->left) next = next->left;\n            return next;\n        }\n        TreeNode* nextRoot = root->val > p->val ? root->left : root->right;\n        TreeNode* next = inorderSuccessor(nextRoot, p);\n        if (next == nullptr && nextRoot == root->left) next = root;\n        return next;\n    }\n};"
        }
    ]
}