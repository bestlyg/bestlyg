{
    "id": "100260",
    "name": "面试题16.03.交点",
    "url": "https://leetcode.cn/problems/intersection-lcci",
    "difficulty": "困难",
    "tag": ["几何", "数学"],
    "desc": "给定两条线段（表示为起点 start = {X1, Y1}和终点 end = {X2, Y2}），如果它们有交点，请计算其交点，没有交点则返回空值。",
    "solutions": [
        {
            "date": 1586620800000,
            "time": 72,
            "memory": 33.7,
            "script": "javascript",
            "desc": "先判断两条线是否有交点，在判断线段是否有交点，难点在判断各种极端情况。",
            "code": "/**\n * @param {number[]} start1\n * @param {number[]} end1\n * @param {number[]} start2\n * @param {number[]} end2\n * @return {number[]}\n */\nvar intersection = function (start1, end1, start2, end2) {\n  function include(num, num1, num2) {\n    if (num1 > num2) [num1, num2] = [num2, num1];\n    return num >= num1 && num <= num2;\n  }\n  if (start1[0] > end1[0]) [start1, end1] = [end1, start1];\n  if (start2[0] > end2[0]) [start2, end2] = [end2, start2];\n  // console.log(start1, end1, start2, end2);\n  let intersectionX, intersectionY;\n  const k1 = (end1[1] - start1[1]) / (end1[0] - start1[0]);\n  const k2 = (end2[1] - start2[1]) / (end2[0] - start2[0]);\n  const b1 = start1[1] - k1 * start1[0];\n  const b2 = start2[1] - k2 * start2[0];\n  if (!Number.isFinite(k1) && !Number.isFinite(k2)) {\n    if (start1[0] !== start2[0]) return [];\n    else if (include(start1[1], start2[1], end2[1])) return start1;\n    else if (include(end1[1], start2[1], end2[1])) return end1;\n    else return [];\n  } else if (!Number.isFinite(k1) && Number.isFinite(k2)) {\n    intersectionX = start1[0];\n    intersectionY = k2 * start1[0] + b2;\n  } else if (Number.isFinite(k1) && !Number.isFinite(k2)) {\n    intersectionX = start2[0];\n    intersectionY = k1 * start2[0] + b1;\n  } else {\n    if (k1 === k2) {\n      if (b1 === b2) {\n        if (include(start2[0], start1[0], end1[0])) return start2;\n        if (include(start1[0], start2[0], end2[0])) return start1;\n        else return [];\n      } else if (b1 !== b2) return [];\n    }\n    intersectionX = (b1 - b2) / (k2 - k1);\n    intersectionY = k1 * intersectionX + b1;\n  }\n  // console.log(`line1:y=${k1}x${b1 < 0 ? \"\" : \"+\"}${b1}`);\n  // console.log(`line2:y=${k2}x${b2 < 0 ? \"\" : \"+\"}${b2}`);\n  // console.log(`intersection:(${intersectionX},${intersectionY})`);\n  if (\n    include(intersectionX, start1[0], end1[0]) &&\n    include(intersectionX, start2[0], end2[0]) &&\n    include(intersectionY, start1[1], end1[1]) &&\n    include(intersectionY, start2[1], end2[1])\n  )\n    return [intersectionX, intersectionY];\n  else return [];\n};"
        }
    ]
}
