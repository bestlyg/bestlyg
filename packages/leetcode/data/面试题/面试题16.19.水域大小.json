{
    "id": "1000005",
    "name": "面试题16.19.水域大小",
    "url": "https://leetcode.cn/problems/pond-sizes-lcci",
    "difficulty": "中等",
    "tag": ["深度优先搜索", "广度优先搜索", "并查集", "数组", "矩阵"],
    "desc": "你有一个用于表示一片土地的整数矩阵land，该矩阵中每个点的值代表对应地点的海拔高度。若值为0则表示水域。由垂直、水平或对角连接的水域为池塘。池塘的大小是指相连接的水域的个数。编写一个方法来计算矩阵中所有池塘的大小，返回值需要从小到大排序。",
    "solutions": [
        {
            "script": "cpp",
            "time": 8,
            "memory": 11.4,
            "desc": "bfs。",
            "code": "#define X first\n#define Y second\n#define pii pair<int, int>\n\nvector<vector<int>> dirs2 = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};\n\nclass Solution {\npublic:\n    vector<int> pondSizes(vector<vector<int>>& land) {\n        int n = land.size(), m = land[0].size(), used[n][m];\n        memset(used, 0, sizeof(used));\n        vector<int> res;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (!used[i][j] && land[i][j] == 0) {\n                    used[i][j] = 1;\n                    queue<pii> q;\n                    q.push(make_pair(i, j));\n                    int cnt = 1;\n                    while (q.size()) {\n                        auto cur = q.front();\n                        q.pop();\n                        for (auto &dir : dirs2) {\n                            int ni = cur.X + dir[0], nj = cur.Y + dir[1];\n                            if (0 <= ni && ni < n && 0 <= nj && nj < m && land[ni][nj] == 0 && !used[ni][nj]) {\n                                cnt += 1;\n                                used[ni][nj] = 1;\n                                q.push(make_pair(ni, nj));\n                            }\n                        }\n                    }\n                    res.push_back(cnt);\n                }\n            }\n        }\n        sort(res.begin(), res.end());\n        return res;\n    }\n};",
            "date": 1687363200000
        },
        {
            "script": "python",
            "time": 204,
            "memory": 27.5,
            "desc": "同上。",
            "code": "dirs2 = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n\n    class Solution:\n        def pondSizes(self, land: List[List[int]]) -> List[int]:\n            n = len(land)\n            m = len(land[0])\n            used = [[False for _ in range(m)] for _ in range(n)]\n            res = []\n            for i in range(n):\n                for j in range(m):\n                    if not used[i][j] and land[i][j] == 0:\n                        used[i][j] = True\n                        q = deque()\n                        q.append((i, j))\n                        cnt = 1\n                        while len(q):\n                            cur = q.popleft()\n                            for dir in dirs2:\n                                ni = cur[0] + dir[0]\n                                nj = cur[1] + dir[1]\n                                if 0 <= ni < n and 0 <= nj < m and land[ni][nj] == 0 and not used[ni][nj]:\n                                    cnt += 1\n                                    used[ni][nj] = True\n                                    q.append((ni, nj))\n                        res.append(cnt)\n            res.sort()\n            return res",
            "date": 1687363200000
        },
        {
            "script": "rust",
            "time": 16,
            "memory": 4,
            "desc": "同上。",
            "code": "pub const dirs2: [[i32; 2]; 8] = [[0, 1], [0, -1], [1, 0], [-1, 0], [1, 1], [1, -1], [-1, 1], [-1, -1]];\n\nimpl Solution {\n    pub fn pond_sizes(land: Vec<Vec<i32>>) -> Vec<i32> {\n        let n = land.len();\n        let m = land[0].len();\n        let mut used = vec![vec![false; m]; n];\n        let mut res = vec![];\n        for i in 0..n {\n            for j in 0..m {\n                if !used[i][j] && land[i][j] == 0 {\n                    used[i][j] = true;\n                    let mut q = std::collections::VecDeque::<(usize, usize)>::new();\n                    q.push_back((i, j));\n                    let mut cnt = 1;\n                    while !q.is_empty() {\n                        let (i, j) = q.pop_front().unwrap();\n                        for dir in dirs2 {\n                            let ni = i as i32 + dir[0];\n                            let nj = j as i32 + dir[1];\n                            if 0 <= ni\n                                && ni < n as i32\n                                && 0 <= nj\n                                && nj < m as i32\n                                && land[ni as usize][nj as usize] == 0\n                                && !used[ni as usize][nj as usize]\n                            {\n                                let ni = ni as usize;\n                                let nj = nj as usize;\n                                cnt += 1;\n                                used[ni][nj] = true;\n                                q.push_back((ni, nj));\n                            }\n                        }\n                    }\n                    res.push(cnt);\n                }\n            }\n        }\n        res.sort();\n        res\n    }\n}",
            "date": 1687363200000
        }
    ]
}
