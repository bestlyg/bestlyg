{
    "name": "面试题 17.14. 最小 K 个数",
    "url": "https://leetcode-cn.com/problems/smallest-k-lcci/",
    "difficulty": "中等",
    "tag": [
        "堆",
        "分治算法",
        "排序"
    ],
    "desc": "设计一个算法，找出数组中最小的 k 个数。以任意顺序返回这 k 个数均可。",
    "solutions": [
        {
            "date": 1620316800000,
            "time": 164,
            "memory": 45.1,
            "script": "typescript",
            "desc": "利用内部排序。",
            "code": "function smallestK(arr: number[], k: number): number[] {\n  return arr.sort((a, b) => a - b).slice(0, k);\n}"
        },
        {
            "date": 1630598400000,
            "time": 8000,
            "memory": 48.4,
            "script": "typescript",
            "desc": "堆。",
            "code": "class Heap<T = number> {\n  private arr: T[] = [];\n  get isEmpty() {\n    return this.size === 0;\n  }\n  get size() {\n    return this.arr.length;\n  }\n  get top() {\n    return this.arr[0];\n  }\n  constructor(private compare: (t1: T, t2: T) => number) {}\n  add(num: T): void {\n    this.arr.push(num);\n    this.shiftUp(this.size - 1);\n  }\n  remove(): T {\n    const num = this.arr.shift()!;\n    if (this.size) {\n      this.arr.unshift(this.arr.pop()!);\n      this.shiftDown(0);\n    }\n    return num;\n  }\n  private shiftUp(index: number): void {\n    if (index === 0) return;\n    const parentIndex = (index - 1) >> 1;\n    if (this.compare(this.arr[index], this.arr[parentIndex]) > 0) {\n      [this.arr[index], this.arr[parentIndex]] = [this.arr[parentIndex], this.arr[index]];\n      this.shiftUp(parentIndex);\n    }\n  }\n  private shiftDown(index: number): void {\n    let childrenIndex = index * 2 + 1;\n    if (childrenIndex > this.size - 1) return;\n    if (\n      childrenIndex + 1 <= this.size - 1 &&\n      this.compare(this.arr[childrenIndex + 1], this.arr[childrenIndex]) > 0\n    ) {\n      childrenIndex++;\n    }\n    if (this.compare(this.arr[childrenIndex], this.arr[index]) > 0) {\n      [this.arr[childrenIndex], this.arr[index]] = [this.arr[index], this.arr[childrenIndex]];\n      this.shiftDown(childrenIndex);\n    }\n  }\n  *[Symbol.iterator](): IterableIterator<T> {\n    for (const t of this.arr) {\n      yield t;\n    }\n  }\n}\nfunction smallestK(arr: number[], k: number): number[] {\n  const heap = new Heap((t1, t2) => t2 - t1);\n  arr.forEach(v => heap.add(v));\n  const ans: number[] = [];\n  while (k--) ans.push(heap.remove());\n  return ans;\n}"
        }
    ]
}