{
    "id": "2246",
    "name": "2127.参加会议的最多员工数",
    "url": "https://leetcode.cn/problems/maximum-employees-to-be-invited-to-a-meeting",
    "desc": "给你一个下标从 0 开始的整数数组 favorite ，其中 favorite[i] 表示第 i 位员工喜欢的员工。请你返回参加会议的 最多员工数目 。",
    "solutions": [
        {
            "script": "python",
            "time": 552,
            "memory": 137.49,
            "desc": "判断环的数量，如果环内超过2个，找最大数量的环，如果只有2个，找两个点的最大延伸链。",
            "code": "class Solution:\n    def maximumInvitations(self, favorite: List[int]) -> int:\n        n = len(favorite)\n        deg = [0 for _ in range(n)]\n        for i in range(n): deg[favorite[i]] += 1\n        q = deque(i for i in range(n) if deg[i] == 0)\n        nexts = [[] for _ in range(n)]\n        while q:\n            i = q.popleft()\n            nexts[favorite[i]].append(i)\n            deg[favorite[i]] -= 1\n            if deg[favorite[i]] == 0: q.append(favorite[i])\n        def dfs(idx: int) -> int:\n            res = 1\n            for next_i in nexts[idx]:\n                res = max(res, dfs(next_i) + 1)\n            return res\n\n        max_ring = sum_chain = 0\n        for i in range(n):\n            if deg[i] == 0: continue\n            deg[i] = 0\n            ring = 1\n            next_i = favorite[i]\n            while next_i != i:\n                deg[next_i] = 0\n                ring += 1\n                next_i = favorite[next_i]\n            if ring == 2: sum_chain += dfs(i) + dfs(favorite[i])\n            else: max_ring = max(max_ring, ring)\n        return max(sum_chain, max_ring)",
            "date": "2023-11-01"
        }
    ],
    "tagList": [
        "深度优先搜索",
        "图",
        "拓扑排序"
    ],
    "level": "Hard"
}