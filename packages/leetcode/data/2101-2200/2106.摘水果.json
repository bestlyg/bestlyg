{
    "id": "2229",
    "name": "2106.摘水果",
    "url": "https://leetcode.cn/problems/maximum-fruits-harvested-after-at-most-k-steps",
    "desc": "返回你可以摘到水果的 最大总数 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 388,
            "memory": 163.4,
            "desc": "每向左走到一个水果点，对右侧进行二分查找最大能走到的水果点。",
            "code": "class Solution {\npublic:\n    int maxTotalFruits(vector<vector<int>>& fruits, int startPos, int k) {\n        int res = 0;\n        vector<vector<int>> l, r;\n        r.push_back(vector<int>{ -1, 0});\n        for (auto &item : fruits) {\n            item[0] -= startPos;\n            if (item[0] < 0) item[0] = -item[0], l.push_back(item);\n            else if (item[0] > 0) r.push_back(item);\n            else res += item[1];\n        }\n        l.push_back(vector<int>{ -1, 0});\n        reverse(l.begin(), l.end());\n        l.push_back(vector<int>{ INT_MAX, 0});\n        r.push_back(vector<int>{ INT_MAX, 0});\n        vector<int> sumL(1, 0), sumR(1, 0);\n        for (auto &item : l) sumL.push_back(sumL.back() + item[1]);\n        for (auto &item : r) sumR.push_back(sumR.back() + item[1]);\n        return res + max(f(l, sumL, r, sumR, k), f(r, sumR, l, sumL, k));\n    }\n    int f(vector<vector<int>> &left, vector<int> &sumL, vector<vector<int>> &right, vector<int> &sumR, int k) {\n        int res = sumR[bs(right, k)];\n        for (int i = 1; i < left.size() && left[i][0] <= k; i++)\n            res = max(res, sumL[i + 1] + sumR[bs(right, k - left[i][0] * 2)]);\n        return res;\n    }\n    int bs(vector<vector<int>> &list, int target) {\n        if (target <= 0) return 0;\n        int l = 0, r = list.size();\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (list[m][0] > target) r = m;\n            else l = m + 1;\n        }\n        return l;\n    }\n};",
            "date": "2023-05-04"
        },
        {
            "script": "python",
            "time": 476,
            "memory": 50.9,
            "desc": "同上。",
            "code": "class Solution:\n    def maxTotalFruits(self, fruits: List[List[int]], startPos: int, k: int) -> int:\n        res = 0\n        l, r = [], []\n        r.append([-1, 0])\n        for item in fruits:\n            item[0] -= startPos\n            if item[0] < 0:\n                item[0] = -item[0]\n                l.append(item)\n            elif item[0] > 0:\n                r.append(item)\n            else:\n                res += item[1]\n        l.append([-1, 0])\n        l.reverse()\n        l.append([inf, 0])\n        r.append([inf, 0])\n\n        sumL, sumR = [0], [0]\n        for item in l:\n            sumL.append(sumL[-1] + item[1])\n        for item in r:\n            sumR.append(sumR[-1] + item[1])\n\n        def f(left: List[List[int]], sumL: List[int], right: List[List[int]], sumR: List[int], k: int):\n            res = sumR[bs(right, k)]\n            for i in range(1, len(left)):\n                if left[i][0] > k:\n                    break\n                res = max(res, sumL[i + 1] +\n                        sumR[bs(right, k - left[i][0] * 2)])\n            return res\n\n        def bs(list: List[List[int]], target: int):\n            if target <= 0:\n                return 0\n            l = 0\n            r = len(list)\n            while l < r:\n                m = (l + r) // 2\n                if list[m][0] > target:\n                    r = m\n                else:\n                    l = m + 1\n            return l\n\n        return res + max(f(l, sumL, r, sumR, k), f(r, sumR, l, sumL, k))",
            "date": "2023-05-04"
        },
        {
            "script": "rust",
            "time": 44,
            "memory": 11.5,
            "desc": "同上。",
            "code": "impl Solution {\npub fn max_total_fruits(fruits: Vec<Vec<i32>>, start_pos: i32, k: i32) -> i32 {\n    let mut res = 0;\n    let mut l: Vec<Vec<i32>> = vec![];\n    let mut r: Vec<Vec<i32>> = vec![];\n    r.push(vec![-1, 0]);\n    for mut item in fruits {\n        item[0] -= start_pos;\n        if item[0] < 0 {\n            item[0] = -item[0];\n            l.push(item);\n        } else if item[0] > 0 {\n            r.push(item);\n        } else {\n            res += item[1]\n        }\n    }\n    l.push(vec![-1, 0]);\n    l.reverse();\n    l.push(vec![i32::MAX, 0]);\n    r.push(vec![i32::MAX, 0]);\n    let mut suml = vec![0];\n    let mut sumr = vec![0];\n    for item in &l {\n        suml.push(*suml.last().unwrap() + item[1]);\n    }\n    for item in &r {\n        sumr.push(*sumr.last().unwrap() + item[1]);\n    }\n    res + std::cmp::max(f(&l, &suml, &r, &sumr, k), f(&r, &sumr, &l, &suml, k))\n}\n}\n\nfn f(left: &Vec<Vec<i32>>, suml: &Vec<i32>, right: &Vec<Vec<i32>>, sumr: &Vec<i32>, k: i32) -> i32 {\nlet mut res = sumr[bs(right, k)];\nfor i in 1..left.len() {\n    if left[i][0] > k {\n        break;\n    }\n    res = res.max(suml[i + 1] + sumr[bs(right, k - left[i][0] * 2)]);\n}\nres\n}\nfn bs(list: &Vec<Vec<i32>>, target: i32) -> usize {\nif target <= 0 {\n    0\n} else {\n    let mut l = 0;\n    let mut r = list.len();\n    while l < r {\n        let m = (l + r) / 2;\n        if list[m][0] > target {\n            r = m;\n        } else {\n            l = m + 1;\n        }\n    }\n    l\n}\n}",
            "date": "2023-05-04"
        }
    ],
    "tagList": ["数组", "二分查找", "前缀和", "滑动窗口"],
    "level": "Hard"
}
