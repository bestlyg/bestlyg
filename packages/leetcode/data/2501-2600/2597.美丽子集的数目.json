{
    "id": "2696",
    "name": "2597.美丽子集的数目",
    "url": "https://leetcode.cn/problems/the-number-of-beautiful-subsets",
    "difficulty": "中等",
    "tag": ["数组", "哈希表", "数学", "动态规划", "回溯", "组合数学", "排序"],
    "desc": "给你一个由正整数组成的数组 nums 和一个 正 整数 k 。如果 nums 的子集中，任意两个整数的绝对差均不等于 k ，则认为该子数组是一个 美丽 子集。返回数组 nums 中 非空 且 美丽 的子集数目。",
    "solutions": [
        {
            "script": "typescript",
            "time": 580,
            "memory": 48,
            "desc": "dfs。",
            "code": "function beautifulSubsets(nums: number[], k: number): number {\n        nums.sort((a, b) => a - b);\n        let res = 0;\n        const s = new Set();\n        dfs(0);\n        return res;\n        function dfs(cur: number) {\n          if (cur == nums.length) {\n            if (s.size) res++;\n            return;\n          }\n          dfs(cur + 1);\n          const num = nums[cur];\n          if (!s.has(num - k)) {\n            s.add(num);\n            dfs(cur + 1);\n            s.delete(num);\n          }\n        }\n      }",
            "date": 1679155200000
        },
        {
            "script": "cpp",
            "time": 152,
            "memory": 31.2,
            "desc": "dfs。",
            "code": "class Solution {\npublic:\n    int beautifulSubsets(vector<int>& nums, int k) {\n        int res = 0, s[3005] = {0}, cnt = 0;\n        dfs(res, nums, k, s, cnt, 0);\n        return res;\n    }\n    void dfs(int &res, vector<int> &nums, int k, int *s, int &cnt, int cur = 0) {\n        if (cur == nums.size()) {\n            if (cnt) res++;\n            return;\n        }\n        dfs(res, nums, k, s, cnt, cur + 1);\n        int num = nums[cur];\n        if (!s[num + 1000 - k] && !s[num + 1000 + k]) {\n            cnt++;\n            s[num + 1000] = 1;\n            dfs(res, nums, k, s, cnt, cur + 1);\n            s[num + 1000] = 0;\n            cnt--;\n        }\n    }\n};",
            "date": 1679155200000
        },
        {
            "script": "python",
            "time": 3856,
            "memory": 16.2,
            "desc": "同上。",
            "code": "class Solution:\n    def beautifulSubsets(self, nums: List[int], k: int) -> int:\n        s = [False] * 3005\n        cnt = 0\n        res = 0\n        def dfs(cur: int):\n            nonlocal cnt, res\n            if cur == len(nums):\n                if cnt:\n                    res += 1\n            else:\n                dfs(cur + 1)\n                num = nums[cur]\n                if not s[num + 1000-k] and not s[num + 1000+k]:\n                    cnt += 1\n                    s[num+1000] = True\n                    dfs(cur+1)\n                    s[num+1000] = False\n                    cnt -= 1\n        dfs(0)\n        return res",
            "date": 1679155200000
        },
        {
            "script": "rust",
            "time": 60,
            "memory": 2.1,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn beautiful_subsets(nums: Vec<i32>, k: i32) -> i32 {\n        let mut s = [false; 3005];\n        let mut cnt = 0;\n        let mut res = 0;\n        fn dfs(\n            nums: &Vec<i32>,\n            k: usize,\n            s: &mut [bool; 3005],\n            cnt: &mut usize,\n            res: &mut i32,\n            cur: usize,\n        ) {\n            if cur == nums.len() {\n                if *cnt != 0 {\n                    *res += 1;\n                }\n            } else {\n                dfs(nums, k, s, cnt, res, cur + 1);\n                let num = nums[cur] as usize;\n                if !s[num + 1000 - k] && !s[num + 1000 + k] {\n                    *cnt += 1;\n                    s[num + 1000] = true;\n                    dfs(nums, k, s, cnt, res, cur + 1);\n                    s[num + 1000] = false;\n                    *cnt -= 1;\n                }\n            }\n        }\n        dfs(&nums, k as usize, &mut s, &mut cnt, &mut res, 0);\n        res\n    }\n}",
            "date": 1679155200000
        }
    ]
}
