{
    "id": "2626",
    "name": "2537.统计好子数组的数目",
    "url": "https://leetcode.cn/problems/count-the-number-of-good-subarrays",
    "desc": "给你一个整数数组 nums 和一个整数 k ，请你返回 nums 中 好 子数组的数目。",
    "solutions": [
        {
            "script": "cpp",
            "time": 168,
            "memory": 73.3,
            "desc": "枚举最右侧节点，对每个最右侧节点统计最近的左侧节点，此时以该节点结尾大于K的有left+1个。",
            "code": "class Solution {\npublic:\n    long long countGood(vector<int>& nums, int k) {\n        long long ans = 0, n = nums.size(), cnt = 0, l = 0;\n        unordered_map<int, int> m;\n        for (int i = 0; i < n; i++) {\n            cnt += m[nums[i]]++;\n            while (l < i && cnt - (m[nums[l]] - 1) >= k) cnt -= m[nums[l++]]-- - 1;\n            if (cnt >= k) ans += l + 1;\n        }\n        return ans;\n    }\n};",
            "date": "2023-01-15"
        },
        {
            "script": "rust",
            "time": 44,
            "memory": 4.9,
            "desc": "同上。",
            "code": "use std::collections::HashMap;\nimpl Solution {\n    pub fn count_good(nums: Vec<i32>, k: i32) -> i64 {\n        let mut ans: i64 = 0;\n        let mut cnt = 0;\n        let mut l = 0;\n        let n = nums.len();\n        let mut m = HashMap::<i32, i32>::new();\n        let mut i = 0;\n        while i < n {\n            let num = nums[i];\n            cnt += m.get(&num).unwrap_or(&0);\n            if !m.contains_key(&num) {\n                m.insert(num, 1);\n            } else {\n                *m.get_mut(&num).unwrap() += 1;\n            }\n            while l < i && cnt - (m.get(&nums[l]).unwrap() - 1) >= k {\n                let v = m.get_mut(&nums[l]).unwrap();\n                *v -= 1;\n                cnt -= *v;\n                l += 1;\n            }\n            if cnt >= k {\n                ans += (l + 1) as i64;\n            }\n            i += 1;\n        }\n        ans\n    }\n}",
            "date": "2023-01-15"
        }
    ],
    "tagList": [
        "数组",
        "哈希表",
        "滑动窗口"
    ],
    "level": "Medium"
}