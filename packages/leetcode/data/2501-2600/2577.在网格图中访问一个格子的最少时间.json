{
    "id": "2711",
    "name": "2577.在网格图中访问一个格子的最少时间",
    "url": "https://leetcode.cn/problems/minimum-time-to-visit-a-cell-in-a-grid",
    "difficulty": "困难",
    "tag": [
        "广度优先搜索",
        "图",
        "数组",
        "矩阵",
        "最短路",
        "堆（优先队列）"
    ],
    "desc": "你从 最左上角 出发，出发时刻为 0 ，你必须一直移动到上下左右相邻四个格子中的 任意 一个格子（即不能停留在格子上）。每次移动都需要花费 1 单位时间。请你返回 最早 到达右下角格子的时间，如果你无法到达右下角的格子，请你返回 -1 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 384,
            "memory": 46.2,
            "desc": "优先队列，找最先可以触达的时间。",
            "code": "struct Node {\n    int row, col, time;\n    Node(int row, int col, int time): row(row), col(col), time(time) {}\n};\nvector<vector<int>> dirs = { {0, 1}, {0, -1}, {1, 0}, {-1, 0} };\nclass Solution {\npublic:\n    int minimumTime(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        if (grid[0][1] > 1 && grid[1][0] > 1) return -1;\n        auto cmp = [&](Node &x, Node &y) -> bool { return x.time > y.time; };\n        priority_queue<Node, vector<Node>, decltype(cmp)> q(cmp);\n        q.push(Node(0, 0, 0));\n        bool cache[1005][1005] = {0};\n        cache[0][0] = true;\n        while (q.size()) {\n            Node cur = q.top();\n            if (cur.row == n - 1 && cur.col == m - 1) return cur.time;\n            q.pop();\n            for (auto &dir : dirs) {\n                int nrow = cur.row + dir[0], ncol = cur.col + dir[1];\n                if (nrow < 0 || nrow >= n || ncol < 0 || ncol >= m) continue;\n                int time = cur.time + 1;\n                if (grid[nrow][ncol] > time) {\n                    int minus = (grid[nrow][ncol] - time + 1) / 2;\n                    time = cur.time + minus * 2 + 1;\n                }\n                if (cache[nrow][ncol]) continue;\n                cache[nrow][ncol] = true;\n                q.push(Node(nrow, ncol, time));\n            }\n        }\n        return -1;\n    }\n};",
            "date": 1677340800000
        },
        {
            "script": "python3",
            "time": 2076,
            "memory": 37.1,
            "desc": "同上。",
            "code": "dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    class Node:\n        def __init__(self, row: int, col: int, time: int):\n            self.row = row\n            self.col = col\n            self.time = time\n    \n        def __lt__(self, o: 'Node') -> bool:\n            return self.time < o.time\n    \n    class Solution:\n        def minimumTime(self, grid: List[List[int]]) -> int:\n            n, m = len(grid), len(grid[0])\n            if grid[0][1] > 1 and grid[1][0] > 1:\n                return -1\n            q = []\n            heappush(q, Node(0, 0, 0))\n            cache = [[0] * 1005 for _ in range(1005)]\n            cache[0][0] = 1\n            while True:\n                cur: Node = heappop(q)\n                if cur.row == n - 1 and cur.col == m - 1:\n                    return cur.time\n                for (i, j) in dirs:\n                    nrow = cur.row + i\n                    ncol = cur.col + j\n                    if 0 <= nrow < n and 0 <= ncol < m:\n                        time = cur.time + 1\n                        if grid[nrow][ncol] > time:\n                            minus = (grid[nrow][ncol] - time + 1) // 2\n                            time = cur.time + minus * 2 + 1\n                        if cache[nrow][ncol]:\n                            continue\n                        cache[nrow][ncol] = 1\n                        heappush(q, Node(nrow, ncol, time))",
            "date": 1677340800000
        },
        {
            "script": "rust",
            "time": 72,
            "memory": 5.1,
            "desc": "同上。",
            "code": "const dirs: [[i32; 2]; 4] = [[0, 1], [0, -1], [1, 0], [-1, 0]];\nuse std::cell::RefCell;\nuse std::collections::HashMap;\nuse std::rc::Rc;\n#[derive(Clone, PartialEq, Eq, Ord)]\nstruct Node {\n    row: usize,\n    col: usize,\n    time: i32,\n}\nimpl Node {\n    fn new(row: usize, col: usize, time: i32) -> Self {\n        Node { row, col, time }\n    }\n}\nimpl PartialOrd for Node {\n    fn partial_cmp(&self, o: &Self) -> Option<std::cmp::Ordering> {\n        o.time.partial_cmp(&self.time)\n    }\n}\n\nimpl Solution {\n    pub fn minimum_time(grid: Vec<Vec<i32>>) -> i32 {\n        let n = grid.len();\n        let m = grid[0].len();\n        if grid[0][1] > 1 && grid[1][0] > 1 {\n            -1\n        } else {\n            let mut q = std::collections::BinaryHeap::<Node>::new();\n            q.push(Node::new(0, 0, 0));\n            let mut cache = [[false; 1005]; 1005];\n            cache[0][0] = true;\n            loop {\n                let cur = q.pop().unwrap();\n                if cur.row == n - 1 && cur.col == m - 1 {\n                    return cur.time;\n                }\n                for dir in dirs {\n                    let nrow = cur.row as i32 + dir[0];\n                    let ncol = cur.col as i32 + dir[1];\n                    if nrow < 0 || nrow >= n as i32 || ncol < 0 || ncol >= m as i32 {\n                        continue;\n                    }\n                    let mut time = cur.time + 1;\n                    let nrow = nrow as usize;\n                    let ncol = ncol as usize;\n                    if grid[nrow][ncol] > time {\n                        let minus = (grid[nrow][ncol] - time + 1) / 2;\n                        time = cur.time + minus * 2 + 1;\n                    }\n                    if cache[nrow][ncol] {\n                        continue;\n                    }\n                    cache[nrow][ncol] = true;\n                    q.push(Node::new(nrow, ncol, time));\n                }\n            }\n        }\n    }\n}",
            "date": 1677340800000
        }
    ]
}