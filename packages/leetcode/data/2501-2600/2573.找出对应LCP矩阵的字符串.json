{
    "id": "2708",
    "name": "2573.找出对应LCP矩阵的字符串",
    "url": "https://leetcode.cn/problems/find-the-string-with-lcp",
    "difficulty": "困难",
    "tag": [
        "贪心",
        "并查集",
        "数组",
        "字符串",
        "动态规划",
        "矩阵"
    ],
    "desc": "给你一个 n x n 的矩阵 lcp 。返回与 lcp 对应的、按字典序最小的字符串 word 。如果不存在这样的字符串，则返回空字符串。",
    "solutions": [
        {
            "script": "cpp",
            "time": 168,
            "memory": 67.1,
            "desc": "贪心的构造出字符串，再通过lcp验证字符串是否成立。",
            "code": "class Solution {\npublic:\n    string findTheString(vector<vector<int>>& lcp) {\n        int n = lcp.size(), i = 0;\n        string s;\n        for (int j = 0; j < n; j++) s += \"#\";\n        for (char c = 'a'; c <= 'z'; cpp) {\n            while (i < n && s[i] != '#') i++;\n            if (i == n) break;\n            for (int j = i; j < n; j++)\n                if (lcp[i][j]) s[j] = c;\n        }\n        if (s.find('#') != string::npos) return \"\";\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = n - 1; j >= 0; j--) {\n                if (s[i] == s[j]) {\n                    if (i == n - 1 || j == n - 1) {\n                        if (lcp[i][j] != 1) return \"\";\n                    } else if (lcp[i][j] != lcp[i + 1][j + 1] + 1) return \"\";\n                } else if (lcp[i][j]) return \"\";\n            }\n        }\n        return s;\n    }\n};",
            "date": 1676736000000
        },
        {
            "script": "python",
            "time": 320,
            "memory": 45.2,
            "desc": "同上。",
            "code": "class Solution:\n    def findTheString(self, lcp: List[List[int]]) -> str:\n        n = len(lcp)\n        i = 0\n        s = [''] * n\n        for c in ascii_lowercase:\n            while i < n and s[i] != '':\n                i += 1\n            if i == n:\n                break\n            for j in range(i, n):\n                if lcp[i][j]:\n                    s[j] = c\n        if '' in s:\n            return ''\n        for i in range(n-1, -1, -1):\n            for j in range(n-1, -1, -1):\n                if s[i] == s[j]:\n                    if i == n - 1 or j == n - 1:\n                        if lcp[i][j] != 1:\n                            return ''\n                    elif lcp[i][j] != lcp[i+1][j+1] + 1:\n                        return ''\n                elif lcp[i][j]:\n                    return ''\n        return ''.join(s)",
            "date": 1676736000000
        },
        {
            "script": "rust",
            "time": 28,
            "memory": 9.4,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn find_the_string(lcp: Vec<Vec<i32>>) -> String {\n        let n = lcp.len();\n        let mut list = vec!['\\0'; n];\n        let mut c = 'a';\n        let mut i = 0;\n        while (c as u8) <= ('z' as u8) {\n            while i < n && list[i] != '\\0' {\n                i += 1;\n            }\n            if i == n {\n                break;\n            }\n            for j in i..n {\n                if lcp[i][j] != 0 {\n                    list[j] = c;\n                }\n            }\n            c = ((c as u8) + 1) as char;\n        }\n        if list.contains(&'\\0') {\n            String::new()\n        } else {\n            for i in (0..n).rev() {\n                for j in (0..n).rev() {\n                    if list[i] == list[j] {\n                        if i == n - 1 || j == n - 1 {\n                            if lcp[i][j] != 1 {\n                                return String::new();\n                            }\n                        } else if lcp[i][j] != lcp[i + 1][j + 1] + 1 {\n                            return String::new();\n                        }\n                    } else if lcp[i][j] != 0 {\n                        return String::new();\n                    }\n                }\n            }\n            String::from_utf8(list.into_iter().map(|c| c as u8).collect::<Vec<u8>>()).unwrap()\n        }\n    }\n}",
            "date": 1676736000000
        }
    ]
}