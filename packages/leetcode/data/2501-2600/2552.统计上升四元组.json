{
    "id": "2682",
    "name": "2552.统计上升四元组",
    "url": "https://leetcode.cn/problems/count-increasing-quadruplets",
    "desc": "给你一个长度为 n 下标从 0 开始的整数数组 nums ，它包含 1 到 n 的所有数字，请你返回上升四元组的数目。",
    "solutions": [
        {
            "script": "cpp",
            "time": 272,
            "memory": 10.6,
            "desc": "枚举l，对于每一个l，查找可能的j，记录j的132模式个数，即i<j<k&&v[i]<v[k]<v[j]。",
            "code": "class Solution {\npublic:\n    typedef long long ll;\n    ll countQuadruplets(vector<int>& nums) {\n        int n = nums.size();\n        ll ans = 0;\n        vector<int> list(n, 0);\n        for (int l = 0; l < n; l++) {\n            for (int j = 0; j < l - 1; j++) {\n                if (nums[j] < nums[l]) ans += list[j];\n            }\n            for (int j = 0, cnt = 0; j < l; j++) {\n                if (nums[j] > nums[l]) list[j] += cnt;\n                if (nums[j] < nums[l]) cnt++;\n            }\n        }\n        return ans;\n    }\n};",
            "date": "2023-02-01"
        },
        {
            "script": "python",
            "time": 2284,
            "memory": 15.2,
            "desc": "同上。",
            "code": "class Solution:\n    def countQuadruplets(self, nums: List[int]) -> int:\n        n = len(nums)\n        ans = 0\n        list = [0] * n\n        for l in range(n):\n            for j in range(l):\n                if nums[j] < nums[l]:\n                    ans += list[j]\n            cnt = 0\n            for j in range(l):\n                if nums[j] > nums[l]:\n                    list[j] += cnt\n                if nums[j] < nums[l]:\n                    cnt += 1\n        return ans",
            "date": "2023-02-01"
        },
        {
            "script": "rust",
            "time": 72,
            "memory": 2.1,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn count_quadruplets(nums: Vec<i32>) -> i64 {\n        let n = nums.len();\n        let mut list = vec![0; n];\n        let mut ans = 0;\n        for l in 0..n {\n            for j in 0..l {\n                if nums[j] < nums[l] {\n                    ans += list[j];\n                }\n            }\n            let mut cnt = 0;\n            for j in 0..l {\n                if nums[j] > nums[l] {\n                    list[j] += cnt;\n                }\n                if nums[j] < nums[l] {\n                    cnt += 1;\n                }\n            }\n        }\n        ans\n    }\n}",
            "date": "2023-02-01"
        },
        {
            "script": "python",
            "time": 2666,
            "memory": 16.88,
            "desc": "定义三元组为i<j<k&&v[i]<v[k]<v[j]，遍历时同时记录前面的三元组数量，以及当前节点当k位置时的数量。",
            "code": "class Solution:\n    def countQuadruplets(self, nums: List[int]) -> int:\n        n = len(nums)\n        arr = [0] * n\n        res = 0\n        for l in range(n):\n            for j in range(l - 1):\n                if nums[j] < nums[l]:\n                    res += arr[j]\n            cnt = 0\n            for j in range(l):\n                if nums[j] > nums[l]:\n                    arr[j] += cnt\n                if nums[j] < nums[l]:\n                    cnt += 1\n        return res",
            "date": "2024-09-10"
        }
    ],
    "tagList": [
        "树状数组",
        "数组",
        "动态规划",
        "枚举",
        "前缀和"
    ],
    "level": "Hard"
}