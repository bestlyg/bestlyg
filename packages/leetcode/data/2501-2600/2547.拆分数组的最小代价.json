{
    "id": "2633",
    "name": "2547.拆分数组的最小代价",
    "url": "https://leetcode.cn/problems/minimum-cost-to-split-an-array",
    "desc": "找出并返回拆分 nums 的所有可行方案中的最小代价。",
    "solutions": [
        {
            "script": "cpp",
            "time": 1576,
            "memory": 306,
            "desc": "dp判断每个数组作为结尾时的最小开销。",
            "code": "class Solution {\n public:\n     int minCost(vector<int>& nums, int k) {\n         int n = nums.size();\n         vector<int> dp(n + 1, 0x3f3f3f3f);\n         dp[0] = 0;\n         for (int i = 1; i <= n; i++) {\n             unordered_map<int, int> m;\n             int sum = 0;\n             for (int j = i; j >= 1; j--) {\n                 m[nums[j - 1]]++;\n                 if (m[nums[j - 1]] == 2) sum += 2;\n                 else if (m[nums[j - 1]] > 2) sum += 1;\n                 dp[i] = min(dp[i], dp[j - 1] + k + sum);\n             }\n         }\n         return dp[n];\n     }\n };",
            "date": "2023-01-22"
        },
        {
            "script": "python",
            "time": 5948,
            "memory": 15.1,
            "desc": "同上。",
            "code": "class Solution:\ndef minCost(self, nums: List[int], k: int) -> int:\n    n = len(nums)\n    dp = [0x3f3f3f3f for _ in range(n + 1)]\n    dp[0] = 0\n    for i in range(1, n + 1):\n        m = Counter()\n        sum = 0\n        for j in range(i, 0, -1):\n            num = nums[j-1]\n            m[num] += 1\n            if m[num] == 2:\n                sum += 2\n            elif m[num] > 2:\n                sum += 1\n            dp[i] = min(dp[i], dp[j - 1] + k + sum)\n    return dp[n]",
            "date": "2023-01-22"
        },
        {
            "script": "rust",
            "time": 312,
            "memory": 2.2,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn min_cost(nums: Vec<i32>, k: i32) -> i32 {\n        use std::collections::HashMap;\n        let n = nums.len();\n        let mut dp = vec![0x3f3f3f3f;n + 1];\n        dp[0] = 0;\n        for i in 1..=n {\n            let mut m = HashMap::<i32,i32>::new();\n            let mut sum = 0;\n            let mut j = i;\n            while j >= 1 {\n                let num = nums[j-1];\n                let val = m.entry(num).or_insert(0);\n                *val += 1;\n                if *val == 2 {\n                    sum += 2;\n                } else if *val > 2 {\n                    sum += 1;\n                }\n                dp[i] = dp[i].min(dp[j - 1] + k + sum);\n                j-=1;\n            }\n        }\n        dp[n]\n    }\n}",
            "date": "2023-01-22"
        }
    ],
    "tagList": [
        "数组",
        "哈希表",
        "动态规划",
        "计数"
    ],
    "level": "Hard"
}