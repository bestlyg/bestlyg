{
    "id": "2511",
    "name": "2522.将字符串分割成值不超过K的子字符串",
    "url": "https://leetcode.cn/problems/partition-string-into-substrings-with-values-at-most-k",
    "difficulty": "中等",
    "tag": ["贪心", "字符串", "动态规划"],
    "desc": "请你返回 s 所有的 好 分割中，子字符串的 最少 数目。",
    "solutions": [
        {
            "date": 1672502400000,
            "time": 40,
            "memory": 13.3,
            "script": "cpp",
            "desc": "dp[i]存在 i 个字符的时候最小分割数为 dp[i]。",
            "code": "class Solution {\npublic:\n    int minimumPartition(string s, int k) {\n        int n = s.size();\n        vector<long long> dp(n + 1, 0x3f3f3f3f);\n        dp[0] = 0;\n        for (int i = 1; i <= n; i++) {\n            long long num = 0;\n            for (long long j = i, mul = 1; j >= 1; j--, mul *= 10) {\n                num = (s[j - 1] - '0') * mul + num;\n                if (num > k) break;\n                dp[i] = min(dp[i], dp[j - 1] + 1);\n            }\n        }\n        return dp[n] >= 0x3f3f3f3f ? -1 : dp[n];\n    }\n};"
        },
        {
            "date": 1672502400000,
            "time": 12,
            "memory": 3.8,
            "script": "rust",
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn minimum_partition(s: String, k: i32) -> i32 {\n        let k = k as i128;\n        let list = s.as_bytes();\n        let n = s.len();\n        let mut dp = vec![0x3f3f3f3f_i128; n + 1];\n        dp[0] = 0;\n        for i in 1..=n {\n            let mut num: i128 = 0;\n            let mut mul = 1;\n            for j in 0..i {\n                num = ((list[i - j - 1] as usize - '0' as usize) as i128) * mul + num;\n                if num > k {\n                    break;\n                }\n                dp[i] = dp[i].min(dp[i - j - 1] + 1);\n                mul *= 10;\n            }\n        }\n        if dp[n] == 0x3f3f3f3f {\n            -1\n        } else {\n            dp[n] as i32\n        }\n    }\n}"
        }
    ]
}
