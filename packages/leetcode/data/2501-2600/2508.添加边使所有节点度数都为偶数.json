{
    "id": "2596",
    "name": "2508.添加边使所有节点度数都为偶数",
    "url": "https://leetcode.cn/problems/add-edges-to-make-degrees-of-all-nodes-even",
    "difficulty": "困难",
    "tag": [
        "图",
        "哈希表"
    ],
    "desc": "给你一个有 n  个节点的 无向   图，节点编号为  1  到  n 。再给你整数  n  和一个二维整数数组  edges ，其中  edges[i] = [ai, bi]  表示节点  ai 和  bi  之间有一条边。图不一定连通。如果添加额外的边后，可以使得图中所有点的度数都是偶数，返回 true ，否则返回 false 。",
    "solutions": [
        {
            "date": 1671292800000,
            "time": 512,
            "memory": 186.9,
            "script": "cpp",
            "desc": "统计所有的可能。",
            "code": "struct Node{\n  int val;\n unordered_set<int> next;\n};\nclass Solution {\npublic:\n    bool isPossible(int n, vector<vector<int>>& edges) {\n        vector<Node> list(n);\n        for (int i = 1; i <= n; i++) list[i - 1].val = i;\n        for (auto &edge : edges) {\n            int v1 = edge[0] - 1, v2 = edge[1] - 1;\n            list[v1].next.insert(v2);\n            list[v2].next.insert(v1);\n        }\n        vector<int> nodes, nodes0;\n        for (auto &node : list) {\n            if (node.next.size() & 1) {\n                // cout << \"node.val = \" << node.val << \", size = \" << node.next.size() << endl;\n                if (node.next.size() == n - 1) return false;\n                if (node.next.size() == 0) {\n                    nodes0.push_back(node.val - 1);\n                } else {\n                    nodes.push_back(node.val - 1);\n                }\n            }\n        }\n        cout << \"NODE : \" << endl;\n        for (auto &node : nodes) {\n            cout << list[node].val - 1 << \": \";\n            for (auto &next : list[node].next) cout << next << \", \";\n            cout << endl;\n        }\n        if (nodes.size() == 2) return true;\n        if (nodes.size() == 0) return true;\n        if (nodes.size() > 4) return false;\n        if (nodes0.size() > 1) return false;\n        if (nodes0.size() == 1) {\n            if (nodes.size() == 0) return true;\n            if (nodes.size() == 2) return true;\n            return false;\n        }\n        // cout << \"===\" << endl;\n        int ans = false;\n        unordered_set<int> used;\n        function<void(int,int)> dfs = [&](int i, int line) {\n            cout << \"i = \" << i << \", line = \" << line << \", nodes[i] = \" << (i == nodes.size() ? -1 : nodes[i]) << endl;\n            if (i == nodes.size()) {\n                ans = true;\n                return;\n            }\n            if (used.count(nodes[i])) {\n                // cout << \"1\" << endl;\n                dfs(i + 1, line);\n                return;\n            }\n            if (line == 0 && i != nodes.size()) return;\n                // cout << \"2\" << endl;\n                // cout << \"3\" << endl;\n            Node &node = list[nodes[i]];\n            for (int j = i + 1; j < nodes.size(); j++) {\n                if (used.count(nodes[j]) || node.next.count(nodes[j])) continue;\n                node.next.insert(nodes[j]);\n                list[nodes[j]].next.insert(nodes[i]);\n                used.insert(nodes[i]);\n                used.insert(nodes[j]);\n                // cout << \"link : \" << nodes[i] << \", \" << nodes[j] << endl;\n                dfs(i + 1, line - 1);\n                node.next.erase(nodes[j]);\n                list[nodes[j]].next.erase(nodes[i]);\n                used.erase(nodes[i]);\n                used.erase(nodes[j]);\n            }\n        };\n        dfs(0, 2);\n        return ans;\n    }\n};"
        }
    ]
}