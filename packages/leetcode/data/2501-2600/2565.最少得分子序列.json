{
    "id": "2701",
    "name": "2565.最少得分子序列",
    "url": "https://leetcode.cn/problems/subsequence-with-the-minimum-score",
    "desc": "请你返回使 t 成为 s 子序列的最小得分。",
    "solutions": [
        {
            "script": "cpp",
            "time": 16,
            "memory": 11.2,
            "desc": "前后缀匹配，把s分成前后两部分进行枚举，对于每一部分尝试匹配t的前后缀的最大长度。",
            "code": "class Solution {\npublic:\n    int minimumScore(string s, string t) {\n        int n = s.size(), m = t.size();\n        vector<int> pre(n), suf(n + 1, m);\n        for (int i = 0, p = 0; i < n && p < m; i++) {\n            if (s[i] == t[p]) p++;\n            pre[i] = p;\n        }\n        for (int i = n - 1, p = m - 1; i >= 0 && p >= 0; i--) {\n            if (s[i] == t[p]) p--;\n            suf[i] = p + 1;\n        }\n        int res = suf[0];\n        for (int i = 0; i < n; i++) {\n            if (suf[i + 1] < pre[i]) return 0;\n            res = min(res, suf[i + 1] - pre[i]);\n        }\n        return res;\n    }\n};",
            "date": "2023-02-12"
        },
        {
            "script": "python",
            "time": 156,
            "memory": 23.2,
            "desc": "同上。",
            "code": "class Solution:\n    def minimumScore(self, s: str, t: str) -> int:\n        n, m = len(s), len(t)\n        pre, suf = [0] * n, [m] * (n + 1)\n        i, p = 0, 0\n        while i < n and p < m:\n            if s[i] == t[p]:\n                p += 1\n            pre[i] = p\n            i += 1\n        i, p = n-1, m-1\n        while i >= 0 and p >= 0:\n            if s[i] == t[p]:\n                p -= 1\n            suf[i] = p+1\n            i -= 1\n        res = suf[0]\n        for i in range(n):\n            if suf[i + 1] < pre[i]:\n                return 0\n            res = min(res, suf[i + 1] - pre[i])\n        return res",
            "date": "2023-02-12"
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 4.8,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn minimum_score(s: String, t: String) -> i32 {\n        let (s, t) = (\n            s.chars().collect::<Vec<char>>(),\n            t.chars().collect::<Vec<char>>(),\n        );\n        let (n, m) = (s.len(), t.len());\n        let (mut pre, mut suf) = (vec![0; n], vec![m; n + 1]);\n        let (mut i, mut p) = (0, 0);\n        while i < n && p < m {\n            if s[i] == t[p] {\n                p += 1;\n            }\n            pre[i] = p;\n            i += 1;\n        }\n        let (mut i, mut p) = ((n - 1) as i32, (m - 1) as i32);\n        while i >= 0 && p >= 0 {\n            if s[i as usize] == t[p as usize] {\n                p -= 1;\n            }\n            suf[i as usize] = p as usize + 1;\n            i -= 1;\n        }\n        let mut res = suf[0];\n        for i in 0..n {\n            if suf[i + 1] < pre[i] {\n                return 0;\n            }\n            res = res.min(suf[i + 1] - pre[i]);\n        }\n        res as i32\n    }\n}",
            "date": "2023-02-12"
        }
    ],
    "tagList": ["双指针", "字符串", "二分查找"],
    "level": "Hard"
}
