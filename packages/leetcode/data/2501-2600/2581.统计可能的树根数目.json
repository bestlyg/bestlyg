{
    "id": "2652",
    "name": "2581.统计可能的树根数目",
    "url": "https://leetcode.cn/problems/count-number-of-possible-root-nodes",
    "desc": "给你二维整数数组 edges ，Bob 的所有猜测和整数 k ，请你返回可能成为树根的 节点数目 。如果没有这样的树，则返回 0。",
    "solutions": [
        {
            "script": "python",
            "time": 425,
            "memory": 97.89,
            "desc": "先统计以0为根的猜对个数， 再对每个节点为根进行dfs。",
            "code": "class Solution:\n    def rootCount(self, edges: List[List[int]], guesses: List[List[int]], k: int) -> int:\n        nodes = [[] for _ in range(len(edges) + 1)]\n        for n1, n2 in edges:\n            nodes[n1].append(n2)\n            nodes[n2].append(n1)\n        s = {(n1, n2) for n1, n2 in guesses}\n        def dfs(node: int, parent: int) -> int:\n            ans = 0\n            for child in nodes[node]:\n                if child != parent:\n                    ans += (node, child) in s\n                    ans += dfs(child, node)\n            return ans\n        def reroot(node: int, parent: int, cnt: int) -> int:\n            ans = cnt >= k\n            for child in nodes[node]:\n                if child != parent:\n                    ans += reroot(child, node, cnt + ((child, node) in s) - ((node, child) in s))\n            return ans\n        return reroot(0, -1, dfs(0, -1))",
            "date": "2024-02-29"
        }
    ],
    "tagList": ["树", "深度优先搜索", "数组", "哈希表", "动态规划"],
    "level": "Hard"
}
