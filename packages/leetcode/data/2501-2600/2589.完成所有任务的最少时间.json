{
    "id": "2657",
    "name": "2589.完成所有任务的最少时间",
    "url": "https://leetcode.cn/problems/minimum-time-to-complete-all-tasks",
    "desc": "你有一台电脑，它可以 同时 运行无数个任务。给你一个二维整数数组 tasks ，其中 tasks[i] = [starti, endi, durationi] 表示第 i 个任务需要在 闭区间 时间段 [starti, endi] 内运行 durationi 个整数时间点（但不需要连续）。当电脑需要运行任务时，你可以打开电脑，如果空闲时，你可以将电脑关闭。请你返回完成所有任务的情况下，电脑最少需要运行多少秒。",
    "solutions": [
        {
            "script": "cpp",
            "time": 152,
            "memory": 37.3,
            "desc": "按终止时间排序，对于每个任务先在时间段中找已经在运行的时间段，如果已经运行的时间段已经超过任务所需要的时间那不需要增加时间点，如果不满足，尽可能从后往前开启时间段。",
            "code": "class Solution {\npublic:\n    int findMinimumTime(vector<vector<int>>& tasks) {\n        sort(tasks.begin(), tasks.end(), [&](auto &a, auto &b){\n            return a[1] < b[1];\n        });\n        int res = 0, time[2005] = {0};\n        for (auto &task : tasks) {\n            for (int i = task[0]; i <= task[1]; i++)\n                if (time[i]) task[2]--;\n            if (task[2] <= 0) continue;\n            for (int i = task[1]; i >= task[0] && task[2]; i--)\n                if (!time[i]) time[i] = 1, res++, task[2]--;\n        }\n        return res;\n    }\n};",
            "date": "2023-03-12"
        },
        {
            "script": "python",
            "time": 1072,
            "memory": 15.9,
            "desc": "同上。",
            "code": "class Solution:\n    def findMinimumTime(self, tasks: List[List[int]]) -> int:\n        tasks.sort(key=lambda item: item[1])\n        res = 0\n        time = [False]*2005\n        for task in tasks:\n            for i in range(task[0], task[1]+1):\n                if time[i]:\n                    task[2] -= 1\n            if task[2] <= 0:\n                continue\n            for i in range(task[1], task[0]-1, -1):\n                if not time[i]:\n                    time[i] = True\n                    res += 1\n                    task[2] -= 1\n                if not task[2]:\n                    break\n        return res",
            "date": "2023-03-12"
        },
        {
            "script": "rust",
            "time": 40,
            "memory": 2.2,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn find_minimum_time(tasks: Vec<Vec<i32>>) -> i32 {\n        let mut tasks = tasks;\n        tasks.sort_by(|a, b| a[1].cmp(&b[1]));\n        let mut res = 0;\n        let mut time = [false; 2005];\n        for mut task in tasks {\n            for i in task[0]..=task[1] {\n                let i = i as usize;\n                if time[i] {\n                    task[2] -= 1;\n                }\n            }\n            if task[2] > 0 {\n                for i in (task[0]..=task[1]).rev() {\n                    let i = i as usize;\n                    if !time[i] {\n                        time[i] = true;\n                        res += 1;\n                        task[2] -= 1;\n                    }\n                    if task[2] == 0 {\n                        break;\n                    }\n                }\n            }\n        }\n        res\n    }\n}",
            "date": "2023-03-12"
        },
        {
            "script": "python",
            "time": 529,
            "memory": 17.4,
            "desc": "贪心，对于每个任务先查看当前已经占用的时间点，剩下的从后往前开始占用。",
            "code": "class Solution:\n    def findMinimumTime(self, tasks: List[List[int]]) -> int:\n        tasks.sort(key = lambda v: v[1])\n        arr = [False] * 2001\n        res = 0\n        for s, e, d in tasks:\n            for t in range(s, e + 1):\n                if arr[t]:\n                    d -= 1\n            if d <= 0: continue\n            for t in range(e, s - 1, -1):\n                if d <= 0: break\n                if not arr[t]:\n                    arr[t] = True\n                    d -= 1\n                    res += 1\n        return res",
            "date": "2024-05-15"
        }
    ],
    "tagList": [
        "栈",
        "贪心",
        "数组",
        "二分查找",
        "排序"
    ],
    "level": "Hard"
}