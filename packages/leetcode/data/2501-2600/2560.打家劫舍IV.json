{
    "id": "2690",
    "name": "2560.打家劫舍IV",
    "url": "https://leetcode.cn/problems/house-robber-iv",
    "difficulty": "中等",
    "tag": [
        "数组",
        "二分查找"
    ],
    "desc": "给你一个下标从 0 开始的字符串数组 words 以及一个二维整数数组 queries 。返回一个整数数组，其中数组的第 i 个元素对应第 i 个查询的答案。",
    "solutions": [
        {
            "script": "cpp",
            "time": 136,
            "memory": 55.6,
            "desc": "结果二分+dp。",
            "code": "class Solution {\npublic:\n    long long minCost(vector<int>& basket1, vector<int>& basket2) {\n        unordered_map<int, int> m;\n        for (auto &v : basket1) m[v]++;\n        for (auto &v : basket2) m[v]--;\n        vector<int> list;\n        int nmin = 0x3f3f3f3f;\n        for (auto &item : m) {\n            if (item.second % 2 != 0) return -1;\n            nmin = min(nmin, item.first);\n            for (int i = 0; i < abs(item.second) / 2; i++) list.push_back(item.first);\n        }\n        sort(list.begin(), list.end());\n        long long ans = 0;\n        for (int i = 0; i < list.size() / 2; i++) ans += min(list[i], nmin * 2);\n        return ans;\n    }\n};",
            "date": 1675526400000
        },
        {
            "script": "python3",
            "time": 740,
            "memory": 22.9,
            "desc": "同上。",
            "code": "class Solution:\n    def minCapability(self, nums: List[int], k: int) -> int:\n        def bs(target):\n            prev1, prev2 = 0, 0\n            for num in nums:\n                if num <= target:\n                    prev1, prev2 = prev2, max(prev1 + 1, prev2)\n                else:\n                    prev1 = prev2\n            return prev2\n        l, r = 1, max(nums)\n        while l < r:\n            m = (l + r) // 2\n            if bs(m) >= k: r = m\n            else: l = m + 1\n        return l",
            "date": 1675526400000
        },
        {
            "script": "rust",
            "time": 16,
            "memory": 4,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn min_capability(nums: Vec<i32>, k: i32) -> i32 {\n        let (mut l, mut r) = (1, 1);\n        for num in nums.iter() {\n            r = r.max(*num);\n        }\n        let bs = move |target| {\n            let (mut prev1, mut prev2) = (0, 0);\n            for num in nums.iter() {\n                if *num <= target {\n                    let tmp = prev2;\n                    prev2 = prev2.max(prev1 + 1);\n                    prev1 = tmp;\n                } else {\n                    prev1 = prev2;\n                }\n            }\n            prev2\n        };\n        while l < r {\n            let m = (l + r) / 2;\n            if bs(m) >= k {\n                r = m;\n            } else {\n                l = m + 1\n            }\n        }\n        l\n    }\n}",
            "date": 1675526400000
        }
    ]
}