{
    "id": "2588",
    "name": "2503.矩阵查询可获得的最大分数",
    "url": "https://leetcode.cn/problems/maximum-number-of-points-from-grid-queries",
    "desc": "给你一个大小为 m x n 的整数矩阵 grid 和一个大小为 k 的数组 queries 。在过程结束后，answer[i] 是你可以获得的最大分数。注意，对于每个查询，你可以访问同一个单元格 多次 。返回结果数组 answer 。",
    "solutions": [
        {
            "date": "2022-12-11",
            "time": 264,
            "memory": 30.5,
            "script": "cpp",
            "desc": "对 query 排序后，从小往大找， 对于所有小于 q 的数字进行并查集合并。",
            "code": "class UnionFind {\npublic:\n    int n;\n    vector<int> data, cnt;\n    UnionFind(int n): n(n), data(vector<int>(n, 0)), cnt(vector<int>(n, 1)) {\n        for (int i = 0; i < n; i++) data[i] = i;\n    }\n    int size(int v) {\n        return cnt[find(v)];\n    }\n    int find(int v) {\n        if (data[v] == v) return v;\n        return data[v] = find(data[v]);\n    }\n    void uni(int v1, int v2) {\n        int p1 = find(v1), p2 = find(v2);\n        if (p1 != p2) {\n            cnt[p1] += cnt[p2];\n            data[p2] = p1;\n        }\n    }\n};\nint pos2Idx(int x, int y, int size) {\n    return x * size + y;\n}\nvoid idx2Pos(int idx, int size, int &x, int &y) {\n    x = idx / size;\n    y = idx % size;\n}\nvector<vector<int>> dirs = {\n    {0, 1}, {0, -1},\n    {1, 0}, {-1, 0}\n};\nclass Solution {\npublic:\n    int n, m, qs;\n    vector<int> maxPoints(vector<vector<int>>& grid, vector<int>& queries) {\n        n = grid.size();\n        m = grid[0].size();\n        qs = queries.size();\n        vector<int> ans(qs, 0), list(qs), data;\n        for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) data.push_back(pos2Idx(i, j, m));\n        sort(data.begin(), data.end(), [&](auto &i1, auto &i2){\n            int x1, y1, x2, y2;\n            idx2Pos(i1, m, x1, y1);\n            idx2Pos(i2, m, x2, y2);\n            return grid[x1][y1] < grid[x2][y2];\n        });\n        iota(list.begin(), list.end(), 0);\n        sort(list.begin(), list.end(), [&](auto &i1, auto &i2){ return queries[i1] < queries[i2]; });\n        /*\n        cout << \"data : \";\n        for (auto &idx : data) {\n            int x, y;\n            idx2Pos(idx, m, x, y);\n            cout << \"(\" << x << \", \" << y << \", \" << grid[x][y] << \"), \";\n        }\n        cout << \"none\" << endl;\n        cout << \"list : \";\n        for (auto &idx : list) {\n            cout << \"(\" << idx << \", \" << queries[idx] << \"), \";\n        }\n        cout << \"none\" << endl;\n        */\n        UnionFind uf(n * m);\n        int j = 0;\n        for (auto &idx : list) {\n            int q = queries[idx];\n            if (grid[0][0] >= q) continue;\n            // cout << \"q = \" << q << endl;\n            for (; j < data.size(); j++) {\n                int x, y;\n                idx2Pos(data[j], m, x, y);\n                // cout << \"j = \" << j << \", x = \" << x << \", y = \" << y << endl;\n                if (grid[x][y] >= q) break;\n                for (auto &dir : dirs) {\n                    int nx = x + dir[0], ny = y + dir[1];\n                    if (nx == -1 || nx == n || ny == -1 || ny == m) continue;\n                    if (grid[nx][ny] >= q) continue;\n                    uf.uni(data[j], pos2Idx(nx, ny, m));\n                }\n            }\n            ans[idx] = uf.size(0);\n        }\n        return ans;\n    }\n};"
        }
    ],
    "tagList": [
        "广度优先搜索",
        "并查集",
        "数组",
        "双指针",
        "矩阵",
        "排序",
        "堆（优先队列）"
    ],
    "level": "Hard"
}