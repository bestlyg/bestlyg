{
    "id": "776",
    "name": "590.N叉树的后序遍历",
    "url": "https://leetcode.cn/problems/n-ary-tree-postorder-traversal",
    "desc": "给定一个 N 叉树，返回其节点值的后序遍历。",
    "solutions": [
        {
            "date": "2020-02-21",
            "time": 1,
            "memory": 41.7,
            "script": "java",
            "desc": "遍历每个子节点再递归。",
            "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\nclass Solution {\n\tLinkedList<Integer> list = new LinkedList<Integer>();\n    public List<Integer> postorder(Node root) {\n    \tinPostorder(root);\n        return list;\n    }\n    void inPostorder(Node node) {\n    \tif(node==null)return;\n    \tif(node.children!=null)\n    \tfor(int i=0,len=node.children.size();i<len;i++) {\n    \t\tinPostorder(node.children.get(i));\n    \t}\n\t\tlist.add(node.val);\n    }\n}"
        },
        {
            "date": "2022-03-12",
            "time": 16,
            "memory": 11.3,
            "script": "cpp",
            "desc": "dfs。",
            "code": "class Solution {\n   public:\n    vector<int> postorder(Node *root) {\n        vector<int> ans;\n        if (root) dfs(ans, root);\n        return ans;\n    }\n    void dfs(vector<int> &ans, Node *&root) {\n        for (auto &child : root->children) dfs(ans, child);\n        ans.push_back(root->val);\n    }\n};"
        },
        {
            "date": "2022-03-12",
            "time": 20,
            "memory": 12.1,
            "script": "cpp",
            "desc": "迭代。",
            "code": "class Solution {\n   public:\n    vector<int> postorder(Node *root) {\n        vector<int> ans;\n        stack<Node *> s;\n        unordered_set<Node *> sset;\n        if (root) s.push(root);\n        while (s.size()) {\n            Node *node = s.top();\n            s.pop();\n            if (sset.count(node)) {\n                ans.push_back(node->val);\n                continue;\n            }\n            sset.insert(node);\n            s.push(node);\n            for (auto it = node->children.rbegin(); it != node->children.rend();\n                 it++) {\n                s.push(*it);\n            }\n        }\n        return ans;\n    }\n};"
        },
        {
            "script": "python",
            "time": 53,
            "memory": 18.12,
            "desc": "dfs。",
            "code": "class Solution:\n    def postorder(self, root: 'Node') -> List[int]:\n        if not root: return []\n        return reduce(lambda arr, cur: arr + cur, [self.postorder(child) for child in root.children], []) + [root.val] ",
            "date": "2024-02-19"
        }
    ],
    "tagList": ["栈", "树", "深度优先搜索"],
    "level": "Easy"
}
