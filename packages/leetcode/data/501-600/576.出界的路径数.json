{
    "id": "576",
    "name": "576.出界的路径数",
    "url": "https://leetcode.cn/problems/out-of-boundary-paths",
    "difficulty": "中等",
    "tag": [
        "动态规划"
    ],
    "desc": "给你五个整数 m、n、maxMove、startRow 以及 startColumn ，找出并返回可以将球移出边界的路径数量。",
    "solutions": [
        {
            "date": 1628956800000,
            "time": 120,
            "memory": 43.6,
            "script": "typescript",
            "desc": "dp[i][j][k]=第 i 步时，[j][k]坐标的最大数量。",
            "code": "function findPaths(\n  m: number,\n  n: number,\n  maxMove: number,\n  startRow: number,\n  startColumn: number\n): number {\n  const mod = 10 ** 9 + 7;\n  const directions: [number, number][] = [\n    [0, 1],\n    [1, 0],\n    [-1, 0],\n    [0, -1],\n  ];\n  const dp = new Array(maxMove + 1)\n    .fill(0)\n    .map(_ => new Array(m).fill(0).map(_ => new Array(n).fill(0)));\n  dp[0][startRow][startColumn] = 1;\n  let ans = 0;\n  for (let i = 0; i < maxMove; i++) {\n    for (let j = 0; j < m; j++) {\n      for (let k = 0; k < n; k++) {\n        const cnt = dp[i][j][k];\n        if (cnt <= 0) continue;\n        for (const [moveRow, moveCol] of directions) {\n          const row = j + moveRow;\n          const col = k + moveCol;\n          if (row >= 0 && row < m && col >= 0 && col < n) {\n            dp[i + 1][row][col] = (dp[i + 1][row][col] + cnt) % mod;\n          } else {\n            ans = (ans + cnt) % mod;\n          }\n        }\n      }\n    }\n  }\n  return ans;\n}"
        }
    ]
}