{
    "id": "525",
    "name": "525.连续数组",
    "url": "https://leetcode.cn/problems/contiguous-array",
    "difficulty": "中等",
    "tag": [
        "数组",
        "哈希表",
        "前缀和"
    ],
    "desc": "给定一个二进制数组 nums , 找到含有相同数量的 0 和 1 的最长连续子数组，并返回该子数组的长度。",
    "solutions": [
        {
            "date": 1622649600000,
            "time": 144,
            "memory": 46.8,
            "script": "typescript",
            "desc": "把 0 都置-1,利用前缀和判断和为 0 的值。",
            "code": "function findMaxLength(nums: number[]): number {\n  const len = nums.length;\n  for (let i = 0; i < len; i++) if (nums[i] === 0) nums[i] = -1;\n  let sum = 0;\n  let ans = 0;\n  const map = new Map<number, number>([[0, -1]]);\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    let prev = map.get(sum);\n    if (prev !== undefined) ans = Math.max(ans, i - prev);\n    else map.set(sum, i);\n  }\n  return ans;\n}"
        },
        {
            "date": 1640188800000,
            "time": 116,
            "memory": 81.8,
            "script": "c++",
            "desc": "前缀和。",
            "code": "class Solution {\n   public:\n    int findMaxLength(vector<int>& nums) {\n        int ans = 0, sum = 0;\n        unordered_map<int, int> mmap;\n        mmap[0] = -1;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i] == 1 ? 1 : -1;\n            if (mmap.count(sum)) {\n                ans = max(ans, i - mmap[sum]);\n            } else {\n                mmap[sum] = i;\n            }\n        }\n        return ans;\n    }\n};"
        }
    ]
}