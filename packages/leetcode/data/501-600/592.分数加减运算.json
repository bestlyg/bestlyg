{
    "id": "592",
    "name": "592.分数加减运算",
    "url": "https://leetcode.cn/problems/fraction-addition-and-subtraction",
    "desc": "给定一个表示分数加减运算的字符串 expression ，你需要返回一个字符串形式的计算结果。 。",
    "solutions": [
        {
            "date": "2022-07-27",
            "time": 0,
            "memory": 5.9,
            "script": "cpp",
            "desc": "解析字符串后通分约分。",
            "code": "class Solution {\n   public:\n    typedef pair<int, int> node;\n    string fractionAddition(string expression) {\n        char op = '+';\n        node ans = make_pair(0, 1);\n        for (int i = 0; i < expression.size(); i++) {\n            int end = i;\n            string tmp = \"\";\n            while (end < expression.size() && !is_op(expression, end))\n                tmp += expression[end++];\n            i = end;\n            op_node(ans, to_node(tmp), op);\n            op = expression[i];\n        }\n        return to_string(ans.first) + \"/\" + to_string(ans.second);\n    }\n    bool is_op(string &expression, int idx) {\n        if (idx == 0 || idx == expression.size() - 1) return false;\n        if (expression[idx] != '+' && expression[idx] != '-') return false;\n        if (!isdigit(expression[idx - 1])) return false;\n        return true;\n    }\n    node to_node(string &str) {\n        node ans = make_pair(0, 0);\n        int i = 0, f = 1;\n        if (str[0] == '-') f = -1;\n        if (str[0] == '+' || str[0] == '-') i++;\n        while (str[i] != '/') ans.first = ans.first * 10 + str[i++] - '0';\n        i++;\n        while (i < str.size()) ans.second = ans.second * 10 + str[i++] - '0';\n        ans.first *= f;\n        return ans;\n    }\n    void op_node(node &node1, node node2, char op) {\n        format1(node1, node2);\n        if (op == '+')\n            node1.first += node2.first;\n        else\n            node1.first -= node2.first;\n        format2(node1);\n    }\n    int gcd(int a, int b) {\n        if (b == 0) return a;\n        return gcd(b, a % b);\n    }\n    int lcm(int a, int b) { return a * b / gcd(a, b); }\n    void format1(node &node1, node &node2) {\n        if (node1.second != node2.second) {\n            int num_lcm = lcm(node1.second, node2.second);\n            node1.first *= num_lcm / node1.second;\n            node2.first *= num_lcm / node2.second;\n            node1.second = node2.second = num_lcm;\n        }\n    }\n    void format2(node &node) {\n        int f = 1;\n        if (node.first < 0) {\n            f = -1;\n            node.first *= f;\n        }\n        int num_gcd = gcd(node.first, node.second);\n        if (num_gcd != 1) {\n            node.first /= num_gcd;\n            node.second /= num_gcd;\n        }\n        node.first *= f;\n    }\n};"
        },
        {
            "date": "2022-07-27",
            "time": 0,
            "memory": 2,
            "script": "rust",
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn fraction_addition(expression: String) -> String {\n        let expression: Vec<char> = expression.chars().collect();\n        let mut op = '+';\n        let mut ans = Node::new(0, 1);\n        let mut i = 0;\n        while i < expression.len() {\n            let mut end = i;\n            let mut tmp = String::new();\n            while end < expression.len() && !Solution::is_op(&expression, end) {\n                tmp.push(expression[end]);\n                end += 1;\n            }\n            i = end;\n            Solution::op_node(&mut ans, Solution::to_node(&tmp), op);\n            if i < expression.len() {\n                op = expression[i];\n            }\n            i += 1;\n        }\n        ans.to_string()\n    }\n    fn is_op(expression: &Vec<char>, idx: usize) -> bool {\n        if idx == 0 || idx == expression.len() - 1 {\n            false\n        } else if expression[idx] != '+' && expression[idx] != '-' {\n            false\n        } else if !expression[idx - 1].is_ascii_digit() {\n            false\n        } else {\n            true\n        }\n    }\n    fn to_node(string: &String) -> Node {\n        let string: Vec<char> = string.chars().collect();\n        let mut node = Node::new(0, 0);\n        let mut i = 0;\n        let mut f = 1;\n        if string[0] == '-' {\n            f = -1;\n        }\n        if string[0] == '+' || string[0] == '-' {\n            i += 1;\n        }\n        while string[i] != '/' {\n            node.first = node.first * 10 + (string[i] as i32 - '0' as i32);\n            i += 1;\n        }\n        i += 1;\n        while i < string.len() {\n            node.second = node.second * 10 + (string[i] as i32 - '0' as i32);\n            i += 1;\n        }\n        node.first *= f;\n        node\n    }\n    fn op_node(node1: &mut Node, node2: Node, op: char) {\n        let mut node2 = node2;\n        Solution::format1(node1, &mut node2);\n        if op == '+' {\n            node1.first += node2.first;\n        } else {\n            node1.first -= node2.first;\n        }\n        Solution::format2(node1);\n    }\n    fn format1(node1: &mut Node, node2: &mut Node) {\n        if node1.second != node2.second {\n            let lcm = Solution::lcm(node1.second, node2.second);\n            node1.first *= lcm / node1.second;\n            node2.first *= lcm / node2.second;\n            node1.second = lcm;\n            node2.second = lcm;\n        }\n    }\n    fn format2(node: &mut Node) {\n        let mut f = 1;\n        if node.first < 0 {\n            f = -1;\n            node.first *= f;\n        }\n        let gcd = Solution::gcd(node.first, node.second);\n        if gcd != 1 {\n            node.first /= gcd;\n            node.second /= gcd;\n        }\n        node.first *= f;\n    }\n    fn gcd(a: i32, b: i32) -> i32 {\n        if b == 0 {\n            a\n        } else {\n            Solution::gcd(b, a % b)\n        }\n    }\n    fn lcm(a: i32, b: i32) -> i32 {\n        a * b / Solution::gcd(a, b)\n    }\n}\n\nstruct Node {\n    first: i32,\n    second: i32,\n}\nimpl Node {\n    fn new(first: i32, second: i32) -> Self {\n        Self { first, second }\n    }\n    fn to_string(&self) -> String {\n        format!(\"{}/{}\", self.first, self.second)\n    }\n}"
        }
    ],
    "tagList": [
        "数学",
        "字符串",
        "模拟"
    ],
    "level": "Medium"
}