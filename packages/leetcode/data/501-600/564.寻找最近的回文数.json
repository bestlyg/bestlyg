{
    "name": "564. 寻找最近的回文数",
    "url": "https://leetcode-cn.com/problems/find-the-closest-palindrome/",
    "difficulty": "困难",
    "tag": [
        "数学",
        "字符串"
    ],
    "desc": "给定一个表示整数的字符串 n ，返回与它最近的回文整数（不包括自身）。如果不止一个，返回较小的那个。 “最近的”定义为两个整数差的绝对值最小。",
    "solutions": [
        {
            "date": 1646150400000,
            "time": 0,
            "memory": 6.3,
            "script": "c++",
            "desc": "检测进位和退位的问题后，翻转前半部份。",
            "code": "class Solution {\n   public:\n    string nearestPalindromic(string n) {\n        // 检测一位数\n        if (n.size() == 1) {\n            n[0] -= 1;\n            return n;\n        }\n        // 检测10000\n        if (n[0] == '1') {\n            int i = 1;\n            while (i < n.size() && n[i] == '0') i++;\n            if (i == n.size() || i == n.size() - 1 && n[i] == '1') {\n                string ans = \"\";\n                for (int i = 1; i < n.size(); i++) ans += '9';\n                return ans;\n            }\n        }\n        // 检测99999\n        if (n[0] == '9') {\n            int i = 1;\n            while (i < n.size() && n[i] == '9') i++;\n            if (i == n.size()) {\n                string ans = \"1\";\n                for (int i = 1; i < n.size(); i++) ans += \"0\";\n                ans += \"1\";\n                return ans;\n            }\n        }\n        // 检测其它\n        return common(n);\n    }\n    string common(const string &n) {\n        long long num = stoll(n);\n        vector<long long> list = getlist(n);\n        long long ans = -1, minus_num = INT_MAX;\n        for (int i = 0; i < list.size(); i++) {\n            int minus = abs(list[i] - num);\n            if (minus == 0) continue;\n            if (minus < minus_num || minus == minus_num && list[i] < ans) {\n                ans = list[i];\n                minus_num = minus;\n            }\n        }\n        return to_string(ans);\n    }\n    vector<long long> getlist(const string &n) {\n        if (n.size() & 1)\n            return getlist_odd(n);\n        else\n            return getlist_even(n);\n    }\n    vector<long long> getlist_odd(const string &n) {\n        vector<long long> ans;\n        long long high_num = 0;\n        for (int i = 0; i <= n.size() / 2; i++) {\n            high_num = high_num * 10 + n[i] - '0';\n        }\n        ans.push_back(getnum(high_num / 10, getlow(high_num / 10), n.size() / 2,\n                             high_num % 10));\n        ans.push_back(getnum((high_num + 1) / 10, getlow((high_num + 1) / 10),\n                             n.size() / 2, (high_num + 1) % 10));\n        ans.push_back(getnum((high_num - 1) / 10, getlow((high_num - 1) / 10),\n                             n.size() / 2, (high_num - 1) % 10));\n        return ans;\n    }\n    vector<long long> getlist_even(const string &n) {\n        vector<long long> ans;\n        long long high_num = 0;\n        for (int i = 0; i < n.size() / 2; i++) {\n            high_num = high_num * 10 + n[i] - '0';\n        }\n        ans.push_back(getnum(high_num, getlow(high_num), n.size() / 2, -1));\n        ans.push_back(\n            getnum(high_num + 1, getlow(high_num + 1), n.size() / 2, -1));\n        ans.push_back(\n            getnum(high_num - 1, getlow(high_num - 1), n.size() / 2, -1));\n        return ans;\n    }\n    long long getnum(const long long &high, const long long &low,\n                     const int size, const int mid) {\n        long long num = high;\n        num *= pow(10, size);\n        if (mid != -1) {\n            num *= 10;\n            num += mid * pow(10, size);\n        }\n        num += low;\n        return num;\n    }\n    long long getlow(const long long &num) {\n        string ans = to_string(num);\n        reverse(ans.begin(), ans.end());\n        return stoll(ans);\n    }\n};"
        }
    ]
}