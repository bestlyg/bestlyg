{
    "id": "560",
    "name": "560.和为K的子数组",
    "url": "https://leetcode.cn/problems/subarray-sum-equals-k",
    "desc": "给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。",
    "solutions": [
        {
            "date": "2020-05-15",
            "time": 88,
            "memory": 40.8,
            "script": "javascript",
            "desc": "由于前 N 项和是前 N-1 项+第 N 项组成，前 N 项和-前 J 项和=K，即前 J 项和=前 N 项和-K。",
            "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar subarraySum = function (nums, k) {\n  const map = new Map().set(0, 1);\n  let sum = 0,\n    count = 0,\n    nowNum;\n  for (const num of nums) {\n    sum += num;\n    nowNum = sum - k;\n    if (map.has(nowNum)) count += map.get(nowNum);\n    if (map.has(sum)) map.set(sum, map.get(sum) + 1);\n    else map.set(sum, 1);\n  }\n  return count;\n};"
        },
        {
            "date": "2021-12-23",
            "time": 72,
            "memory": 40.7,
            "script": "cpp",
            "desc": "前缀和。",
            "code": "class Solution {\n   public:\n    int subarraySum(vector<int>& nums, int k) {\n        unordered_map<int, int> mmap;\n        int sum = 0, ans = 0;\n        mmap[0] = 1;\n        for (auto& num : nums) {\n            sum += num;\n            if (mmap[sum - k]) ans += mmap[sum - k];\n            mmap[sum]++;\n        }\n        return ans;\n    }\n};"
        }
    ],
    "tagList": [
        "数组",
        "哈希表",
        "前缀和"
    ],
    "level": "Medium"
}