{
    "name": "513. 找树左下角的值",
    "url": "https://leetcode-cn.com/problems/find-bottom-left-tree-value/",
    "difficulty": "中等",
    "tag": [
        "树",
        "深度优先搜索",
        "广度优先搜索",
        "二叉树"
    ],
    "desc": "给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。",
    "solutions": [
        {
            "date": 1626796800000,
            "time": 88,
            "memory": 43.2,
            "script": "typescript",
            "desc": "层序遍历。",
            "code": "function findBottomLeftValue(root: TreeNode): number {\n  const queue: TreeNode[] = [root];\n  let size = 1;\n  let ans = root.val;\n  while (queue.length !== 0) {\n    const node = queue.shift()!;\n    node.left && queue.push(node.left);\n    node.right && queue.push(node.right);\n    if (--size === 0 && queue.length !== 0) {\n      ans = queue[0].val;\n      size = queue.length;\n    }\n  }\n  return ans;\n}"
        },
        {
            "date": 1655827200000,
            "time": 12,
            "memory": 21.1,
            "script": "cpp",
            "desc": "层序遍历。",
            "code": "class Solution {\n   public:\n    int findBottomLeftValue(TreeNode* root) {\n        queue<TreeNode*> q;\n        q.push(root);\n        int ans = root->val, size = 1;\n        while (q.size()) {\n            TreeNode* node = q.front();\n            q.pop();\n            if (node->left) q.push(node->left);\n            if (node->right) q.push(node->right);\n            if (--size == 0) {\n                size = q.size();\n                if (q.size()) ans = q.front()->val;\n            }\n        }\n        return ans;\n    }\n};"
        }
    ]
}