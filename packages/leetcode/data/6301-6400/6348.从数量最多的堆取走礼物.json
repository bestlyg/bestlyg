{
    "name": "6348.从数量最多的堆取走礼物",
    "url": "https://leetcode.cn/problems/take-gifts-from-the-richest-pile/",
    "difficulty": "简单",
    "tag": [
        "广度优先搜索",
        "数组",
        "矩阵"
    ],
    "desc": "给你一个整数数组 gifts ，表示各堆礼物的数量。返回在 k 秒后剩下的礼物数量。",
    "solutions": [
        {
            "script": "cpp",
            "time": 8,
            "memory": 9,
            "desc": "堆。",
            "code": "class Solution {\n    public:\n        long long pickGifts(vector<int>& gifts, int k) {\n            priority_queue<int> q;\n            for (auto &g : gifts) q.push(g);\n            for (int i = 0; i < k; i++) {\n                int val = q.top();\n                q.pop();\n                q.push(sqrt(val));\n            }\n            long long ans = 0;\n            while (q.size()) {\n                ans += q.top();\n                q.pop();\n            }\n            return ans;\n        }\n    };",
            "date": 1675526400000
        },
        {
            "script": "python3",
            "time": 32,
            "memory": 15.1,
            "desc": "同上。",
            "code": "class Solution:\n    def pickGifts(self, gifts: List[int], k: int) -> int:\n        for i in range(len(gifts)):\n            gifts[i] = -gifts[i]\n        heapq.heapify(gifts)\n        for _ in range(k):\n            val = heapq.heappop(gifts)\n            heapq.heappush(gifts, -math.floor(math.sqrt(-val)))\n        return -sum(gifts)",
            "date": 1675526400000
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 1.9,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn pick_gifts(gifts: Vec<i32>, k: i32) -> i64 {\n        use std::collections::BinaryHeap;\n        let mut heap = BinaryHeap::new();\n        for g in gifts {\n            heap.push(g);\n        }\n        let mut ans = 0;\n        for _ in 0..k {\n            let val = heap.pop().unwrap();\n            heap.push((val as f64).sqrt() as i32);\n        }\n        while !heap.is_empty() {\n            ans += heap.pop().unwrap() as i64;\n        }\n        ans\n    }\n}",
            "date": 1675526400000
        }
    ]
}