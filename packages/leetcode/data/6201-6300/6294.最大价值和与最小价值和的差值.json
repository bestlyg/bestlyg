{
    "name": "6294.最大价值和与最小价值和的差值",
    "url": "https://leetcode.cn/problems/difference-between-maximum-and-minimum-price-sum/",
    "difficulty": "困难",
    "tag": [],
    "desc": "请你返回所有节点作为根节点的选择中，最大 的 开销 为多少。",
    "solutions": [
        {
            "script": "cpp",
            "time": 360,
            "memory": 191.3,
            "desc": "。",
            "code": "class Solution {\npublic:\n    typedef long long ll;\n    typedef pair<ll, ll> pll;\n    ll maxOutput(int n, vector<vector<int>>& edges, vector<int>& price) {\n        vector<vector<int>> nodes(n);\n        for (auto &e : edges) {\n            nodes[e[0]].push_back(e[1]);\n            nodes[e[1]].push_back(e[0]);\n        }\n        ll ans = 0;\n        function<pll(int, int)> dfs = [&](int cur, int parent) -> pll {\n            ll p = price[cur], max1 = p, max2 = 0;\n            for (auto &child : nodes[cur]) {\n                if (child == parent) continue;\n                auto res = dfs(child, cur);\n                ans = max(ans, max(max1 + res.second, max2 + res.first));\n                max1 = max(max1, res.first + p);\n                max2 = max(max2, res.second + p);\n            }\n            return make_pair(max1, max2);\n        };\n        dfs(0, -1);\n        return ans;\n    }\n};",
            "date": 1673712000000
        },
        {
            "script": "rust",
            "time": 48,
            "memory": 25.6,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn max_output(n: i32, edges: Vec<Vec<i32>>, price: Vec<i32>) -> i64 {\n        let n = n as usize;\n        let mut nodes: Vec<Vec<i32>> = vec![vec![]; n];\n        for e in edges {\n            nodes[e[0] as usize].push(e[1]);\n            nodes[e[1] as usize].push(e[0]);\n        }\n        Solution::dfs(&nodes, &price, &mut 0, 0, -1).0\n    }\n    fn dfs(\n        nodes: &Vec<Vec<i32>>,\n        price: &Vec<i32>,\n        ans: &mut i64,\n        cur: i32,\n        parent: i32,\n    ) -> (i64, i64, i64) {\n        let p = price[cur as usize] as i64;\n        let mut max1 = p;\n        let mut max2 = 0;\n        for child in (*nodes)[cur as usize].iter() {\n            if *child != parent {\n                let (_, res_max1, res_max2) = Solution::dfs(nodes, price, ans, *child, cur);\n                *ans = *ans.max(&mut (res_max1 + max2)).max(&mut (res_max2 + max1));\n                max1 = max1.max(res_max1 + p);\n                max2 = max2.max(res_max2 + p);\n            }\n        }\n        (*ans, max1, max2)\n    }\n}",
            "date": 1673712000000
        }
    ]
}