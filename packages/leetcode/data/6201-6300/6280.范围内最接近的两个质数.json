{
    "name": "6280.范围内最接近的两个质数",
    "url": "https://leetcode.cn/problems/closest-prime-numbers-in-range/",
    "difficulty": "中等",
    "tag": [],
    "desc": "请你返回正整数数组 ans = [nums1, nums2] 。",
    "solutions": [
        {
            "date": 1672502400000,
            "time": 248,
            "memory": 10.2,
            "script": "cpp",
            "desc": "计算质数表后统计。",
            "code": "class Solution {\npublic:\n    int dp[1000005] = {0};\n    int left, right;\n    void load() {\n        for (int i = 2; i <= right; i++) {\n            if (dp[i] == 0) dp[++dp[0]] = i;\n            for (int j = 1; j <= dp[0] && i * dp[j] < 1000005; j++) {\n                dp[i * dp[j]] = 1;\n                if (i % dp[j] == 0) break;\n            }\n        }\n    }\n    vector<int> closestPrimes(int left, int right) {\n        this->left = left;\n        this->right = right;\n        load();\n        int start = 1;\n        while (start <= dp[0] && dp[start] < left) start++;\n        start++;\n        vector<int> ans(2, -1);\n        if (start > dp[0]) return ans;\n        ans[0] = dp[start - 1]; ans[1] = dp[start];\n        for (int i = start + 1; i <= dp[0] && dp[i] <= right; i++) {\n            if (dp[i] - dp[i - 1] < ans[1] - ans[0]) {\n                ans[0] = dp[i - 1];\n                ans[1] = dp[i];\n            }\n        }\n        return ans;\n    }\n};"
        },
        {
            "date": 1672502400000,
            "time": 180,
            "memory": 9.6,
            "script": "rust",
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn closest_primes(left: i32, right: i32) -> Vec<i32> {\n        let primes = Solution::get_primes(right as usize);\n        let mut start = 1;\n        while start <= primes[0] && primes[start] < left as usize {\n            start += 1;\n        }\n        let mut ans: Vec<i32> = vec![-1; 2];\n        if start + 1 <= primes[0] {\n            start += 1;\n            ans[0] = primes[start - 1] as i32;\n            ans[1] = primes[start] as i32;\n            while start + 1 <= primes[0] {\n                start += 1;\n                if ((primes[start] - primes[start - 1]) as i32) < ans[1] - ans[0] {\n                    ans[0] = primes[start - 1] as i32;\n                    ans[1] = primes[start] as i32;\n                }\n            }\n        }\n        ans\n    }\n    fn get_primes(max: usize) -> Vec<usize> {\n        let mut ans = vec![0; 1000005];\n        for i in 2..=max {\n            if ans[i] == 0 {\n                ans[0] += 1;\n                let idx = ans[0];\n                ans[idx] = i;\n            }\n            for j in 1..=ans[0] {\n                if ans[j] * i >= 1000005 {\n                    break;\n                }\n                let idx = ans[j] * i;\n                ans[idx] = 1;\n                if i % ans[j] == 0 {\n                    break;\n                }\n            }\n        }\n        ans\n    }\n}"
        }
    ]
}