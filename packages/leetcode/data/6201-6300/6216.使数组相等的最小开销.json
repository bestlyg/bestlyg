{
    "name": "6216. 使数组相等的最小开销",
    "url": "https://leetcode.cn/problems/minimum-cost-to-make-array-equal/",
    "difficulty": "困难",
    "tag": [],
    "desc": "请你返回使 nums 中所有元素 相等 的 最少 总开销。",
    "solutions": [
        {
            "date": 1666454400000,
            "time": 180,
            "memory": 82.3,
            "script": "cpp",
            "desc": "贪心，最后化为的值一定是 nums 中存在的值，通过按值的大小排序后，结果成凹型，找到最低点即结果。",
            "code": "struct Node {\n    int num, cost;\n    Node(int num, int cost): num(num), cost(cost) {}\n    long long getCost(int num) {\n        return abs(static_cast<long long>(num) - this->num) * cost;\n    }\n};\nclass Solution {\npublic:\n    long long minCost(vector<int>& nums, vector<int>& cost) {\n        int n = nums.size();\n        vector<Node> list;\n        for (int i = 0; i < n; i++) list.push_back(Node(nums[i], cost[i]));\n        sort(list.begin(), list.end(), [](Node &a, Node &b){ return a.num < b.num; });\n        int l = 0, r = n - 1;\n        long long ans = 0;\n        while (l < r) {\n            int m1 = (l + r) / 2, m2 = m1 + 1;\n            long long m1cost = comp(list, list[m1].num), m2cost = comp(list, list[m2].num);\n            if (m1cost >= m2cost) l = m2, ans = m2cost;\n            else r = m1, ans = m1cost;\n        }\n        return ans;\n    }\n    long long comp(vector<Node> &list, int num) {\n        long long ans = 0;\n        for (int i = 0; i < list.size(); i++) {\n            ans += list[i].getCost(num);\n        }\n        return ans;\n    }\n};"
        }
    ]
}