{
    "name": "6268. 查询树中环的长度",
    "url": "https://leetcode.cn/problems/cycle-length-queries-in-a-tree/",
    "difficulty": "困难",
    "tag": [],
    "desc": "请你返回一个长度为 m 的数组 answer ，其中 answer[i] 是第 i 个查询的结果。",
    "solutions": [
        {
            "date": 1671292800000,
            "time": 324,
            "memory": 95.9,
            "script": "cpp",
            "desc": "最近公共祖先。",
            "code": "struct Node{\n    int v, p;\n    unordered_set<int> l, r;\n};\nclass Solution {\npublic:\n    vector<int> cycleLengthQueries(int n, vector<vector<int>>& queries) {\n        vector<int> ans(queries.size());\n        for (int i = 0; i < queries.size(); i++) {\n            ans[i] = query(n, queries[i]);\n        }\n        return ans;\n    }\n    int query(int n, vector<int> &q) {\n        int n1 = q[0], n2 = q[1],\n            l1 = getLevel(n1), l2 = getLevel(n2);\n        if (l1 < l2) {\n            swap(n1, n2);\n            swap(l1, l2);\n        }\n        // cout << \"n1 = \" << n1 << \", l1 = \" << l1 << \", n2 = \" << n2 << \", l2 = \" << l2 << endl;\n        int ans = 0;\n        while (l1 > l2) {\n            n1 = getParent(n1);\n            l1 = getLevel(n1);\n            ans++;\n        }\n        while (n1 != n2) {\n            ans += 2;\n            n1 = getParent(n1);\n            n2 = getParent(n2);\n        }\n        // cout << \"n1 = \" << n1 << \", l1 = \" << l1 << \", n2 = \" << n2 << \", l2 = \" << l2 << endl;\n        return ans + 1;\n    }\n    int comp(int n1, int n2) {\n        return 0;\n    }\n    unordered_map<int, int> m;\n    int getLevel(int val) {\n        if (m.count(val)) return m[val];\n        int i = 1, level = 0;\n        while (i <= val) i *= 2, level++;\n        return m[val] = level;\n    }\n    int getParent(int v) {\n        if (v == 1) return v;\n        return v / 2;\n    }\n};"
        }
    ]
}