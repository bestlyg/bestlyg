{
    "name": "6279. 数组乘积中的不同质因数数目",
    "url": "https://leetcode.cn/problems/distinct-prime-factors-of-product-of-array/",
    "difficulty": "中等",
    "tag": [],
    "desc": "给给你一个正整数数组 nums ，对 nums 所有元素求积之后，找出并返回乘积中 不同质因数 的数目。",
    "solutions": [
        {
            "date": 1672502400000,
            "time": 80,
            "memory": 18.3,
            "script": "cpp",
            "desc": "遍历。",
            "code": "class Solution {\npublic:\n    int distinctPrimeFactors(vector<int>& nums) {\n        unordered_set<int> s;\n        for (auto &num : nums) {\n            load(s, num);\n        }\n        return s.size();\n    }\n    void load(unordered_set<int> &s, int num) {\n        for (int i = 2; i <= num; i++) {\n            if (num % i == 0) {\n                s.insert(i);\n                while (num % i == 0) num /= i;\n            }\n        }\n    }\n};"
        },
        {
            "date": 1672502400000,
            "time": 84,
            "memory": 2.2,
            "script": "rust",
            "desc": "遍历。",
            "code": "use std::collections::HashSet;\nimpl Solution {\n    pub fn distinct_prime_factors(nums: Vec<i32>) -> i32 {\n        let mut set = HashSet::<i32>::new();\n        for num in nums {\n            Solution::load(&mut set, num);\n        }\n        set.len() as i32\n    }\n    fn load(set: &mut HashSet<i32>, num: i32) {\n        let mut num = num;\n        let mut i = 2;\n        while i <= num {\n            if i > num {\n                break;\n            }\n            if num % i == 0 {\n                set.insert(i);\n            }\n            while num % i == 0 {\n                num /= i;\n            }\n            i += 1;\n        }\n    }\n}"
        }
    ]
}