{
    "id": "2403",
    "name": "2316.统计无向图中无法互相到达点对数",
    "url": "https://leetcode.cn/problems/count-unreachable-pairs-of-nodes-in-an-undirected-graph",
    "difficulty": "中等",
    "tag": [
        "深度优先搜索",
        "广度优先搜索",
        "并查集",
        "图"
    ],
    "desc": "给你一个整数 n ，表示一张 无向图 中有 n 个节点，编号为 0 到 n - 1 。同时给你一个二维整数数组 edges ，其中 edges[i] = [ai, bi] 表示节点 ai 和 bi 之间有一条 无向 边。请你返回 无法互相到达 的不同 点对数目 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 352,
            "memory": 130.11,
            "desc": "并查集。",
            "code": "class UnionFind {\npublic:\n    int n;\n    vector<int> data, cnt;\n    UnionFind(int n) : n(n), data(vector<int>(n, 0)), cnt(vector<int>(n, 1)) {\n        iota(data.begin(), data.end(), 0);\n    }\n    int size(int v) { return cnt[find(v)]; }\n    int find(int v) {\n        if (data[v] == v) return v;\n        return data[v] = find(data[v]);\n    }\n    void uni(int v1, int v2) {\n        int p1 = find(v1), p2 = find(v2);\n        if (p1 != p2) cnt[p1] += cnt[p2], data[p2] = p1;\n    }\n    bool same(int v1, int v2) { return find(v1) == find(v2); }\n};\nclass Solution {\npublic:\n    long long countPairs(int n, vector<vector<int>>& edges) {\n        UnionFind uf(n);\n        for (auto &edge : edges) uf.uni(edge[0], edge[1]);\n        long long res = 0;\n        for (int i = 0; i < n; i++) {\n            if (uf.data[i] != i) continue;\n            res += (long long)uf.cnt[i] * (n - uf.cnt[i]);\n        }\n        return res / 2;\n    }\n};",
            "date": 1697817600000
        },
        {
            "script": "python",
            "time": 408,
            "memory": 61.26,
            "desc": "同上。",
            "code": "class UnionFind:\n    def __init__(self, n) -> None:\n        self.n = n\n        self.data = [i for i in range(0, n)]\n        self.cnt = [1] * n\n\n    def size(self, v: int) -> int:\n        return self.cnt[self.find(v)]\n\n    def find(self, v: int) -> int:\n        if self.data[v] != v:\n            self.data[v] = self.find(self.data[v])\n        return self.data[v]\n\n    def uni(self, v1: int, v2: int):\n        p1 = self.find(v1)\n        p2 = self.find(v2)\n        if p1 != p2:\n            self.cnt[p1] += self.cnt[p2]\n            self.data[p2] = p1\n\n    def same(self, v1: int, v2: int):\n        return self.find(v1) == self.find(v2)\n\nclass Solution:\n    def countPairs(self, n: int, edges: List[List[int]]) -> int:\n        uf = UnionFind(n)\n        for [n1, n2] in edges:\n            uf.uni(n1, n2)\n        return sum(uf.cnt[i] * (n - uf.cnt[i]) if uf.data[i] == i else 0 for i in range(n)) // 2\n",
            "date": 1697817600000
        },
        {
            "script": "rust",
            "time": 36,
            "memory": 14.85,
            "desc": "同上。",
            "code": "pub struct UnionFind {\n    pub n: usize,\n    pub data: Vec<usize>,\n    pub cnt: Vec<usize>,\n}\nimpl UnionFind {\n    pub fn new(n: usize) -> Self {\n        let mut data = vec![0; n];\n        for i in 0..data.len() {\n            data[i] = i;\n        }\n        Self {\n            n,\n            data,\n            cnt: vec![1; n],\n        }\n    }\n    pub fn size(&mut self, v: usize) -> usize {\n        let idx = self.find(v);\n        self.cnt[idx]\n    }\n    pub fn find(&mut self, v: usize) -> usize {\n        if self.data[v] != v {\n            self.data[v] = self.find(self.data[v]);\n        }\n        self.data[v]\n    }\n    pub fn uni(&mut self, v1: usize, v2: usize) {\n        let p1 = self.find(v1);\n        let p2 = self.find(v2);\n        if p1 != p2 {\n            self.cnt[p1] += self.cnt[p2];\n            self.data[p2] = p1;\n        }\n    }\n    pub fn same(&mut self, v1: usize, v2: usize) -> bool {\n        self.find(v1) == self.find(v2)\n    }\n}\nimpl Solution {\n    pub fn count_pairs(n: i32, edges: Vec<Vec<i32>>) -> i64 {\n        let n = n as usize;\n        let mut uf = UnionFind::new(n);\n        for edge in edges {\n            uf.uni(edge[0] as usize, edge[1] as usize);\n        }\n        (0..n)\n            .map(|i| {\n                if uf.data[i] != i {\n                    0\n                } else {\n                    uf.cnt[i] * (n - uf.cnt[i])\n                }\n            })\n            .sum::<usize>() as i64\n            / 2\n    }\n}",
            "date": 1697817600000
        }
    ]
}