{
    "name": "2383.赢得比赛需要的最少训练时长",
    "url": "https://leetcode.cn/problems/minimum-hours-of-training-to-win-a-competition/",
    "difficulty": "中等",
    "tag": [
        "广度优先搜索",
        "数组",
        "矩阵"
    ],
    "desc": "返回击败全部 n 个对手需要训练的 最少 小时数目。",
    "solutions": [
        {
            "script": "cpp",
            "time": 0,
            "memory": 10.9,
            "desc": "遍历。",
            "code": "class Solution {\npublic:\n    int minNumberOfHours(int initialEnergy, int initialExperience, vector<int>& energy, vector<int>& experience) {\n        int res = 0, esum = initialExperience;\n        res += max(accumulate(energy.begin(), energy.end(), 0) - initialEnergy + 1, 0);\n        for (auto &e : experience) {\n            if (e >= esum) res += e - esum + 1, esum += e - esum + 1;\n            esum += e;\n        }\n        return res;\n    }\n};",
            "date": 1678636800000
        },
        {
            "script": "cpp",
            "time": 4,
            "memory": 10.8,
            "desc": "遍历。",
            "code": "class Solution {\npublic:\n    int minNumberOfHours(int initialEnergy, int initialExperience, vector<int>& energy, vector<int>& experience) {\n        int res = 0;\n        for (int i = 0; i < energy.size(); i++) {\n            if (initialEnergy <= energy[i]) \n                res += energy[i] - initialEnergy + 1, initialEnergy += energy[i] - initialEnergy + 1;\n            initialEnergy -= energy[i];\n            if (initialExperience <= experience[i]) \n                res += experience[i] - initialExperience + 1, initialExperience += experience[i] - initialExperience + 1;\n            initialExperience += experience[i];\n        }\n        return res;\n    }\n};",
            "date": 1678636800000
        },
        {
            "script": "python3",
            "time": 36,
            "memory": 14.9,
            "desc": "同上。",
            "code": "class Solution:\ndef minNumberOfHours(self, initialEnergy: int, initialExperience: int, energy: List[int], experience: List[int]) -> int:\n    res = 0\n    for i in range(len(energy)):\n        if initialEnergy <= energy[i]:\n            res += energy[i] - initialEnergy + 1\n            initialEnergy += energy[i] - initialEnergy + 1\n        initialEnergy -= energy[i]\n        if initialExperience <= experience[i]:\n            res += experience[i] - initialExperience + 1\n            initialExperience += experience[i] - initialExperience + 1\n        initialExperience += experience[i]\n    return res",
            "date": 1678636800000
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 2.2,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn min_number_of_hours(\n        mut initial_energy: i32,\n        mut initial_experience: i32,\n        energy: Vec<i32>,\n        experience: Vec<i32>,\n    ) -> i32 {\n        let mut res = 0;\n        for i in 0..energy.len() {\n            if initial_energy <= energy[i] {\n                res += energy[i] - initial_energy + 1;\n                initial_energy += energy[i] - initial_energy + 1;\n            }\n            initial_energy -= energy[i];\n            if initial_experience <= experience[i] {\n                res += experience[i] - initial_experience + 1;\n                initial_experience += experience[i] - initial_experience + 1;\n            }\n            initial_experience += experience[i];\n        }\n        res\n    }\n}",
            "date": 1678636800000
        }
    ]
}