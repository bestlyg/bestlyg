{
    "id": "2428",
    "name": "2352.相等行列对",
    "url": "https://leetcode.cn/problems/equal-row-and-column-pairs",
    "desc": "给你一个下标从 0 开始、大小为 n x n 的整数矩阵 grid ，返回满足 Ri 行和 Cj 列相等的行列对 (Ri, Cj) 的数目。",
    "solutions": [
        {
            "script": "cpp",
            "time": 224,
            "memory": 43,
            "desc": "哈希存储。",
            "code": "class Solution {\npublic:\n    int equalPairs(vector<vector<int>>& grid) {\n        unordered_map<string, int> rows;\n        int res = 0, n = grid.size();\n        for (int i = 0; i < n; i++) {\n            string key = \"\";\n            for (int j = 0; j < n; j++) key += to_string(grid[i][j]) + \",\";\n            rows[key]++;\n        }\n        for (int j = 0; j < n; j++) {\n            string key = \"\";\n            for (int i = 0; i < n; i++) key += to_string(grid[i][j]) + \",\";\n            res += rows[key];\n        }\n        return res;\n    }\n};",
            "date": "2023-06-06"
        },
        {
            "script": "python",
            "time": 212,
            "memory": 20.6,
            "desc": "同上。",
            "code": "class Solution:\n    def equalPairs(self, grid: List[List[int]]) -> int:\n        rows = Counter()\n        res = 0\n        n = len(grid)\n        for i in range(n):\n            key = \"\"\n            for j in range(n):\n                key += str(grid[i][j]) + \",\"\n            rows[key] += 1\n        for j in range(n):\n            key = \"\"\n            for i in range(n):\n                key += str(grid[i][j]) + \",\"\n            res += rows[key]\n        return res",
            "date": "2023-06-06"
        },
        {
            "script": "rust",
            "time": 44,
            "memory": 3,
            "desc": "同上。",
            "code": "impl Solution {\npub fn equal_pairs(grid: Vec<Vec<i32>>) -> i32 {\n    let mut rows = std::collections::HashMap::<String, i32>::new();\n    let mut res = 0;\n    let n = grid.len();\n    for i in 0..n {\n        let mut key = String::new();\n        for j in 0..n {\n            key.push_str(&format!(\"{}\", grid[i][j]));\n            key.push(',');\n        }\n        *rows.entry(key).or_insert(0) += 1;\n    }\n    for j in 0..n {\n        let mut key = String::new();\n        for i in 0..n {\n            key.push_str(&format!(\"{}\", grid[i][j]));\n            key.push(',');\n        }\n        res += *rows.entry(key).or_insert(0);\n    }\n    res\n}\n}",
            "date": "2023-06-06"
        }
    ],
    "tagList": ["数组", "哈希表", "矩阵", "模拟"],
    "level": "Medium"
}
