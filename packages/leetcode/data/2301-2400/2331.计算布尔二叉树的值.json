{
    "id": "2416",
    "name": "2331.计算布尔二叉树的值",
    "url": "https://leetcode.cn/problems/evaluate-boolean-binary-tree",
    "desc": "返回根节点 root 的布尔运算值。",
    "solutions": [
        {
            "script": "cpp",
            "time": 12,
            "memory": 14.6,
            "desc": "dfs。",
            "code": "class Solution {\npublic:\n    bool dfs(TreeNode *node) {\n        if (node->val == 0) return false;\n        if (node->val == 1) return true;\n        if (node->left && node->val == 2) return dfs(node->left) || dfs(node->right);\n        if (node->left && node->val == 3) return dfs(node->left) && dfs(node->right);\n        return false;\n    }\n    bool evaluateTree(TreeNode* root) {\n        return dfs(root); \n    }\n};",
            "date": "2023-02-06"
        },
        {
            "script": "python",
            "time": 60,
            "memory": 15.8,
            "desc": "同上。",
            "code": "class Solution:\n    def dfs(self, node: Optional[TreeNode]) -> bool:\n        if node.val == 0: return False\n        if node.val == 1: return True\n        if node.left and node.val == 2: return self.dfs(node.left) or self.dfs(node.right)\n        if node.left and node.val == 3: return self.dfs(node.left) and self.dfs(node.right)\n        return False\n    def evaluateTree(self, root: Optional[TreeNode]) -> bool:\n        return self.dfs(root)",
            "date": "2023-02-06"
        },
        {
            "script": "rust",
            "time": 4,
            "memory": 2.4,
            "desc": "同上。",
            "code": "use std::cell::RefCell;\nuse std::rc::Rc;\nimpl Solution {\n    pub fn evaluate_tree(node: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        let node = node.unwrap();\n        let node = node.as_ref().borrow();\n        if node.val == 0 {\n            return false;\n        }\n        if node.val == 1 {\n            return true;\n        }\n        if node.left.is_some() && node.val == 2 {\n            return Solution::evaluate_tree(node.left.clone()) || Solution::evaluate_tree(node.right.clone());\n        }\n        if node.left.is_some() && node.val == 3 {\n            return Solution::evaluate_tree(node.left.clone()) && Solution::evaluate_tree(node.right.clone());\n        }\n        return false;\n    }\n}",
            "date": "2023-02-06"
        }
    ],
    "tagList": [
        "树",
        "深度优先搜索",
        "二叉树"
    ],
    "level": "Easy"
}