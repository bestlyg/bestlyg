{
    "id": "2447",
    "name": "2363.合并相似的物品",
    "url": "https://leetcode.cn/problems/merge-similar-items",
    "difficulty": "简单",
    "tag": [
        "数组",
        "哈希表",
        "有序集合",
        "排序"
    ],
    "desc": "请你返回一个二维数组 ret，其中 ret[i] = [valuei, weighti]， weighti 是所有价值为 valuei 物品的 重量之和 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 24,
            "memory": 6.4,
            "desc": "遍历。",
            "code": "class Solution {\npublic:\n    vector<vector<int>> mergeSimilarItems(vector<vector<int>>& items1, vector<vector<int>>& items2) {\n        map<int, int> m;\n        for (auto &item : items1) m[item[0]] += item[1];\n        for (auto &item : items2) m[item[0]] += item[1];\n        vector<vector<int>> res;\n        for (auto &item : m) res.push_back({ item.first, item.second });\n        return res;\n    }\n};",
            "date": 1677513600000
        },
        {
            "script": "python3",
            "time": 36,
            "memory": 15.5,
            "desc": "同上。",
            "code": "class Solution:\n    def mergeSimilarItems(self, items1: List[List[int]], items2: List[List[int]]) -> List[List[int]]:\n        l = [0] * 1005\n        for [k, v] in items1:\n            l[k] += v\n        for [k, v] in items2:\n            l[k] += v\n        res = []\n        for i in range(1005):\n            if l[i]:\n                res.append([i, l[i]])\n        return res",
            "date": 1677513600000
        },
        {
            "script": "rust",
            "time": 4,
            "memory": 2.3,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn merge_similar_items(items1: Vec<Vec<i32>>, items2: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        let mut m = std::collections::HashMap::<i32, i32>::new();\n        for item in items1 {\n            let v = m.entry(item[0]).or_insert(0);\n            *v += item[1];\n        }\n        for item in items2 {\n            let v = m.entry(item[0]).or_insert(0);\n            *v += item[1];\n        }\n        let mut res = m\n            .into_iter()\n            .map(|(k, v)| vec![k, v])\n            .collect::<Vec<Vec<i32>>>();\n        res.sort_by_key(|item| item[0]);\n        res\n    }\n}",
            "date": 1677513600000
        }
    ]
}