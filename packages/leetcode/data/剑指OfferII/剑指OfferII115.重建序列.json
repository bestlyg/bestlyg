{
    "id": "1000314",
    "name": "剑指OfferII115.重建序列",
    "url": "https://leetcode.cn/problems/ur2n8P",
    "difficulty": "中等",
    "tag": [
        "图",
        "拓扑排序",
        "数组"
    ],
    "desc": "检查 nums 是否是唯一的最短 超序列 。",
    "solutions": [
        {
            "date": 1658505600000,
            "time": 188,
            "memory": 107.3,
            "script": "cpp",
            "desc": "判断是否只有唯一的拓扑排序。",
            "code": "class Solution {\n   public:\n    struct node {\n        unordered_set<int> children, parent;\n    };\n    bool sequenceReconstruction(vector<int>& nums,\n                                vector<vector<int>>& sequences) {\n        int n = nums.size();\n        vector<node> m(n + 1, node());\n        for (auto& item : sequences) {\n            for (int i = 0; i < item.size() - 1; i++) {\n                int parent = item[i], child = item[i + 1];\n                m[parent].children.insert(child);\n                m[child].parent.insert(parent);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            int num = nums[i];\n            if (m[num].parent.size()) return false;\n            int nextcnt = 0;\n            for (auto& child : m[num].children) {\n                m[child].parent.erase(num);\n                if (m[child].parent.size() == 0) nextcnt++;\n            }\n            if (i < n - 1 && nextcnt != 1) return false;\n        }\n        return true;\n    }\n};"
        }
    ]
}