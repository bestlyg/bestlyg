{
    "name": "68.文本左右对齐",
    "url": "https://leetcode-cn.com/problems/text-justification/",
    "difficulty": "困难",
    "tag": [
        "字符串",
        "模拟"
    ],
    "desc": "给定一个单词数组和一个长度 maxWidth，重新排版单词，使其成为每行恰好有 maxWidth 个字符，且左右两端对齐的文本。",
    "solutions": [
        {
            "date": 1631116800000,
            "time": 76,
            "memory": 39.4,
            "script": "typescript",
            "desc": "逐个分解单词组进行拼接。",
            "code": "function repeat(len: number) {\n  return ''.padEnd(len, ' ');\n}\nfunction fullJustify(words: string[], maxWidth: number): string[] {\n  let idx = 0;\n  const ans: string[] = [];\n  const n = words.length;\n  while (idx < n) {\n    let len = 0;\n    const list: string[] = [];\n    while (idx < n && len + words[idx].length <= maxWidth) {\n      const str = words[idx];\n      len += str.length + 1;\n      list.push(str);\n      idx++;\n    }\n    if (idx === n) {\n      ans.push(list.join(' ').padEnd(maxWidth, ' '));\n    } else if (list.length === 1) {\n      ans.push(list[0].padEnd(maxWidth, ' '));\n    } else {\n      const strlen = list.join('').length;\n      let empty = maxWidth - strlen;\n      const emptyList: number[] = new Array(list.length - 1).fill(0);\n      for (let i = 0; empty !== 0; i = (i + 1) % (list.length - 1)) {\n        emptyList[i]++;\n        empty--;\n      }\n      let str = '';\n      for (let i = 0; i < list.length; i++) {\n        str += list[i] + repeat(emptyList.shift()!);\n      }\n      ans.push(str);\n    }\n  }\n  return ans;\n}"
        }
    ]
}