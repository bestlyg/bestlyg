{
    "id": "56",
    "name": "56.合并区间",
    "url": "https://leetcode.cn/problems/merge-intervals",
    "desc": "给出一个区间的集合，请合并所有重叠的区间。",
    "solutions": [
        {
            "date": "2020-04-16",
            "time": 104,
            "memory": 37.2,
            "script": "javascript",
            "desc": "先排序，再一次判断是否包含。",
            "code": "/**\n * @param {number[][]} intervals\n * @return {number[][]}\n */\nvar merge = function (intervals) {\n  let res = [];\n  intervals = intervals.sort((arr1, arr2) => arr1[0] - arr2[0]);\n  const include = (num, left, right) => num >= left && num <= right;\n  for (let i = 0, len = intervals.length; i < len; i++) {\n    if (i === 0) {\n      res.push(intervals[i]);\n      continue;\n    }\n    const arr = intervals[i];\n    const [left, right] = arr;\n    const oldArr = res.pop();\n    const [oldLeft, oldRight] = oldArr;\n    if (include(left, oldLeft, oldRight)) {\n      if (include(right, oldLeft, oldRight)) res.push(oldArr);\n      else res.push([oldLeft, right]);\n    } else {\n      res.push(oldArr, arr);\n    }\n  }\n  return res;\n};"
        },
        {
            "date": "2021-12-23",
            "time": 16,
            "memory": 13.7,
            "script": "cpp",
            "desc": "排序后合并。",
            "code": "class Solution {\n   public:\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\n        sort(intervals.begin(), intervals.end());\n        vector<vector<int>> ans;\n        for (auto& interval : intervals) {\n            if (ans.size() > 0 && ans[ans.size() - 1][1] >= interval[0]) {\n                ans[ans.size() - 1][1] =\n                    max(interval[1], ans[ans.size() - 1][1]);\n            } else {\n                ans.push_back(interval);\n            }\n        }\n        return ans;\n    }\n};"
        },
        {
            "script": "python",
            "time": 56,
            "memory": 19.6,
            "desc": "同上。",
            "code": "class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        intervals.sort(key=lambda o: o[0])\n        res = []\n        for [start, end] in intervals:\n            if not len(res) or res[-1][1] < start:\n                res.append([start, end])\n            else:\n                res[-1][1] = max(res[-1][1], end)\n        return res",
            "date": "2023-08-27"
        },
        {
            "script": "rust",
            "time": 8,
            "memory": 2.83,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn merge(mut intervals: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        intervals.sort_by_key(|o| o[0]);\n        let mut res: Vec<Vec<i32>> = vec![];\n        for item in intervals {\n            if res.is_empty() || res.last().unwrap()[1] < item[0] {\n                res.push(item);\n            } else {\n                res.last_mut().unwrap()[1] = res.last_mut().unwrap()[1].max(item[1]);\n            }\n        }\n        res\n    }\n}",
            "date": "2023-08-27"
        }
    ],
    "tagList": ["数组", "排序"],
    "level": "Medium"
}
