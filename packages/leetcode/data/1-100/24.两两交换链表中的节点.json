{
    "name": "24.两两交换链表中的节点",
    "url": "https://leetcode-cn.com/problems/swap-nodes-in-pairs/",
    "difficulty": "中等",
    "tag": [
        "链表"
    ],
    "desc": "给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。",
    "solutions": [
        {
            "date": 1602518400000,
            "time": 96,
            "memory": 39.5,
            "script": "typescript",
            "desc": "入队后两两交换顺序后重新组合。",
            "code": "function swapPairs(head: ListNode | null): ListNode | null {\n  if (head === null) return null;\n  const queue: ListNode[] = [];\n  let temp: ListNode | null = head;\n  while (temp !== null) {\n    queue.push(temp);\n    temp = temp.next;\n    queue[queue.length - 1].next = null;\n  }\n  for (let i = 0, l = queue.length; i < l; i++) {\n    if (i & 1) {\n      let tempNode = queue[i];\n      queue[i] = queue[i - 1];\n      queue[i - 1] = tempNode;\n    }\n  }\n  queue.forEach((v, i, arr) => {\n    if (i !== 0) {\n      arr[i - 1].next = v;\n    }\n  });\n  return queue[0];\n}"
        },
        {
            "date": 1602518400000,
            "time": 84,
            "memory": 39.6,
            "script": "typescript",
            "desc": "递归。",
            "code": "function swapPairs(head: ListNode | null): ListNode | null {\n  if (head === null || head.next === null) return head;\n  const nextHead = head.next;\n  head.next = swapPairs(nextHead.next);\n  nextHead.next = head;\n  return nextHead;\n}"
        },
        {
            "date": 1602518400000,
            "time": 124,
            "memory": 39.3,
            "script": "typescript",
            "desc": "迭代。",
            "code": "function swapPairs(head: ListNode | null): ListNode | null {\n  let tempNode = new ListNode(0, head);\n  const headNode = tempNode;\n  while (tempNode.next?.next) {\n    const node1 = tempNode.next;\n    const node2 = tempNode.next.next;\n    tempNode.next = node2;\n    node1.next = node2.next;\n    node2.next = node1;\n    tempNode = node1;\n  }\n  return headNode.next;\n}"
        },
        {
            "date": 1614960000000,
            "time": 88,
            "memory": 39.4,
            "script": "typescript",
            "desc": "进行每 2 个交换,25 题的特殊情况。",
            "code": "function _reverseList(head: ListNode, count: number): ListNode | null {\n  if (count === 1 || head.next === null) return head;\n  const tail = head.next;\n  const nextList = _reverseList(tail, count - 1);\n  head.next = tail.next;\n  tail.next = head;\n  return nextList;\n}\nfunction reverseList(head: ListNode, count: number): ListNode | null {\n  let temp: ListNode | null = head;\n  let c = count;\n  while (--c && temp) temp = temp.next;\n  return temp ? _reverseList(head, count) : head;\n}\nfunction swapPairs(head: ListNode | null): ListNode | null {\n  const dummyHead = new ListNode(0, head);\n  let temp: ListNode = dummyHead;\n  while (temp !== null && temp.next !== null) {\n    temp!.next = reverseList(temp.next!, 2);\n    let count = 2;\n    while (count-- && temp !== null) temp = temp.next!;\n  }\n  return dummyHead.next;\n}"
        },
        {
            "date": 1637251200000,
            "time": 0,
            "memory": 5.8,
            "script": "c",
            "desc": "dfs。",
            "code": "struct ListNode* swapPairs(struct ListNode* head){\n    if (!head) return NULL;\n    if (head->next == NULL) return head;\n    struct ListNode *next_node = head->next;\n    if (next_node->next != NULL) head->next = swapPairs(next_node->next);\n    else head->next = NULL;\n    next_node->next = head;\n    return next_node;\n}"
        }
    ]
}