{
    "id": "2",
    "name": "2.两数相加",
    "url": "https://leetcode.cn/problems/add-two-numbers",
    "difficulty": "中等",
    "tag": [
        "递归",
        "链表",
        "数学"
    ],
    "desc": "给出两个非空的链表用来表示两个非负的整数。其中，它们各自的位数是按照   逆序   的方式存储的，并且它们的每个节点只能存储   一位   数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。您可以假设除了数字 0 之外，这两个数都不会以 0  开头。",
    "solutions": [
        {
            "date": 1568908800000,
            "time": 144,
            "memory": 38.4,
            "script": "javascript",
            "desc": "创建第三个链表，其中每个值为前两个链表相加，然后再次循环判断是否有一个节点值大于等于 10，若存在则-10 且下一个节点值+1。",
            "code": "var addTwoNumbers = function (l1, l2) {\n  let node1 = l1,\n    node2 = l2;\n  let tempNode = new ListNode(node1.val + node2.val);\n  let node3 = tempNode;\n  while (node1.next !== null && node2.next !== null) {\n    node1 = node1.next;\n    node2 = node2.next;\n    tempNode.next = new ListNode(node1.val + node2.val);\n    tempNode = tempNode.next;\n  }\n  if (node1.next !== null) {\n    tempNode.next = node1.next;\n  }\n  if (node2.next !== null) {\n    tempNode.next = node2.next;\n  }\n  tempNode = node3;\n  while (tempNode !== null) {\n    if (tempNode.val >= 10) {\n      tempNode.val -= 10;\n      if (tempNode.next !== null) {\n        tempNode.next.val += 1;\n      } else {\n        tempNode.next = new ListNode(1);\n      }\n    }\n    tempNode = tempNode.next;\n  }\n  return node3;\n};"
        },
        {
            "date": 1568908800000,
            "time": 248,
            "memory": 46.2,
            "script": "javascript",
            "desc": "创建待返回链表 node3，创建进位参数 carry，遍历 l1 和 l2，如果节点 1+节点 2+carry 没有大于 10 则直接储存，若相加大于 10 则存入 carry，余数部分直接储存。",
            "code": "var addTwoNumbers = function (l1, l2) {\n  let tempNode = new ListNode(0);\n  let node3 = tempNode;\n  let carry = 0;\n  while (l1 !== null || l2 !== null) {\n    let x = l1 === null ? 0 : l1.val;\n    let y = l2 === null ? 0 : l2.val;\n    let sum = x + y + carry;\n    carry = Math.floor(sum / 10);\n    sum = Math.floor(sum % 10);\n    console.log(carry, sum);\n    tempNode.next = new ListNode(sum);\n    tempNode = tempNode.next;\n    if (l1 !== null) {\n      l1 = l1.next;\n    }\n    if (l2 !== null) {\n      l2 = l2.next;\n    }\n  }\n  if (carry === 1) {\n    tempNode.next = new ListNode(1);\n  }\n  return node3.next;\n};"
        },
        {
            "date": 1601740800000,
            "time": 144,
            "memory": 43.6,
            "script": "typescript",
            "desc": "遍历所有节点。",
            "code": "function addTwoNumbers(l1: ListNode | null, l2: ListNode | null): ListNode | null {\n  const list = new ListNode(0);\n  let temp = list;\n  let add = 0;\n  while (l1 !== null || l2 !== null) {\n    let sum = (l1?.val ?? 0) + (l2?.val ?? 0) + add;\n    add = 0;\n    if (sum >= 10) {\n      sum -= 10;\n      add++;\n    }\n    temp.next = new ListNode(sum);\n    temp = temp.next;\n    l1 = l1 === null ? null : l1.next;\n    l2 = l2 === null ? null : l2.next;\n  }\n  if (add !== 0) temp.next = new ListNode(add);\n  return list.next;\n}"
        },
        {
            "script": "cpp",
            "time": 20,
            "memory": 69.8,
            "desc": "遍历。",
            "code": "class Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *head = new ListNode(), *p = head;\n        int add = 0;\n        while (l1 || l2) {\n            int val = (l1 ? l1->val : 0) + \n                      (l2 ? l2->val : 0) +\n                      add;\n            if (val >= 10) val -= 10, add = 1;\n            else add = 0;\n            p->next = new ListNode(val);\n            p = p->next;\n            if (l1) l1 = l1->next;\n            if (l2) l2 = l2->next;\n        }\n        if (add) p->next = new ListNode(1);\n        return head->next;\n    }\n};",
            "date": 1688227200000
        },
        {
            "script": "python",
            "time": 68,
            "memory": 16.2,
            "desc": "同上。",
            "code": "class Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        head = ListNode()\n        p = head\n        add = 0\n        while l1 or l2:\n            val = (l1.val if l1 else 0) + (l2.val if l2 else 0) + add\n            if val >= 10:\n                val -= 10\n                add = 1\n            else:\n                add = 0\n            p.next = ListNode(val)\n            p = p.next\n            if l1:\n                l1 = l1.next\n            if l2:\n                l2 = l2.next\n        if add:\n            p.next = ListNode(1)\n        return head.next",
            "date": 1688227200000
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 2,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn add_two_numbers(\n        mut l1: Option<Box<ListNode>>,\n        mut l2: Option<Box<ListNode>>,\n    ) -> Option<Box<ListNode>> {\n        let mut head = Box::new(ListNode::new(0));\n        let mut p = &mut head;\n        let mut p1 = &mut l1;\n        let mut p2 = &mut l2;\n        let mut add = 0;\n        while p1.is_some() || p2.is_some() {\n            let mut val = match p1 {\n                Some(ref mut node) => {\n                    p1 = &mut node.next;\n                    node.val\n                }\n                None => 0,\n            } + match p2 {\n                Some(ref mut node) => {\n                    p2 = &mut node.next;\n                    node.val\n                }\n                None => 0,\n            } + add;\n            if val >= 10 {\n                val -= 10;\n                add = 1;\n            } else {\n                add = 0;\n            }\n            p.next = Some(Box::new(ListNode::new(val)));\n            p = p.next.as_mut().unwrap();\n        }\n        if add != 0 {\n            p.next = Some(Box::new(ListNode::new(1)));\n        }\n        head.next\n    }\n}",
            "date": 1688227200000
        }
    ]
}