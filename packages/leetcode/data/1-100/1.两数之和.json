{
  "name": "1. 两数之和",
  "url": "https://leetcode-cn.com/problems/two-sum/",
  "difficulty": "简单",
  "tag": ["数组", "哈希表"],
  "desc": "给定一个整数数组 nums  和一个目标值 target，请你在该数组中找出和为目标值的那   两个   整数，并返回他们的数组下标。",
  "solutions": [
    {
      "date": 1568476800000,
      "time": 232,
      "memory": 34.8,
      "script": "javascript",
      "desc": "获取第一个 num 值后，用 target 减去求出对应值，使用 indexOf 判断该对应值是否在数组里。",
      "code": "var twoSum = function (nums, target) {\n  for (let i = 0; i < nums.length; i++) {\n    num1 = nums[i];\n    num2 = target - nums[i];\n    result = nums.indexOf(num2);\n    if (result > -1 && result !== i) {\n      return [i, result];\n    }\n  }\n};"
    },
    {
      "date": 1568476800000,
      "time": 68,
      "memory": 35.2,
      "script": "javascript",
      "desc": "获取第一个 num 值后，判断该值是否存在 map 表中，若存在则说明有匹配项直接返回，若不存在则储存。",
      "code": "var twoSum = function (nums, target) {\n  let map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    if (map.has(nums[i])) {\n      return [i, map.get(nums[i])];\n    }\n    map.set(target - nums[i], i);\n  }\n};"
    },
    {
      "date": 1601654400000,
      "time": 84,
      "memory": 40.2,
      "script": "typescript",
      "desc": "哈希储存下一值。",
      "code": "function twoSum(nums: number[], target: number): number[] {\n  const cache = new Map<number, number>();\n  for (let i = 0, l = nums.length; i < l; i++) {\n    const num = nums[i];\n    const nextI = cache.get(num);\n    if (nextI !== undefined) return [nextI, i];\n    const nextNum = target - num;\n    cache.set(nextNum, i);\n  }\n  return [];\n}"
    },
    {
      "date": 1626883200000,
      "time": 84,
      "memory": 40.2,
      "script": "typescript",
      "desc": "二分查找。",
      "code": "function twoSum(nums: number[], target: number): number[] {\n  const list = new Array(nums.length)\n    .fill(0)\n    .map((_, i) => i)\n    .sort((a, b) => nums[a] - nums[b]);\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[list[i]];\n    const i2 = search(target - num, i + 1);\n    if (i2 !== -1) return [list[i], list[i2]];\n  }\n  return [];\n  function search(target: number, l: number): number {\n    let r = nums.length - 1;\n    while (l <= r) {\n      const mid = (l + r) >> 1;\n      const midNum = nums[list[mid]];\n      if (midNum < target) l = mid + 1;\n      else if (midNum > target) r = mid - 1;\n      else return mid;\n    }\n    return -1;\n  }\n}"
    }
  ]
}
