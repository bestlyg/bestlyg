{
    "id": "1",
    "name": "1.两数之和",
    "url": "https://leetcode.cn/problems/two-sum",
    "difficulty": "简单",
    "tag": [
        "数组",
        "哈希表"
    ],
    "desc": "给定一个整数数组 nums  和一个目标值 target，请你在该数组中找出和为目标值的那   两个   整数，并返回他们的数组下标。",
    "solutions": [
        {
            "date": 1568476800000,
            "time": 232,
            "memory": 34.8,
            "script": "javascript",
            "desc": "获取第一个 num 值后，用 target 减去求出对应值，使用 indexOf 判断该对应值是否在数组里。",
            "code": "var twoSum = function (nums, target) {\n  for (let i = 0; i < nums.length; i++) {\n    num1 = nums[i];\n    num2 = target - nums[i];\n    result = nums.indexOf(num2);\n    if (result > -1 && result !== i) {\n      return [i, result];\n    }\n  }\n};"
        },
        {
            "date": 1568476800000,
            "time": 68,
            "memory": 35.2,
            "script": "javascript",
            "desc": "获取第一个 num 值后，判断该值是否存在 map 表中，若存在则说明有匹配项直接返回，若不存在则储存。",
            "code": "var twoSum = function (nums, target) {\n  let map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    if (map.has(nums[i])) {\n      return [i, map.get(nums[i])];\n    }\n    map.set(target - nums[i], i);\n  }\n};"
        },
        {
            "date": 1601654400000,
            "time": 84,
            "memory": 40.2,
            "script": "typescript",
            "desc": "哈希储存下一值。",
            "code": "function twoSum(nums: number[], target: number): number[] {\n  const cache = new Map<number, number>();\n  for (let i = 0, l = nums.length; i < l; i++) {\n    const num = nums[i];\n    const nextI = cache.get(num);\n    if (nextI !== undefined) return [nextI, i];\n    const nextNum = target - num;\n    cache.set(nextNum, i);\n  }\n  return [];\n}"
        },
        {
            "date": 1626883200000,
            "time": 84,
            "memory": 40.2,
            "script": "typescript",
            "desc": "二分查找。",
            "code": "function twoSum(nums: number[], target: number): number[] {\n  const list = new Array(nums.length)\n    .fill(0)\n    .map((_, i) => i)\n    .sort((a, b) => nums[a] - nums[b]);\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[list[i]];\n    const i2 = search(target - num, i + 1);\n    if (i2 !== -1) return [list[i], list[i2]];\n  }\n  return [];\n  function search(target: number, l: number): number {\n    let r = nums.length - 1;\n    while (l <= r) {\n      const mid = (l + r) >> 1;\n      const midNum = nums[list[mid]];\n      if (midNum < target) l = mid + 1;\n      else if (midNum > target) r = mid - 1;\n      else return mid;\n    }\n    return -1;\n  }\n}"
        },
        {
            "date": 1638201600000,
            "time": 8,
            "memory": 6.3,
            "script": "c",
            "desc": "创建下标数组后排序后二分。",
            "code": "int *gnums;\nint comp(const void *a, const void *b){\n    return gnums[(*(int *)a)] - gnums[(*(int *)b)];\n}\nint bs(int *arr, int numsSize, int start, int num){\n    int m, l = start, r = numsSize - 1;\n    if (gnums[arr[l]] > num || gnums[arr[r]] < num) return -1;\n    while (l < r) {\n        m = (l + r) >> 1;\n        if (gnums[arr[m]] == num) {\n            l = m;\n            break;\n        }\n        if (gnums[arr[m]] > num) r = m - 1;\n        else l = m + 1;\n    }\n    return gnums[arr[l]] == num ? l : -1;\n}\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    gnums = nums;\n    *returnSize = 2;\n    int *ans = (int *)malloc(sizeof(int) * 2);\n    int arr[numsSize];\n    for(int i = 0; i < numsSize; i++) arr[i] = i;\n    qsort(arr, numsSize, sizeof(int), comp);\n    for(int i = 0; i < numsSize; i++) {\n        int num1 = nums[arr[i]], num2 = target - num1;\n        int num2idx = bs(arr, numsSize, i + 1, num2);\n        if (num2idx == -1) continue;\n        if (arr[i] > num2idx) {\n            ans[0] = arr[num2idx];\n            ans[1] = arr[i];\n        } else {\n            ans[1] = arr[num2idx];\n            ans[0] = arr[i];\n        }\n        break;\n    }\n    return ans;\n}"
        },
        {
            "date": 1639929600000,
            "time": 4,
            "memory": 10.4,
            "script": "cpp",
            "desc": "哈希存储。",
            "code": "class Solution {\n   public:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        vector<int> ans;\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums[i];\n            if (m.count(target - num)) {\n                ans.push_back(m[target - num]);\n                ans.push_back(i);\n                return ans;\n            } else {\n                m[num] = i;\n            }\n        }\n        return ans;\n    }\n};"
        },
        {
            "script": "python",
            "time": 32,
            "memory": 16,
            "desc": "哈希。",
            "code": "class Solution:\ndef twoSum(self, nums: List[int], target: int) -> List[int]:\n    m = defaultdict()\n    for i, num in enumerate(nums):\n        if target - num in m:\n            return [m[target- num], i]\n        m[num] = i\n    return []",
            "date": 1674230400000
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 2.4,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        let mut m = std::collections::HashMap::<i32, usize>::new();\n        for i in 0..nums.len() {\n            match m.get_mut(&(target - nums[i])) {\n                Some(prev) => return vec![*prev as i32, i as i32],\n                None => {\n                    m.insert(nums[i], i);\n                }\n            }\n        }\n        vec![]\n    }\n}",
            "date": 1688140800000
        }
    ]
}