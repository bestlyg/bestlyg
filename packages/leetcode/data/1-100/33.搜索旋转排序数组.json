{
    "name": "33.搜索旋转排序数组",
    "url": "https://leetcode-cn.com/problems/search-in-rotated-sorted-array/",
    "difficulty": "中等",
    "tag": [
        "数组",
        "二分查找"
    ],
    "desc": "假设按照升序排序的数组在预先未知的某个点上进行了旋转。( 例如，数组  [0,1,2,4,5,6,7]  可能变为  [4,5,6,7,0,1,2] )。搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回  -1 。",
    "solutions": [
        {
            "date": 1587916800000,
            "time": 68,
            "memory": 33.8,
            "script": "javascript",
            "desc": "直接使用内置 indexOf。",
            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function (nums, target) {\n  return nums.indexOf(target);\n};"
        },
        {
            "date": 1587916800000,
            "time": 72,
            "memory": 33.9,
            "script": "javascript",
            "desc": "二分查找进行判断是否有转折点。",
            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function (nums, target) {\n  const len = nums.length;\n  if (len === 0) return -1;\n  let first = 0;\n  let last = len;\n  if (nums[last - 1] > nums[first]) {\n    return search(first, last);\n  } else\n    while (first < last) {\n      if (last - first === 1 && nums[first] !== target) return -1;\n      const mid = (last + first) >> 1;\n      // console.log(\"======\");\n      // console.log(\"first\", first);\n      // console.log(\"last\", last);\n      // console.log(\"mid\", mid);\n      const midNum = nums[mid];\n      const firstNum = nums[first];\n      if (midNum === target) return mid;\n      if (midNum > firstNum) {\n        if (target >= firstNum && target < midNum) return search(first, mid);\n        else first = mid + 1;\n      }\n      if (midNum < firstNum) {\n        if (target > midNum && nums[last - 1] >= target) return search(mid, last);\n        else last = mid;\n      }\n    }\n  return -1;\n  function search(first, last) {\n    // console.log(\"======\");\n    // console.log(\"search\", first, last);\n    if ((last - first === 1 && nums[first] !== target) || first === last) return -1;\n    const mid = (last + first) >> 1;\n    const num = nums[mid];\n    if (num === target) return mid;\n    else if (num < target) {\n      return search(mid + 1, last);\n    } else {\n      return search(first, mid);\n    }\n  }\n};"
        }
    ]
}