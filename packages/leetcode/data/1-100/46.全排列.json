{
    "id": "46",
    "name": "46.全排列",
    "url": "https://leetcode.cn/problems/permutations",
    "difficulty": "中等",
    "tag": ["数组", "回溯"],
    "desc": "给定一个 没有重复 数字的序列，返回其所有可能的全排列。",
    "solutions": [
        {
            "date": 1587744000000,
            "time": 80,
            "memory": 37.3,
            "script": "javascript",
            "desc": "通过递归对每层判断后压栈。",
            "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute = function (nums) {\n  const len = nums.length;\n  if (len === 1) return [nums];\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const newNums = permute(nums.filter((_, index) => index !== i));\n    for (const newNum of newNums) res.push([nums[i]].concat(newNum));\n  }\n  return res;\n};"
        },
        {
            "date": 1626796800000,
            "time": 88,
            "memory": 41,
            "script": "typescript",
            "desc": "全排列。",
            "code": "function permute(nums: number[]): number[][] {\n  const ans: number[][] = [];\n  find();\n  return ans;\n  function find(list = nums, queue: number[] = []): void {\n    if (list.length === 0) {\n      ans.push(queue.slice());\n      return;\n    }\n    for (let i = 0, l = list.length; i < l; i++) {\n      queue.push(list[i]);\n      find([...list.slice(0, i), ...list.slice(i + 1)], queue);\n      queue.pop();\n    }\n  }\n}"
        }
    ]
}
