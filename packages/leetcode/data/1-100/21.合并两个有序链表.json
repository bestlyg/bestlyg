{
    "id": "21",
    "name": "21.合并两个有序链表",
    "url": "https://leetcode.cn/problems/merge-two-sorted-lists",
    "desc": "将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。",
    "solutions": [
        {
            "date": "2020-05-01",
            "time": 84,
            "memory": 35.5,
            "script": "javascript",
            "desc": "通过队列储存后排序输出。",
            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function (l1, l2) {\n  if (l1 === null && l2 === null) return null;\n  let tmp1 = l1,\n    tmp2 = l2;\n  const queue = [];\n  while (tmp1 !== null && tmp2 !== null) {\n    if (tmp1.val <= tmp2.val) {\n      queue.push(tmp1);\n      tmp1 = tmp1.next;\n    } else {\n      queue.push(tmp2);\n      tmp2 = tmp2.next;\n    }\n  }\n  while (tmp1 !== null) {\n    queue.push(tmp1);\n    tmp1 = tmp1.next;\n  }\n  while (tmp2 !== null) {\n    queue.push(tmp2);\n    tmp2 = tmp2.next;\n  }\n  const root = queue[0];\n  let tmp = root;\n  for (let i = 1, len = queue.length; i < len; i++) {\n    const node = queue[i] === undefined ? null : queue[i];\n    tmp.next = node;\n    tmp = tmp.next;\n  }\n  return root;\n};"
        },
        {
            "date": "2021-11-30",
            "time": 4,
            "memory": 6.1,
            "script": "c",
            "desc": "新建一个头结点，遍历两个节点进行比较。",
            "code": "struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){\n    struct ListNode *root = (struct ListNode *)malloc(sizeof(struct ListNode)), *p = root;\n    while (list1 && list2) {\n        if (list1->val <= list2->val) {\n            p->next = list1;\n            list1 = list1->next;\n        } else {\n            p->next = list2;\n            list2 = list2->next;\n        }\n        p = p->next;\n    }\n    if (!list1) p->next = list2;\n    if (!list2) p->next = list1;\n    return root->next;\n}"
        },
        {
            "script": "cpp",
            "time": 8,
            "memory": 14.5,
            "desc": "dfs。",
            "code": "class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode *head = new ListNode(), *p = head;\n        while (list1 || list2) {\n            if (!list2 || list1 && list1->val <= list2->val) {\n                p->next = list1;\n                list1 = list1->next;\n            } else {\n                p->next = list2;\n                list2 = list2->next;\n            }\n            p = p->next;\n        }\n\n        return head->next;\n    }\n};",
            "date": "2023-08-05"
        },
        {
            "script": "python",
            "time": 52,
            "memory": 15.59,
            "desc": "同上。",
            "code": "class Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        head = ListNode()\n        p = head\n        while list1 or list2:\n            if not list2 or list1 and list1.val <= list2.val:\n                p.next = list1\n                list1 = list1.next\n            else:\n                p.next = list2\n                list2 = list2.next\n            p = p.next\n        return head.next",
            "date": "2023-08-05"
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 2.06,
            "desc": "同上。",
            "code": "impl Solution {\npub fn merge_two_lists(\n    mut list1: Option<Box<ListNode>>,\n    mut list2: Option<Box<ListNode>>,\n) -> Option<Box<ListNode>> {\n    let mut head = ListNode::new(0);\n    let mut p = &mut head;\n    let tmp = Box::new(ListNode::new(-1));\n    while list1.is_some() || list2.is_some() {\n        if list2.is_none()\n            || list1.is_some() && list1.as_ref().unwrap().val <= list2.as_ref().unwrap().val\n        {\n            let mut node = list1.take().unwrap();\n            let next = node.next.take();\n            p.next = Some(node);\n            list1 = next;\n        } else {\n            let mut node = list2.take().unwrap();\n            let next = node.next.take();\n            p.next = Some(node);\n            list2 = next;\n        }\n        p = p.next.as_mut().unwrap();\n    }\n    head.next\n}\n}",
            "date": "2023-08-05"
        }
    ],
    "tagList": ["递归", "链表"],
    "level": "Easy"
}
