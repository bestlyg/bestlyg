{
    "id": "50",
    "name": "50.Pow(x,n)",
    "url": "https://leetcode.cn/problems/powx-n",
    "difficulty": "中等",
    "tag": [
        "递归",
        "数学"
    ],
    "desc": "实现 pow(x, n) ，即计算 x 的 n 次幂函数。",
    "solutions": [
        {
            "date": 1589126400000,
            "time": 5424,
            "memory": 35.1,
            "script": "javascript",
            "desc": "通过对半拆分进行计算后合并。",
            "code": "/**\n * @param {number} x\n * @param {number}\n * @return {number}\n */\nvar myPow = function (x, n) {\n  const cache = { 0: 1, 1: x };\n  function comp(n) {\n    if (!cache[n]) {\n      const mid = Math.floor(n / 2);\n      cache[n] = comp(mid) * comp(n - mid);\n    }\n    return cache[n];\n  }\n  return n >= 0 ? comp(n) : 1 / comp(-n);\n};"
        },
        {
            "date": 1589126400000,
            "time": 60,
            "memory": 33.6,
            "script": "javascript",
            "desc": "直接调用原生。",
            "code": "/**\n * @param {number} x\n * @param {number} n\n * @return {number}\n */\nvar myPow = function (x, n) {\n  return Math.pow(x, n);\n};"
        }
    ]
}