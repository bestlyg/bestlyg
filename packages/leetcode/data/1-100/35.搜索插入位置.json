{
    "name": "35. 搜索插入位置",
    "url": "https://leetcode-cn.com/problems/search-insert-position/",
    "difficulty": "简单",
    "tag": [
        "数组",
        "二分查找"
    ],
    "desc": "给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。",
    "solutions": [
        {
            "date": 1594915200000,
            "time": 80,
            "memory": 38.6,
            "script": "typescript",
            "desc": "二分查找。",
            "code": "function searchInsert(nums: number[], target: number): number {\n  function _search(l: number, r: number): number {\n    if (l >= r) return l;\n    const mid = (l + r) >> 1;\n    const num = nums[mid];\n    if (num < target) return _search(mid + 1, r);\n    else if (num > target) return _search(l, mid);\n    else return mid;\n  }\n  return _search(0, nums.length);\n}"
        },
        {
            "date": 1626883200000,
            "time": 80,
            "memory": 39.5,
            "script": "typescript",
            "desc": "二分查找。",
            "code": "function searchInsert(nums: number[], target: number): number {\n  let l = 0;\n  let r = nums.length - 1;\n  while (l <= r) {\n    const mid = (l + r) >> 1;\n    const midNum = nums[mid];\n    if (midNum < target) l = mid + 1;\n    else if (midNum > target) r = mid - 1;\n    else return mid;\n  }\n  return l;\n}"
        },
        {
            "date": 1638201600000,
            "time": 0,
            "memory": 6.6,
            "script": "c",
            "desc": "二分查找。",
            "code": "int searchInsert(int* nums, int numsSize, int target){\n    int m, l = 0, r = numsSize - 1;\n    if (nums[l] > target) return 0;\n    if (nums[r] < target) return numsSize;\n    while (l < r) {\n        m = (l + r) >> 1;\n        if (nums[m] == target) {\n            l = m;\n            break;\n        }\n        if (nums[m] >= target) r = m;\n        else l = m + 1;\n    }\n    return l;\n}"
        },
        {
            "date": 1639929600000,
            "time": 4,
            "memory": 9.5,
            "script": "c++",
            "desc": "二分查找。",
            "code": "class Solution {\n   public:\n    int searchInsert(vector<int>& nums, int target) {\n        int l = 0, r = nums.size(), m;\n        while (l < r) {\n            m = (l + r) >> 1;\n            if (nums[m] >= target)\n                r = m;\n            else\n                l = m + 1;\n        }\n        return l;\n    }\n};"
        }
    ]
}