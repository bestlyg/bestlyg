{
    "name": "93.复原IP地址",
    "url": "https://leetcode-cn.com/problems/restore-ip-addresses/",
    "difficulty": "中等",
    "tag": [
        "字符串",
        "回溯算法"
    ],
    "desc": "给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。",
    "solutions": [
        {
            "date": 1596988800000,
            "time": 88,
            "memory": 37.3,
            "script": "typescript",
            "desc": "回溯+剪枝。",
            "code": "function restoreIpAddresses(s: string): string[] {\n  const ans: string[] = [];\n  find(s);\n  return ans;\n  function find(s: string, now = '', need = 4): void {\n    if (need <= 0) return;\n    for (let l = 1; l <= s.length; l++) {\n      const subS = s.substr(0, l);\n      if (Number(subS) > 255) return;\n      const nextSubStr = s.substr(l);\n      const nextNow = now.length === 0 ? subS : now + '.' + subS;\n      if (need === 1 && nextSubStr.length === 0) ans.push(nextNow);\n      else find(nextSubStr, nextNow, need - 1);\n      if (s[0] === '0') return;\n    }\n  }\n}"
        },
        {
            "date": 1626796800000,
            "time": 76,
            "memory": 40.1,
            "script": "typescript",
            "desc": "深度遍历。",
            "code": "function restoreIpAddresses(s: string): string[] {\n  const n = s.length;\n  const ans: string[] = [];\n  find();\n  return ans;\n  function find(index = 0, list: (string | number)[] = []): void {\n    if (list.length === 4 && index !== n) return;\n    if (index === n) {\n      list.length === 4 && ans.push(list.join('.'));\n      return;\n    }\n    if (s[index] === '0') {\n      list.push(0);\n      find(index + 1, list);\n      list.pop();\n      return;\n    }\n    const num1 = getNum(index);\n    let num2!: number;\n    let num3!: number;\n    list.push(num1);\n    find(index + 1, list);\n    list.pop();\n    if (index + 1 < n) {\n      num2 = num1 * 10 + getNum(index + 1);\n      list.push(num2);\n      find(index + 2, list);\n      list.pop();\n    }\n    if (index + 2 < n) {\n      num3 = num2 * 10 + getNum(index + 2);\n      if (num3 <= 255) {\n        list.push(num3);\n        find(index + 3, list);\n        list.pop();\n      }\n    }\n  }\n  function getNum(index: number) {\n    return s[index].codePointAt(0)! - '0'.codePointAt(0)!;\n  }\n}"
        }
    ]
}