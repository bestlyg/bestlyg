{
    "id": "54",
    "name": "54.螺旋矩阵",
    "url": "https://leetcode.cn/problems/spiral-matrix",
    "desc": "给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。",
    "solutions": [
        {
            "date": "2020-06-05",
            "time": 84,
            "memory": 32.4,
            "script": "typescript",
            "desc": "递归判断每一圈",
            "code": "function spiralOrder(matrix: number[][]): number[] {\n  const row = matrix.length;\n  if (row === 0) return [];\n  else if (row === 1) return matrix[0];\n  const ans: number[] = [];\n  const col = matrix[0].length;\n  spiral(0, row - 1, 0, col - 1);\n  return ans;\n  function spiral(startI: number, endI: number, startJ: number, endJ: number): void {\n    if (endI < startI || endJ < startJ) return;\n    for (let i = startJ; i <= endJ; i++) ans.push(matrix[startI][i]);\n    for (let i = startI + 1; i <= endI; i++) ans.push(matrix[i][endJ]);\n    for (let i = endJ - 1; startI !== endI && i >= startJ; i--) ans.push(matrix[endI][i]);\n    for (let i = endI - 1; startJ !== endJ && i >= startI + 1; i--) ans.push(matrix[i][startJ]);\n    if (startI !== endI && startJ !== endJ) spiral(startI + 1, endI - 1, startJ + 1, endJ - 1);\n  }\n}"
        },
        {
            "date": "2021-03-15",
            "time": 92,
            "memory": 39.1,
            "script": "typescript",
            "desc": "递归循环遍历。",
            "code": "function spiralOrder(matrix: number[][]): number[] {\n  const ans: number[] = [];\n  dfs(0, 0, matrix.length - 1, matrix[0].length - 1);\n  return ans;\n  function dfs(startRow: number, startCol: number, endRow: number, endCol: number): void {\n    if (startRow > endRow || startCol > endCol) return;\n    for (let i = startCol; i <= endCol; i++) ans.push(matrix[startRow][i]);\n    for (let i = startRow + 1; i <= endRow; i++) ans.push(matrix[i][endCol]);\n    if (endRow !== startRow)\n      for (let i = endCol - 1; i >= startCol; i--) ans.push(matrix[endRow][i]);\n    if (endCol !== startCol)\n      for (let i = endRow - 1; i >= startRow + 1; i--) ans.push(matrix[i][startCol]);\n    dfs(startRow + 1, startCol + 1, endRow - 1, endCol - 1);\n  }\n}"
        }
    ],
    "tagList": ["数组", "矩阵", "模拟"],
    "level": "Medium"
}
