{
    "id": "52",
    "name": "52.N皇后II",
    "url": "https://leetcode.cn/problems/n-queens-ii",
    "desc": "n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。",
    "solutions": [
        {
            "date": "2020-04-27",
            "time": 64,
            "memory": 34.1,
            "script": "javascript",
            "desc": "回溯算法，遍历后剪枝。",
            "code": "/**\n * @param {number} n\n * @return {string[][]}\n */\nvar totalNQueens = function (n) {\n  const cols = new Array(n);\n  let res = 0;\n  queues(0);\n  function queues(row) {\n    if (row === n) {\n      res++;\n    }\n    for (let col = 0; col < n; col++) {\n      if (isValid(row, col)) {\n        cols[row] = col;\n        queues(row + 1);\n      }\n    }\n  }\n  function isValid(row, col) {\n    for (let i = 0; i < row; i++) {\n      if (cols[i] === col) return false;\n      if (row - i === Math.abs(cols[i] - col)) return false;\n    }\n    return true;\n  }\n  return res;\n};"
        },
        {
            "date": "2020-10-17",
            "time": 96,
            "memory": 40,
            "script": "typescript",
            "desc": "回溯。",
            "code": "function totalNQueens(n: number): number {\n  const cols = new Array(n);\n  let ans = 0;\n  find(0);\n  return ans;\n  function find(row: number) {\n    if (row === n) {\n      ans++;\n      return;\n    }\n    for (let i = 0; i < n; i++) {\n      if (check(row, i)) {\n        cols[row] = i;\n        find(row + 1);\n      }\n    }\n  }\n  function check(row: number, col: number): boolean {\n    for (let i = 0; i < row; i++) {\n      if (cols[i] === col) return false;\n      if (row - i === Math.abs(cols[i] - col)) return false;\n    }\n    return true;\n  }\n}"
        },
        {
            "time": 2329,
            "memory": 17.29,
            "desc": "dfs。",
            "code": "class Solution:\n    def totalNQueens(self, n: int) -> int:\n        rows, cols, k1, k2 = [False] * n, [False] * n, [False] * (n * 3), [False] * (n * 3)\n        tok1 = lambda i, j: n - i - j\n        tok2 = lambda i, j: n - i + j\n        res = 0\n        def dfs(i: int, j: int, cnt: int):\n            nonlocal res\n            if i == n:\n                res += cnt == 0\n                return\n            if j == n:\n                dfs(i + 1, 0, cnt)\n                return\n            dfs(i, j + 1, cnt)\n            if not rows[i] and not cols[j] and not k1[tok1(i, j)] and not k2[tok2(i, j)]:\n                rows[i] = cols[j] = k1[tok1(i, j)] = k2[tok2(i, j)] = True\n                dfs(i, j + 1, cnt - 1)\n                rows[i] = cols[j] = k1[tok1(i, j)] = k2[tok2(i, j)] = False\n        dfs(0, 0, n)\n        return res",
            "date": "2024-12-02"
        }
    ],
    "tagList": [
        "回溯"
    ],
    "level": "Hard"
}