{
    "id": "22",
    "name": "22.括号生成",
    "url": "https://leetcode.cn/problems/generate-parentheses",
    "desc": "数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。",
    "solutions": [
        {
            "date": "2020-04-09",
            "time": 68,
            "memory": 35.1,
            "script": "javascript",
            "desc": "通过集合去重，再递归判断括号内部。",
            "code": "/**\n * @param {number} n\n * @return {string[]}\n */\nconst cache = new Map();\ncache.set(1, ['()']);\ncache.set(2, ['()()', '(())']);\nvar generateParenthesis = function (n) {\n  if (cache.has(n)) return cache.get(n);\n  const res = new Set();\n  for (let i = 1; i < n; i++) {\n    for (let left of generateParenthesis(i))\n      for (let right of generateParenthesis(n - i)) res.add(`${left}${right}`);\n  }\n  for (let item of generateParenthesis(n - 1)) res.add(`(${item})`);\n  const arr = [...res];\n  cache.set(n, arr);\n  return arr;\n};"
        }
    ],
    "tagList": [
        "字符串",
        "动态规划",
        "回溯"
    ],
    "level": "Medium"
}