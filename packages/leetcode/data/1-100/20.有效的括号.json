{
    "id": "20",
    "name": "20.有效的括号",
    "url": "https://leetcode.cn/problems/valid-parentheses",
    "desc": "给定一个只包括 '('，')'，'{'，'}'，'['，']'  的字符串，判断字符串是否有效。有效字符串需满足：左括号必须用相同类型的右括号闭合。左括号必须以正确的顺序闭合。注意空字符串可被认为是有效字符串。",
    "solutions": [
        {
            "date": "2020-02-16",
            "time": 2,
            "memory": 40.8,
            "script": "java",
            "desc": "遍历，左括号压栈，右括号判断。",
            "code": "class Solution {\n    public boolean isValid(String s) {\n\t    \tStack<Character> stack= new Stack<Character>();\n\t    \tint len=s.length();\n\t    \tfor(int i =0;i<len;i++) {\n\t    \t\tchar c=s.charAt(i);\n\t    \t\tif(c=='('||c=='{'||c=='[') {\n\t    \t\t\tstack.push(c);\n\t    \t\t}else {\n\t    \t\t\tif(stack.isEmpty())\treturn false;\n\t    \t\t\tchar left=stack.pop();\n\t    \t\t\tif(left=='('&&c!=')')return false;\n\t    \t\t\tif(left=='{'&&c!='}')return false;\n\t    \t\t\tif(left=='['&&c!=']')return false;\n\t    \t\t}\n\t    \t}\n\t        return stack.isEmpty();\n    }\n}"
        },
        {
            "date": "2020-02-16",
            "time": 4,
            "memory": 41.4,
            "script": "java",
            "desc": "与 1 思路相似，用 map 储存三对大括号。",
            "code": "class Solution {\n    public boolean isValid(String s) {\n\t    \tStack<Character> stack= new Stack<Character>();\n\t    \tint len=s.length();\n\t    \tfor(int i =0;i<len;i++) {\n\t    \t\tchar c=s.charAt(i);\n\t    \t\tif(c=='('||c=='{'||c=='[') {\n\t    \t\t\tstack.push(c);\n\t    \t\t}else {\n\t    \t\t\tif(stack.isEmpty())\treturn false;\n\t    \t\t\tchar left=stack.pop();\n\t    \t\t\tif(left=='('&&c!=')')return false;\n\t    \t\t\tif(left=='{'&&c!='}')return false;\n\t    \t\t\tif(left=='['&&c!=']')return false;\n\t    \t\t}\n\t    \t}\n\t        return stack.isEmpty();\n    }\n}"
        },
        {
            "date": "2020-08-14",
            "time": 92,
            "memory": 38.5,
            "script": "typescript",
            "desc": "利用栈进行判断。",
            "code": "function isValid(s: string): boolean {\n  const stack: string[] = [];\n  for (const c of s) {\n    if (c === '(' || c === '[' || c === '{') {\n      stack.push(c);\n    } else {\n      const left = stack.pop();\n      if (\n        !left ||\n        (left === '(' && c !== ')') ||\n        (left === '[' && c !== ']') ||\n        (left === '{' && c !== '}')\n      )\n        return false;\n    }\n  }\n  return stack.length === 0;\n}"
        },
        {
            "date": "2021-03-19",
            "time": 84,
            "memory": 41,
            "script": "typescript",
            "desc": "栈维护。",
            "code": "const leftSet = new Set(['(', '[', '{']);\nfunction isValid(s: string): boolean {\n  if (s.length === 0) return true;\n  const stack: string[] = [];\n  for (const c of s) {\n    if (leftSet.has(c)) {\n      stack.push(c);\n    } else if (c === ')') {\n      let str = '';\n      while (stack.length > 0 && stack[stack.length - 1] !== '(') str = stack.pop()! + str;\n      if (stack.length === 0 || stack[stack.length - 1] !== '(') return false;\n      stack.pop();\n      if (!isValid(str)) return false;\n    } else if (c === ']') {\n      let str = '';\n      while (stack.length > 0 && stack[stack.length - 1] !== '[') str = stack.pop()! + str;\n      if (stack.length === 0 || stack[stack.length - 1] !== '[') return false;\n      stack.pop();\n      if (!isValid(str)) return false;\n    } else if (c === '}') {\n      let str = '';\n      while (stack.length > 0 && stack[stack.length - 1] !== '{') str = stack.pop()! + str;\n      if (stack.length === 0 || stack[stack.length - 1] !== '{') return false;\n      stack.pop();\n      if (!isValid(str)) return false;\n    }\n  }\n  return stack.length === 0;\n}"
        },
        {
            "date": "2021-11-24",
            "time": 0,
            "memory": 5.8,
            "script": "typescript",
            "desc": "stack。",
            "code": "typedef struct Stack\n{\n    int size;\n    int len;\n    int *data;\n} Stack;\nStack *createStack(int len)\n{\n    Stack *s = (Stack *)malloc(sizeof(Stack));\n    s->size = 0;\n    s->len = len;\n    s->data = (int *)malloc(sizeof(int) * len);\n    return s;\n}\nvoid push(Stack *s, int val)\n{\n    if (s->size == s->len)\n        return;\n    s->data[s->size++] = val;\n}\nvoid pop(Stack *s)\n{\n    if (s->size == 0)\n        return;\n    s->size--;\n}\nint isEmpty(Stack *s) {\n    return s->size == 0;\n}\nint top(Stack *s)\n{\n    if (s->size == 0)\n        return -999999999;\n    return s->data[s->size - 1];\n}\nvoid freeStack(Stack *s)\n{\n    free(s->data);\n    free(s);\n}\nvoid showStack(Stack *s, char *title, int type)\n{\n    printf(\"Stack %s : [\", title);\n    for (int i = 0; i < s->size; i++)\n    {\n        i &&printf(\",\");\n        if (type == 1)\n            printf(\"%d\", s->data[i]);\n        if (type == 2)\n            printf(\"%c\", s->data[i]);\n    }\n    printf(\"]\\n\");\n}\nbool isValid(char * s){\n    int len = strlen(s);\n    Stack *stack = createStack(len);\n    for (int i = 0; i < len; i++) {\n        char ch = s[i];\n        if (\n            ch == ')' && !isEmpty(stack) && s[top(stack)] == '(' ||\n            ch == ']' && !isEmpty(stack) && s[top(stack)] == '[' ||\n            ch == '}' && !isEmpty(stack) && s[top(stack)] == '{'\n        ) pop(stack);\n        else push(stack, i);\n    }\n    return stack->size == 0;\n}"
        }
    ],
    "tagList": ["栈", "字符串"],
    "level": "Easy"
}
