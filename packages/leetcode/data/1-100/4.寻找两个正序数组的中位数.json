{
    "id": "4",
    "name": "4.寻找两个正序数组的中位数",
    "url": "https://leetcode.cn/problems/median-of-two-sorted-arrays",
    "desc": "给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。",
    "solutions": [
        {
            "date": "2020-05-24",
            "time": 144,
            "memory": 42.2,
            "script": "typescript",
            "desc": "合并数组排序后直接求两个中间值。",
            "code": "var findMedianSortedArrays = function (nums1: number[], nums2: number[]): number {\n  const len = nums1.length + nums2.length;\n  const mid1 = len >> 1;\n  const mid2 = len % 2 === 0 ? mid1 - 1 : mid1;\n  const arr = [...nums1, ...nums2].sort((a, b) => a - b);\n  return (arr[mid1] + arr[mid2]) / 2;\n};"
        },
        {
            "date": "2021-07-23",
            "time": 124,
            "memory": 42.9,
            "script": "typescript",
            "desc": "二分查找。",
            "code": "function findMedianSortedArrays(nums1: number[], nums2: number[]): number {\n  const n1 = nums1.length;\n  const n2 = nums2.length;\n  const v1 = find((n1 + n2 + 1) >> 1);\n  if ((n1 + n2) % 2 === 1) return v1;\n  const v2 = find(((n1 + n2 + 1) >> 1) + 1);\n  return (v1 + v2) / 2;\n  function find(k: number, i1: number = 0, i2: number = 0): number {\n    if (i1 === nums1.length) return nums2[i2 + k - 1];\n    if (i2 === nums2.length) return nums1[i1 + k - 1];\n    if (k === 1) return Math.min(nums1[i1], nums2[i2]);\n    let v1 = Math.min(k >> 1, nums1.length - i1);\n    let v2 = Math.min(k - v1, nums2.length - i2);\n    v1 = k - v2;\n    if (nums1[i1 + v1 - 1] <= nums2[i2 + v2 - 1]) return find(k - v1, i1 + v1, i2);\n    else return find(k - v2, i1, i2 + v2);\n  }\n}"
        }
    ],
    "tagList": ["数组", "二分查找", "分治"],
    "level": "Hard"
}
