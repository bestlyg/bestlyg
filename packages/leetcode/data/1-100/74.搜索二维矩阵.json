{
    "name": "74.搜索二维矩阵",
    "url": "https://leetcode-cn.com/problems/search-a-2d-matrix/",
    "difficulty": "简单",
    "tag": [
        "二分查找",
        "数组"
    ],
    "desc": "编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。",
    "solutions": [
        {
            "date": 1617033600000,
            "time": 84,
            "memory": 39.3,
            "script": "typescript",
            "desc": "二分查找。",
            "code": "function searchMatrix(matrix: number[][], target: number): boolean {\n  const colLen = matrix[0].length;\n  const rowLen = matrix.length;\n  let targetRow!: number[];\n  for (let i = 0; i < rowLen; i++) {\n    const row = matrix[i];\n    if (i === rowLen - 1) {\n      targetRow = row;\n    } else if (row[0] <= target && matrix[i + 1][0] > target) {\n      targetRow = row;\n      break;\n    }\n  }\n  if (!targetRow) return false;\n  const find = (start: number, end: number): boolean => {\n    if (start > end) return false;\n    const mid = ~~((start + end) / 2);\n    if (targetRow[mid] < target) return find(mid + 1, end);\n    else if (targetRow[mid] > target) return find(start, mid - 1);\n    else return true;\n  };\n  return find(0, colLen - 1);\n}"
        },
        {
            "date": 1617033600000,
            "time": 84,
            "memory": 39.4,
            "script": "typescript",
            "desc": "二分查找。",
            "code": "function searchMatrix(matrix: number[][], target: number): boolean {\n  const colLen = matrix[0].length;\n  const rowLen = matrix.length;\n  const findRow = (start: number, end: number): number[] | undefined => {\n    if (start > end) return undefined;\n    const mid = ~~((start + end) / 2);\n    const row = matrix[mid];\n    if (row[0] > target) return findRow(start, mid - 1);\n    else if (row[colLen - 1] < target) return findRow(mid + 1, end);\n    else return row;\n  };\n  const targetRow: number[] | undefined = findRow(0, rowLen - 1);\n  if (!targetRow) return false;\n  const findTarget = (start: number, end: number): boolean => {\n    if (start > end) return false;\n    const mid = ~~((start + end) / 2);\n    if (targetRow[mid] < target) return findTarget(mid + 1, end);\n    else if (targetRow[mid] > target) return findTarget(start, mid - 1);\n    else return true;\n  };\n  return findTarget(0, colLen - 1);\n}"
        },
        {
            "date": 1617033600000,
            "time": 88,
            "memory": 39.2,
            "script": "typescript",
            "desc": "根据特性把二维数据当作一维进行运算。",
            "code": "function searchMatrix(matrix: number[][], target: number): boolean {\n  const colLen = matrix[0].length;\n  const rowLen = matrix.length;\n  const find = (start: number, end: number): boolean => {\n    if (start > end) return false;\n    const mid = ~~((start + end) / 2);\n    const row = ~~(mid / colLen);\n    const col = mid % colLen;\n    if (matrix[row][col] < target) return find(mid + 1, end);\n    else if (matrix[row][col] > target) return find(start, mid - 1);\n    else return true;\n  };\n  return find(0, colLen * rowLen - 1);\n}"
        }
    ]
}