{
    "id": "51",
    "name": "51.N皇后",
    "url": "https://leetcode.cn/problems/n-queens",
    "desc": "n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。",
    "solutions": [
        {
            "date": "2020-04-27",
            "time": 72,
            "memory": 36.1,
            "script": "javascript",
            "desc": "回溯算法，遍历后剪枝。",
            "code": "/**\n * @param {number} n\n * @return {string[][]}\n */\nvar solveNQueens = function (n) {\n  const cols = new Array(n);\n  const res = [];\n  queues(0);\n  function queues(row) {\n    if (row === n) {\n      res.push(getRes());\n    }\n    for (let col = 0; col < n; col++) {\n      if (isValid(row, col)) {\n        cols[row] = col;\n        queues(row + 1);\n      }\n    }\n  }\n  function isValid(row, col) {\n    for (let i = 0; i < row; i++) {\n      if (cols[i] === col) return false;\n      if (row - i === Math.abs(cols[i] - col)) return false;\n    }\n    return true;\n  }\n  function getRes() {\n    const res = [];\n    for (let row = 0; row < n; row++) {\n      let string = '';\n      for (let col = 0; col < n; col++) {\n        if (cols[row] === col) string += 'Q';\n        else string += '.';\n      }\n      res.push(string);\n    }\n    return res;\n  }\n  return res;\n};"
        },
        {
            "date": "2021-07-25",
            "time": 108,
            "memory": 44.7,
            "script": "typescript",
            "desc": "dfs+剪枝。",
            "code": "function solveNQueens(n: number): string[][] {\n  const ans: string[][] = [];\n  const colSet = new Set<number>();\n  const lineSet = new Set<string>();\n  const board = new Array(n).fill(0).map(_ => new Array(n).fill('.'));\n  dfs();\n  return ans;\n  function getLine(row: number, col: number): [string, string] {\n    return [`y=x+${n - 1 - row - col}${specStr}, ${specStr}y=-x+${n - 1 - row + col}`];\n  }\n  function dfs(row: number = 0) {\n    if (row === n) {\n      const newBoard: string[] = new Array(n).fill(0).map((_, row) =>\n        new Array(n)\n          .fill(0)\n          .map((_, col) => board[row][col])\n          .join('')\n      );\n      ans.push(newBoard);\n      return;\n    }\n    for (let col = 0; col < n; col++) {\n      if (colSet.has(col)) continue;\n      const [line1, line2] = getLine(row, col);\n      if (lineSet.has(line1) || lineSet.has(line2)) continue;\n      colSet.add(col);\n      lineSet.add(line1);\n      lineSet.add(line2);\n      board[row][col] = 'Q';\n      dfs(row + 1);\n      board[row][col] = '.';\n      colSet.delete(col);\n      lineSet.delete(line1);\n      lineSet.delete(line2);\n    }\n  }\n}"
        },
        {
            "time": 1707,
            "memory": 17.51,
            "desc": "dfs。",
            "code": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        rows, cols, k1, k2 = [False] * n, [False] * n, [False] * (n * 3), [False] * (n * 3)\n        tok1 = lambda i, j: n - i - j\n        tok2 = lambda i, j: n - i + j\n        res, data = [], [['.'] * n for _ in range(n)]\n        def dfs(i: int, j: int, cnt: int):\n            nonlocal res\n            if i == n:\n                if cnt == 0:\n                    item = []\n                    res.append(item)\n                    for row in data: item.append(''.join(row))\n                return\n            if j == n:\n                dfs(i + 1, 0, cnt)\n                return\n            dfs(i, j + 1, cnt)\n            if not rows[i] and not cols[j] and not k1[tok1(i, j)] and not k2[tok2(i, j)]:\n                rows[i] = cols[j] = k1[tok1(i, j)] = k2[tok2(i, j)] = True\n                data[i][j] = 'Q'\n                dfs(i, j + 1, cnt - 1)\n                data[i][j] = '.'\n                rows[i] = cols[j] = k1[tok1(i, j)] = k2[tok2(i, j)] = False\n        dfs(0, 0, n)\n        return res",
            "date": "2024-12-01"
        }
    ],
    "tagList": [
        "数组",
        "回溯"
    ],
    "level": "Hard"
}