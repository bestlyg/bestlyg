{
    "id": "88",
    "name": "88.合并两个有序数组",
    "url": "https://leetcode.cn/problems/merge-sorted-array",
    "difficulty": "简单",
    "tag": [
        "数组",
        "双指针",
        "排序"
    ],
    "desc": "给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。",
    "solutions": [
        {
            "date": 1617552000000,
            "time": 72,
            "memory": 39.4,
            "script": "typescript",
            "desc": "从后往前遍历，节省空间。",
            "code": "function merge(nums1: number[], m: number, nums2: number[], n: number): void {\n  if (m === 0) {\n    nums1.length = 0;\n    nums1.push(...nums2);\n  } else if (n === 0) {\n  } else {\n    let lPos = m - 1;\n    let rPos = n - 1;\n    let curPos = m + n - 1;\n    while (curPos >= 0) {\n      const num1 = nums1[lPos];\n      const num2 = nums2[rPos];\n      let curNum = num1;\n      if (lPos < 0) {\n        rPos--;\n        curNum = num2;\n      } else if (rPos < 0) {\n        lPos--;\n      } else if (num1 >= num2) {\n        lPos--;\n      } else {\n        rPos--;\n        curNum = num2;\n      }\n      nums1[curPos--] = curNum;\n    }\n  }\n}"
        },
        {
            "date": 1638201600000,
            "time": 4,
            "memory": 5.9,
            "script": "c",
            "desc": "从后往前遍历。",
            "code": "void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n){\n    int i = m + n - 1, i1 = m - 1, i2 = n - 1;\n    while (i >= 0 && i1 >= 0 && i2 >= 0) {\n        if (nums1[i1] >= nums2[i2]) nums1[i--] = nums1[i1--];\n        else nums1[i--] = nums2[i2--];\n    }\n    if (i1 < 0 && i2 >= 0) while(i >= 0) nums1[i--] = nums2[i2--];\n}"
        },
        {
            "date": 1638201600000,
            "time": 20,
            "memory": 8.7,
            "script": "c",
            "desc": "排序。",
            "code": "int comp(const void *a, const void *b) {\n    return *(int *)a - *(int *)b;\n}\nbool containsDuplicate(int* nums, int numsSize){\n    qsort(nums, numsSize, sizeof(int), comp);\n    int f = 0;\n    for (int i = 1; i < numsSize; i++) {\n        if (nums[i - 1] == nums[i]) {\n            f = 1;\n            break;\n        }\n    }\n    return f;\n}"
        },
        {
            "date": 1640016000000,
            "time": 0,
            "memory": 8.7,
            "script": "cpp",
            "desc": "从后往前遍历。",
            "code": "class Solution {\n   public:\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n        int idx = m + n - 1, idx1 = m - 1, idx2 = n - 1;\n        while (idx1 >= 0 || idx2 >= 0) {\n            if (idx1 >= 0 && (idx2 < 0 || nums1[idx1] >= nums2[idx2])) {\n                nums1[idx--] = nums1[idx1--];\n            } else {\n                nums1[idx--] = nums2[idx2--];\n            }\n        }\n    }\n};"
        }
    ]
}