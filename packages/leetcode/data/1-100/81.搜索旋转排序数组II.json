{
    "id": "81",
    "name": "81.搜索旋转排序数组II",
    "url": "https://leetcode.cn/problems/search-in-rotated-sorted-array-ii",
    "desc": "给你 旋转后 的数组 nums 和一个整数 target ，请你编写一个函数来判断给定的目标值是否存在于数组中。",
    "solutions": [
        {
            "date": "2021-04-07",
            "time": 84,
            "memory": 39.8,
            "script": "typescript",
            "desc": "先获取偏移值再进行二分查找。",
            "code": "function search(nums: number[], target: number): boolean {\n  const len = nums.length;\n  let k = 1;\n  for (; k < len; k++) if (nums[k - 1] > nums[k]) break;\n  const find = (start: number, end: number): boolean => {\n    if (start > end) return false;\n    const mid = ~~((start + end) / 2);\n    const num = nums[(mid + k) % len];\n    if (num > target) return find(start, mid - 1);\n    else if (num < target) return find(mid + 1, end);\n    else return true;\n  };\n  return find(0, len - 1);\n}"
        },
        {
            "date": "2021-07-23",
            "time": 80,
            "memory": 39.4,
            "script": "typescript",
            "desc": "二分查找。",
            "code": "function search(nums: number[], target: number): boolean {\n  let l = 0;\n  let r = nums.length - 1;\n  if (nums[l] === target || nums[r] === target) return true;\n  while (l < r) {\n    while (l < r && nums[l] !== target && nums[l] === nums[r]) {\n      l++;\n      r--;\n    }\n    if (nums[l] === target || nums[r] === target) return true;\n    const mid = (r + l) >> 1;\n    const midNum = nums[mid];\n    if (midNum === target) return true;\n    if (midNum <= nums[r]) {\n      if (midNum <= target && target <= nums[r]) l = mid + 1;\n      else r = mid - 1;\n    } else {\n      if (nums[l] <= target && target <= midNum) r = mid - 1;\n      else l = mid + 1;\n    }\n  }\n  return false;\n}"
        }
    ],
    "tagList": ["数组", "二分查找"],
    "level": "Medium"
}
