{
    "name": "94. 二叉树的中序遍历",
    "url": "https://leetcode-cn.com/problems/binary-tree-inorder-traversal/",
    "difficulty": "中等",
    "tag": [
        "栈",
        "树",
        "哈希表"
    ],
    "desc": "给定一个二叉树，返回它的中序 遍历。",
    "solutions": [
        {
            "date": 1582214400000,
            "time": 0,
            "memory": 38,
            "script": "java",
            "desc": "递归。",
            "code": "class Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n    \tLinkedList<Integer> list = new LinkedList<Integer>();\n        if(root==null)return list;\n        inorder(list,root);\n        return list;\n    }\n    public void inorder(List<Integer> list,TreeNode node) {\n    \tif(node.left!=null)inorder(list, node.left);\n    \tlist.add(node.val);\n    \tif(node.right!=null)inorder(list, node.right);\n    }\n}"
        },
        {
            "date": 1582214400000,
            "time": 1,
            "memory": 37.8,
            "script": "java",
            "desc": "迭代。",
            "code": "public List<Integer> inorderTraversal(TreeNode root) {\n\tList<Integer> list = new LinkedList<Integer>();\n\tif(root==null) return list;\n\tStack<TreeNode> stack= new Stack<TreeNode>();\n\tTreeNode node = root;\n\twhile(!stack.isEmpty()||node!=null) {\n\t\twhile(node!=null) {\n\t\t\tstack.push(node);\n\t\t\tnode=node.left;\n\t\t}\n\t\tnode=stack.pop();\n\t\tlist.add(node.val);\n\t\tnode=node.right;\n\t}\n\treturn list;\n}"
        },
        {
            "date": 1600012800000,
            "time": 72,
            "memory": 37.5,
            "script": "typescript",
            "desc": "递归。",
            "code": "function inorderTraversal(root: TreeNode | null): number[] {\n  const ans: number[] = [];\n  _inorder(root);\n  return ans;\n  function _inorder(node: TreeNode | null): void {\n    if (node === null) return;\n    node.left !== null && _inorder(node.left);\n    ans.push(node.val);\n    node.right !== null && _inorder(node.right);\n  }\n}"
        },
        {
            "date": 1600012800000,
            "time": 84,
            "memory": 37.5,
            "script": "typescript",
            "desc": "迭代。",
            "code": "function inorderTraversal(root: TreeNode | null): number[] {\n  if (root === null) return [];\n  const ans: number[] = [];\n  const stack: TreeNode[] = [root];\n  const used = new Set<TreeNode>();\n  while (stack.length !== 0) {\n    const node = stack.pop() as TreeNode;\n    if (used.has(node)) {\n      ans.push(node.val);\n    } else {\n      used.add(node);\n      node.right && stack.push(node.right);\n      stack.push(node);\n      node.left && stack.push(node.left);\n    }\n  }\n  return ans;\n}"
        },
        {
            "date": 1637942400000,
            "time": 0,
            "memory": 5.6,
            "script": "c",
            "desc": "递归。",
            "code": "// 先递归左，再计算当前节点，再递归右\nvoid order(struct TreeNode *root, int *arr, int *idx){\n    if (!root) return ;\n    order(root->left, arr, idx);\n    arr[(*idx)++] = root->val;\n    order(root->right, arr, idx);\n}\nint* inorderTraversal(struct TreeNode* root, int* returnSize){\n    int *arr = (int *)malloc(sizeof(int) * 100);\n    *returnSize = 0;\n    order(root, arr, returnSize);\n    return arr;\n}"
        }
    ]
}