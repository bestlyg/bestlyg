{
    "id": "18",
    "name": "18.四数之和",
    "url": "https://leetcode.cn/problems/4sum",
    "difficulty": "中等",
    "tag": [
        "数组",
        "双指针",
        "排序"
    ],
    "desc": "给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b], nums[c], nums[d]] 。",
    "solutions": [
        {
            "script": "javascript",
            "time": 92,
            "memory": 39.7,
            "desc": "双指针。",
            "code": "/**\n* @param {number[]} nums\n* @param {number} target\n* @return {number[][]}\n*/\nvar fourSum = function(nums, target) {\n    const quadruplets = [];\n    if (nums.length < 4) {\n        return quadruplets;\n    }\n    nums.sort((x, y) => x - y);\n    const length = nums.length;\n    for (let i = 0; i < length - 3; i++) {\n        if (i > 0 && nums[i] === nums[i - 1]) {\n            continue;\n        }\n        if (nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) {\n            break;\n        }\n        if (nums[i] + nums[length - 3] + nums[length - 2] + nums[length - 1] < target) {\n            continue;\n        }\n        for (let j = i + 1; j < length - 2; j++) {\n            if (j > i + 1 && nums[j] === nums[j - 1]) {\n                continue;\n            }\n            if (nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target) {\n                break;\n            }\n            if (nums[i] + nums[j] + nums[length - 2] + nums[length - 1] < target) {\n                continue;\n            }\n            let left = j + 1, right = length - 1;\n            while (left < right) {\n                const sum = nums[i] + nums[j] + nums[left] + nums[right];\n                if (sum === target) {\n                    quadruplets.push([nums[i], nums[j], nums[left], nums[right]]);\n                    while (left < right && nums[left] === nums[left + 1]) {\n                        left++;\n                    }\n                    left++;\n                    while (left < right && nums[right] === nums[right - 1]) {\n                        right--;\n                    }\n                    right--;\n                } else if (sum < target) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n    }\n    return quadruplets;\n};",
            "date": 1689350400000
        },
        {
            "script": "cpp",
            "time": 44,
            "memory": 12.8,
            "desc": "双指针。",
            "code": "class Solution {\npublic:\n    vector<vector<int>> fourSum(vector<int>& nums, int target) {\n        int n = nums.size();\n        vector<vector<int>> res;\n        sort(nums.begin(), nums.end());\n        for (int i = 0; i + 3 < n && (nums[i] <= target || nums[i] < 0); i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) continue;\n            for (int j = i + 1; j + 2 < n && (nums[i] + nums[j] <= target || nums[j] < 0); j++) {\n                if (j > i + 1 && nums[j] == nums[j - 1]) continue;\n                long long num = nums[i] + nums[j];\n                int l = j + 1, r = n - 1;\n                while (l < r) {\n                    if (num + nums[l] + nums[r] > target) r--;\n                    else if (num + nums[l] + nums[r] < target)  l++;\n                    else {\n                        res.push_back({ nums[i], nums[j], nums[l], nums[r] });\n                        while (l + 1 < r && nums[l + 1] == nums[l]) l++;\n                        while (r - 1 > l && nums[r - 1] == nums[r]) r--;\n                        l++;\n                        r--;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n};",
            "date": 1689350400000
        },
        {
            "script": "python",
            "time": 500,
            "memory": 16.1,
            "desc": "同上。",
            "code": "class Solution:\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\n        n = len(nums)\n        res = []\n        nums.sort()\n        i = 0\n        while i + 3 < n and (nums[i] <= target or nums[i] < 0):\n            if i > 0 and nums[i] == nums[i - 1]:\n                i += 1\n                continue\n            j = i + 1\n            while j + 2 < n and (nums[i] + nums[j] <= target or nums[j] < 0):\n                if j > i + 1 and nums[j] == nums[j-1]:\n                    j += 1\n                    continue\n                num = nums[i] + nums[j]\n                l = j + 1\n                r = n-1\n                while l < r:\n                    if num + nums[l] + nums[r] > target:\n                        r -= 1\n                    elif num + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        while l + 1 < r and nums[l + 1] == nums[l]:\n                            l += 1\n                        while r - 1 > l and nums[r - 1] == nums[r]:\n                            r -= 1\n                        l += 1\n                        r -= 1\n                j += 1\n            i += 1\n        return res",
            "date": 1689350400000
        },
        {
            "script": "rust",
            "time": 4,
            "memory": 2,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn four_sum(mut nums: Vec<i32>, target: i32) -> Vec<Vec<i32>> {\n        let n = nums.len();\n        let mut res = vec![];\n        nums.sort();\n        let mut i = 0;\n        while i + 3 < n && (nums[i] <= target || nums[i] < 0) {\n            if i > 0 && nums[i] == nums[i - 1] {\n                i += 1;\n                continue;\n            }\n            let mut j = i + 1;\n            while j + 2 < n && (nums[i] + nums[j] <= target || nums[j] < 0) {\n                if j > i + 1 && nums[j] == nums[j - 1] {\n                    j += 1;\n                    continue;\n                }\n                let num = (nums[i] + nums[j]) as i64;\n                let mut l = j + 1;\n                let mut r = n - 1;\n                while l < r {\n                    let num = num + nums[l] as i64 + nums[r] as i64;\n                    let target = target as i64;\n                    if num > target {\n                        r -= 1;\n                    } else if num < target {\n                        l += 1;\n                    } else {\n                        res.push(vec![nums[i], nums[j], nums[l], nums[r]]);\n                        while l + 1 < r && nums[l + 1] == nums[l] {\n                            l += 1;\n                        }\n                        while r - 1 > l && nums[r - 1] == nums[r] {\n                            r -= 1;\n                        }\n                        l += 1;\n                        r -= 1;\n                    }\n                }\n                j += 1;\n            }\n            i += 1;\n        }\n        res\n    }\n}",
            "date": 1689350400000
        }
    ]
}