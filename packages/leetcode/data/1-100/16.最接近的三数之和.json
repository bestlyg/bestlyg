{
    "id": "16",
    "name": "16.最接近的三数之和",
    "url": "https://leetcode.cn/problems/3sum-closest",
    "desc": "给定一个包括  n 个整数的数组  nums  和 一个目标值  target。找出  nums  中的三个整数，使得它们的和与  target  最接近。返回这三个数的和。假定每组输入只存在唯一答案。",
    "solutions": [
        {
            "date": "2020-06-10",
            "time": 80,
            "memory": 35.9,
            "script": "typescript",
            "desc": "如题 15。",
            "code": "function threeSumClosest(nums: number[], target: number): number {\n  const len = nums.length;\n  nums = nums.sort((a, b) => a - b);\n  let min = Infinity;\n  let minNum = 0;\n  let maxI = target <= 0 ? 0 : target;\n  for (let i = 0; i === 0 || nums[i] < maxI; i++) {\n    let l = i + 1;\n    let r = len - 1;\n    while (l < r) {\n      const num = nums[i] + nums[l] + nums[r];\n      const comp = num - target;\n      if (min > Math.abs(comp)) {\n        min = Math.abs(comp);\n        minNum = num;\n      }\n      if (comp < 0) l++;\n      else if (comp > 0) r--;\n      else if (comp === 0) return num;\n    }\n  }\n  return minNum;\n}"
        },
        {
            "script": "cpp",
            "time": 136,
            "memory": 9.9,
            "desc": "二分。",
            "code": "class Solution {\npublic:\n    int threeSumClosest(vector<int>& nums, int target) {\n        nums.push_back(0x3f3f3f3f);\n        nums.push_back(-0x3f3f3f3f);\n        sort(nums.begin(), nums.end());\n        int n = nums.size(), res = -0x3f3f3f3f;\n        for (int i = 1; i + 2 < n; i++) {\n            for (int j = i + 1; j + 1 < n; j++) {\n                int l = j + 1, r = n, sum = nums[i] + nums[j];\n                while (l < r) {\n                    int m = (l + r) / 2;\n                    if (nums[m] >= target - sum) r = m;\n                    else l = m + 1;\n                }\n                if (sum + nums[l] == target) return target;\n                if (nums[l] != INT_MAX && abs(target - sum - nums[l]) < abs(target - res)) {\n                    res = sum + nums[l];\n                }\n                if (l != j + 1 && nums[l - 1] != INT_MIN && abs(target - sum - nums[l - 1]) < abs(target - res)) {\n                    res = sum + nums[l - 1];\n                }                \n            }\n        }\n        return res;\n    }\n};",
            "date": "2023-07-10"
        }
    ],
    "tagList": ["数组", "双指针", "排序"],
    "level": "Medium"
}
