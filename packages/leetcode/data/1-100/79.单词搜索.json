{
    "id": "79",
    "name": "79.单词搜索",
    "url": "https://leetcode.cn/problems/word-search",
    "difficulty": "中等",
    "tag": [
        "数组",
        "回溯",
        "矩阵"
    ],
    "desc": "给定一个二维网格和一个单词，找出该单词是否存在于网格中。",
    "solutions": [
        {
            "date": 1599926400000,
            "time": 168,
            "memory": 44.1,
            "script": "typescript",
            "desc": "深度优先搜索。",
            "code": "function exist(board: string[][], word: string): boolean {\n  const rowLen = board.length;\n  const colLen = board[0].length;\n  const used = new Set<string>();\n  const format = (row: number, col: number) => `${row}:${col}`;\n  const startArr = getStarStArr(word[0]);\n  if (startArr.length === 0) return false;\n  return find(word, startArr);\n  function find(word: string, startArr: [number, number][] = []): boolean {\n    if (word.length === 1) {\n      for (const [row, col] of startArr) {\n        if (board[row][col] === word && !used.has(format(row, col))) return true;\n      }\n      return false;\n    }\n    const nextWord = word.substr(1);\n    for (const [row, col] of startArr) {\n      const formatName = format(row, col);\n      if (used.has(formatName)) continue;\n      used.add(formatName);\n      const arr = findNext(row, col, nextWord[0]);\n      if (arr.length === 0) {\n      } else if (find(nextWord, arr)) return true;\n      used.delete(formatName);\n    }\n    return false;\n  }\n  function getStarStArr(char: string): [number, number][] {\n    const ans: [number, number][] = [];\n    for (let i = 0; i < rowLen; i++)\n      for (let j = 0; j < colLen; j++) {\n        board[i][j] === char && ans.push([i, j]);\n      }\n    return ans;\n  }\n  function findNext(row: number, col: number, char: string): [number, number][] {\n    const ans: [number, number][] = [];\n    row !== 0 && board[row - 1][col] === char && ans.push([row - 1, col]);\n    col !== 0 && board[row][col - 1] === char && ans.push([row, col - 1]);\n    row !== rowLen - 1 && board[row + 1][col] === char && ans.push([row + 1, col]);\n    col !== colLen - 1 && board[row][col + 1] === char && ans.push([row, col + 1]);\n    return ans;\n  }\n}"
        },
        {
            "date": 1645113600000,
            "time": 144,
            "memory": 7.8,
            "script": "c++",
            "desc": "dfs。",
            "code": "int dirs[4][2] = {\n    {0, 1},\n    {0, -1},\n    {1, 0},\n    {-1, 0},\n};\nclass Solution {\n   public:\n    int n, m, check[10][10] = {0};\n    bool dfs(vector<vector<char>>& board, string& s, int idx, int row,\n             int col) {\n        if (idx == s.size() - 1) return board[row][col] == s[idx];\n        if (s[idx] != board[row][col]) return 0;\n        check[row][col] = 1;\n        int res = 0;\n        for (int i = 0; i < 4; i++) {\n            int nrow = row + dirs[i][0], ncol = col + dirs[i][1];\n            if (nrow < 0 || nrow >= n || ncol < 0 || ncol >= m ||\n                check[nrow][ncol])\n                continue;\n            if (dfs(board, s, idx + 1, nrow, ncol)) {\n                res = 1;\n                break;\n            }\n        }\n        check[row][col] = 0;\n        return res;\n    }\n    bool exist(vector<vector<char>>& board, string word) {\n        n = board.size();\n        m = board[0].size();\n        for (int row = 0; row < n; row++) {\n            for (int col = 0; col < m; col++) {\n                if (dfs(board, word, 0, row, col)) return 1;\n            }\n        }\n        return 0;\n    }\n};"
        }
    ]
}