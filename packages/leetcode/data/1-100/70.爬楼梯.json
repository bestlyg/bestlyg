{
    "name": "70.爬楼梯",
    "url": "https://leetcode-cn.com/problems/climbing-stairs/",
    "difficulty": "简单",
    "tag": [
        "动态规划"
    ],
    "desc": "假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？",
    "solutions": [
        {
            "date": 1591977600000,
            "time": 84,
            "memory": 32.3,
            "script": "typescript",
            "desc": "dp[i]=dp[i-1]+dp[i-2]。",
            "code": "function climbStairs(n: number): number {\n  const dp = [1, 1];\n  for (let i = 2; i <= n; i++) dp[i] = dp[i - 1] + dp[i - 2];\n  return dp[n];\n}"
        },
        {
            "date": 1630598400000,
            "time": 68,
            "memory": 39.4,
            "script": "typescript",
            "desc": "动态规划。",
            "code": "function climbStairs(n: number): number {\n  const dp = new Array(n + 1);\n  dp[0] = dp[1] = 1;\n  for (let i = 2; i <= n; i++) dp[i] = dp[i - 1] + dp[i - 2];\n  return dp[n];\n}"
        },
        {
            "date": 1640016000000,
            "time": 0,
            "memory": 6.1,
            "script": "c++",
            "desc": "动态规划。",
            "code": "class Solution {\n   public:\n    int climbStairs(int n) {\n        vector<int> dp(n + 1, 0);\n        dp[0] = dp[1] = 1;\n        for (int i = 2; i <= n; i++) dp[i] = dp[i - 1] + dp[i - 2];\n        return dp[n];\n    }\n};"
        }
    ]
}