{
    "name": "100.相同的树",
    "url": "https://leetcode-cn.com/problems/same-tree/",
    "difficulty": "简单",
    "tag": [
        "树",
        "深度优先搜索"
    ],
    "desc": "给定两个二叉树，编写一个函数来检验它们是否相同。",
    "solutions": [
        {
            "date": 1596729600000,
            "time": 88,
            "memory": 38.1,
            "script": "typescript",
            "desc": "序列化后比较字符串即可。",
            "code": "function isSameTree(p: TreeNode | null, q: TreeNode | null): boolean {\n  return serialize(p) === serialize(q);\n  function serialize(node: TreeNode | null): string {\n    const queue = [node];\n    const hasNum = () => queue.some(v => v !== null);\n    let str = '';\n    while (hasNum()) {\n      const node = queue.shift() as TreeNode | null;\n      if (node === null) {\n        str += 'null,';\n        continue;\n      } else {\n        str += node.val + ',';\n      }\n      if (node.left !== null) queue.push(node.left);\n      else queue.push(null);\n      if (node.right !== null) queue.push(node.right);\n      else queue.push(null);\n    }\n    return `[${str.substr(0, str.length - 1)}]`;\n  }\n}"
        },
        {
            "date": 1637942400000,
            "time": 0,
            "memory": 5.7,
            "script": "c",
            "desc": "递归。",
            "code": "bool isSameTree(struct TreeNode* p, struct TreeNode* q){\n    // 同为NULL则相同\n    if (p == NULL && q == NULL) return 1;\n    // 若其中一个为NULL或者值不一样就不同,\n    if (p == NULL || q == NULL || p->val != q->val) return 0;\n    // 否则递归子树\n    return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);\n}"
        }
    ]
}