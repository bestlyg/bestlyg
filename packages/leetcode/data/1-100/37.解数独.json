{
  "name": "37. 解数独",
  "url": "https://leetcode-cn.com/problems/sudoku-solver/",
  "difficulty": "困难",
  "tag": ["哈希表", "回溯算法"],
  "desc": "编写一个程序，通过已填充的空格来解决数独问题。",
  "solutions": [
    {
      "date": 1600099200000,
      "time": 96,
      "memory": 38.4,
      "script": "typescript",
      "desc": "[参考连接](https://leetcode-cn.com/problems/sudoku-solver/solution/di-gui-hui-su-wei-yun-suan-by-zoffer-3/)。",
      "code": "class Sudoku {\n  private rows = new Array(9).fill(0);\n  private cols = new Array(9).fill(0);\n  private boxs = Array.from({ length: 3 }, () => new Array(3).fill(0));\n  private emptyCells = new Set<number>();\n  constructor(private board: string[][]) {}\n  solve() {\n    //初始化已知的数字\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        const num = this.board[i][j];\n        if (num !== '.') {\n          //将数字转化为二进制标记\n          //1 -> 0b1, 2 -> 0b10, 3 -> 0b100, 4 -> 0b1000 ...\n          const sign = 1 << (Number(num) - 1);\n          this.rows[i] |= sign;\n          this.cols[j] |= sign;\n          this.boxs[Math.floor(i / 3)][Math.floor(j / 3)] |= sign;\n        } else {\n          this.emptyCells.add((i << 4) | j);\n        }\n      }\n    }\n    //主逻辑\n    return this.fillNext();\n  }\n  fillNext() {\n    let cellInfo = this.getEmptyCell();\n    if (cellInfo === null) {\n      //没有空格，解题成功\n      return true;\n    }\n    let [i, j, possible] = cellInfo;\n    while (possible) {\n      //截取其中一个可能性\n      const sign = -possible & possible;\n      //填入空格\n      this.fillCell(i, j, sign);\n      //继续下一个填充\n      if (this.fillNext()) {\n        //填充成功\n        return true;\n      } else {\n        //排除当前数字\n        possible ^= sign;\n        //清空空格\n        this.cleanCell(i, j, sign);\n      }\n    }\n    //穷尽所有可能性，回溯\n    return false;\n  }\n  getEmptyCell() {\n    let min = 10;\n    let cellInfo = null;\n    for (const id of this.emptyCells) {\n      const i = id >> 4,\n        j = id & 0b1111;\n      const possible = this.getCellPossible(i, j);\n      const count = this.countPossible(possible);\n      if (min > count) {\n        //挑选可能性最少的格子，理论上可减少犯错回溯\n        cellInfo = [i, j, possible];\n        min = count;\n      }\n    }\n    return cellInfo;\n  }\n  countPossible(possible: number) {\n    //计算二进制 1 的数量\n    let count = 0;\n    while (possible) {\n      possible &= possible - 1;\n      count++;\n    }\n    return count;\n  }\n  fillCell(i: number, j: number, sign: number) {\n    //对应位变成1，标记占用\n    this.rows[i] |= sign;\n    this.cols[j] |= sign;\n    this.boxs[Math.floor(i / 3)][Math.floor(j / 3)] |= sign;\n    //填入空格\n    this.emptyCells.delete((i << 4) | j);\n    this.board[i][j] = String(Math.log2(sign) + 1);\n  }\n  cleanCell(i: number, j: number, sign: number) {\n    //对应位变为0，清除占用\n    this.rows[i] &= ~sign;\n    this.cols[j] &= ~sign;\n    this.boxs[Math.floor(i / 3)][Math.floor(j / 3)] &= ~sign;\n    //清空格子\n    this.emptyCells.add((i << 4) | j);\n    this.board[i][j] = '.';\n  }\n  getCellPossible(i: number, j: number) {\n    //获取格子可能的取值，二进制1表示可选\n    return (\n      (this.rows[i] | this.cols[j] | this.boxs[Math.floor(i / 3)][Math.floor(j / 3)]) ^ 0b111111111\n    );\n  }\n}\nfunction solveSudoku(board: string[][]): void {\n  new Sudoku(board).solve();\n}"
    }
  ]
}
