{
  "name": "63. 不同路径 II",
  "url": "https://leetcode-cn.com/problems/unique-paths-ii/",
  "difficulty": "中等",
  "tag": ["数组", "动态规划"],
  "desc": "一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？",
  "solutions": [
    {
      "date": 1593964800000,
      "time": 80,
      "memory": 37,
      "script": "typescript",
      "desc": "dp[i][j] = dp[i+1][j] + dp[i][j+1]。",
      "code": "function uniquePathsWithObstacles(obstacleGrid: number[][]): number {\n  const n = obstacleGrid.length;\n  if (n === 0) return 0;\n  const m = obstacleGrid[0].length;\n  if (m === 0) return 0;\n  else if (obstacleGrid[0][0] === 1) return 0;\n  else if (n === 1) {\n    for (const num of obstacleGrid[0]) if (num === 1) return 0;\n    return 1;\n  } else if (m === 1) {\n    for (let i = 0; i < n; i++) if (obstacleGrid[i][0] === 1) return 0;\n    return 1;\n  } else if (obstacleGrid[n - 1][m - 1] === 1) return 0;\n  else {\n    const dp = new Array(n).fill(0).map(_ => new Array(m).fill(0));\n    dp[n - 1][m - 2] = obstacleGrid[n - 1][m - 2] ^ 1;\n    dp[n - 2][m - 1] = obstacleGrid[n - 2][m - 1] ^ 1;\n    for (let i = n - 1; i >= 0; i--) {\n      for (let j = m - 1; j >= 0; j--) {\n        if (obstacleGrid[i][j] === 1 || dp[i][j] === 1) continue;\n        dp[i][j] = (j + 1 < m ? dp[i][j + 1] : 0) + (i + 1 < n ? (dp[i][j] += dp[i + 1][j]) : 0);\n      }\n    }\n    return dp[0][0];\n  }\n}"
    }
  ]
}
