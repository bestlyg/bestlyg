{
    "id": "19",
    "name": "19.删除链表的倒数第N个结点",
    "url": "https://leetcode.cn/problems/remove-nth-node-from-end-of-list",
    "desc": "给定一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。",
    "solutions": [
        {
            "date": "2020-05-22",
            "time": 64,
            "memory": 33.5,
            "script": "javascript",
            "desc": "压栈后出栈。",
            "code": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function (head, n) {\n  if (head === null || head.next === null) return null;\n  let temp = head;\n  const stack = [];\n  while (temp !== null) {\n    stack.push(temp);\n    temp = temp.next;\n  }\n  if (n === stack.length) return head.next;\n  stack.pop();\n  let c = 0;\n  while (++c !== n) {\n    stack.pop();\n  }\n  const node = stack.pop();\n  node.next = node.next.next;\n  return head;\n};"
        },
        {
            "date": "2020-10-18",
            "time": 96,
            "memory": 40.1,
            "script": "typescript",
            "desc": "利用栈排序。",
            "code": "function removeNthFromEnd(head: ListNode | null, n: number): ListNode | null {\n  if (head === null) return null;\n  const stack: ListNode[] = [];\n  let temp: ListNode | null = head;\n  while (temp !== null) {\n    stack.push(temp);\n    temp = temp.next;\n  }\n  if (stack.length === n) return head.next;\n  while (n-- !== 0) {\n    stack.pop();\n  }\n  const node = stack.pop()!;\n  node.next = node.next!.next;\n  return head;\n}"
        },
        {
            "date": "2020-10-18",
            "time": 92,
            "memory": 40.2,
            "script": "typescript",
            "desc": "快慢指针，快指针先走 n 个节点。",
            "code": "function removeNthFromEnd(head: ListNode | null, n: number): ListNode | null {\n  const dummy = new ListNode(0, head);\n  let first: ListNode | null = head;\n  let second: ListNode = dummy;\n  for (let i = 0; i < n; i++) first = first?.next!;\n  while (first !== null) {\n    first = first.next;\n    second = second?.next!;\n  }\n  second.next = second.next?.next!;\n  return dummy.next;\n}"
        },
        {
            "date": "2021-03-06",
            "time": 108,
            "memory": 39.2,
            "script": "typescript",
            "desc": "假设总长 len,q 先走 n 步,还剩 len-n 步,p 从头开始和 q 一起走,走到 q 为 null 的时候,p 就是要删除的节点。",
            "code": "function removeNthFromEnd(head: ListNode | null, n: number): ListNode | null {\n  const dummyHead = new ListNode(0, head);\n  let q = head;\n  while (n--) q = q!.next!;\n  let p = dummyHead;\n  while (q !== null) {\n    q = q.next!;\n    p = p.next!;\n  }\n  p.next = p.next!.next;\n  return dummyHead.next;\n}"
        },
        {
            "date": "2021-11-19",
            "time": 0,
            "memory": 5.8,
            "script": "c",
            "desc": "遍历。",
            "code": "struct ListNode* removeNthFromEnd(struct ListNode* head, int n){\n        int sum = 0;\n        struct ListNode* p = head;\n        while (p) p = p->next, sum++;\n        if (sum == 1 && n == 1) return NULL;\n        int del_idx = sum - n;\n        p = head;\n        if (del_idx == 0) return p->next;\n        while (--del_idx) p = p->next;\n        p->next = p->next->next;\n        return head;\n}"
        }
    ],
    "tagList": [
        "链表",
        "双指针"
    ],
    "level": "Medium"
}