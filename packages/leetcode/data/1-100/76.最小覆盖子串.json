{
    "id": "76",
    "name": "76.最小覆盖子串",
    "url": "https://leetcode.cn/problems/minimum-window-substring",
    "desc": "给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字符的最小子串。",
    "solutions": [
        {
            "date": "2020-05-23",
            "time": 1400,
            "memory": 43.8,
            "script": "typescript",
            "desc": "定义 i,j 指向 0，不满足条件时 j++，满足时 i++。",
            "code": "type CharCount = { [c: string]: number };\nvar minWindow = function (s: string, t: string): string {\n  // 储存值\n  const map: CharCount = {};\n  for (const c of t) map[c] = map[c] ? map[c] + 1 : 1;\n  function valid(now: CharCount) {\n    for (const [k, v] of Object.entries(map)) if (!now[k] || now[k] < v) return false;\n    return true;\n  }\n  console.log(map);\n  const slen = s.length;\n  const nowMap: CharCount = {};\n  let i = 0,\n    j = 0;\n  let resi = 0,\n    resj = Number.MAX_VALUE;\n  let isV = false;\n  while (j <= slen) {\n    if ((isV = valid(nowMap))) {\n      if (j - i < resj - resi) {\n        resj = j;\n        resi = i;\n      }\n    }\n    if (isV) {\n      const prevC = s[i++];\n      if (nowMap[prevC] === 1) {\n        delete nowMap[prevC];\n      } else {\n        nowMap[prevC]--;\n      }\n    } else {\n      const nextC = s[j++];\n      nowMap[nextC] = nowMap[nextC] ? nowMap[nextC] + 1 : 1;\n    }\n  }\n  console.log(resi, resj);\n  return resj === Number.MAX_VALUE ? '' : s.substring(resi, resj);\n};"
        },
        {
            "date": "2021-11-07",
            "time": 92,
            "memory": 41,
            "script": "typescript",
            "desc": "滑动窗口。",
            "code": "function minWindow(s: string, t: string): string {\n  let cnt = 0;\n  const map: Record<string, number> = {};\n  for (const ch of t) {\n    map[ch] = (map[ch] ?? 0) + 1;\n    if (map[ch] === 1) cnt++;\n  }\n  let l = 0;\n  let r = 0;\n  let ansLen = s.length + 1;\n  let ans = '';\n  while (r <= s.length) {\n    if (cnt) {\n      const ch = s[r];\n      if (map[ch] !== undefined) {\n        map[ch]--;\n        if (map[ch] === 0) cnt--;\n      }\n      r++;\n    } else {\n      const ch = s[l];\n      if (map[ch] !== undefined) {\n        map[ch]++;\n        if (map[ch] === 1) cnt++;\n      }\n      l++;\n    }\n    if (cnt === 0 && ansLen > r - l) {\n      ans = s.substring(l, r);\n      ansLen = ans.length;\n    }\n  }\n  return ans;\n}"
        },
        {
            "date": "2021-11-07",
            "time": 92,
            "memory": 41,
            "script": "typescript",
            "desc": "滑动窗口。",
            "code": "function minWindow(s: string, t: string): string {\n  let cnt = 0;\n  const map: Record<string, number> = {};\n  for (const ch of t) {\n    map[ch] = (map[ch] ?? 0) + 1;\n    if (map[ch] === 1) cnt++;\n  }\n  let l = 0;\n  let r = 0;\n  let ansLen = s.length + 1;\n  let ans = '';\n  while (r <= s.length) {\n    if (cnt) {\n      const ch = s[r];\n      if (map[ch] !== undefined) {\n        map[ch]--;\n        if (map[ch] === 0) cnt--;\n      }\n      r++;\n    } else {\n      const ch = s[l];\n      if (map[ch] !== undefined) {\n        map[ch]++;\n        if (map[ch] === 1) cnt++;\n      }\n      l++;\n    }\n    if (cnt === 0 && ansLen > r - l) {\n      ans = s.substring(l, r);\n      ansLen = ans.length;\n    }\n  }\n  return ans;\n}"
        }
    ],
    "tagList": ["哈希表", "字符串", "滑动窗口"],
    "level": "Hard"
}
