{
    "name": "83. 删除排序链表中的重复元素",
    "url": "https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/",
    "difficulty": "简单",
    "tag": [
        "链表"
    ],
    "desc": "给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。",
    "solutions": [
        {
            "date": 1581523200000,
            "time": 3,
            "memory": 45,
            "script": "java",
            "desc": "使用 set 储存元素，储存前会先判断 set 中是否已存在，若存在则移除。",
            "code": "class Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        if(head==null) {\n\t\t\treturn null;\n\t\t}\n\t\tHashSet<Integer> set = new HashSet<Integer>();\n\t\tListNode newHead=head;\n\t\tset.add(head.val);\n\t\twhile(head.next!=null) {\n\t\t\tif(!set.contains(head.next.val)) {\n\t\t\t\tset.add(head.next.val);\n\t\t\t\thead=head.next;\n\t\t\t}else {\n\t\t\t\thead.next=head.next.next;\n\t\t\t}\n\t\t}\n        return newHead;\n    }\n}"
        },
        {
            "date": 1614960000000,
            "time": 100,
            "memory": 40,
            "script": "typescript",
            "desc": "利用已排序的特点直接进行比较。",
            "code": "function deleteDuplicates(head: ListNode | null): ListNode | null {\n  if (head === null) return null;\n  let p = head;\n  while (p.next !== null)\n    if (p.val === p.next.val) p.next = p.next.next;\n    else p = p.next;\n  return head;\n}"
        },
        {
            "date": 1616688000000,
            "time": 96,
            "memory": 39.9,
            "script": "typescript",
            "desc": "依次判断是否与下一个值相等。",
            "code": "function deleteDuplicates(head: ListNode | null): ListNode | null {\n  if (head === null) return null;\n  let p: ListNode | null = head;\n  while (p !== null) {\n    while (p.next !== null && p.val === p.next.val) p.next = p.next.next;\n    p = p.next;\n  }\n  return head;\n}"
        },
        {
            "date": 1637251200000,
            "time": 4,
            "memory": 6.2,
            "script": "c",
            "desc": "双指针。",
            "code": "struct ListNode* deleteDuplicates(struct ListNode* head){\n    struct ListNode *p = head;\n    struct ListNode *work_p = head;\n    while (work_p) {\n        while (work_p && work_p->val == p->val) work_p = work_p->next;\n        p->next = work_p;\n        p = p->next;\n    }\n    return head;\n}"
        }
    ]
}