{
    "id": "1456",
    "name": "1334.阈值距离内邻居最少的城市",
    "url": "https://leetcode.cn/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",
    "difficulty": "中等",
    "tag": ["图", "动态规划", "最短路"],
    "desc": "有 n 个城市，按从 0 到 n-1 编号。给你一个边数组 edges，其中 edges[i] = [fromi, toi, weighti] 代表 fromi 和 toi 两个城市之间的双向加权边，距离阈值是一个整数 distanceThreshold。返回能通过某些路径到达其他城市数目最少、且路径距离 最大 为 distanceThreshold 的城市。如果有多个这样的城市，则返回编号最大的城市。",
    "solutions": [
        {
            "script": "python",
            "time": 560,
            "memory": 16.87,
            "desc": "佛洛依德短路算法。",
            "code": "class Solution:\n    def findTheCity(self, n: int, edges: List[List[int]], distanceThreshold: int) -> int:\n        d = [[inf] * n for _ in range(n)]\n        for i in range(n): d[i][i] = 0\n        for edge in edges:\n            d[edge[0]][edge[1]] = edge[2]\n            d[edge[1]][edge[0]] = edge[2]\n        for k in range(n):\n            for i in range(n):\n                for j in range(n):\n                    d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n\n        ans = 0\n        cnt = inf\n        for i in range(n):\n            cur = len(list(filter(lambda o: o <= distanceThreshold, d[i]))) - 1\n            if cur <= cnt:\n                ans = i\n                cnt = cur\n        return ans",
            "date": 1699891200000
        },
        {
            "script": "python",
            "time": 268,
            "memory": 17,
            "desc": "迪杰特斯拉短路算法。",
            "code": "class Solution:\n    def findTheCity(self, n: int, edges: List[List[int]], distanceThreshold: int) -> int:\n        nodes = [[] for _ in range(n)]\n        for edge in edges:\n            nodes[edge[0]].append((edge[1], edge[2]))\n            nodes[edge[1]].append((edge[0], edge[2]))\n        ans = 0\n        cnt = inf\n        for i in range(n):\n            q = [(0, i)]\n            used = [False] * n\n            cur = -1\n            while q:\n                d, node = heappop(q)\n                if used[node]: continue\n                used[node] = True\n                cur += 1\n                for next_node, next_d in nodes[node]:\n                    if not used[next_node] and d + next_d <= distanceThreshold:\n                        heappush(q, (d + next_d, next_node))\n            if cur <= cnt:\n                cnt = cur\n                ans = i\n        return ans",
            "date": 1699891200000
        }
    ]
}
