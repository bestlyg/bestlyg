{
    "id": "1463",
    "name": "1337.矩阵中战斗力最弱的K行",
    "url": "https://leetcode.cn/problems/the-k-weakest-rows-in-a-matrix",
    "difficulty": "简单",
    "tag": ["数组", "二分查找", "矩阵", "排序", "堆（优先队列）"],
    "desc": "给你一个大小为  m \\* n  的矩阵  mat，矩阵由若干军人和平民组成，分别用 1 和 0 表示。请你返回矩阵中战斗力最弱的  k  行的索引，按从最弱到最强排序。",
    "solutions": [
        {
            "date": 1627747200000,
            "time": 76,
            "memory": 39.9,
            "script": "typescript",
            "desc": "哈希储存。",
            "code": "function kWeakestRows(mat: number[][], k: number): number[] {\n  return mat\n    .map((list, i) => {\n      const ans: [number, number] = [i, 0];\n      for (const n of list) {\n        if (n === 1) ans[1]++;\n        else break;\n      }\n      return ans;\n    })\n    .sort(([i1, v1], [i2, v2]) => (v1 === v2 ? i1 - i2 : v1 - v2))\n    .map(([i]) => i)\n    .slice(0, k);\n}"
        },
        {
            "date": 1627747200000,
            "time": 108,
            "memory": 42.1,
            "script": "typescript",
            "desc": "哈希储存+二分查找。",
            "code": "function kWeakestRows(mat: number[][], k: number): number[] {\n  return mat\n    .map((list, i) => [i, find(list)])\n    .map(v => {\n      console.log(v);\n      return v;\n    })\n    .sort(([i1, v1], [i2, v2]) => (v1 === v2 ? i1 - i2 : v1 - v2))\n    .map(([i]) => i)\n    .slice(0, k);\n  function find(list: number[]): number {\n    let l = 0;\n    let r = list.length - 1;\n    while (l < r) {\n      const mid = (l + r) >> 1;\n      if (list[mid] === 0) r = mid;\n      else l = mid + 1;\n    }\n    if (list[l] === 1) return list.length;\n    return l;\n  }\n}"
        }
    ]
}
