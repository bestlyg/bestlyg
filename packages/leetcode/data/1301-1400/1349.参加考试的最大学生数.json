{
    "id": "1471",
    "name": "1349.参加考试的最大学生数",
    "url": "https://leetcode.cn/problems/maximum-students-taking-exam",
    "difficulty": "困难",
    "tag": ["位运算", "数组", "动态规划", "状态压缩", "矩阵"],
    "desc": "请你计算并返回该考场可以容纳的同时参加考试且无法作弊的 最大 学生人数。",
    "solutions": [
        {
            "script": "rust",
            "time": 4,
            "memory": 2.05,
            "desc": "状态压缩，动态规划每一层的所有状态。",
            "code": "use std::collections::HashMap;\nfn is1(num: usize, offset: usize) -> bool {\n    return (num & (1 << offset)) != 0;\n}\nfn check1(seats: &Vec<Vec<char>>, row: usize, used: usize) -> bool {\n    let mut prev = false;\n    for col in 0..seats[0].len() {\n        if is1(used, col) {\n            if prev || seats[row][col] == '#' {\n                return false;\n            }\n            prev = true;\n        } else {\n            prev = false;\n        }\n    }\n    true\n}\nfn check2(seats: &Vec<Vec<char>>, used: usize, pre_used: usize) -> bool {\n    for col in 0..seats[0].len() {\n        if is1(used, col)\n            && (col - 1 >= 0 && is1(pre_used, col - 1)\n                || col + 1 < seats[0].len() && is1(pre_used, col + 1))\n        {\n            return false;\n        }\n    }\n    true\n}\nfn dfs(\n    seats: &Vec<Vec<char>>,\n    cache: &mut HashMap<usize, HashMap<usize, i32>>,\n    pre_used: usize,\n    row: usize,\n) -> i32 {\n    if row < seats.len() {\n        if let Some(Some(res)) = cache.get(&row).map(|item| item.get(&pre_used)) {\n            *res\n        } else {\n            let res = (0..(1 << seats[0].len()))\n                .map(|used| {\n                    if check1(seats, row, used) && check2(seats, used, pre_used) {\n                        used.count_ones() as i32 + dfs(seats, cache, used, row + 1)\n                    } else {\n                        0\n                    }\n                })\n                .max()\n                .unwrap();\n            cache.entry(row).or_default().entry(pre_used).or_insert(res);\n            res\n        }\n    } else {\n        0\n    }\n}\nimpl Solution {\n    pub fn max_students(seats: Vec<Vec<char>>) -> i32 {\n        let mut cache = HashMap::new();\n        (0..(1 << seats[0].len()))\n            .map(|used| {\n                if check1(&seats, 0, used) {\n                    used.count_ones() as i32 + dfs(&seats, &mut cache, used, 1)\n                } else {\n                    0\n                }\n            })\n            .max()\n            .unwrap()\n    }\n}",
            "date": 1703520000000
        }
    ]
}
