{
    "name": "1382. 将二叉搜索树变平衡",
    "url": "https://leetcode-cn.com/problems/balance-a-binary-search-tree/",
    "difficulty": "中等",
    "tag": [
        "贪心",
        "树",
        "深度优先搜索",
        "二叉搜索树",
        "分治",
        "二叉树"
    ],
    "desc": "给你一棵二叉搜索树，请你返回一棵 平衡后 的二叉搜索树，新生成的树应该与原来的树有着相同的节点值。",
    "solutions": [
        {
            "date": 1628265600000,
            "time": 148,
            "memory": 53.2,
            "script": "typescript",
            "desc": "中序遍历排序后依次插入。",
            "code": "function balanceBST(root: TreeNode | null): TreeNode | null {\n  const q: TreeNode[] = [];\n  inorder(root);\n  return build(q);\n  function inorder(node: TreeNode | null) {\n    if (node === null) return;\n    const { left, right } = node;\n    inorder(left);\n    q.push(node);\n    inorder(right);\n  }\n  function build(list: TreeNode[]): TreeNode | null {\n    if (list.length === 0) return null;\n    const mid = (0 + list.length - 1) >> 1;\n    const node = list[mid];\n    node.left = build(list.slice(0, mid));\n    node.right = build(list.slice(mid + 1));\n    return node;\n  }\n}"
        }
    ]
}