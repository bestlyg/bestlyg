{
    "name": "1330.翻转子数组得到最大的数组值",
    "url": "https://leetcode.cn/problems/reverse-subarray-to-maximize-array-value/",
    "difficulty": "简单",
    "tag": [],
    "desc": "给你一个整数数组 nums 。「数组值」定义为所有满足 0 <= i < nums.length-1 的 |nums[i]-nums[i+1]| 的和。",
    "solutions": [
        {
            "script": "cpp",
            "time": 84,
            "memory": 39.3,
            "desc": "https://leetcode.cn/problems/reverse-subarray-to-maximize-array-value/solution/bu-hui-hua-jian-qing-kan-zhe-pythonjavac-c2s6/。",
            "code": "class Solution {\npublic:\n    int maxValueAfterReverse(vector<int>& nums) {\n        int n = nums.size(), sums = 0, nmax = INT_MIN, nmin = INT_MAX, val = 0;\n        for (int i = 1; i < n; i++) {\n            int num = abs(nums[i] - nums[i - 1]);\n            sums += num;\n            nmax = max(nmax, min(nums[i], nums[i - 1]));\n            nmin = min(nmin, max(nums[i], nums[i - 1]));\n            val = max(val, max(abs(nums[i] - nums[0]), abs(nums[i - 1] - nums[n - 1])) - num);\n        }\n        return sums + max(val, 2 * (nmax - nmin));\n    }\n};",
            "date": 1683820800000
        },
        {
            "script": "python3",
            "time": 328,
            "memory": 19.6,
            "desc": "同上。",
            "code": "class Solution:\ndef maxValueAfterReverse(self, nums: List[int]) -> int:\n    n = len(nums)\n    sums = 0\n    nmax = -inf\n    nmin = inf\n    val = 0\n    for i in range(1, n):\n        num = abs(nums[i] - nums[i - 1])\n        sums += num\n        nmax = max(nmax, min(nums[i], nums[i - 1]))\n        nmin = min(nmin, max(nums[i], nums[i - 1]))\n        val = max(val, max(abs(nums[i] - nums[0]), abs(nums[i - 1] - nums[n - 1])) - num)\n    return sums + max(val, 2 * (nmax - nmin))",
            "date": 1683820800000
        },
        {
            "script": "rust",
            "time": 8,
            "memory": 2.3,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn max_value_after_reverse(nums: Vec<i32>) -> i32 {\n        use std::cmp::{max, min};\n        let n = nums.len();\n        let mut sums = 0;\n        let mut nmax = i32::MIN;\n        let mut nmin = i32::MAX;\n        let mut val = 0;\n        for i in 1..n {\n            let num = (nums[i] - nums[i - 1]).abs();\n            sums += num;\n            nmax = max(nmax, min(nums[i], nums[i - 1]));\n            nmin = min(nmin, max(nums[i], nums[i - 1]));\n            val = max(\n                val,\n                max((nums[i] - nums[0]).abs(), (nums[i - 1] - nums[n - 1]).abs()) - num,\n            );\n        }\n        sums + max(val, 2 * (nmax - nmin))\n    }\n}",
            "date": 1683820800000
        }
    ]
}