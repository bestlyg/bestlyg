{
    "id": "1447",
    "name": "1345.跳跃游戏IV",
    "url": "https://leetcode.cn/problems/jump-game-iv",
    "difficulty": "困难",
    "tag": [
        "广度优先搜索",
        "数组",
        "哈希表"
    ],
    "desc": "请你返回到达数组最后一个元素的下标处所需的 最少操作次数 。",
    "solutions": [
        {
            "date": 1642694400000,
            "time": 248,
            "memory": 95.7,
            "script": "cpp",
            "desc": "bfs。",
            "code": "class Solution {\n   public:\n    struct node {\n        int idx, step;\n    };\n    int minJumps(vector<int>& arr) {\n        unordered_map<int, vector<int>> m;\n        unordered_set<int> s;\n        s.insert(0);\n        queue<node> q;\n        q.push((node){0, 0});\n        int n = arr.size();\n        for (int i = 0; i < n; i++) m[arr[i]].push_back(i);\n        while (q.size()) {\n            node v = q.front();\n            if (v.idx == n - 1) return v.step;\n            q.pop();\n            if (v.idx > 0 && !s.count(v.idx - 1)) {\n                q.push((node){v.idx - 1, v.step + 1});\n                s.insert(v.idx - 1);\n            }\n            if (v.idx < n - 1 && !s.count(v.idx + 1)) {\n                q.push((node){v.idx + 1, v.step + 1});\n                s.insert(v.idx + 1);\n            }\n            if (!m.count(arr[v.idx])) continue;\n            for (auto& next_idx : m[arr[v.idx]]) {\n                if (next_idx == v.idx || s.count(next_idx)) continue;\n                q.push((node){next_idx, v.step + 1});\n                s.insert(next_idx);\n            }\n            m.erase(arr[v.idx]);\n        }\n        return 0;\n    }\n};"
        }
    ]
}