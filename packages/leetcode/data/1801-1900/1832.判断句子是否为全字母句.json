{
    "id": "1960",
    "name": "1832.判断句子是否为全字母句",
    "url": "https://leetcode.cn/problems/check-if-the-sentence-is-pangram",
    "difficulty": "简单",
    "tag": [
        "哈希表",
        "字符串"
    ],
    "desc": "请你返回一个 布尔数组  answer ，其中  answer.length == queries.length ，当  queries[j]  的查询结果为  true  时， answer 第  j  个值为  true ，否则为  false 。",
    "solutions": [
        {
            "date": 1670947200000,
            "time": 480,
            "memory": 108.3,
            "script": "cpp",
            "desc": "先按照 limit 对 queries 排序，再进行离线查询，对于满足 limit 的边进行并查集联合，最后判断是否是同一个并查集中。",
            "code": "#include <vector>\n// bestlyg\n#define X first\n#define Y second\n#define lb(x) ((x) & (-x))\n#define mem(a,b) memset(a,b,sizeof(a))\n#define debug freopen(\"input\",\"r\",stdin)\n#define PII pair<int,int>\n\n#ifdef DEBUG\n#define log(frm, args...) {    printf(frm, ##args);}\n#else\n#define log(frm, args...)\n#endif\n\ntypedef long long ll;\nusing namespace std;\n\nclass UnionFind {\npublic:\n    int n;\n    vector<int> data, cnt;\n    UnionFind(int n): n(n), data(vector<int>(n, 0)), cnt(vector<int>(n, 1)) {\n        iota(data.begin(), data.end(), 0);\n    }\n    int size(int v) { return cnt[find(v)]; }\n    int find(int v) {\n        if (data[v] == v) return v;\n        return data[v] = find(data[v]);\n    }\n    void uni(int v1, int v2) {\n        int p1 = find(v1), p2 = find(v2);\n        if (p1 != p2) {\n            cnt[p1] += cnt[p2];\n            data[p2] = p1;\n        }\n    }\n    bool same(int v1, int v2) { return find(v1) == find(v2); }\n};\nint pos2Idx(int x, int y, int size) { return x * size + y; }\nvoid idx2Pos(int idx, int size, int &x, int &y) { x = idx / size; y = idx % size; }\nvector<vector<int>> dirs = { {0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n// START\nclass Solution {\npublic:\n    vector<bool> distanceLimitedPathsExist(int n, vector<vector<int>>& edgeList, vector<vector<int>>& queries) {\n        vector<int> qlist(queries.size());\n        vector<bool> ans(queries.size(), false);\n        iota(qlist.begin(), qlist.end(), 0);\n        sort(qlist.begin(), qlist.end(), [&](auto &i1, auto &i2){ return queries[i1][2] < queries[i2][2]; });\n        sort(edgeList.begin(), edgeList.end(), [&](auto &a, auto &b){ return a[2] < b[2]; });\n        UnionFind uf(n);\n        int j = 0;\n        for (auto &i : qlist) {\n            auto &q = queries[i];\n            for (; j < edgeList.size() && edgeList[j][2] < q[2]; j++) uf.uni(edgeList[j][0], edgeList[j][1]);\n            ans[i] = uf.same(q[0], q[1]);\n        }\n        return ans;\n    }\n};\n// END\n#ifdef LOCAL\nint main() {\n    return 0;\n}\n#endif"
        }
    ]
}