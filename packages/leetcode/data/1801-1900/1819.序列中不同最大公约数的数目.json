{
    "id": "1947",
    "name": "1819.序列中不同最大公约数的数目",
    "url": "https://leetcode.cn/problems/number-of-different-subsequences-gcds",
    "desc": "计算并返回 nums 的所有 非空 子序列中 不同 最大公约数的 数目 。",
    "solutions": [
        {
            "date": "2022-01-07",
            "time": 1948,
            "memory": 67.2,
            "script": "typescript",
            "desc": "对于每个可能出现的最大公约数 i 进行统计，所有数中的 i 的倍数和的最大公约数是否为 i，是则存在。",
            "code": "function gcd(a: number, b: number) {\n  if (b) return gcd(b, a % b);\n  return a;\n}\nfunction countDifferentSubsequenceGCDs(nums: number[]): number {\n  const set = new Set(nums);\n  const max = Math.max(...nums);\n  let ans = 0;\n  for (let i = 1; i <= max; i++) {\n    let val = -1;\n    for (let j = i; j <= max; j += i) {\n      if (!set.has(j)) continue;\n      if (val == -1) val = j;\n      else val = gcd(val, j);\n    }\n    if (val == i) ans++;\n  }\n  return ans;\n}"
        },
        {
            "date": "2022-01-07",
            "time": 292,
            "memory": 70.1,
            "script": "cpp",
            "desc": "对于每个可能出现的最大公约数 i 进行统计，所有数中的 i 的倍数和的最大公约数是否为 i，是则存在。",
            "code": "class Solution {\n   public:\n    int gcd(int a, int b) {\n        if (b) return gcd(b, a % b);\n        return a;\n    }\n    int countDifferentSubsequenceGCDs(vector<int>& nums) {\n        int cnts[200005] = {0}, maxn = 0, ans = 0;\n        for (auto& num : nums) {\n            cnts[num] = 1;\n            maxn = max(maxn, num);\n        }\n        for (int i = 1; i <= maxn; i++) {\n            int val = -1;\n            for (int j = i; j <= maxn; j += i) {\n                if (!cnts[j]) continue;\n                if (val == -1)\n                    val = j;\n                else\n                    val = gcd(val, j);\n            }\n            if (val == i) ans++;\n        }\n        return ans;\n    }\n};"
        },
        {
            "script": "cpp",
            "time": 1156,
            "memory": 114.2,
            "desc": "对每个数进行判断是否可能是最大公约数。",
            "code": "class Solution {\npublic:\n    int gcd(int a, int b) {\n        if (!b)return a;\n        return gcd(b, a % b);\n    }\n    int countDifferentSubsequenceGCDs(vector<int>& nums) {\n        int n = nums.size(), ans = 0, nmax = 0;\n        unordered_set<int> s;\n        for (auto &num : nums) {\n            nmax = max(nmax, num);\n            s.insert(num);\n        }\n        vector<bool> l(nmax + 1, false);\n        for (int i = 1; i <= nmax; i++) {\n            if (s.count(i)) {\n                ans++;\n                continue;\n            }\n            int cur = -1;\n            for (int j = 2; i * j <= nmax && cur != i; j++) {\n                if (!s.count(i * j)) continue;\n                if (cur == -1) cur = i * j;\n                else cur = gcd(cur, i * j);\n            }\n            if (cur == i) ans++;\n        }\n        return ans;\n    }\n};",
            "date": "2023-01-14"
        },
        {
            "script": "rust",
            "time": 60,
            "memory": 3.2,
            "desc": "同上。",
            "code": "impl Solution {\n    fn gcd(a: i32, b: i32) -> i32 {\n        if b == 0 {\n            a\n        } else {\n            Solution::gcd(b, a % b)\n        }\n    }\n    pub fn count_different_subsequence_gc_ds(nums: Vec<i32>) -> i32 {\n        let mut max = 0;\n        let mut ans = 0;\n        let mut l = [false; 200005];\n        for num in nums {\n            max = max.max(num);\n            l[num as usize] = true;\n        }\n        for i in 1..=max {\n            if l[i as usize] {\n                ans += 1;\n                continue;\n            }\n            let mut j = 2;\n            let mut cur = -1;\n            while j * i <= max && cur != i {\n                let num = i * j;\n                if l[num as usize] {\n                    cur = if cur == -1 {\n                        num\n                    } else {\n                        Solution::gcd(cur, num)\n                    }\n                }\n                j += 1;\n            }\n            if cur == i {\n                ans += 1;\n            }\n        }\n        ans\n    }\n}",
            "date": "2023-01-14"
        }
    ],
    "tagList": ["数组", "数学", "计数", "数论"],
    "level": "Hard"
}
