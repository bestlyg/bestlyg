{
    "id": "1977",
    "name": "1851.包含每个查询的最小区间",
    "url": "https://leetcode.cn/problems/minimum-interval-to-include-each-query",
    "desc": "给你一个二维整数数组 intervals ，其中 intervals[i] = [lefti, righti] 表示第 i 个区间开始于 lefti 、结束于 righti（包含两侧取值，闭区间）。区间的 长度 定义为区间中包含的整数数目，更正式地表达是 righti - lefti + 1 。再给你一个整数数组 queries 。第 j 个查询的答案是满足 lefti <= queries[j] <= righti 的 长度最小区间 i 的长度 。如果不存在这样的区间，那么答案是 -1 。以数组形式返回对应查询的所有答案。",
    "solutions": [
        {
            "script": "cpp",
            "time": 440,
            "memory": 106.5,
            "desc": "排序后用堆记录区间最值。",
            "code": "#define SORT(list, fn) sort(list.begin(), list.end(), [&](auto &v1, auto &v2){ fn });\nclass Solution {\npublic:\n    vector<int> minInterval(vector<vector<int>>& intervals, vector<int>& queries) {\n        vector<int> res(queries.size(), -1);\n        SORT(intervals, {\n            return v1[0] != v2[0] ? v1[0] < v2[0] : v1[1] < v2[1];\n        });\n        vector<int> idxs;\n        for (int i = 0; i < queries.size(); i++) idxs.push_back(i);\n        SORT(idxs, {\n            return queries[v1] < queries[v2];\n        });\n        auto cmp = [&](int i1, int i2) {\n            int n1 = intervals[i1][1] - intervals[i1][0] + 1,\n                n2 = intervals[i2][1] - intervals[i2][0] + 1;\n            return n2 < n1;\n        };\n        priority_queue<int, vector<int>, decltype(cmp)> q(cmp);\n        int iidx = 0;\n        for (auto &idx : idxs) {\n            int cur = queries[idx];\n            while (iidx < intervals.size() && intervals[iidx][0] <= cur) {\n                q.push(iidx++);\n            }\n            while (q.size() && intervals[q.top()][1] < cur) {\n                q.pop();\n            }\n            if (q.size()) {\n                auto &interval = intervals[q.top()];\n                res[idx] = interval[1] - interval[0] + 1;\n            }\n        }\n        return res;\n    }\n};",
            "date": "2023-07-18"
        },
        {
            "script": "python",
            "time": 944,
            "memory": 64.9,
            "desc": "同上。",
            "code": "class Solution:\n    def minInterval(self, intervals: List[List[int]], queries: List[int]) -> List[int]:\n        class CmpNode:\n            def __init__(self, idx: int) -> None:\n                self.idx = idx\n\n            def __lt__(self, o: 'CmpNode') -> bool:\n                n1 = intervals[self.idx][1] - intervals[self.idx][0] + 1\n                n2 = intervals[o.idx][1] - intervals[o.idx][0] + 1\n                return n1 < n2\n        res = [-1 for _ in range(len(queries))]\n        intervals.sort(key=lambda v: v[0])\n        idxs = [i for i in range(len(queries))]\n        idxs.sort(key=lambda v: queries[v])\n        q: List[CmpNode] = []\n        iidx = 0\n        for idx in idxs:\n            cur = queries[idx]\n            while iidx < len(intervals) and intervals[iidx][0] <= cur:\n                heappush(q, CmpNode(iidx))\n                iidx += 1\n            while len(q) and intervals[q[0].idx][1] < cur:\n                heappop(q)\n            if len(q):\n                interval = intervals[q[0].idx]\n                res[idx] = interval[1] - interval[0] + 1\n        return res",
            "date": "2023-07-18"
        },
        {
            "script": "rust",
            "time": 88,
            "memory": 12.1,
            "desc": "同上。",
            "code": "#[derive(Clone, PartialEq, Eq, Ord)]\nstruct Node<'a> {\n    idx: usize,\n    intervals: &'a Vec<Vec<i32>>,\n}\nimpl<'a> Node<'a> {\n    fn new(idx: usize, intervals: &'a Vec<Vec<i32>>) -> Self {\n        Node { idx, intervals }\n    }\n    fn len(&self) -> i32 {\n        self.intervals[self.idx][1] - self.intervals[self.idx][0] + 1\n    }\n}\nimpl PartialOrd for Node<'_> {\n    fn partial_cmp(&self, o: &Self) -> Option<std::cmp::Ordering> {\n        o.len().partial_cmp(&self.len())\n    }\n}\n\nimpl Solution {\n    pub fn min_interval(mut intervals: Vec<Vec<i32>>, queries: Vec<i32>) -> Vec<i32> {\n        let mut res = vec![-1; queries.len()];\n        intervals.sort_by_key(|v| v[0]);\n        let mut idxs = vec![0; queries.len()]\n            .into_iter()\n            .enumerate()\n            .map(|v| v.0)\n            .collect::<Vec<_>>();\n        idxs.sort_by_key(|i| queries[*i]);\n        let mut q = std::collections::BinaryHeap::<Node>::new();\n        let mut iidx = 0;\n        for idx in idxs {\n            let cur = queries[idx];\n            while iidx < intervals.len() && intervals[iidx][0] <= cur {\n                q.push(Node::new(iidx, &intervals));\n                iidx += 1;\n            }\n            while !q.is_empty() && intervals[q.peek().unwrap().idx][1] < cur {\n                q.pop();\n            }\n            if !q.is_empty() {\n                res[idx] = q.peek().unwrap().len();\n            }\n        }\n        res\n    }\n}",
            "date": "2023-07-18"
        }
    ],
    "tagList": [
        "数组",
        "二分查找",
        "排序",
        "扫描线",
        "堆（优先队列）"
    ],
    "level": "Hard"
}