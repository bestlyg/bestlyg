{
    "id": "1934",
    "name": "1807.替换字符串中的括号内容",
    "url": "https://leetcode.cn/problems/evaluate-the-bracket-pairs-of-a-string",
    "desc": "给你一个字符串 s ，它包含一些括号对，每个括号中包含一个 非空 的键。请你返回替换 所有 括号对后的结果字符串。",
    "solutions": [
        {
            "script": "cpp",
            "time": 368,
            "memory": 114.3,
            "desc": "遍历。",
            "code": "class Solution {\npublic:\n    string evaluate(string s, vector<vector<string>>& knowledge) {\n        unordered_map<string, string> m;\n        for (auto &item : knowledge) m[item[0]] = item[1];\n        string ans = \"\";\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] != '(') ans += s[i];\n            else {\n                cout << \"i = \" << i << endl;\n                int start = i + 1;\n                while (s[i] != ')') i++;\n                string key = s.substr(start, i - start);\n                if (!m.count(key)) ans += \"?\";\n                else ans += m[key];\n            }\n        }\n        return ans;\n    }\n};",
            "date": "2023-01-12"
        },
        {
            "script": "rust",
            "time": 76,
            "memory": 33.9,
            "desc": "同上。",
            "code": "use std::collections::HashMap;\nimpl Solution {\n    pub fn evaluate(s: String, knowledge: Vec<Vec<String>>) -> String {\n        let s = s.chars().collect::<Vec<char>>();\n        let mut ans = String::new();\n        let mut m = HashMap::<String, String>::new();\n        for item in knowledge {\n            m.insert(item[0].clone(), item[1].clone());\n        }\n        let default_value = \"?\".to_string();\n        let mut i = 0;\n        while i < s.len() {\n            if s[i] != '(' {\n                ans.push(s[i]);\n            } else {\n                let start = i + 1;\n                while s[i] != ')' {\n                    i += 1;\n                }\n                let key = s[start..i].iter().collect::<String>();\n                let s: &String = m.get(&key).unwrap_or_else(||&default_value);\n                ans.push_str(s);\n            }\n            i += 1;\n        }\n        ans\n    }\n}",
            "date": "2023-01-12"
        }
    ],
    "tagList": [
        "数组",
        "哈希表",
        "字符串"
    ],
    "level": "Medium"
}