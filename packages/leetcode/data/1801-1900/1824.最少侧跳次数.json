{
    "id": "1952",
    "name": "1824.最少侧跳次数",
    "url": "https://leetcode.cn/problems/minimum-sideway-jumps",
    "desc": "这只青蛙从点 0 处跑道 2 出发，并想到达点 n 处的 任一跑道 ，请你返回 最少侧跳次数 。",
    "solutions": [
        {
            "script": "cpp",
            "time": 584,
            "memory": 313.1,
            "desc": "dp。",
            "code": "#define MAX 0x3f3f3f3f\nclass Solution {\npublic:\n    int minSideJumps(vector<int>& obstacles) {\n        int n = obstacles.size();\n        vector<vector<int>> dp(n, vector<int>(4, MAX));\n        dp[0][2] = 0;\n        dp[0][1] = dp[0][3] = 1;\n        for (int i = 1; i < n; i++) {\n            if (obstacles[i] != 1) dp[i][1] = dp[i - 1][1];\n            if (obstacles[i] != 2) dp[i][2] = dp[i - 1][2];\n            if (obstacles[i] != 3) dp[i][3] = dp[i - 1][3];\n            if (obstacles[i - 1] == 1) dp[i][1] = min(dp[i][2], dp[i][3]) + 1;\n            if (obstacles[i - 1] == 2) dp[i][2] = min(dp[i][1], dp[i][3]) + 1;\n            if (obstacles[i - 1] == 3) dp[i][3] = min(dp[i][1], dp[i][2]) + 1;\n        }\n        return min({dp[n - 1][1], dp[n - 1][2], dp[n - 1][3]});\n    }\n};",
            "date": "2023-01-21"
        },
        {
            "script": "rust",
            "time": 100,
            "memory": 30.7,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn min_side_jumps(obstacles: Vec<i32>) -> i32 {\n        let n = obstacles.len();\n        let mut dp = vec![vec![0x3f3f3f3f; 4]; n];\n        dp[0][1] = 1;\n        dp[0][2] = 0;\n        dp[0][3] = 1;\n        for i in 1..n {\n            if obstacles[i] != 1 {\n                dp[i][1] = dp[i - 1][1];\n            }\n            if obstacles[i] != 2 {\n                dp[i][2] = dp[i - 1][2];\n            }\n            if obstacles[i] != 3 {\n                dp[i][3] = dp[i - 1][3];\n            }\n            if obstacles[i - 1] == 1 {\n                dp[i][1] = dp[i][2].min(dp[i][3]) + 1;\n            }\n            if obstacles[i - 1] == 2 {\n                dp[i][2] = dp[i][1].min(dp[i][3]) + 1;\n            }\n            if obstacles[i - 1] == 3 {\n                dp[i][3] = dp[i][1].min(dp[i][2]) + 1;\n            }\n        }\n        dp[n - 1][1].min(dp[n - 1][2]).min(dp[n - 1][3])\n    }\n}\n",
            "date": "2023-01-21"
        },
        {
            "script": "python",
            "time": 1964,
            "memory": 88,
            "desc": "同上。",
            "code": "class Solution:\ndef minSideJumps(self, obstacles: List[int]) -> int:\n    n = len(obstacles)\n    dp = [[0x3f3f3f3f for _ in range(4)] for _ in range(n)]\n    dp[0][2] = 0\n    dp[0][1] = dp[0][3] = 1\n    for i in range(1, n):\n        if obstacles[i] != 1:\n            dp[i][1] = dp[i - 1][1]\n        if obstacles[i] != 2:\n            dp[i][2] = dp[i - 1][2]\n        if obstacles[i] != 3:\n            dp[i][3] = dp[i - 1][3]\n        if obstacles[i - 1] == 1:\n            dp[i][1] = min(dp[i][2], dp[i][3]) + 1\n        if obstacles[i - 1] == 2:\n            dp[i][2] = min(dp[i][1], dp[i][3]) + 1\n        if obstacles[i - 1] == 3:\n            dp[i][3] = min(dp[i][1], dp[i][2]) + 1\n    return min(dp[n - 1][1], dp[n - 1][2], dp[n - 1][3])",
            "date": "2023-01-21"
        }
    ],
    "tagList": ["贪心", "数组", "动态规划"],
    "level": "Medium"
}
