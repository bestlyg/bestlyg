{
    "id": "119",
    "name": "119.杨辉三角II",
    "url": "https://leetcode.cn/problems/pascals-triangle-ii",
    "difficulty": "简单",
    "tag": [
        "数组",
        "动态规划"
    ],
    "desc": "给定一个非负索引 k，其中 k ≤ 33，返回杨辉三角的第 k 行。",
    "solutions": [
        {
            "date": 1613059200000,
            "time": 88,
            "memory": 40.5,
            "script": "typescript",
            "desc": "遍历所有值进行储存。",
            "code": "function getRow(rowIndex: number): number[] {\n  const cache: number[][] = [[1], [1, 1]];\n  for (let i = 2; i <= 33; i++) {\n    const arr = [1];\n    const prev = cache[i - 1];\n    for (let j = 0, l = prev.length; j < l - 1; j++) {\n      arr.push(prev[j] + prev[j + 1]);\n    }\n    arr.push(1);\n    cache.push(arr);\n  }\n  return cache[rowIndex];\n}"
        },
        {
            "date": 1613059200000,
            "time": 88,
            "memory": 40.5,
            "script": "typescript",
            "desc": "优化题解 1。",
            "code": "const cache = [[1],[1,1],...]\n      function getRow(rowIndex: number): number[] {\n        return cache[rowIndex];\n      }"
        },
        {
            "date": 1613059200000,
            "time": 84,
            "memory": 40.1,
            "script": "typescript",
            "desc": "利用 1 个数组进行覆盖。",
            "code": "function getRow(rowIndex: number): number[] {\n  if (rowIndex === 0) return [1];\n  const arr = [1, 1];\n  if (rowIndex === 1) return arr;\n  for (let i = 2; i <= rowIndex; i++) {\n    for (let j = 0, l = arr.length; j < l - 1; j++) {\n      arr[j] = arr[j] + arr[j + 1];\n    }\n    arr.unshift(1);\n    arr.splice(arr.length - 1, 1, 1);\n  }\n  return arr;\n}"
        },
        {
            "date": 1630684800000,
            "time": 88,
            "memory": 39.2,
            "script": "typescript",
            "desc": "动态规划。",
            "code": "function getRow(rowIndex: number): number[] {\n  const list: number[][] = new Array(2).fill(0).map(_ => []);\n  list[0].push(1);\n  list[1].push(1, 1);\n  for (let i = 2; i <= rowIndex; i++) {\n    const idx = i % 2;\n    const prevIdx = idx ^ 1;\n    list[idx].length = 0;\n    list[idx].push(1);\n    for (let j = 1; j <= i - 1; j++) list[idx].push(list[prevIdx][j] + list[prevIdx][j - 1]);\n    list[idx].push(1);\n  }\n  return list[rowIndex % 2];\n}"
        }
    ]
}