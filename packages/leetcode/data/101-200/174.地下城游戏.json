{
    "name": "174.地下城游戏",
    "url": "https://leetcode-cn.com/problems/dungeon-game/",
    "difficulty": "困难",
    "tag": [
        "二分查找",
        "动态规划"
    ],
    "desc": "一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由  M x N 个房间组成的二维网格。我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。",
    "solutions": [
        {
            "date": 1594483200000,
            "time": 80,
            "memory": 37.3,
            "script": "typescript",
            "desc": "dp[i][j]=i,j 坐标时需要的最小生命值，逆向推导 dp[0][0]。",
            "code": "function calculateMinimumHP(dungeon: number[][]): number {\n  const n = dungeon.length;\n  const m = dungeon[0].length;\n  const dp = new Array(n + 1).fill(0).map(_ => new Array(m + 1).fill(Infinity));\n  dp[n][m - 1] = dp[n - 1][m] = 1;\n  for (let i = n - 1; i >= 0; --i) {\n    for (let j = m - 1; j >= 0; --j) {\n      dp[i][j] = Math.max(Math.min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j], 1);\n    }\n  }\n  return dp[0][0];\n}"
        }
    ]
}