{
    "id": "123",
    "name": "123.买卖股票的最佳时机III",
    "url": "https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii",
    "difficulty": "困难",
    "tag": ["数组", "动态规划"],
    "desc": "给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。",
    "solutions": [
        {
            "date": 1610121600000,
            "time": 1028,
            "memory": 85.4,
            "script": "typescript",
            "desc": "动态规划计算每个状态。",
            "code": "function maxProfit(prices: number[]): number {\n  const len = prices.length;\n  if (len < 2) return 0;\n  // 0 手上没，1 手上有\n  // 0 完成0次交易 1 完成1次交易 2 完成两次交易\n  const dp: number[][][] = new Array(len)\n    .fill(0)\n    .map(_ => new Array(2).fill(0).map(_ => new Array(3).fill(-Infinity)));\n  [dp[0][0][0], dp[0][1][0]] = [0, -prices[0]];\n  for (let i = 1; i < len; i++) {\n    dp[i][0][0] = dp[i - 1][0][0];\n    dp[i][0][1] = Math.max(prices[i] + dp[i - 1][1][0], dp[i - 1][0][1]);\n    dp[i][0][2] = i >= 3 ? Math.max(prices[i] + dp[i - 1][1][1], dp[i - 1][0][2]) : 0;\n    dp[i][1][0] = Math.max(dp[i - 1][1][0], -prices[i]);\n    dp[i][1][1] = Math.max(dp[i - 1][1][1], dp[i - 1][0][1] - prices[i]);\n    dp[i][1][2] = 0;\n  }\n  return Math.max(dp[len - 1][0][2], dp[len - 1][0][1]);\n}"
        },
        {
            "date": 1610121600000,
            "time": 984,
            "memory": 86.9,
            "script": "typescript",
            "desc": "优化题解 1。",
            "code": "function maxProfit(prices: number[]): number {\n  const len = prices.length;\n  if (len < 2) return 0;\n  // 0 手上没，1 手上有\n  // 0 完成0次交易 1 完成1次交易 2 完成两次交易\n  const dp: number[][][] = new Array(len)\n    .fill(0)\n    .map(_ => new Array(2).fill(0).map(_ => new Array(3).fill(-Infinity)));\n  [dp[0][0][0], dp[0][1][0]] = [0, -prices[0]];\n  for (let i = 1; i < len; i++) {\n    const prev = dp[i - 1];\n    const prev0 = prev[0];\n    const prev1 = prev[1];\n    const price = prices[i];\n    [dp[i][0][1], dp[i][0][2], dp[i][1][0], dp[i][1][1]] = [\n      Math.max(price + prev1[0], prev0[1]),\n      i >= 3 ? Math.max(price + prev1[1], prev0[2]) : 0,\n      Math.max(prev1[0], -price),\n      Math.max(prev1[1], prev0[1] - price),\n    ];\n  }\n  return Math.max(dp[len - 1][0][2], dp[len - 1][0][1]);\n}"
        },
        {
            "date": 1610121600000,
            "time": 1008,
            "memory": 82.7,
            "script": "typescript",
            "desc": "优化题解 1。",
            "code": "function maxProfit(prices: number[]): number {\n  const len = prices.length;\n  if (len < 2) return 0;\n  // 0 手上没，1 手上有\n  // 0 完成0次交易 1 完成1次交易 2 完成两次交易\n  const dp: number[][][] = new Array(len)\n    .fill(0)\n    .map(_ => new Array(2).fill(0).map(_ => new Array(3).fill(-Infinity)));\n  [dp[0][0][0], dp[0][1][0]] = [0, -prices[0]];\n  let [dp01, dp02, dp10, dp11] = [-Infinity, -Infinity, -prices[0], -Infinity];\n  for (let i = 1; i < len; i++) {\n    const price = prices[i];\n    [dp01, dp02, dp10, dp11] = [\n      Math.max(price + dp10, dp01),\n      i >= 3 ? Math.max(price + dp11, dp02) : 0,\n      Math.max(dp10, -price),\n      Math.max(dp11, dp01 - price),\n    ];\n  }\n  return Math.max(dp01, dp02);\n}\n// 6\nconsole.log(maxProfit([3, 3, 5, 0, 0, 3, 1, 4]));\n// 4\nconsole.log(maxProfit([1, 2, 3, 4, 5]));\n// 0\nconsole.log(maxProfit([2, 1, 4]));"
        },
        {
            "script": "python",
            "time": 1924,
            "memory": 80.1,
            "desc": "dp[i][j][k]表示i天j笔手上有无。",
            "code": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        n = len(prices)\n        # [i][j][k] i天j笔手上有无\n        dp = [[[-inf for _ in range(2)] for _ in range(3)] for _ in range(n)]\n        num0 = dp[0][0][0] = 0\n        num1 = dp[0][0][1] = -prices[0]\n        res = 0\n        num2 = num3 = -inf\n        for i in range(1, n):\n            dp[i][0][0] = dp[i - 1][0][0]\n            dp[i][0][1] = num0 - prices[i]\n            dp[i][1][0] = num1 + prices[i]\n            dp[i][1][1] = num2 - prices[i]\n            dp[i][2][0] = num3 + prices[i]\n            num0 = max(num0, dp[i][0][0])\n            num1 = max(num1, dp[i][0][1])\n            num2 = max(num2, dp[i][1][0])\n            num3 = max(num3, dp[i][1][1])\n            res = max(res, dp[i][1][0], dp[i][2][0])\n        return res\n",
            "date": 1696262400000
        }
    ]
}
