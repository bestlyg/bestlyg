{
  "name": "128. 最长连续序列",
  "url": "https://leetcode-cn.com/problems/longest-consecutive-sequence/",
  "difficulty": "困难",
  "tag": ["并查集", "数组"],
  "desc": "给定一个未排序的整数数组，找出最长连续序列的长度。",
  "solutions": [
    {
      "date": 1591372800000,
      "time": 84,
      "memory": 37.8,
      "script": "typescript",
      "desc": "排序去重遍历。",
      "code": "function longestConsecutive(nums: number[]): number {\n  if (nums.length === 0) return 0;\n  nums = [...new Set(nums)].sort((a, b) => a - b);\n  let max = 1;\n  let nowMax = 1;\n  let preNum = nums[0];\n  for (const num of nums) {\n    if (num === preNum + 1) {\n      nowMax++;\n    } else {\n      max = nowMax > max ? nowMax : max;\n      nowMax = 1;\n    }\n    preNum = num;\n  }\n  return max > nowMax ? max : nowMax;\n}"
    },
    {
      "date": 1591372800000,
      "time": 76,
      "memory": 37.2,
      "script": "typescript",
      "desc": "用哈希表进行 O(1)的查找，即最慢查找速度 O(n)。",
      "code": "function longestConsecutive(nums: number[]): number {\n  if (nums.length === 0) return 0;\n  const set = new Set(nums);\n  let max = 1;\n  for (let num of set) {\n    if (!set.has(num - 1)) {\n      let nowMax = 1;\n      while (set.has(++num)) nowMax++;\n      max = nowMax > max ? nowMax : max;\n    }\n  }\n  return max;\n}"
    },
    {
      "date": 1619712000000,
      "time": 192,
      "memory": 53.8,
      "script": "typescript",
      "desc": "并查集。",
      "code": "class UnionFind {\n  elements: number[];\n  constructor(public size: number) {\n    this.elements = new Array(size).fill(0).map((_, i) => i);\n  }\n  same(v1: number, v2: number): boolean {\n    return this.find(v1) === this.find(v2);\n  }\n  find(v: number): number {\n    return v === this.elements[v] ? v : (this.elements[v] = this.find(this.elements[v]));\n  }\n  union(v1: number, v2: number): void {\n    const e1 = this.find(v1);\n    const e2 = this.find(v2);\n    if (e1 !== e2) {\n      this.elements[e1] = e2;\n      this.size--;\n    }\n  }\n}\nfunction longestConsecutive(nums: number[]): number {\n  nums = [...new Set(nums)];\n  const len = nums.length;\n  if (len === 0) return 0;\n  const uf = new UnionFind(len);\n  const map = new Map(nums.map((v, i) => [v, i]));\n  const ansMap = new Map<number, number>();\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const num_minus = map.get(num - 1);\n    if (num_minus) {\n      uf.union(i, num_minus);\n      const index = uf.find(i);\n      ansMap.set(index, (ansMap.get(index) ?? 0) + 1);\n    }\n    const num_add = map.get(num + 1);\n    if (num_add) {\n      uf.union(i, num_add);\n      const index = uf.find(i);\n      ansMap.set(index, (ansMap.get(index) ?? 0) + 1);\n    }\n  }\n  const cache: Record<number, number> = {};\n  for (let i = 0; i < len; i++) {\n    const num = uf.find(i);\n    cache[num] = (cache[num] ?? 0) + 1;\n  }\n  return [...Object.entries(cache)].sort(([, c1], [, c2]) => c2 - c1)[0][1];\n}"
    }
  ]
}
