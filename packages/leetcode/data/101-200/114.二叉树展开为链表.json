{
    "name": "114.二叉树展开为链表",
    "url": "https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/",
    "difficulty": "中等",
    "tag": [
        "树",
        "深度优先搜索"
    ],
    "desc": "给定一个二叉树，原地将它展开为链表。",
    "solutions": [
        {
            "date": 1582214400000,
            "time": 1,
            "memory": 38.2,
            "script": "java",
            "desc": "使用前序遍历，再把遍历后的结果重新赋值到 right 上。",
            "code": "class Solution {\n    LinkedList<TreeNode> list = new LinkedList<>();\n\tpublic void flatten(TreeNode root) {\n\t\tif (root == null||(root.left == null && root.right == null))\n\t\t\treturn;\n\t\tpreorder(root);\n\t\tTreeNode cur = root;\n\t\tfor (int i = 0, len = list.size(); i < len; i++) {\n\t\t\tcur.right = list.remove(0);\n\t\t\tcur = cur.right;\n\t\t}\n\t}\n\tpublic void preorder(TreeNode node) {\n\t\tlist.add(node);\n\t\tif (node.left != null)\n\t\t\tpreorder(node.left);\n\t\tif (node.right != null)\n\t\t\tpreorder(node.right);\n\t\tnode.left = null;\n\t\tnode.right = null;\n\t}\n}"
        },
        {
            "date": 1596297600000,
            "time": 120,
            "memory": 40,
            "script": "typescript",
            "desc": "前序遍历。",
            "code": "function flatten(root: TreeNode | null): void {\n  if (root === null || (root.left === null && root.right === null)) return;\n  const list: TreeNode[] = [];\n  _preorder(root);\n  let node: TreeNode = root;\n  for (let i = 1, l = list.length; i < l; i++) {\n    const v = list[i];\n    node.left = null;\n    node.right = list[i];\n    node = v;\n    if (i === l - 1) {\n      node.left = node.right = null;\n    }\n  }\n  function _preorder(node: TreeNode | null): void {\n    if (node === null) return;\n    list.push(node);\n    node.left !== null && _preorder(node.left);\n    node.right !== null && _preorder(node.right);\n  }\n}"
        }
    ]
}