{
    "id": "198",
    "name": "198.打家劫舍",
    "url": "https://leetcode.cn/problems/house-robber",
    "difficulty": "中等",
    "tag": [
        "数组",
        "动态规划"
    ],
    "desc": "你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。",
    "solutions": [
        {
            "date": 1587484800000,
            "time": 68,
            "memory": 32.4,
            "script": "typescript",
            "desc": "dp[i]=Math.max(dp[i-2]+nums[i],dp[i+1]);。",
            "code": "var rob = function (nums: number[]): number {\n  const dp = [0, 0];\n  const len = nums.length;\n  for (let i = 0; i < len; i++) dp[i + 2] = Math.max(dp[i] + nums[i], dp[i + 1]);\n  return dp[len + 1];\n};"
        },
        {
            "date": 1630684800000,
            "time": 68,
            "memory": 39.6,
            "script": "typescript",
            "desc": "动态规划。",
            "code": "function rob(nums: number[]): number {\n  const n = nums.length;\n  if (n === 1) return nums[0];\n  if (n === 2) return Math.max(...nums);\n  const dp = new Array(n).fill(0);\n  dp[0] = nums[0];\n  dp[1] = nums[1];\n  for (let i = 2; i < n; i++) {\n    for (let j = 0; j < i - 1; j++) {\n      dp[i] = Math.max(dp[i], dp[j] + nums[i], dp[i - 1]);\n    }\n  }\n  return dp[n - 1];\n}"
        },
        {
            "date": 1630684800000,
            "time": 68,
            "memory": 39.3,
            "script": "typescript",
            "desc": "动态规划。",
            "code": "function rob(nums: number[]): number {\n  const n = nums.length;\n  const dp = new Array(n).fill(0).map(_ => new Array(2).fill(0));\n  dp[0][1] = nums[0];\n  for (let i = 1; i < n; i++) {\n    dp[i][0] = Math.max(...dp[i - 1]);\n    dp[i][1] = dp[i - 1][0] + nums[i];\n  }\n  return Math.max(...dp[n - 1]);\n}"
        },
        {
            "script": "cpp",
            "time": 4,
            "memory": 8.1,
            "desc": "dp记录当前下标下的最大值。",
            "code": "class Solution {\npublic:\n    int rob(vector<int>& nums) {\n        int n = nums.size(), res = 0;\n        if (n == 1) return nums[0];\n        vector<int> dp(n, 0);\n        dp[0] = nums[0];\n        dp[1] = max(nums[0], nums[1]);\n        res = max(dp[0], dp[1]);\n        for (int i = 2; i < n; i++) {\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i]);\n            res = max(res, dp[i]);\n        }\n        return res;\n    }\n};",
            "date": 1694793600000
        },
        {
            "script": "python",
            "time": 32,
            "memory": 16,
            "desc": "同上。",
            "code": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        if len(nums) == 1:\n            return nums[0]\n        dp = [0 for _ in nums]\n        dp[0] = nums[0]\n        dp[1] = max(nums[1], nums[0])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        return max(dp)",
            "date": 1694793600000
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 1.95,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn rob(nums: Vec<i32>) -> i32 {\n        let n = nums.len();\n        if n == 1 {\n            nums[0]\n        } else {\n            let mut dp = vec![0; n];\n            dp[0] = nums[0];\n            dp[1] = nums[1].max(nums[0]);\n            for i in 2..n {\n                dp[i] = dp[i - 1].max(dp[i - 2] + nums[i]);\n            }\n            dp.into_iter().max().unwrap()\n        }\n    }\n}",
            "date": 1694793600000
        }
    ]
}