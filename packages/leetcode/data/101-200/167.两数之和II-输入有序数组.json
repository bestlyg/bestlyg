{
    "id": "167",
    "name": "167.两数之和II-输入有序数组",
    "url": "https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted",
    "desc": "给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。",
    "solutions": [
        {
            "date": "2020-07-20",
            "time": 108,
            "memory": 38.1,
            "script": "typescript",
            "desc": "二分查找。",
            "code": "function twoSum(numbers: number[], target: number): number[] {\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    const index = _find(target - numbers[i], i + 1);\n    if (index !== -1) return [i + 1, index + 1];\n  }\n  return [];\n  function _find(num: number, l: number = 0, r: number = len): number {\n    if (l >= r) return -1;\n    const mid = (l + r) >> 1;\n    const val = numbers[mid];\n    if (val < num) return _find(num, mid + 1, r);\n    else if (val > num) return _find(num, l, mid);\n    else return mid;\n  }\n}"
        },
        {
            "script": "cpp",
            "time": 8,
            "memory": 15.2,
            "desc": "二分。",
            "code": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& numbers, int target) {\n        int n = numbers.size();\n        for (int i = 0; i < n; i++) {\n            int l = i + 1, r = n;\n            while (l < r) {\n                int m = (l + r) / 2, val = numbers[m] + numbers[i];\n                if (val < target) l = m + 1;\n                else r = m;\n            }\n            if (l != n && numbers[i] + numbers[l] == target) return { i + 1, l + 1};\n        }\n        return {};\n    }\n};",
            "date": "2023-07-08"
        },
        {
            "script": "python",
            "time": 112,
            "memory": 17.1,
            "desc": "同上。",
            "code": "class Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        n = len(numbers)\n        for i in range(n):\n            l = i + 1\n            r = n\n            while l < r:\n                m = (l + r) // 2\n                val = numbers[i] + numbers[m]\n                if val < target:\n                    l = m + 1\n                else:\n                    r = m\n            if l != n and numbers[i] + numbers[l] == target:\n                return [i+1, l+1]\n        return []",
            "date": "2023-07-08"
        },
        {
            "script": "rust",
            "time": 4,
            "memory": 2.1,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn two_sum(numbers: Vec<i32>, target: i32) -> Vec<i32> {\n        let n = numbers.len();\n        for i in 0..n {\n            let mut l = i + 1;\n            let mut r = n;\n            while l < r {\n                let m = (l + r) / 2;\n                let val = numbers[i] + numbers[m];\n                if val < target {\n                    l = m + 1;\n                } else {\n                    r = m;\n                }\n            }\n            if l != n && numbers[i] + numbers[l] == target {\n                return vec![(i as i32) + 1, (l as i32) + 1];\n            }\n        }\n        return vec![];\n    }\n}",
            "date": "2023-07-08"
        }
    ],
    "tagList": [
        "数组",
        "双指针",
        "二分查找"
    ],
    "level": "Medium"
}