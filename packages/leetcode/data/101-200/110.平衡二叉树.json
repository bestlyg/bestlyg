{
  "name": "110. 平衡二叉树",
  "url": "https://leetcode-cn.com/problems/balanced-binary-tree/",
  "difficulty": "简单",
  "tag": ["树", "深度优先搜索"],
  "desc": "给定一个二叉树，判断它是否是高度平衡的二叉树。",
  "solutions": [
    {
      "date": 1597593600000,
      "time": 112,
      "memory": 44.4,
      "script": "typescript",
      "desc": "计算子树是否平衡，以及该树是否平衡。",
      "code": "const map = new Map<TreeNode, number>();\nfunction isBalanced(root: TreeNode | null): boolean {\n  if (root === null) return true;\n  const h = (node: TreeNode | null): number => {\n    if (node === null) return 0;\n    if (map.has(node)) return map.get(node)!;\n    const height = 1 + Math.max(h(node.left), h(node.right));\n    map.set(node, height);\n    return height;\n  };\n  return (\n    isBalanced(root.left) && isBalanced(root.right) && Math.abs(h(root.left) - h(root.right)) <= 1\n  );\n}"
    },
    {
      "date": 1637942400000,
      "time": 4,
      "memory": 8.7,
      "script": "c",
      "desc": "递归。",
      "code": "// 判断节点是否平衡,不平衡返回-1,平衡返回高度\nint _isBalanced(struct TreeNode *node) {\n    if (!node) return 0;\n    int l = _isBalanced(node->left), r = _isBalanced(node->right);\n    if (l == -1 || r == -1) return -1;\n    if (abs(l - r) <= 1) return (l > r ? l : r) + 1;\n    return -1;\n}\nbool isBalanced(struct TreeNode* root){\n    return _isBalanced(root) > -1;\n}"
    }
  ]
}
