{
    "id": "111",
    "name": "111.二叉树的最小深度",
    "url": "https://leetcode.cn/problems/minimum-depth-of-binary-tree",
    "difficulty": "简单",
    "tag": ["树", "深度优先搜索", "广度优先搜索", "二叉树"],
    "desc": "给定一个二叉树，找出其最小深度。",
    "solutions": [
        {
            "date": 1597939200000,
            "time": 92,
            "memory": 42.3,
            "script": "typescript",
            "desc": "深度优先。",
            "code": "function minDepth(root: TreeNode | null): number {\n  if (root === null) return 0;\n  else if (root.left === null && root.right === null) return 1;\n  else {\n    let minD = Infinity;\n    if (root.left) minD = Math.min(minDepth(root.left), minD);\n    if (root.right) minD = Math.min(minDepth(root.right), minD);\n    return minD + 1;\n  }\n}"
        },
        {
            "date": 1597939200000,
            "time": 88,
            "memory": 41.6,
            "script": "typescript",
            "desc": "广度优先。",
            "code": "function minDepth(root: TreeNode | null): number {\n  if (root === null) return 0;\n  const queue: TreeNode[] = [root];\n  let height = 1;\n  let size = 1;\n  while (queue.length !== 0) {\n    const node = queue.shift() as TreeNode;\n    if (node.left === null && node.right === null) return height;\n    if (node.left !== null) queue.push(node.left);\n    if (node.right !== null) queue.push(node.right);\n    if (--size === 0) {\n      height++;\n      size = queue.length;\n    }\n  }\n  return 0;\n}"
        },
        {
            "date": 1637942400000,
            "time": 132,
            "memory": 73.8,
            "script": "c",
            "desc": "递归。",
            "code": "// 递归遍历每个节点\nvoid inorder(struct TreeNode *root, int level, int *min){\n    if (!root) return ;\n    // 如果是叶子且层级比较小则赋值\n    if (!root->left && !root->right) {\n        if (*min > level) *min = level;\n        return ;\n    }\n    inorder(root->left, level + 1, min);\n    inorder(root->right, level + 1, min);\n}\nint minDepth(struct TreeNode* root){\n    if (!root) return 0;\n    int min = 10000;\n    inorder(root, 1, &min);\n    return min;\n}"
        }
    ]
}
