{
    "id": "152",
    "name": "152.乘积最大子数组",
    "url": "https://leetcode.cn/problems/maximum-product-subarray",
    "desc": "给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。",
    "solutions": [
        {
            "date": "2020-05-18",
            "time": 72,
            "memory": 36.1,
            "script": "javascript",
            "desc": "dp[i]=以 i 结尾的最大乘积。",
            "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxProduct = function (nums) {\n  const len = nums.length;\n  const zeroNum = nums[0];\n  if (len === 1) return zeroNum;\n  const dpMax = [zeroNum];\n  const dpMin = [zeroNum];\n  let max = zeroNum;\n  for (let i = 1; i < len; i++) {\n    const num = nums[i];\n    const prevMax = dpMax[i - 1] * num;\n    const prevMin = dpMin[i - 1] * num;\n    max = Math.max(\n      max,\n      (dpMax[i] = Math.max(num, prevMax, prevMin)),\n      (dpMin[i] = Math.min(num, prevMax, prevMin))\n    );\n  }\n  return max;\n};"
        },
        {
            "date": "2020-05-18",
            "time": 72,
            "memory": 35.2,
            "script": "javascript",
            "desc": "利用取模把数组大小控制在 2 个数量。",
            "code": "var maxProduct = function (nums) {\n  const len = nums.length;\n  const zeroNum = nums[0];\n  if (len === 1) return zeroNum;\n  const dpMax = [zeroNum];\n  const dpMin = [zeroNum];\n  let max = zeroNum;\n  for (let i = 1; i < len; i++) {\n    const num = nums[i];\n    const prevMax = dpMax[(i - 1) % 2] * num;\n    const prevMin = dpMin[(i - 1) % 2] * num;\n    max = Math.max(\n      max,\n      (dpMax[i % 2] = Math.max(num, prevMax, prevMin)),\n      (dpMin[i % 2] = Math.min(num, prevMax, prevMin))\n    );\n  }\n  return max;\n};"
        }
    ],
    "tagList": ["数组", "动态规划"],
    "level": "Medium"
}
