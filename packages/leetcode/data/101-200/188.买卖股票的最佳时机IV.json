{
    "id": "188",
    "name": "188.买卖股票的最佳时机IV",
    "url": "https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv",
    "desc": "设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。也就是说，你最多可以买 k 次，卖 k 次。",
    "solutions": [
        {
            "date": "2020-12-28",
            "script": "typescript",
            "time": 120,
            "memory": 44.6,
            "desc": "dp。",
            "code": "function maxProfit(k: number, prices: number[]): number {\n    const len = prices.length;\n    if (len === 0) return 0;\n    k = Math.min(~~(len / 2), k);\n    const buy = new Array(len).fill(0).map(() => new Array(k + 1).fill(0));\n    const sell = new Array(len).fill(0).map(() => new Array(k + 1).fill(0));\n    [buy[0][0], sell[0][0]] = [-prices[0], 0];\n    for (let i = 1; i <= k; ++i) buy[0][i] = sell[0][i] = -Number.MAX_VALUE;\n    for (let i = 1; i < len; ++i) {\n      const price = prices[i];\n      const prevBuy = buy[i - 1];\n      const prevSell = sell[i - 1];\n      buy[i][0] = Math.max(prevBuy[0], prevSell[0] - price);\n      for (let j = 1; j <= k; ++j) {\n        buy[i][j] = Math.max(prevBuy[j], prevSell[j] - price);\n        sell[i][j] = Math.max(prevSell[j], prevBuy[j - 1] + price);\n      }\n    }\n    return Math.max(...sell[len - 1]);\n}"
        },
        {
            "script": "python",
            "time": 256,
            "memory": 31.78,
            "desc": "dp[i][j][k]表示i天j笔手上有无。",
            "code": "class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        n = len(prices)\n        # [i][j][k] i天j笔手上有无\n        dp = [[[-inf for _ in range(2)] for _ in range(k + 1)] for _ in range(n + 1)]\n        nums = [[-inf for _ in range(2)] for _ in range(k + 1)]\n        res = dp[0][0][0] = dp[0][0][1] = nums[0][0] = 0\n        for i in range(0, n):\n            dp[i][0][0] = 0\n            dp[i][0][1] = -prices[i]\n            for j in range(1, k + 1):\n                dp[i][j][0] = nums[j - 1][1] + prices[i]\n                dp[i][j][1] = nums[j][0] - prices[i]\n                res = max(res, dp[i][j][0])\n            for j in range(0, k + 1):\n                nums[j][0] = max(nums[j][0], dp[i][j][0])\n                nums[j][1] = max(nums[j][1], dp[i][j][1])\n        return res\n",
            "date": "2023-10-04"
        }
    ],
    "tagList": [
        "数组",
        "动态规划"
    ],
    "level": "Hard"
}