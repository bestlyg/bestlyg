{
    "id": "125",
    "name": "125.验证回文串",
    "url": "https://leetcode.cn/problems/valid-palindrome",
    "desc": "我们从二叉树的根节点 root  开始进行深度优先搜索。在遍历中的每个节点处，我们输出  D  条短划线（其中  D  是该节点的深度），然后输出该节点的值。（如果节点的深度为 D，则其直接子节点的深度为 D + 1。根节点的深度为 0）。如果节点只有一个子节点，那么保证该子节点为左子节点。给出遍历输出  S，还原树并返回其根节点  root。",
    "solutions": [
        {
            "date": "2020-06-19",
            "time": 96,
            "memory": 46.8,
            "script": "typescript",
            "desc": "利用字符串转数组后过滤获取所需字符进行判断。",
            "code": "function isPalindrome(s: string): boolean {\n  const arr = s\n    .toLowerCase()\n    .split('')\n    .filter(v => /d|w/.test(v));\n  return arr.join('') === arr.reverse().join('');\n}"
        },
        {
            "date": "2022-02-18",
            "time": 8,
            "memory": 7,
            "script": "cpp",
            "desc": "双指针遍历。",
            "code": "class Solution {\n   public:\n    bool isPalindrome(string s) {\n        if (s == \" \") return 1;\n        int l = 0, r = s.size() - 1;\n        char lc, rc;\n        while (l < r) {\n            do {\n                lc = tolower(s[l++]);\n            } while (l < s.size() && !isdigit(lc) && !isalpha(lc));\n            do {\n                rc = tolower(s[r--]);\n            } while (r >= 0 && !isdigit(rc) && !isalpha(rc));\n            if (l < s.size() && r >= 0 && lc != rc) return 0;\n        }\n        return 1;\n    }\n};"
        }
    ],
    "tagList": [
        "双指针",
        "字符串"
    ],
    "level": "Easy"
}