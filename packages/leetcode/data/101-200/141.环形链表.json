{
    "name": "141.环形链表",
    "url": "https://leetcode-cn.com/problems/linked-list-cycle/",
    "difficulty": "简单",
    "tag": [
        "链表",
        "双指针"
    ],
    "desc": "给定一个链表，判断链表中是否有环。",
    "solutions": [
        {
            "date": 1581523200000,
            "time": 0,
            "memory": 47,
            "script": "java",
            "desc": "使用快慢指针，若快指针与慢指针指向一个节点则存在。",
            "code": "public class Solution {\n    public boolean hasCycle(ListNode head) {\n        if (head == null || head.next == null)\n\t\t\treturn false;\n\t\tListNode slow = head;\n\t\tListNode fast = head.next;\n\t\twhile (fast != null && fast.next != null) {\n\t\t\tif (slow == fast)\n\t\t\t\treturn true;\n\t\t\tslow = slow.next;\n\t\t\tfast = fast.next.next;\n\t\t}\n\t\treturn false;\n    }\n}"
        },
        {
            "date": 1602172800000,
            "time": 96,
            "memory": 40,
            "script": "typescript",
            "desc": "双指针。",
            "code": "/**\n * @param {ListNode} head\n * @return {boolean}\n */\nvar hasCycle = function (head) {\n  let p1 = head;\n  let p2 = head;\n  while (p2?.next) {\n    p1 = p1.next;\n    p2 = p2.next.next;\n    if (p1 === p2) return true;\n  }\n  return false;\n};"
        },
        {
            "date": 1614960000000,
            "time": 92,
            "memory": 40.4,
            "script": "typescript",
            "desc": "快慢指针。",
            "code": "function hasCycle(head: ListNode | null): boolean {\n  if (head === null || head.next === null) return false;\n  let fast: ListNode | null = head.next;\n  let slow: ListNode | null = head;\n  while (fast !== slow && fast !== null && fast.next !== null) {\n    fast = fast.next.next;\n    slow = slow!.next;\n  }\n  return fast === slow;\n}"
        },
        {
            "date": 1637251200000,
            "time": 12,
            "memory": 7.7,
            "script": "c",
            "desc": "快慢指针。",
            "code": "bool hasCycle(struct ListNode *head) {\n    if(!head) return 0;\n    struct ListNode *slow = head;\n    struct ListNode *fast = head->next;\n    while (fast && fast->next && fast != slow) fast = fast->next->next, slow = slow->next;\n    return fast == slow;\n}"
        },
        {
            "date": 1646236800000,
            "time": 8,
            "memory": 8,
            "script": "c++",
            "desc": "双指针。",
            "code": "class Solution {\n   public:\n    bool hasCycle(ListNode *head) {\n        if (!head) return false;\n        ListNode *fast = head->next, *slow = head;\n        while (fast && fast->next && fast != slow) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        return fast && fast->next;\n    }\n};"
        }
    ]
}