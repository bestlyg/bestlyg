{
    "id": "145",
    "name": "145.二叉树的后序遍历",
    "url": "https://leetcode.cn/problems/binary-tree-postorder-traversal",
    "difficulty": "简单",
    "tag": [
        "栈",
        "树",
        "深度优先搜索",
        "二叉树"
    ],
    "desc": "给定一个二叉树，返回它的 后序 遍历。",
    "solutions": [
        {
            "date": 1582214400000,
            "time": 0,
            "memory": 37.7,
            "script": "java",
            "desc": "递归。",
            "code": "class Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        List<Integer> list=new LinkedList<Integer>();\n        if(root!=null) {\n        \tpostorder(root, list);\n        }\n        return list;\n    }\n    public void postorder(TreeNode node,List<Integer> list) {\n    \tif(node.left!=null)postorder(node.left, list);\n    \tif(node.right!=null)postorder(node.right, list);\n    \tlist.add(node.val);\n    }\n}"
        },
        {
            "date": 1582214400000,
            "time": 1,
            "memory": 38.1,
            "script": "java",
            "desc": "迭代。",
            "code": "class Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        LinkedList<Integer> list=new LinkedList<Integer>();\n        if(root==null)return list;\n        Stack<TreeNode> stack = new Stack<TreeNode>();\n        stack.push(root);\n        while(!stack.isEmpty()) {\n        \tTreeNode node = stack.pop();\n        \tlist.addFirst(node.val);\n        \tif(node.left!=null)stack.push(node.left);\n        \tif(node.right!=null)stack.push(node.right);\n        }\n        return list;\n    }\n}"
        },
        {
            "date": 1601308800000,
            "time": 84,
            "memory": 39.6,
            "script": "typescript",
            "desc": "递归。",
            "code": "function postorderTraversal(root: TreeNode | null): number[] {\n  const ans: number[] = [];\n  postOrder(root);\n  return ans;\n  function postOrder(root: TreeNode | null): void {\n    if (root === null) return;\n    root.left && postOrder(root.left);\n    root.right && postOrder(root.right);\n    ans.push(root.val);\n  }\n}"
        },
        {
            "date": 1601308800000,
            "time": 96,
            "memory": 39.8,
            "script": "typescript",
            "desc": "迭代遍历。",
            "code": "function postorderTraversal(root: TreeNode | null): number[] {\n  const ans: number[] = [];\n  if (root === null) return [];\n  const used = new Set<TreeNode>();\n  const stack: TreeNode[] = [root];\n  while (stack.length !== 0) {\n    const node = stack.pop()!;\n    if (used.has(node)) ans.push(node.val);\n    else {\n      stack.push(node);\n      node.right && stack.push(node.right);\n      node.left && stack.push(node.left);\n      used.add(node);\n    }\n  }\n  return ans;\n}"
        },
        {
            "date": 1616083200000,
            "time": 100,
            "memory": 39.5,
            "script": "typescript",
            "desc": "递归遍历。",
            "code": "function postorderTraversal(root: TreeNode | null): number[] {\n  const ans: number[] = [];\n  const preorder = (node: TreeNode | null): void => {\n    if (node === null) return;\n    preorder(node.left);\n    preorder(node.right);\n    ans.push(node.val);\n  };\n  preorder(root);\n  return ans;\n}"
        },
        {
            "date": 1637942400000,
            "time": 0,
            "memory": 5.7,
            "script": "c",
            "desc": "递归。",
            "code": "// 先递归左，再递归右，再计算当前节点\nvoid order(struct TreeNode *root, int *arr, int *idx){\n    if (!root) return ;\n    order(root->left, arr, idx);\n    order(root->right, arr, idx);\n    arr[(*idx)++] = root->val;\n}\nint* postorderTraversal(struct TreeNode* root, int* returnSize){\n    int *arr = (int *)malloc(sizeof(int) * 100);\n    *returnSize = 0;\n    order(root, arr, returnSize);\n    return arr;\n}"
        }
    ]
}