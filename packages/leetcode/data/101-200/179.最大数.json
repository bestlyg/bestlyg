{
    "id": "179",
    "name": "179.最大数",
    "url": "https://leetcode.cn/problems/largest-number",
    "difficulty": "中等",
    "tag": ["贪心", "数组", "字符串", "排序"],
    "desc": "给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。",
    "solutions": [
        {
            "date": 1587484800000,
            "time": 116,
            "memory": 36.4,
            "script": "javascript",
            "desc": "定义排序规则，先判断最大位，位数不相同又一次判断。",
            "code": "/**\n * @param {number[]} nums\n * @return {string}\n */\nvar largestNumber = function (nums) {\n  let spliltNums = [];\n  for (const num of nums) {\n    spliltNums.push(numSpilt(num));\n  }\n  spliltNums = spliltNums.sort(sortFn);\n  return arrJoin(spliltNums);\n};\nfunction numSpilt(num) {\n  if (num === 0) {\n    return [0];\n  }\n  const splitArr = [];\n  while (num !== 0) {\n    splitArr.push(num % 10);\n    num = Math.floor(num / 10);\n  }\n  return splitArr.reverse();\n}\nfunction arrJoin(arr) {\n  let res = arr.map(value => value.join('')).join('');\n  while (res[0] === '0' && res.length !== 1) {\n    res = res.substr(1);\n  }\n  return res;\n}\nfunction sortFn(num1, num2) {\n  const len1 = num1.length;\n  const len2 = num2.length;\n  let minLen = Math.min(len1, len2);\n  for (let i = 0; i < minLen; i++) {\n    if (num2[i] !== num1[i]) {\n      return num2[i] - num1[i];\n    }\n  }\n  if (len1 === len2) return 0;\n  if (minLen === len1) {\n    const lNum = num2[minLen];\n    for (let i = 0; i < minLen; i++) {\n      const comp = num2[i];\n      if (lNum !== comp) return lNum - comp;\n    }\n    const llNum = num2[minLen + 1];\n    if (num2[minLen + 1] !== lNum) {\n      return llNum - lNum;\n    }\n    return -1;\n  } else {\n    const lNum = num1[minLen];\n    for (let i = 0; i < minLen; i++) {\n      const comp = num1[i];\n      if (lNum !== comp) return comp - lNum;\n    }\n    const llNum = num1[minLen + 1];\n    if (num1[minLen + 1] !== lNum) {\n      return lNum - llNum;\n    }\n    return 1;\n  }\n}"
        },
        {
            "date": 1618156800000,
            "time": 96,
            "memory": 39.2,
            "script": "typescript",
            "desc": "合并两个字符串进行比较。",
            "code": "function largestNumber(nums: number[]): string {\n  const getCount = (num: number): number => {\n    if (num === 0) return 1;\n    let c = 0;\n    while (num) {\n      num = ~~(num / 10);\n      cpp;\n    }\n    return c;\n  };\n  nums.sort((num1, num2) => {\n    const count1 = getCount(num1);\n    const count2 = getCount(num2);\n    const left = num1 * 10 ** count2 + num2;\n    const right = num2 * 10 ** count1 + num1;\n    return right - left;\n  });\n  return nums[0] === 0 ? '0' : nums.join('');\n}"
        }
    ]
}
