{
  "name": "102. 二叉树的层序遍历",
  "url": "https://leetcode-cn.com/problems/binary-tree-level-order-traversal/",
  "difficulty": "中等",
  "tag": ["树", "广度优先搜索"],
  "desc": "给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。",
  "solutions": [
    {
      "date": 1582214400000,
      "time": 2,
      "memory": 39.6,
      "script": "java",
      "desc": "迭代。",
      "code": "class Solution {\n   \tpublic List<List<Integer>> levelOrder(TreeNode root) {\n\t\tList<List<Integer>> list = new LinkedList<List<Integer>>();\n\t\tif (root == null)\n\t\t\treturn list;\n\t\tList<Integer> tmplist = new LinkedList<Integer>();\n\t\tint size=1;\n\t\tQueue<TreeNode> queue = new LinkedList<>();\n\t\tqueue.offer(root);\n\t\twhile (!queue.isEmpty()) {\n\t\t\tTreeNode node = queue.poll();\n\t\t\ttmplist.add(node.val);\n\t\t\tif(node.left!=null)queue.offer(node.left);\n\t\t\tif(node.right!=null)queue.offer(node.right);\n\t\t\tsize--;\n\t\t\tif(size==0) {\n\t\t\t\tsize=queue.size();\n\t\t\t\tlist.add(tmplist);\n\t\t\t\ttmplist=new LinkedList<Integer>();\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n}"
    },
    {
      "date": 1582214400000,
      "time": 1,
      "memory": 39.3,
      "script": "java",
      "desc": "递归。",
      "code": "class Solution {\n   \tLinkedList<List<Integer>> list = new LinkedList<List<Integer>>();\n\tpublic List<List<Integer>> levelOrder(TreeNode root) {\n\t\tif (root == null)\n\t\t\treturn list;\n\t\tinLevelOrder(root,0);\n\t\treturn list;\n\t}\n\tpublic void inLevelOrder(TreeNode node,int level){\n\t\tif(list.size()==level) {\n\t\t\tlist.add(new ArrayList<Integer>());\n\t\t}\n\t\tlist.get(level).add(node.val);\n\t\tif(node.left!=null)\n\t\tinLevelOrder(node.left, 1+level);\n\t\tif(node.right!=null)\n\t\tinLevelOrder(node.right, 1+level);\n\t}\n}"
    },
    {
      "date": 1582214400000,
      "time": 72,
      "memory": 34.8,
      "script": "javascript",
      "desc": "迭代。",
      "code": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function (root) {\n  if (root === null) return [];\n  const queue = [root];\n  const res = [[root.val]];\n  let size = 1;\n  while (queue.length !== 0) {\n    const node = queue.shift();\n    if (node.left !== null) queue.push(node.left);\n    if (node.right !== null) queue.push(node.right);\n    if (--size === 0) {\n      if (queue.length !== 0) res.push(queue.map(node => node.val));\n      size = queue.length;\n    }\n  }\n  return res;\n};"
    },
    {
      "date": 1637942400000,
      "time": 8,
      "memory": 7.3,
      "script": "c",
      "desc": "递归。",
      "code": "#define MAX 2000\nint** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){\n    int **arr = (int **)malloc(sizeof(int) * MAX);\n    *returnSize = 0;\n    *returnColumnSizes = (int *)malloc(sizeof(int) * MAX);\n    if (!root) return arr;\n    // 维护队列储存节点信息\n    struct TreeNode *q[2000];\n    q[0] = root;\n    // 维护队列头尾指针\n    int head = 0, tail = 1;\n    // 维护当前层的元素数量，当前遍历的层级\n    int size = 1, height = 1;\n    arr[0] = (int *)malloc(sizeof(int));\n    arr[0][0] = root->val;\n    (*returnColumnSizes)[0] = 1;\n    while (head != tail) {\n        // 每次出队一个节点\n        struct TreeNode *node = q[head++];\n        // 若左节点不为空则入队\n        if (node->left) q[tail++] = node->left;\n        // 若右节点不为空则入队\n        if (node->right) q[tail++] = node->right;\n        // 若当前层无元素，说明队列里都是下一层的元素\n        if (--size == 0) {\n            size = tail - head;\n            *returnSize += 1;\n            (*returnColumnSizes)[height] = size;\n            arr[height] = (int *)malloc(sizeof(int) * size);\n            for(int i = head; i < tail; i++) arr[height][i - head] = q[i]->val;\n            height++;\n        }\n    }\n    return arr;\n}"
    }
  ]
}
