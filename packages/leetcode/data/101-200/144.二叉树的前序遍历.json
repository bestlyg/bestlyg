{
    "id": "144",
    "name": "144.二叉树的前序遍历",
    "url": "https://leetcode.cn/problems/binary-tree-preorder-traversal",
    "desc": "给定一个二叉树，返回它的前序遍历。",
    "solutions": [
        {
            "date": "2020-02-21",
            "time": 0,
            "memory": 37.8,
            "script": "java",
            "desc": "递归。",
            "code": "class Solution {\n\tpublic List<Integer> preorderTraversal(TreeNode root) {\n\t\tList<Integer> list = new LinkedList<Integer>();\n\t\tif (root == null)\n\t\t\treturn list;\n\t\tpreorder(root, list);\n\t\treturn list;\n\t}\n\n\tpublic void preorder(TreeNode node, List<Integer> list) {\n\t\tlist.add(node.val);\n\t\tif (node.left != null)\n\t\t\tpreorder(node.left,list);\n\t\tif (node.right != null)\n\t\t\tpreorder(node.right,list);\n\t}\n}"
        },
        {
            "date": "2020-02-21",
            "time": 1,
            "memory": 38.2,
            "script": "java",
            "desc": "迭代。",
            "code": "class Solution {\n\tpublic List<Integer> preorderTraversal(TreeNode root) {\n\t\tList<Integer> list = new LinkedList<Integer>();\n\t\tif (root == null)\n\t\t\treturn list;\n\t\tStack<TreeNode> stack = new Stack<TreeNode>();\n\t\tstack.push(root);\n\t\twhile (!stack.isEmpty()) {\n\t\t\tTreeNode node = stack.pop();\n\t\t\tlist.add(node.val);\n\t\t\tif(node.right!=null)stack.push(node.right);\n\t\t\tif(node.left!=null)stack.push(node.left);\n\t\t}\n\t\treturn list;\n\t}\n}"
        },
        {
            "date": "2020-10-27",
            "time": 84,
            "memory": 40.2,
            "script": "typescript",
            "desc": "递归。",
            "code": "function preorderTraversal(root: TreeNode | null): number[] {\n  const ans: number[] = [];\n  preorder(root);\n  return ans;\n  function preorder(root: TreeNode | null) {\n    if (root === null) return;\n    ans.push(root.val);\n    preorder(root.left);\n    preorder(root.right);\n  }\n}"
        },
        {
            "date": "2020-10-27",
            "time": 80,
            "memory": 40.3,
            "script": "typescript",
            "desc": "迭代。",
            "code": "function preorderTraversal(root: TreeNode | null): number[] {\n  const ans: number[] = [];\n  if (root === null) return ans;\n  const stack: TreeNode[] = [root];\n  while (stack.length !== 0) {\n    const node = stack.pop()!;\n    ans.push(node.val);\n    node.right && stack.push(node.right);\n    node.left && stack.push(node.left);\n  }\n  return ans;\n}"
        },
        {
            "date": "2021-11-27",
            "time": 0,
            "memory": 5.7,
            "script": "c",
            "desc": "递归。",
            "code": "// 先计算当前节点，再递归左，再递归右\nvoid preorder(struct TreeNode *root, int *arr, int *idx){\n    if (!root) return ;\n    arr[(*idx)++] = root->val;\n    preorder(root->left, arr, idx);\n    preorder(root->right, arr, idx);\n}\nint* preorderTraversal(struct TreeNode* root, int* returnSize){\n    int *arr = (int *)malloc(sizeof(int) * 100);\n    *returnSize = 0;\n    preorder(root, arr, returnSize);\n    return arr;\n}"
        },
        {
            "script": "python",
            "time": 34,
            "memory": 16.38,
            "desc": "dfs。",
            "code": "class Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        if not root: return []\n        return [root.val] + self.preorderTraversal(root.left) + self.preorderTraversal(root.right)",
            "date": "2024-02-11"
        }
    ],
    "tagList": [
        "栈",
        "树",
        "深度优先搜索",
        "二叉树"
    ],
    "level": "Easy"
}