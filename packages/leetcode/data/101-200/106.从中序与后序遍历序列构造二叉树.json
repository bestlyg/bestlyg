{
  "name": "106. 从中序与后序遍历序列构造二叉树",
  "url": "https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/",
  "difficulty": "中等",
  "tag": ["树", "深度优先搜索", "数组"],
  "desc": "根据一棵树的中序遍历与后序遍历构造二叉树。",
  "solutions": [
    {
      "date": 1582214400000,
      "time": 18,
      "memory": 75.9,
      "script": "java",
      "desc": "层序遍历，利用链表每次在头结点添加。",
      "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] inorder, int[] postorder) {\n\t\tif (inorder.length == 0)\n\t\t\treturn null;\n\t\tint center = postorder[postorder.length - 1];\n\t\tTreeNode node = new TreeNode(center);\n\t\tint index = indexOf(inorder, center);\n\t\tint left = index - 0, right = inorder.length - 1 - index;\n\t\tif (left != 0) {\n\t\t\tnode.left = buildTree(subString(inorder, 0, index), split(postorder, 0, left));\n\t\t}\n\t\tif (right != 0) {\n\t\t\tnode.right = buildTree(subString(inorder, index + 1), split(postorder, 0 + left, right));\n\t\t}\n\t\treturn node;\n\n\t}\n\n\tpublic int[] split(int[] arr, int start, int length) {\n\t\tint[] newArr = new int[length];\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tnewArr[i] = arr[start];\n\t\t\tstart++;\n\t\t}\n\t\treturn newArr;\n\t}\n\n\tpublic int indexOf(int[] arr, int num) {\n\t\tfor (int i = 0, len = arr.length; i < len; i++) {\n\t\t\tif (arr[i] == num)\n\t\t\t\treturn i;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tpublic int[] subString(int[] arr, int start) {\n\t\treturn subString(arr, start, arr.length);\n\t}\n\n\tpublic int[] subString(int[] arr, int start, int end) {\n\t\tint length = end - start;\n\t\tint[] newArr = new int[length];\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tnewArr[i] = arr[start];\n\t\t\tstart++;\n\t\t}\n\t\treturn newArr;\n\t}\n}"
    },
    {
      "date": 1600963200000,
      "time": 196,
      "memory": 111.2,
      "script": "typescript",
      "desc": "递归。",
      "code": "function buildTree(inorder: number[], postorder: number[]): TreeNode | null {\n  if (inorder.length === 0 && postorder.length === 0) return null;\n  const val = postorder[postorder.length - 1];\n  const inorderIndex = inorder.indexOf(val);\n  const lInorder = inorder.slice(0, inorderIndex);\n  const rInorder = inorder.slice(inorderIndex + 1);\n  const lPostorder = postorder.slice(0, lInorder.length);\n  const rPostorder = postorder.slice(lInorder.length, postorder.length - 1);\n  return new TreeNode(val, buildTree(lInorder, lPostorder), buildTree(rInorder, rPostorder));\n}"
    }
  ]
}
