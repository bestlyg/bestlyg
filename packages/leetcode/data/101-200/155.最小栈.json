{
    "name": "155. 最小栈",
    "url": "https://leetcode-cn.com/problems/min-stack/",
    "difficulty": "简单",
    "tag": [
        "栈",
        "设计"
    ],
    "desc": "设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。",
    "solutions": [
        {
            "date": 1589212800000,
            "time": 156,
            "memory": 45.6,
            "script": "javascript",
            "desc": "优化检索为 O1。",
            "code": "/**\n * initialize your data structure here.\n */\nclass MinStack {\n  _arr = [];\n  _min = [];\n  /**\n   * @param {number} x\n   * @return {void}\n   */\n  push(x) {\n    this._arr.push(x);\n    const arrLen = this._arr.length - 1;\n    if (this._min.length === 0) this._min.push(0);\n    else {\n      for (let i = 0, len = this._min.length; i < len; i++) {\n        if (this._arr[this._min[i]] > x) {\n          this._min.splice(i, 0, arrLen);\n          return;\n        }\n      }\n      this._min.push(arrLen);\n    }\n  }\n  /**\n   * @return {void}\n   */\n  pop() {\n    this._min = this._min.filter(arrIndex => arrIndex !== this._arr.length - 1);\n    this._arr.pop();\n  }\n  /**\n   * @return {number}\n   */\n  top() {\n    return this._arr[this._arr.length - 1];\n  }\n  /**\n   * @return {number}\n   */\n  getMin() {\n    return this._arr[this._min[0]];\n  }\n}"
        },
        {
            "date": 1626624000000,
            "time": 112,
            "memory": 46,
            "script": "typescript",
            "desc": "储存单调栈。",
            "code": "class MinStack {\n  private stack: number[] = [];\n  private get topStack() {\n    return this.stack[this.stack.length - 1];\n  }\n  private minStack: number[] = [];\n  private get topMinStack() {\n    return this.minStack[this.minStack.length - 1];\n  }\n  push(val: number): void {\n    this.stack.push(val);\n    if (this.minStack.length === 0 || this.topMinStack >= val) this.minStack.push(val);\n  }\n  pop(): void {\n    if (this.topStack === this.topMinStack) this.minStack.pop();\n    this.stack.pop();\n  }\n  top(): number {\n    return this.topStack;\n  }\n  getMin(): number {\n    return this.topMinStack;\n  }\n}"
        }
    ]
}