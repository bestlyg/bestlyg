{
    "id": "146",
    "name": "146.LRU缓存",
    "url": "https://leetcode.cn/problems/lru-cache",
    "desc": "根据逆波兰表示法，求表达式的值。有效的运算符包括 +, -, \\*, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。",
    "solutions": [
        {
            "date": "2020-05-25",
            "time": 228,
            "memory": 47.8,
            "script": "typescript",
            "desc": "利用哈希映射储存键值对，值为链表节点，利用链表的增删控制复杂度 O(1)。",
            "code": "class LinkedNode {\n  public prev: LinkedNode = this;\n  public next: LinkedNode = this;\n  constructor(public key: number, public val: number, prev?: LinkedNode, next?: LinkedNode) {\n    if (prev !== undefined) this.prev = prev;\n    if (next !== undefined) this.next = next;\n  }\n}\nclass LRUCache {\n  cache = new Map<number, LinkedNode>();\n  firstNode: LinkedNode | null = null;\n  get lastNode(): LinkedNode | null {\n    return this.firstNode ? this.firstNode.prev : null;\n  }\n  get size(): number {\n    return this.cache.size;\n  }\n  constructor(public capacity: number) {}\n  get(key: number): number {\n    if (this.capacity === 0) return -1;\n    if (this.firstNode === null) return -1;\n    const node = this.cache.get(key);\n    if (node === undefined) return -1;\n    const { key: k, val: v } = node;\n    this.put(k, v);\n    return v;\n  }\n  put(key: number, value: number): void {\n    if (this.capacity === 0) {\n    } else if (this.firstNode === null || this.lastNode === null) {\n      const node = new LinkedNode(key, value);\n      this.cache.set(key, node);\n      this.firstNode = node;\n    } else if (this.cache.has(key)) {\n      const node: LinkedNode = this.cache.get(key)!;\n      node.val = value;\n      if (node === this.firstNode) this.firstNode = node.next;\n      node.prev.next = node.next;\n      node.next.prev = node.prev;\n      node.prev = this.lastNode;\n      node.next = this.firstNode;\n      this.lastNode.next = node;\n      this.firstNode.prev = node;\n    } else if (this.size < this.capacity) {\n      const node = new LinkedNode(key, value, this.lastNode, this.firstNode);\n      this.cache.set(key, node);\n      this.lastNode.next = node;\n      this.firstNode.prev = node;\n    } else {\n      const delNode = this.firstNode;\n      this.firstNode = delNode.next;\n      this.firstNode.prev = delNode.prev;\n      this.cache.delete(delNode.key);\n      this.put(key, value);\n    }\n  }\n}"
        },
        {
            "script": "python",
            "time": 544,
            "memory": 73.81,
            "desc": "链表。",
            "code": "class Node:\n        def __init__(self, key=0, val: int = 0, prev=None, next=None):\n            self.key = key\n            self.val = val\n            self.prev = prev\n            self.next = next\n    \n        def append(self, prev):\n            next = prev.next\n            prev.next, next.prev, self.prev, self.next = self, self, prev, next\n    \n        def remove(self):\n            if self.prev:\n                self.prev.next, self.next.prev = self.next, self.prev\n    \n    \n    class LRUCache:\n        def __init__(self, capacity: int):\n            self.cache = {}\n            self.capacity = capacity\n            self.size = 0\n            self.head = Node()\n            self.tail = Node()\n            self.head.next = self.tail\n            self.tail.prev = self.head\n    \n        def get(self, key: int) -> int:\n            if key not in self.cache:\n                return -1\n            node = self.cache[key]\n            node.remove()\n            node.append(self.head)\n            return node.val\n    \n        def put(self, key: int, value: int) -> None:\n            if key not in self.cache:\n                self.cache[key] = Node(key, value)\n                self.size += 1\n                if self.size > self.capacity:\n                    self.size -= 1\n                    del self.cache[self.tail.prev.key]\n                    self.tail.prev.remove()\n            node = self.cache[key]\n            node.val = value\n            node.remove()\n            node.append(self.head)",
            "date": "2023-09-24"
        }
    ],
    "tagList": ["设计", "哈希表", "链表", "双向链表"],
    "level": "Medium"
}
