{
    "name": "122.买卖股票的最佳时机II",
    "url": "https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/",
    "difficulty": "简单",
    "tag": [
        "贪心",
        "数组"
    ],
    "desc": "给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。",
    "solutions": [
        {
            "date": 1604764800000,
            "time": 84,
            "memory": 40.2,
            "script": "typescript",
            "desc": "动态规划。",
            "code": "function maxProfit(prices: number[]): number {\n  const len = prices.length;\n  let dp0 = 0,\n    dp1 = -prices[0];\n  for (let i = 1; i < len; i++) {\n    dp0 = Math.max(dp0, dp1 + prices[i]);\n    dp1 = Math.max(dp1, dp0 - prices[i]);\n  }\n  return dp0;\n}"
        },
        {
            "date": 1630684800000,
            "time": 84,
            "memory": 41.2,
            "script": "typescript",
            "desc": "前缀和，减去前面前缀和的最小值。",
            "code": "function maxProfit(prices: number[]): number {\n  const n = prices.length;\n  /**\n   *  0 : 买\n   *  1 : 卖\n   */\n  const dp = new Array(n).fill(0).map(_ => new Array(2).fill(0));\n  dp[0][0] = -prices[0];\n  for (let i = 1; i < n; i++) {\n    dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] - prices[i]);\n    dp[i][1] = Math.max(dp[i - 1][0] + prices[i], dp[i - 1][1]);\n  }\n  return dp[n - 1][1];\n}"
        },
        {
            "date": 1630684800000,
            "time": 76,
            "memory": 40.1,
            "script": "typescript",
            "desc": "统计每个上升区间。",
            "code": "function maxProfit(prices: number[]): number {\n  let ans = 0;\n  for (let i = 1; i < prices.length; i++)\n    if (prices[i] > prices[i - 1]) ans += prices[i] - prices[i - 1];\n  return ans;\n}"
        }
    ]
}