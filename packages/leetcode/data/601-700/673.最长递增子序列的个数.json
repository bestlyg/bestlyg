{
    "id": "673",
    "name": "673.最长递增子序列的个数",
    "url": "https://leetcode.cn/problems/number-of-longest-increasing-subsequence",
    "desc": "给定一个未排序的整数数组，找到最长递增子序列的个数。",
    "solutions": [
        {
            "date": "2021-09-20",
            "time": 108,
            "memory": 40.5,
            "script": "javascript",
            "desc": "动态规划。",
            "code": "function findNumberOfLIS(nums: number[]): number {\n  const n = nums.length;\n  const dp = new Array(n).fill(0).map(_ => ({ val: 1, cnt: 1 }));\n  let maxVal = 1;\n  let maxCnt = 0;\n  for (let i = 0; i < n; i++) {\n    const num = nums[i];\n    for (let j = 0; j < i; j++) {\n      if (nums[j] < num) {\n        const len = dp[j].val + 1;\n        if (dp[i].val < len) {\n          dp[i].val = len;\n          dp[i].cnt = dp[j].cnt;\n        } else if (dp[i].val === len) dp[i].cnt += dp[j].cnt;\n      }\n    }\n    if (maxVal < dp[i].val) {\n      maxVal = Math.max(maxVal, dp[i].val);\n      maxCnt = dp[i].cnt;\n    } else if (maxVal === dp[i].val) maxCnt += dp[i].cnt;\n  }\n  return maxCnt;\n}"
        }
    ],
    "tagList": [
        "树状数组",
        "线段树",
        "数组",
        "动态规划"
    ],
    "level": "Medium"
}