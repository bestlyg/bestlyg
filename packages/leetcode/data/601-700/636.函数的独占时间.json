{
    "id": "636",
    "name": "636.函数的独占时间",
    "url": "https://leetcode.cn/problems/exclusive-time-of-functions",
    "desc": "给出一个非抢占单线程 CPU 的 n 个函数运行日志，找到函数的独占时间。",
    "solutions": [
        {
            "date": "2021-03-20",
            "time": 116,
            "memory": 42.8,
            "script": "typescript",
            "desc": "利用栈维护函数运行过程。",
            "code": "function exclusiveTime(n: number, logs: string[]): number[] {\n  const ans = new Array(n).fill(0);\n  const stack: number[] = [];\n  for (let i = 0, l = logs.length, pre = 0; i < l; i++) {\n    const info = logs[i].split(':');\n    const id = Number(info[0]);\n    const tag = info[1];\n    const time = Number(info[2]);\n    if (tag === 'start') {\n      if (stack.length !== 0) ans[stack[stack.length - 1]] += time - pre;\n      pre = time;\n      stack.push(id);\n    } else {\n      ans[id] += time - pre + 1;\n      pre = time + 1;\n      stack.pop();\n    }\n  }\n  return ans;\n}"
        },
        {
            "date": "2022-08-07",
            "time": 12,
            "memory": 13,
            "script": "cpp",
            "desc": "stack。",
            "code": "class Solution {\n  public:\n    typedef pair<int, int> node;\n    vector<int> exclusiveTime(int n, vector<string>& logs) {\n        vector<int> list(n, 0);\n        stack<node> s;\n        for (auto &item : logs) {\n            bool isStart;\n            int idx = 0, time = 0;\n            analysis(item, idx, isStart, time);\n            if (s.size()) {\n                if (isStart) {\n                    node top = s.top();\n                    list[top.first] += time - top.second;\n                    s.push(make_pair(idx, time));\n                } else {\n                    node top = s.top(); s.pop();\n                    list[top.first] += time - top.second + 1;\n                    if (s.size()) {\n                        top = s.top(); s.pop();\n                        top.second = time + 1;\n                        s.push(top);\n                    }\n                }\n            } else {\n                s.push(make_pair(idx, time));\n            }\n        }\n        return list;\n    }\n    void analysis(string &item, int &idx, bool &isStart, int &time) {\n        int i = 0;\n        for (; item[i] != ':'; i++) idx = idx * 10 + item[i] - '0';\n        i++;\n        string temp = \"\";\n        for (; item[i] != ':'; i++) temp += item[i];\n        isStart = temp == \"start\";\n        i++;\n        for (; i < item.size(); i++) time = time * 10 + item[i] - '0';\n    }\n};"
        }
    ],
    "tagList": ["栈", "数组"],
    "level": "Medium"
}
