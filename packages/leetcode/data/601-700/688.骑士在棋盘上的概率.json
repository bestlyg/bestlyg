{
    "id": "688",
    "name": "688.骑士在棋盘上的概率",
    "url": "https://leetcode.cn/problems/knight-probability-in-chessboard",
    "desc": "返回 骑士在棋盘停止移动后仍留在棋盘上的概率 。",
    "solutions": [
        {
            "date": "2022-02-17",
            "time": 0,
            "memory": 5.8,
            "script": "cpp",
            "desc": "动态规划，统计每个点的概率。",
            "code": "int dirs[8][2] = {{-1, -2}, {-1, 2}, {-2, -1}, {-2, 1},\n          {1, 2},   {1, -2}, {2, 1},   {2, -1}};\nclass Solution {\n  public:\n   double knightProbability(int n, int k, int row, int column) {\n       double table[2][n][n], ans = 0;\n       memset(table, 0, sizeof(double) * 2 * n * n);\n       table[0][row][column] = 1;\n       for (int i = 0; i < k; i++) {\n           int idx = i & 1, nidx = (i + 1) & 1;\n           memset(table[nidx], 0, sizeof(double) * n * n);\n           for (int row = 0; row < n; row++) {\n               for (int col = 0; col < n; col++) {\n                   if (table[idx][row][col] == 0) continue;\n                   for (int next = 0; next < 8; next++) {\n                       int nrow = row + dirs[next][0],\n                           ncol = col + dirs[next][1];\n                       if (nrow < 0 || nrow >= n || ncol < 0 || ncol >= n)\n                           continue;\n                       table[nidx][nrow][ncol] +=\n                           1.0 / 8 * table[idx][row][col];\n                   }\n               }\n           }\n       }\n       for (int row = 0; row < n; row++) {\n           for (int col = 0; col < n; col++) {\n               if (table[k & 1][row][col]) ans += table[k & 1][row][col];\n           }\n       }\n       return ans;\n   }\n};"
        },
        {
            "time": 0,
            "memory": 17.23,
            "desc": "遍历。",
            "code": "class Solution:\n    def numRookCaptures(self, board: List[List[str]]) -> int:\n        CNT = 8\n        x = y = 0\n        for i in range(CNT):\n            for j in range(CNT):\n                if board[i][j] == 'R':\n                    x = i\n                    y = j\n        dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        res = 0\n        for dir in dirs:\n            cnt = 1\n            while True:\n                nx = x + dir[0] * cnt\n                ny = y + dir[1] * cnt\n                if 0 <= nx < CNT and 0 <= ny < CNT:\n                    if board[nx][ny] == '.':\n                        cnt += 1\n                        continue\n                    else:\n                        if board[nx][ny] == 'p':\n                            res += 1\n                break\n        return res",
            "date": "2024-12-07"
        }
    ],
    "tagList": ["动态规划"],
    "level": "Medium"
}
