{
    "id": "859",
    "name": "641.设计循环双端队列",
    "url": "https://leetcode.cn/problems/design-circular-deque",
    "difficulty": "中等",
    "tag": [
        "设计",
        "队列",
        "数组",
        "链表"
    ],
    "desc": "设计实现双端队列。",
    "solutions": [
        {
            "date": 1615651200000,
            "time": 160,
            "memory": 46.1,
            "script": "typescript",
            "desc": "根据题 622 完善。",
            "code": "class MyCircularDeque {\n  private arr: number[];\n  private head = 0;\n  private rear = 0;\n  private count = 0;\n  constructor(private k: number) {\n    this.arr = new Array(k);\n  }\n  isEmpty(): boolean {\n    return this.count === 0;\n  }\n  isFull(): boolean {\n    return this.count === this.k;\n  }\n  insertFront(value: number): boolean {\n    if (this.isFull()) return false;\n    this.head = this.head === 0 ? this.k - 1 : this.head - 1;\n    this.arr[this.head] = value;\n    this.count++;\n    return true;\n  }\n  insertLast(value: number): boolean {\n    if (this.isFull()) return false;\n    this.arr[this.rear] = value;\n    this.rear = (this.rear + 1) % this.k;\n    this.count++;\n    return true;\n  }\n  deleteFront(): boolean {\n    if (this.isEmpty()) return false;\n    this.head = (this.head + 1) % this.k;\n    this.count--;\n    return true;\n  }\n  deleteLast(): boolean {\n    if (this.isEmpty()) return false;\n    this.rear = this.rear === 0 ? this.k - 1 : this.rear - 1;\n    this.count--;\n    return true;\n  }\n  getFront(): number {\n    if (this.isEmpty()) return -1;\n    return this.arr[this.head];\n  }\n\n  getRear(): number {\n    if (this.isEmpty()) return -1;\n    return this.arr[this.rear === 0 ? this.k - 1 : this.rear - 1];\n  }\n}"
        },
        {
            "date": 1646236800000,
            "time": 20,
            "memory": 16.5,
            "script": "cpp",
            "desc": "双指针。",
            "code": "class MyCircularDeque {\n   public:\n    int head, tail, *list, n;\n    MyCircularDeque(int k) : head(0), tail(0), n(k + 1) {\n        list = ((int *)malloc(sizeof(int) * n));\n    }\n    ~MyCircularDeque() { free(list); }\n\n    bool insertLast(int value) {\n        if (isFull()) return 0;\n        list[tail] = value;\n        tail = (tail + 1) % n;\n        return 1;\n    }\n    bool insertFront(int value) {\n        if (isFull()) return 0;\n        head = head == 0 ? n - 1 : head - 1;\n        list[head] = value;\n        return 1;\n    }\n    bool deleteLast() {\n        if (isEmpty()) return 0;\n        tail = tail == 0 ? n - 1 : tail - 1;\n        return 1;\n    }\n    bool deleteFront() {\n        if (isEmpty()) return 0;\n        head = (head + 1) % n;\n        return 1;\n    }\n    int getFront() {\n        if (isEmpty()) return -1;\n        return list[head];\n    }\n    int getRear() {\n        if (isEmpty()) return -1;\n        return list[tail == 0 ? n - 1 : tail - 1];\n    }\n    bool isEmpty() { return head == tail; }\n    bool isFull() { return (tail + 1) % n == head; }\n};"
        },
        {
            "date": 1660492800000,
            "time": 4,
            "memory": 2.5,
            "script": "rust",
            "desc": "循环队列。",
            "code": "struct MyCircularDeque {\n    list: Vec<i32>,\n    first: usize,\n    last: usize,\n    len: usize,\n}\nimpl MyCircularDeque {\n    fn new(k: i32) -> Self {\n        let len = (k + 1) as usize;\n        let mut list = Vec::with_capacity(len);\n        for _ in 0..len {\n            list.push(0);\n        }\n        MyCircularDeque {\n            list,\n            first: 0,\n            last: 0,\n            len,\n        }\n    }\n    fn insert_front(&mut self, value: i32) -> bool {\n        if self.is_full() {\n            false\n        } else {\n            self.first = self.get_prev(self.first);\n            self.list[self.first] = value;\n            true\n        }\n    }\n    fn insert_last(&mut self, value: i32) -> bool {\n        if self.is_full() {\n            false\n        } else {\n            self.list[self.last] = value;\n            self.last = self.get_next(self.last);\n            true\n        }\n    }\n    fn delete_front(&mut self) -> bool {\n        if self.is_empty() {\n            false\n        } else {\n            self.first = self.get_next(self.first);\n            true\n        }\n    }\n    fn delete_last(&mut self) -> bool {\n        if self.is_empty() {\n            false\n        } else {\n            self.last = self.get_prev(self.last);\n            true\n        }\n    }\n    fn get_front(&self) -> i32 {\n        if self.is_empty() {\n            -1\n        } else {\n            self.list[self.first]\n        }\n    }\n    fn get_rear(&self) -> i32 {\n        if self.is_empty() {\n            -1\n        } else {\n            self.list[self.get_prev(self.last)]\n        }\n    }\n    fn is_empty(&self) -> bool {\n        self.first == self.last\n    }\n    fn is_full(&self) -> bool {\n        self.get_next(self.last) == self.first\n    }\n    fn get_prev(&self, cur: usize) -> usize {\n        if cur == 0 {\n            self.len - 1\n        } else {\n            cur - 1\n        }\n    }\n    fn get_next(&self, cur: usize) -> usize {\n        (cur + 1) % self.len\n    }\n}"
        }
    ]
}