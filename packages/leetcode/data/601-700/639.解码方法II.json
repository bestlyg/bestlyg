{
    "id": "639",
    "name": "639.解码方法II",
    "url": "https://leetcode.cn/problems/decode-ways-ii",
    "desc": "给你一个字符串 s ，由数字和 '\\*' 字符组成，返回 解码 该字符串的方法 数目 。",
    "solutions": [
        {
            "date": "2021-09-28",
            "time": 152,
            "memory": 52.4,
            "script": "typescript",
            "desc": "dfs。",
            "code": "function pathSum(root: TreeNode | null, targetSum: number): number {\n  if (root === null) return 0;\n  let ans = 0;\n  dfs(root);\n  return ans;\n  function dfs(node: TreeNode | null, list: number[] = []) {\n    if (node === null) return;\n    const newList = list.map(v => v + node.val);\n    newList.push(node.val);\n    newList.forEach(v => {\n      if (v === targetSum) ans++;\n    });\n    dfs(node.left, newList);\n    dfs(node.right, newList);\n  }\n}"
        },
        {
            "date": "2021-09-28",
            "time": 88,
            "memory": 42.6,
            "script": "typescript",
            "desc": "dfs。",
            "code": "function pathSum(root: TreeNode | null, targetSum: number): number {\n  if (root === null) return 0;\n  let ans = 0;\n  dfs(root);\n  return ans;\n  function dfs(node: TreeNode | null, list: number[] = []) {\n    if (node === null) return;\n    const val = node.val;\n    const len = list.length;\n    if (val === targetSum) ans++;\n    for (let i = 0; i < len; i++) {\n      list[i] += val;\n      if (list[i] === targetSum) ans++;\n    }\n    list.push(val);\n    dfs(node.left, list);\n    dfs(node.right, list);\n    list.pop();\n    for (let i = 0; i < len; i++) {\n      list[i] -= val;\n    }\n  }\n}"
        }
    ],
    "tagList": [
        "字符串",
        "动态规划"
    ],
    "level": "Hard"
}