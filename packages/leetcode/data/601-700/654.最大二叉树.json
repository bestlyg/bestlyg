{
    "id": "654",
    "name": "654.最大二叉树",
    "url": "https://leetcode.cn/problems/maximum-binary-tree",
    "difficulty": "中等",
    "tag": ["栈", "树", "数组", "分治", "二叉树", "单调栈"],
    "desc": "返回 nums 构建的 最大二叉树 。",
    "solutions": [
        {
            "date": 1660924800000,
            "time": 64,
            "memory": 41.2,
            "script": "cpp",
            "desc": "dfs。",
            "code": "class Solution {\npublic:\n    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {\n        return _constructMaximumBinaryTree(nums, 0, nums.size());\n    }\n    TreeNode* _constructMaximumBinaryTree(vector<int>& nums, int l, int r) {\n        if (l >= r) return nullptr;\n        int max_num = INT_MIN, max_idx;\n        for (int i = l; i < r; i++) {\n            if (nums[i] > max_num) {\n                max_num = nums[i];\n                max_idx = i;\n            }\n        }\n        return new TreeNode(max_num, _constructMaximumBinaryTree(nums, l, max_idx), _constructMaximumBinaryTree(nums, max_idx + 1, r));\n    }\n};"
        }
    ]
}
