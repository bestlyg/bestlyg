{
    "id": "617",
    "name": "617.合并二叉树",
    "url": "https://leetcode.cn/problems/merge-two-binary-trees",
    "difficulty": "简单",
    "tag": ["树", "深度优先搜索", "广度优先搜索", "二叉树"],
    "desc": "给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为  NULL 的节点将直接作为新二叉树的节点。",
    "solutions": [
        {
            "date": 1600790400000,
            "time": 168,
            "memory": 45.5,
            "script": "typescript",
            "desc": "递归。",
            "code": "function mergeTrees(t1: TreeNode | null, t2: TreeNode | null): TreeNode | null {\n  return merge(t1, t2);\n  function merge(t1: TreeNode | null, t2: TreeNode | null): TreeNode | null {\n    if (t1 === null && t2 === null) return null;\n    if (t1 === null) return t2;\n    if (t2 === null) return t1;\n    const node = new TreeNode(t1.val + t2.val);\n    node.left = merge(t1.left, t2.left);\n    node.right = merge(t1.right, t2.right);\n    return node;\n  }\n}"
        },
        {
            "script": "cpp",
            "time": 36,
            "memory": 30.85,
            "desc": "递归合并。",
            "code": "class Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\n        if (!root1 && !root2) return nullptr;\n        else if (root1 && !root2) return root1;\n        else if (!root1 && root2) return root2;\n        else {\n            root1->val += root2->val;\n            root1->left = mergeTrees(root1->left, root2->left);\n            root1->right = mergeTrees(root1->right, root2->right);\n            return root1;\n        }\n    }\n};",
            "date": 1691942400000
        },
        {
            "script": "python",
            "time": 64,
            "memory": 16.15,
            "desc": "同上。",
            "code": "class Solution:\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\n        if not root1 and not root2:\n            return None\n        elif root1 and not root2:\n            return root1\n        elif not root1 and root2:\n            return root2\n        else:\n            root1.val += root2.val\n            root1.left = self.mergeTrees(root1.left, root2.left)\n            root1.right = self.mergeTrees(root1.right, root2.right)\n            return root1",
            "date": 1691942400000
        },
        {
            "script": "rust",
            "time": 4,
            "memory": 2.3,
            "desc": "同上。",
            "code": "use std::cell::RefCell;\nuse std::rc::Rc;\nimpl Solution {\n    pub fn merge_trees(\n        root1: Option<Rc<RefCell<TreeNode>>>,\n        root2: Option<Rc<RefCell<TreeNode>>>,\n    ) -> Option<Rc<RefCell<TreeNode>>> {\n        match root1 {\n            None => root2,\n            Some(mut root1) => match root2 {\n                None => Some(root1),\n                Some(root2) => {\n                    {\n                        let mut root1_ref = root1.as_ref().borrow_mut();\n                        let mut root2_ref = root2.as_ref().borrow_mut();\n                        root1_ref.val += root2_ref.val;\n                        {\n                            let child1 = root1_ref.left.take();\n                            let child2 = root2_ref.left.take();\n                            root1_ref.left = Self::merge_trees(child1, child2);\n                        }\n                        {\n                            let child1 = root1_ref.right.take();\n                            let child2 = root2_ref.right.take();\n                            root1_ref.right = Self::merge_trees(child1, child2);\n                        }\n                    }\n                    Some(root1)\n                }\n            },\n        }\n    }\n}",
            "date": 1691942400000
        }
    ]
}
