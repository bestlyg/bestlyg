{
    "id": "648",
    "name": "648.单词替换",
    "url": "https://leetcode.cn/problems/replace-words",
    "desc": "现在，给定一个由许多词根组成的词典 dictionary 和一个用空格分隔单词形成的句子 sentence。你需要将句子中的所有继承词用词根替换掉。如果继承词有许多可以形成它的词根，则用最短的词根替换它。",
    "solutions": [
        {
            "date": "2022-07-07",
            "time": 68,
            "memory": 54.5,
            "script": "cpp",
            "desc": "字典树。",
            "code": "class TrieNode {\n   public:\n    TrieNode **children;\n    bool end;\n    TrieNode() {\n        children = (TrieNode **)malloc(sizeof(TrieNode *) * 26);\n        for (int i = 0; i < 26; i++) children[i] = nullptr;\n        end = false;\n    }\n    void insert(string str) {\n        TrieNode *node = this;\n        for (int i = 0; i < str.size(); i++) {\n            int idx = str[i] - 'a';\n            if (!node->children[idx]) node->children[idx] = new TrieNode();\n            node = node->children[idx];\n            if (i == str.size() - 1) node->end = true;\n        }\n    }\n    string find(string str) {\n        TrieNode *node = this;\n        string ans = \"\", tmp = \"\";\n        for (int i = 0; i < str.size(); i++) {\n            int idx = str[i] - 'a';\n            tmp += str[i];\n            if (!node->children[idx]) return ans;\n            node = node->children[idx];\n            if (node->end) return tmp;\n        }\n        return ans;\n    }\n};\nclass Solution {\n   public:\n    TrieNode *root = new TrieNode();\n    string replaceWords(vector<string> &dictionary, string sentence) {\n        vector<string> list;\n        string ans = \"\";\n        for (auto &str : dictionary) root->insert(str);\n        for (auto &str : split(sentence)) {\n            string res = root->find(str);\n            if (res == \"\")\n                list.push_back(str);\n            else\n                list.push_back(res);\n        }\n        for (int i = 0; i < list.size(); i++) {\n            if (i != 0) ans += \" \";\n            ans += list[i];\n        }\n        return ans;\n    }\n    vector<string> split(string &str) {\n        vector<string> ans;\n        string tmp = \"\";\n        for (auto &ch : str) {\n            if (ch == ' ') {\n                ans.push_back(tmp);\n                tmp = \"\";\n            } else\n                tmp += ch;\n        }\n        ans.push_back(tmp);\n        return ans;\n    }\n};"
        }
    ],
    "tagList": [
        "字典树",
        "数组",
        "哈希表",
        "字符串"
    ],
    "level": "Medium"
}