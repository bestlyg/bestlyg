{
    "id": "605",
    "name": "605.种花问题",
    "url": "https://leetcode.cn/problems/can-place-flowers",
    "desc": "假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。给你一个整数数组   flowerbed 表示花坛，由若干 0 和 1 组成，其中 0 表示没种植花，1 表示种植了花。另有一个数  n ，能否在不打破种植规则的情况下种入  n  朵花？能则返回 true ，不能则返回 false。",
    "solutions": [
        {
            "date": "2021-01-02",
            "time": 96,
            "memory": 41.2,
            "script": "typescript",
            "desc": "计算每朵花之间的空格进行累加,与 n 比较。",
            "code": "function canPlaceFlowers(flowerbed: number[], n: number): boolean {\n  const computeCount = (num: number) => (num < 1 ? 0 : ~~((num + 1) / 2));\n  let max = 0;\n  const len = flowerbed.length;\n  if (flowerbed.every(v => v === 0)) return computeCount(len) >= n;\n  const list: number[] = [];\n  flowerbed.forEach((v, i) => v && list.push(i));\n  for (let i = 0, l = list.length; i < l; i++) {\n    const index = list[i];\n    if (i === 0 && index > 1) max += computeCount(index - 1);\n    if (i === l - 1) max += computeCount(len - index - 2);\n    else max += computeCount(list[i + 1] - index - 3);\n  }\n  return max >= n;\n}"
        },
        {
            "date": "2023-09-29",
            "script": "python",
            "time": 60,
            "memory": 16.3,
            "desc": "同上。",
            "code": "class Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n        prev = -1\n        for i in range(len(flowerbed)):\n            if flowerbed[i] == 0:\n                if prev + 1 == i and (i == len(flowerbed) - 1 or flowerbed[i + 1] == 0):\n                    n -= 1\n                else:\n                    prev = i\n        return n <= 0\n"
        }
    ],
    "tagList": ["贪心", "数组"],
    "level": "Easy"
}
