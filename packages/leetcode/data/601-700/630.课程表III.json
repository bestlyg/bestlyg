{
    "id": "630",
    "name": "630.课程表III",
    "url": "https://leetcode.cn/problems/course-schedule-iii",
    "desc": "返回你最多可以修读的课程数目。",
    "solutions": [
        {
            "date": "2021-12-14",
            "time": 180,
            "memory": 47.4,
            "script": "typescript",
            "desc": "按照结束时间排序后，每次取出值存入大根堆，维护当前需要的总时间 sum，当 sum 大于结束时间时，移除堆顶。",
            "code": "class Heap<T = number> {\n  private arr: T[] = [];\n  get isEmpty() {\n    return this.size === 0;\n  }\n  get size() {\n    return this.arr.length;\n  }\n  get top() {\n    return this.arr[0];\n  }\n  constructor(private compare: (t1: T, t2: T) => number) {}\n  add(num: T): void {\n    this.arr.push(num);\n    this.shiftUp(this.size - 1);\n  }\n  remove(): T {\n    const num = this.arr.shift()!;\n    if (this.size) {\n      this.arr.unshift(this.arr.pop()!);\n      this.shiftDown(0);\n    }\n    return num;\n  }\n  private shiftUp(index: number): void {\n    if (index === 0) return;\n    const parentIndex = (index - 1) >> 1;\n    if (this.compare(this.arr[index], this.arr[parentIndex]) > 0) {\n      [this.arr[index], this.arr[parentIndex]] = [this.arr[parentIndex], this.arr[index]];\n      this.shiftUp(parentIndex);\n    }\n  }\n  private shiftDown(index: number): void {\n    let childrenIndex = index * 2 + 1;\n    if (childrenIndex > this.size - 1) return;\n    if (\n      childrenIndex + 1 <= this.size - 1 &&\n      this.compare(this.arr[childrenIndex + 1], this.arr[childrenIndex]) > 0\n    ) {\n      childrenIndex++;\n    }\n    if (this.compare(this.arr[childrenIndex], this.arr[index]) > 0) {\n      [this.arr[childrenIndex], this.arr[index]] = [this.arr[index], this.arr[childrenIndex]];\n      this.shiftDown(childrenIndex);\n    }\n  }\n  *[Symbol.iterator](): IterableIterator<T> {\n    for (const t of this.arr) {\n      yield t;\n    }\n  }\n}\nfunction scheduleCourse(courses: number[][]): number {\n  const heap = new Heap<number>((a, b) => a - b);\n  let sum = 0;\n  for (const [dur, last] of courses.sort((a, b) => a[1] - b[1])) {\n    sum += dur;\n    heap.add(dur);\n    if (sum > last) sum -= heap.remove();\n  }\n  return heap.size;\n}"
        },
        {
            "script": "cpp",
            "time": 256,
            "memory": 53.61,
            "desc": "拓扑排序。",
            "code": "class Solution {\npublic:\n    int scheduleCourse(vector<vector<int>>& courses) {\n        int sum = 0;\n        priority_queue<int> q;\n        sort(courses.begin(), courses.end(), [&](auto &a, auto &b) {\n            return a[1] < b[1];\n        });\n        for (auto &course : courses) {\n            sum += course[0];\n            q.push(course[0]);\n            if (sum > course[1]) {\n                sum -= q.top();\n                q.pop();\n            }\n        }\n        return q.size();\n    }\n};",
            "date": "2023-09-11"
        },
        {
            "script": "python",
            "time": 124,
            "memory": 19.54,
            "desc": "同上。",
            "code": "class Solution:\n    def scheduleCourse(self, courses: List[List[int]]) -> int:\n        courses.sort(key=lambda o: o[1])\n        q = []\n        sum = 0\n        for [d, e] in courses:\n            sum += d\n            heappush(q, -d)\n            if sum > e:\n                sum -= -heappop(q)\n        return len(q)\n",
            "date": "2023-09-11"
        },
        {
            "script": "rust",
            "time": 32,
            "memory": 29.7,
            "desc": "同上。",
            "code": "impl Solution {\n    pub fn schedule_course(mut courses: Vec<Vec<i32>>) -> i32 {\n        courses.sort_by_key(|o| o[1]);\n        let mut sum = 0;\n        let mut q = std::collections::BinaryHeap::<i32>::new();\n        for course in courses {\n            sum += course[0];\n            q.push(course[0]);\n            if sum > course[1] {\n                sum -= q.pop().unwrap();\n            }\n        }\n        q.len() as i32\n    }\n}",
            "date": "2023-09-11"
        }
    ],
    "tagList": ["贪心", "数组", "排序", "堆（优先队列）"],
    "level": "Hard"
}
