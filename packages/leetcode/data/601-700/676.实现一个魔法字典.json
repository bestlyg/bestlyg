{
    "id": "676",
    "name": "676.实现一个魔法字典",
    "url": "https://leetcode.cn/problems/implement-magic-dictionary",
    "difficulty": "中等",
    "tag": ["深度优先搜索", "设计", "字典树", "哈希表", "字符串"],
    "desc": "设计一个使用单词列表进行初始化的数据结构，单词列表中的单词 互不相同 。 如果给出一个单词，请判定能否只将这个单词中一个字母换成另一个字母，使得所形成的新单词存在于你构建的字典中。",
    "solutions": [
        {
            "date": 1636041600000,
            "time": 132,
            "memory": 45.9,
            "script": "typescript",
            "desc": "trie。",
            "code": "const getIdx = (ch: string) => ch.codePointAt(0)! - 'a'.codePointAt(0)!;\nclass TrieNode {\n  end = false;\n  children: TrieNode[] = [];\n  constructor(public val: string) {}\n}\nclass Trie {\n  root = new TrieNode('');\n  insert(word: string): void {\n    let node = this.root;\n    for (const ch of word) {\n      const idx = getIdx(ch);\n      if (!node.children[idx]) node.children[idx] = new TrieNode(ch);\n      node = node.children[idx];\n    }\n    node.end = true;\n  }\n  search(word: string): boolean {\n    return this._search(word);\n  }\n  _search(word: string, node = this.root, idx = 0, err = 1): boolean {\n    if (idx === word.length) return node.end && err === 0;\n    const ch = word[idx];\n    const chIdx = getIdx(ch);\n    if (node.children[chIdx] && this._search(word, node.children[chIdx], idx + 1, err)) return true;\n    if (err === 0) return false;\n    for (const child of node.children) {\n      if (child === node.children[chIdx]) continue;\n      if (this._search(word, child, idx + 1, err - 1)) return true;\n    }\n    return false;\n  }\n}\n\nclass MagicDictionary {\n  trie = new Trie();\n  buildDict(dictionary: string[]): void {\n    dictionary.forEach(word => this.trie.insert(word));\n  }\n  search(searchWord: string): boolean {\n    return this.trie.search(searchWord);\n  }\n}"
        },
        {
            "date": 1657468800000,
            "time": 712,
            "memory": 101.6,
            "script": "cpp",
            "desc": "trie, 对于每种可能出现 1 个替换，进行递归考虑。",
            "code": "#define CHILD_SIZE 26\nclass TrieNode {\n   public:\n    int key;\n    bool end;\n    TrieNode **children;\n    TrieNode(int key) {\n        this->key = key;\n        this->end = false;\n        this->children = (TrieNode **)malloc(sizeof(TrieNode *) * CHILD_SIZE);\n        for (int i = 0; i < CHILD_SIZE; i++) children[i] = nullptr;\n    }\n};\nclass Trie {\n   public:\n    TrieNode *root;\n    Trie() { this->root = new TrieNode(0); }\n    void insert(string words) {\n        TrieNode *node = root;\n        for (auto &w : words) {\n            if (node->children[w - 'a'] == nullptr)\n                node->children[w - 'a'] = new TrieNode(w);\n            node = node->children[w - 'a'];\n        }\n        node->end = true;\n    }\n    bool search(string words) { return _search(words, 0, root, 0); }\n    bool _search(string &words, int idx, TrieNode *node, int replaceCnt) {\n        int w = words[idx];\n        if (idx == words.size() - 1) {\n            if (replaceCnt > 1)\n                return false;\n            else if (replaceCnt == 1)\n                return node->children[w - 'a'] != nullptr &&\n                       node->children[w - 'a']->end;\n            else {\n                for (int i = 0; i < CHILD_SIZE; i++) {\n                    if (node->children[i] == nullptr || w - 'a' == i) continue;\n                    if (node->children[i]->end) return true;\n                }\n            }\n            return false;\n        }\n        int nextw = words[idx + 1];\n        for (int i = 0; i < CHILD_SIZE; i++) {\n            if (node->children[i] == nullptr) continue;\n            if (w - 'a' == i &&\n                _search(words, idx + 1, node->children[i], replaceCnt))\n                return true;\n            if (w - 'a' != i &&\n                _search(words, idx + 1, node->children[i], replaceCnt + 1))\n                return true;\n        }\n        return false;\n    }\n};\n\nclass MagicDictionary {\n   public:\n    Trie *trie;\n    MagicDictionary() { trie = new Trie(); }\n    void buildDict(vector<string> dictionary) {\n        for (auto &words : dictionary) trie->insert(words);\n    }\n    bool search(string searchWord) { return trie->search(searchWord); }\n};"
        }
    ]
}
