{
    "id": "623",
    "name": "623.在二叉树中增加一行",
    "url": "https://leetcode.cn/problems/add-one-row-to-tree",
    "difficulty": "中等",
    "tag": [
        "树",
        "深度优先搜索",
        "广度优先搜索",
        "二叉树"
    ],
    "desc": "给定一个二叉树的根 root 和两个整数 val 和 depth ，在给定的深度 depth 处添加一个值为 val 的节点行。",
    "solutions": [
        {
            "date": 1659628800000,
            "time": 20,
            "memory": 24.4,
            "script": "cpp",
            "desc": "排序后，从后往前取值。",
            "code": "class Solution {\n   public:\n    TreeNode* addOneRow(TreeNode* root, int val, int depth) {\n        if (depth == 1) return new TreeNode(val, root, nullptr);\n        queue<TreeNode*> q;\n        q.push(root);\n        int size = 1, level = 1;\n        while (level < depth - 1) {\n            TreeNode* node = q.front();\n            q.pop();\n            if (node->left) q.push(node->left);\n            if (node->right) q.push(node->right);\n            if (--size == 0) {\n                level++;\n                size = q.size();\n            }\n        }\n        while (q.size()) {\n            TreeNode* node = q.front();\n            q.pop();\n            node->left = new TreeNode(val, node->left, nullptr);\n            node->right = new TreeNode(val, nullptr, node->right);\n        }\n        return root;\n    }\n};"
        },
        {
            "date": 1659628800000,
            "time": 0,
            "memory": 2.6,
            "script": "rust",
            "desc": "层序遍历。",
            "code": "use std::cell::RefCell;\nuse std::collections::VecDeque;\nuse std::rc::Rc;\nimpl Solution {\n    pub fn add_one_row(\n        root: Option<Rc<RefCell<TreeNode>>>,\n        val: i32,\n        depth: i32,\n    ) -> Option<Rc<RefCell<TreeNode>>> {\n        if depth == 1 {\n            let mut new_root = TreeNode::new(val);\n            new_root.left = root;\n            Some(Rc::new(RefCell::new(new_root)))\n        } else {\n            let root = root.unwrap();\n            let mut q = VecDeque::<Rc<RefCell<TreeNode>>>::new();\n            q.push_back(root.clone());\n            let (mut size, mut level) = (1, 1);\n            while level < depth - 1 {\n                let node = q.pop_front();\n                let node = node.as_ref().unwrap().borrow();\n                if node.left.is_some() {\n                    q.push_back(node.left.as_ref().unwrap().clone());\n                }\n                if node.right.is_some() {\n                    q.push_back(node.right.as_ref().unwrap().clone());\n                }\n                size -= 1;\n                if size == 0 {\n                    level += 1;\n                    size = q.len();\n                }\n            }\n            while !q.is_empty() {\n                let node = q.pop_front();\n                let mut node = node.as_ref().unwrap().borrow_mut();\n                let left = node.left.clone();\n                let mut new_left = TreeNode::new(val);\n                new_left.left = left;\n                node.left = Some(Rc::new(RefCell::new(new_left)));\n                let right = node.right.clone();\n                let mut new_right = TreeNode::new(val);\n                new_right.right = right;\n                node.right = Some(Rc::new(RefCell::new(new_right)));\n            }\n            Some(root)\n        }\n    }\n}"
        }
    ]
}