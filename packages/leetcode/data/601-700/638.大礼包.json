{
    "id": "638",
    "name": "638.大礼包",
    "url": "https://leetcode.cn/problems/shopping-offers",
    "desc": "返回 确切 满足购物清单所需花费的最低价格，你可以充分利用大礼包的优惠活动。你不能购买超出购物清单指定数量的物品，即使那样会降低整体价格。任意大礼包可无限次购买。",
    "solutions": [
        {
            "date": "2021-10-24",
            "time": 76,
            "memory": 39.8,
            "script": "typescript",
            "desc": "dfs。",
            "code": "function shoppingOffers(price: number[], special: number[][], needs: number[]): number {\n  const n = price.length;\n  special = special\n    .filter(item => {\n      let sum = 0;\n      for (let i = 0; i < n; i++) sum += item[i] * price[i];\n      return sum > item[n];\n    })\n    .sort((a, b) => a[n] - b[n]);\n  let ans = Infinity;\n  dfs(needs);\n  return ans;\n  function dfs(needs: number[], cost = 0) {\n    if (needs.every(v => v === 0)) {\n      ans = Math.min(cost, ans);\n      return;\n    }\n    const list = special.filter((item: number[]) =>\n      item.every((v, i) => (i === n ? true : v <= needs[i]))\n    );\n    if (list.length === 0) {\n      dfs(\n        [0],\n        needs.reduce((total, v, i) => price[i] * v + total, cost)\n      );\n    } else {\n      list.forEach(item => {\n        dfs(\n          needs.map((v, i) => v - item[i]),\n          item[n] + cost\n        );\n      });\n    }\n  }\n}"
        },
        {
            "time": 67,
            "memory": 19.94,
            "desc": "记忆化搜索。",
            "code": "def to_list(num: int, n: int) -> List[int]:\n    res = []\n    for i in range(n):\n        res.append(num % 100)\n        num //= 100\n    res.reverse()\n    return res\ndef to_num(needs: List[int]) -> int:\n    res = 0\n    for need in needs:\n        res = res * 100 + need\n    return res\nclass Solution:\n    def shoppingOffers(self, price: List[int], special: List[List[int]], needs: List[int]) -> int:\n        n = len(price)\n        @cache\n        def dfs(idx: int, need: int) -> int:\n            needs = to_list(need, n)\n            if idx == len(special): return sum(price[i] * needs[i] for i in range(n))\n            res = inf\n            for cnt in range(0x7fffffff):\n                next_needs = [v for v in needs]\n                f = True\n                for i in range(n):\n                    if special[idx][i] * cnt > next_needs[i]:\n                        f = False\n                        break\n                    next_needs[i] -= special[idx][i] * cnt\n                if not f: break\n                res = min(res, dfs(idx + 1, to_num(next_needs)) + special[idx][-1] * cnt)\n            return res\n        return dfs(0, to_num(needs))",
            "date": "2024-11-03"
        }
    ],
    "tagList": [
        "位运算",
        "记忆化搜索",
        "数组",
        "动态规划",
        "回溯",
        "状态压缩"
    ],
    "level": "Medium"
}