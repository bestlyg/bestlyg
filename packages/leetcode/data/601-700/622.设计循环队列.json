{
    "id": "860",
    "name": "622.设计循环队列",
    "url": "https://leetcode.cn/problems/design-circular-queue",
    "desc": "设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。",
    "solutions": [
        {
            "date": "2021-03-14",
            "time": 172,
            "memory": 45.1,
            "script": "typescript",
            "desc": "利用 js 特性直接构建数组。",
            "code": "function copyRandomList(head: Node | null): Node | null {\n  if (head === null) return null;\n  let p: Node | null = head;\n  while (p !== null) {\n    p.next = new Node(p.val, p.next, p.random);\n    p = p.next.next;\n  }\n  p = head.next;\n  while (p) {\n    if (p.random) p.random = p.random!.next;\n    p = p.next?.next ?? null;\n  }\n  const newHead: Node | null = head.next;\n  p = head;\n  while (p) {\n    const q: Node = p.next!;\n    p.next = q.next;\n    q.next = q.next?.next ?? null;\n    p = p.next;\n  }\n  return newHead;\n}"
        },
        {
            "date": "2021-03-14",
            "time": 152,
            "memory": 45.4,
            "script": "typescript",
            "desc": "创建头尾指针控制。",
            "code": "class MyCircularQueue {\n  private arr: number[];\n  private head = 0;\n  private rear = 0;\n  private count = 0;\n  constructor(private k: number) {\n    this.arr = new Array(k);\n  }\n  enQueue(value: number): boolean {\n    if (this.isFull()) return false;\n    this.arr[this.rear] = value;\n    this.rear = (this.rear + 1) % this.k;\n    this.count++;\n    return true;\n  }\n  deQueue(): boolean {\n    if (this.isEmpty()) return false;\n    this.head = (this.head + 1) % this.k;\n    this.count--;\n    return true;\n  }\n  Front(): number {\n    if (this.isEmpty()) return -1;\n    return this.arr[this.head];\n  }\n  Rear(): number {\n    if (this.isEmpty()) return -1;\n    return this.arr[this.rear === 0 ? this.k - 1 : this.rear - 1];\n  }\n  isEmpty(): boolean {\n    return this.count === 0;\n  }\n  isFull(): boolean {\n    return this.count === this.k;\n  }\n}"
        },
        {
            "date": "2022-03-03",
            "time": 20,
            "memory": 16.3,
            "script": "cpp",
            "desc": "双指针。",
            "code": "class MyCircularQueue {\n   public:\n    int head, tail, *list, n;\n    MyCircularQueue(int k) : head(0), tail(0), n(k + 1) {\n        list = ((int *)malloc(sizeof(int) * n));\n    }\n    ~MyCircularQueue() { free(list); }\n    bool enQueue(int value) {\n        if (isFull()) return 0;\n        list[tail] = value;\n        tail = (tail + 1) % n;\n        return 1;\n    }\n    bool deQueue() {\n        if (isEmpty()) return 0;\n        head = (head + 1) % n;\n        return 1;\n    }\n    int Front() {\n        if (isEmpty()) return -1;\n        return list[head];\n    }\n    int Rear() {\n        if (isEmpty()) return -1;\n        return list[tail == 0 ? n - 1 : tail - 1];\n    }\n    bool isEmpty() { return head == tail; }\n    bool isFull() { return (tail + 1) % n == head; }\n};"
        },
        {
            "date": "2022-08-02",
            "time": 4,
            "memory": 2.3,
            "script": "rust",
            "desc": "queue。",
            "code": "struct MyCircularQueue {\n    list: Vec<i32>,\n    max: usize,\n    head: usize,\n    rear: usize,\n}\nimpl MyCircularQueue {\n    fn new(k: i32) -> Self {\n        let max = (k + 1) as usize;\n        let mut list = Vec::with_capacity(max);\n        for _ in 0..max {\n            list.push(0);\n        }\n        MyCircularQueue {\n            max,\n            list,\n            head: 0,\n            rear: 0,\n        }\n    }\n\n    fn en_queue(&mut self, value: i32) -> bool {\n        if self.is_full() {\n            false\n        } else {\n            self.list[self.rear] = value;\n            self.rear = (self.rear + 1) % self.max;\n            true\n        }\n    }\n\n    fn de_queue(&mut self) -> bool {\n        if self.is_empty() {\n            false\n        } else {\n            self.head = (self.head + 1) % self.max;\n            true\n        }\n    }\n\n    fn front(&self) -> i32 {\n        if self.is_empty() {\n            -1\n        } else {\n            *self.list.get(self.head).unwrap()\n        }\n    }\n\n    fn rear(&self) -> i32 {\n        if self.is_empty() {\n            -1\n        } else {\n            let rear = if self.rear == 0 {\n                self.max - 1\n            } else {\n                self.rear - 1\n            };\n            *self.list.get(rear).unwrap()\n        }\n    }\n\n    fn is_empty(&self) -> bool {\n        self.rear == self.head\n    }\n\n    fn is_full(&self) -> bool {\n        (self.rear + 1) % self.max == self.head\n    }\n}"
        }
    ],
    "tagList": ["设计", "队列", "数组", "链表"],
    "level": "Medium"
}
