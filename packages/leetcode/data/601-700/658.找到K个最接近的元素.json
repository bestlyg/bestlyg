{
    "id": "658",
    "name": "658.找到K个最接近的元素",
    "url": "https://leetcode.cn/problems/find-k-closest-elements",
    "desc": "给定一个 排序好 的数组 arr ，两个整数 k 和 x ，从数组中找到最靠近 x（两数之差最小）的 k 个数。返回的结果必须要是按升序排好的。",
    "solutions": [
        {
            "date": "2022-08-25",
            "time": 16,
            "memory": 2.2,
            "script": "rust",
            "desc": "只要数的数量相同就可以匹配。",
            "code": "use std::cmp::Ordering;\nuse std::collections::{BinaryHeap, VecDeque};\n#[derive(PartialEq, Eq, Debug)]\nstruct Item(i32, i32);\nimpl PartialOrd for Item {\n    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n        let ord = other.1.cmp(&self.1);\n        if ord == Ordering::Equal {\n            Some(other.0.cmp(&self.0))\n        } else {\n            Some(ord)\n        }\n    }\n}\nimpl Ord for Item {\n    fn cmp(&self, other: &Self) -> Ordering {\n        self.partial_cmp(other).unwrap()\n    }\n}\nimpl Solution {\n    pub fn find_closest_elements(arr: Vec<i32>, k: i32, x: i32) -> Vec<i32> {\n        let mut ans = VecDeque::<i32>::new();\n        let mut heap = BinaryHeap::<Item>::new();\n        for num in arr {\n            heap.push(Item(num, (num - x).abs()));\n        }\n        for _ in 0..k {\n            let num = heap.pop().unwrap().0;\n            if ans.len() == 0 || *ans.back().unwrap() <= num {\n                ans.push_back(num);\n            } else {\n                ans.push_front(num);\n            }\n        }\n        Vec::from(ans)\n    }\n}"
        }
    ],
    "tagList": ["数组", "双指针", "二分查找", "排序", "滑动窗口", "堆（优先队列）"],
    "level": "Medium"
}
