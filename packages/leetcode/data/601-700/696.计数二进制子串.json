{
    "id": "696",
    "name": "696.计数二进制子串",
    "url": "https://leetcode.cn/problems/count-binary-substrings",
    "difficulty": "简单",
    "tag": ["双指针", "字符串"],
    "desc": "给定一个字符串 s，计算具有相同数量 0 和 1 的非空(连续)子字符串的数量，并且这些子字符串中的所有 0 和所有 1 都是组合在一起的。",
    "solutions": [
        {
            "date": 1596988800000,
            "time": 96,
            "memory": 44.5,
            "script": "typescript",
            "desc": "遍历后获取每次 0 或 1 同时出现的次数。",
            "code": "function countBinarySubstrings(s: string): number {\n  const arr: number[] = [];\n  let count = 0;\n  let prev = '';\n  for (const c of s) {\n    if (c !== prev) {\n      arr.push(count);\n      count = 1;\n    } else {\n      count++;\n    }\n    prev = c;\n  }\n  arr.push(count);\n  let ans = 0;\n  for (let i = 0, l = arr.length; i < l - 1; i++) {\n    const num1 = arr[i];\n    const num2 = arr[i + 1];\n    ans += Math.min(num1, num2);\n  }\n  return ans;\n}"
        }
    ]
}
