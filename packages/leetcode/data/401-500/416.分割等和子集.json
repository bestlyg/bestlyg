{
    "id": "416",
    "name": "416.分割等和子集",
    "url": "https://leetcode.cn/problems/partition-equal-subset-sum",
    "desc": "给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。",
    "solutions": [
        {
            "date": "2020-10-11",
            "time": 132,
            "memory": 40.4,
            "script": "typescript",
            "desc": "[参考链接](https://leetcode-cn.com/problems/partition-equal-subset-sum/solution/fen-ge-deng-he-zi-ji-by-leetcode-solution/)。",
            "code": "function canPartition(nums: number[]): boolean {\n  const len = nums.length;\n  // 如果只有一个元素，不可能平分\n  if (len < 2) return false;\n  let sum = nums.reduce((total, cur) => total + cur, 0);\n  let maxNum = Math.max(...nums);\n  // 如果总和是奇数，不可能平分\n  if (sum & 1) return false;\n  const target = sum / 2;\n  // 如果有数大于平分值，不可能评分\n  if (maxNum > target) return false;\n  const dp: boolean[] = new Array(target + 1).fill(false);\n  dp[0] = true;\n  for (const num of nums) {\n    for (let j = target; j >= num; j--) {\n      dp[j] = dp[j] || dp[j - num];\n    }\n  }\n  return dp[target];\n}"
        },
        {
            "date": "2021-09-13",
            "time": 228,
            "memory": 60.5,
            "script": "typescript",
            "desc": "动态规划。",
            "code": "function canPartition(nums: number[]): boolean {\n  const n = nums.length;\n  const sum = nums.reduce((total, cur) => total + cur, 0);\n  if (sum % 2 !== 0) return false;\n  const halfSum = sum / 2;\n  const dp: boolean[][] = new Array(n + 1).fill(0).map(_ => new Array(halfSum + 1).fill(false));\n  for (let num = 0; num <= halfSum; num++) dp[0][num] = true;\n  dp[1][nums[0]] = true;\n  for (let i = 2; i <= n; i++) {\n    const num = nums[i - 1];\n    dp[i][0] = dp[i][num] = true;\n    for (let j = 1; j <= halfSum; j++) {\n      dp[i][j] = dp[i - 1][j];\n      if (j < num) continue;\n      dp[i][j] ||= dp[i - 1][j - num];\n    }\n    if (dp[i][halfSum]) return true;\n  }\n  return false;\n}"
        },
        {
            "date": "2021-09-13",
            "time": 132,
            "memory": 40.4,
            "script": "typescript",
            "desc": "动态规划优化。",
            "code": "function canPartition(nums: number[]): boolean {\n  const n = nums.length;\n  const sum = nums.reduce((total, cur) => total + cur, 0);\n  if (sum % 2 !== 0) return false;\n  const halfSum = sum / 2;\n  const dp: boolean[][] = new Array(2).fill(0).map(_ => new Array(halfSum + 1).fill(false));\n  dp[1][nums[0]] = true;\n  for (let i = 2; i <= n; i++) {\n    const idx = i % 2;\n    const prevIdx = idx ^ 1;\n    const num = nums[i - 1];\n    dp[idx][0] = dp[idx][num] = true;\n    for (let j = 1; j <= halfSum; j++) {\n      dp[idx][j] = dp[prevIdx][j];\n      if (j >= num) dp[idx][j] ||= dp[prevIdx][j - num];\n    }\n    if (dp[idx][halfSum]) return true;\n  }\n  return false;\n}"
        }
    ],
    "tagList": ["数组", "动态规划"],
    "level": "Medium"
}
