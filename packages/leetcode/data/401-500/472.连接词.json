{
  "name": "472. 连接词",
  "url": "https://leetcode-cn.com/problems/concatenated-words/",
  "difficulty": "中等",
  "tag": ["深度优先搜索", "字典树", "数组", "字符串", "动态规划"],
  "desc": "给你一个 不含重复 单词的字符串数组 words ，请你找出并返回 words 中的所有 连接词 。",
  "solutions": [
    {
      "date": 1640620800000,
      "time": 4684,
      "memory": 72.9,
      "script": "typescript",
      "desc": "trie。",
      "code": "class TrieNode {\n  end = false;\n  children: TrieNode[] = [];\n  constructor(public val: string) {}\n}\nclass Trie {\n  root = new TrieNode('');\n  insert(word: string): void {\n    let node = this.root;\n    for (const ch of word) {\n      const idx = this.getIdx(ch);\n      if (!node.children[idx]) node.children[idx] = new TrieNode(ch);\n      node = node.children[idx];\n    }\n    node.end = true;\n  }\n  findNode(word: string): TrieNode | null {\n    let node = this.root;\n    for (const ch of word) {\n      const idx = this.getIdx(ch);\n      if (!node.children[idx]) return null;\n      node = node.children[idx];\n    }\n    return node;\n  }\n  search(word: string): boolean {\n    return !!this.findNode(word)?.end;\n  }\n  startsWith(prefix: string): boolean {\n    return !!this.findNode(prefix);\n  }\n  getIdx(ch: string) {\n    return ch.codePointAt(0)! - 'a'.codePointAt(0)!;\n  }\n}\n\nfunction check(trie: Trie, word: string, init = true): boolean {\n  if (!init && trie.search(word)) return true;\n  for (let i = 0, n = word.length; i < n; i++) {\n    if (trie.search(word.substring(0, i)) && check(trie, word.substring(i), false)) return true;\n  }\n  return false;\n}\nfunction findAllConcatenatedWordsInADict(words: string[]): string[] {\n  const trie = new Trie();\n  return words\n    .sort((w1, w2) => w1.length - w2.length)\n    .filter(word => {\n      if (!word) return false;\n      if (check(trie, word)) return true;\n      trie.insert(word);\n      return false;\n    });\n}"
    }
  ]
}
