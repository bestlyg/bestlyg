{
    "id": "450",
    "name": "450.删除二叉搜索树中的节点",
    "url": "https://leetcode.cn/problems/delete-node-in-a-bst",
    "difficulty": "中等",
    "tag": ["树", "二叉搜索树", "二叉树"],
    "desc": "给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。",
    "solutions": [
        {
            "date": 1582387200000,
            "time": 0,
            "memory": 41.7,
            "script": "java",
            "desc": "判断根是否为 null，以及是否为单节点，然后循环获取 key 所在节点，若节点不存在则返回根，若存在则判断节点的度，度为 2 则获取后继节点，删除后继节点，在判断是否为根节点以及在父节点的左右情况。",
            "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode deleteNode(TreeNode root, int key) {\n\t\tif (root == null)\n\t\t\treturn null;\n\t\tif (root.left == null && root.right == null) {\n\t\t\tif (root.val == key)\n\t\t\t\treturn null;\n\t\t\tif (root.val != key)\n\t\t\t\treturn root;\n\t\t}\n\t\tTreeNode node = root;\n\t\tTreeNode parent = null;\n\t\twhile (node!=null&&node.val != key) {\n\t\t\tif (key > node.val) {\n\t\t\t\tparent = node;\n\t\t\t\tnode = node.right;\n\t\t\t}\n\t\t\tif (key < node.val) {\n\t\t\t\tparent = node;\n\t\t\t\tnode = node.left;\n\t\t\t}\n\t\t}\n\t\tif (node == null)\n\t\t\treturn root;\n\t\tif (node.left != null && node.right != null) {\n\t\t\tTreeNode oldNode = node;\n\t\t\tparent = node;\n\t\t\tnode = node.right;\n\t\t\twhile (node.left != null) {\n\t\t\t\tparent = node;\n\t\t\t\tnode = node.left;\n\t\t\t}\n\t\t\toldNode.val = node.val;\n\t\t}\n\t\tif (parent == null) {\n\t\t\tif (node.left != null)\n\t\t\t\treturn node.left;\n\t\t\tif (node.right != null)\n\t\t\t\treturn node.right;\n\t\t}\n\t\tif (node.left == null && node.right == null) {\n\t\t\tif (parent.left == node) {\n\t\t\t\tparent.left = null;\n\t\t\t} else {\n\t\t\t\tparent.right = null;\n\t\t\t}\n\t\t} else {\n\t\t\tif (parent.left == node) {\n\t\t\t\tif(node.left!=null)parent.left = node.left;\n\t\t\t\telse parent.left = node.right;\n\t\t\t} else {\n\t\t\t\tif(node.left!=null)parent.right = node.left;\n\t\t\t\telse parent.right = node.right;\n\t\t\t}\n\t\t}\n\t\treturn root;\n\t}\n}"
        },
        {
            "date": 1628265600000,
            "time": 104,
            "memory": 47.3,
            "script": "typescript",
            "desc": "分别计算度，进行递归删除。",
            "code": "function predecessor(node: TreeNode): TreeNode {\n  let ans = node.left!;\n  while (ans.right) ans = ans.right;\n  return ans;\n}\nfunction deleteNode(root: TreeNode | null, key: number): TreeNode | null {\n  if (root === null) return null;\n  if (root.val > key) {\n    root.left = deleteNode(root.left, key);\n  } else if (root.val < key) {\n    root.right = deleteNode(root.right, key);\n  } else {\n    if (root.left === null || root.right === null) return root.left ?? root.right;\n    const p = predecessor(root);\n    [p.val, root.val] = [root.val, p.val];\n    root.left = deleteNode(root.left, p.val);\n  }\n  return root;\n}"
        },
        {
            "date": 1654099200000,
            "time": 24,
            "memory": 31.9,
            "script": "typescript",
            "desc": "dfs。",
            "code": "class Solution {\n   public:\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        if (!root) return root;\n        if (root->val > key)\n            root->left = deleteNode(root->left, key);\n        else if (root->val < key)\n            root->right = deleteNode(root->right, key);\n        else {\n            if (root->left == nullptr || root->right == nullptr) {\n                TreeNode* child =\n                    root->left == nullptr ? root->right : root->left;\n                root = child;\n            } else {\n                TreeNode* tmp = root->right;\n                while (tmp->left) tmp = tmp->left;\n                root->val = tmp->val;\n                root->right = deleteNode(root->right, tmp->val);\n            }\n        }\n        return root;\n    }\n};"
        }
    ]
}
