{
    "id": "402",
    "name": "402.移掉K位数字",
    "url": "https://leetcode.cn/problems/remove-k-digits",
    "desc": "给定一个以字符串表示的非负整数 num，移除这个数中的 k 位数字，使得剩下的数字最小。",
    "solutions": [
        {
            "date": "2020-11-15",
            "time": 104,
            "memory": 41.2,
            "script": "typescript",
            "desc": "贪心，单调性，越小的数字在前面。",
            "code": "function removeKdigits(num: string, k: number): string {\n  const stack: number[] = [];\n  const isEmpty = () => stack.length === 0;\n  for (const c of num) {\n    const toNum = Number(c);\n    if (isEmpty()) {\n      stack.push(toNum);\n    } else {\n      let top = stack[stack.length - 1];\n      while (toNum < top && k !== 0) {\n        stack.pop();\n        k--;\n        top = stack[stack.length - 1];\n      }\n      stack.push(toNum);\n    }\n  }\n  while (k-- !== 0) stack.pop();\n  while (!isEmpty() && stack[0] === 0) stack.shift();\n  return isEmpty() ? '0' : stack.join('');\n}"
        },
        {
            "date": "2021-07-30",
            "time": 92,
            "memory": 40.2,
            "script": "typescript",
            "desc": "单调栈。",
            "code": "function removeKdigits(num: string, k: number): string {\n  const stack: number[] = [];\n  for (let i = 0; i < num.length; i++) {\n    const v = num.codePointAt(i)! - '0'.codePointAt(0)!;\n    while (k && stack.length && stack[stack.length - 1] > v) {\n      stack.pop();\n      k--;\n    }\n    stack.push(v);\n  }\n  while (stack.length && k) {\n    stack.pop();\n    k--;\n  }\n  while (stack.length && stack[0] === 0) stack.shift();\n  return stack.join('') || '0';\n}"
        }
    ],
    "tagList": ["栈", "贪心", "字符串", "单调栈"],
    "level": "Medium"
}
