{
    "id": "415",
    "name": "415.字符串相加",
    "url": "https://leetcode.cn/problems/add-strings",
    "desc": "给定两个字符串形式的非负整数 num1 和 num2 ，计算它们的和。",
    "solutions": [
        {
            "date": "2020-08-03",
            "time": 92,
            "memory": 40.2,
            "script": "typescript",
            "desc": "每个字符进行累加。",
            "code": "function addStrings(num1: string, num2: string): string {\n  const arr1 = num1.split('').reverse();\n  const arr2 = num2.split('').reverse();\n  const ans: number[] = [];\n  let go = 0;\n  while (arr1.length !== 0 && arr2.length !== 0) {\n    const num1 = arr1.shift() as string;\n    const num2 = arr2.shift() as string;\n    let num = parseInt(num1) + parseInt(num2) + go;\n    if (num >= 10) {\n      go = 1;\n      num -= 10;\n    } else go = 0;\n    ans.push(num);\n  }\n  while (arr1.length !== 0) {\n    let num = parseInt(arr1.shift()!) + go;\n    if (num >= 10) {\n      go = 1;\n      num -= 10;\n    } else go = 0;\n    ans.push(num);\n  }\n  while (arr2.length !== 0) {\n    let num = parseInt(arr2.shift()!) + go;\n    if (num >= 10) {\n      go = 1;\n      num -= 10;\n    } else go = 0;\n    ans.push(num);\n  }\n  if (go === 1) ans.push(1);\n  while (ans.length > 1 && ans[ans.length - 1] === 0) ans.pop();\n  return ans.reverse().join('');\n}"
        },
        {
            "script": "cpp",
            "time": 8,
            "memory": 54.4,
            "desc": "遍历。",
            "code": "class Solution {\npublic:\n    string addStrings(string num1, string num2) {\n        if (num1.size() < num2.size()) swap(num1, num2);\n        string res = \"\";\n        reverse(num1.begin(), num1.end());\n        reverse(num2.begin(), num2.end());\n        int i = 0, add = 0;\n        while (i < num1.size() || i < num2.size()) {\n            int num = num1[i] - '0' + add;\n            if (i < num2.size()) num += num2[i] - '0';\n            if (num >= 10) {\n                num -= 10;\n                add = 1;\n            } else {\n                add = 0;\n            }\n            res = to_string(num) + res;\n            i++;\n        }\n        if (add) res = \"1\" + res;\n        return res;\n    }\n};",
            "date": "2023-07-17"
        },
        {
            "script": "python",
            "time": 56,
            "memory": 15.9,
            "desc": "同上。",
            "code": "class Solution:\n    def addStrings(self, s1: str, s2: str) -> str:\n        if len(s1) < len(s2):\n            s1, s2 = s2, s1\n        res = \"\"\n        num1, num2 = list(s1), list(s2)\n        num1.reverse()\n        num2.reverse()\n        i = add = 0\n        while i < len(num1) or i < len(num2):\n            num = ord(num1[i]) - ord('0') + add\n            if i < len(num2):\n                num += ord(num2[i]) - ord('0')\n            if num >= 10:\n                num -= 10\n                add = 1\n            else:\n                add = 0\n            res = str(num) + res\n            i += 1\n        if add:\n            res = \"1\" + res\n        return res",
            "date": "2023-07-17"
        },
        {
            "script": "rust",
            "time": 0,
            "memory": 2.1,
            "desc": "同上。",
            "code": "pub fn str_to_vec(s: &String) -> Vec<char> {\n    s.chars().collect()\n}\nimpl Solution {\n    pub fn add_strings(num1: String, num2: String) -> String {\n        let mut num1 = str_to_vec(&num1);\n        let mut num2 = str_to_vec(&num2);\n        num1.reverse();\n        num2.reverse();\n        if num1.len() < num2.len() {\n            std::mem::swap(&mut num1, &mut num2);\n        }\n        let mut res = vec![];\n        let mut i = 0;\n        let mut add = 0;\n        while i < num1.len() || i < num2.len() {\n            let mut num = num1[i].to_digit(10).unwrap() as u8 + add;\n            if i < num2.len() {\n                num += num2[i].to_digit(10).unwrap() as u8;\n            }\n            if num >= 10 {\n                num -= 10;\n                add = 1;\n            } else {\n                add = 0;\n            }\n            res.push(num + b'0');\n            i += 1;\n        }\n        if add != 0 {\n            res.push(b'1');\n        }\n        res.reverse();\n        String::from_utf8(res).unwrap()\n    }\n}",
            "date": "2023-07-17"
        }
    ],
    "tagList": ["数学", "字符串", "模拟"],
    "level": "Easy"
}
