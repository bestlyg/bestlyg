{
  "name": "494. 目标和",
  "url": "https://leetcode-cn.com/problems/target-sum/",
  "difficulty": "中等",
  "tag": ["动态规划", "深度优先搜索"],
  "desc": "给你一个整数数组 nums 和一个整数 target 。返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目。",
  "solutions": [
    {
      "date": 1622995200000,
      "time": 6868,
      "memory": 93.7,
      "script": "typescript",
      "desc": "回溯。",
      "code": "function findTargetSumWays(nums: number[], target: number): number {\n  const len = nums.length;\n  const ans: number[] = [];\n  let val = 0;\n  const findNext = (index = 0): void => {\n    if (index === len) {\n      ans.push(val);\n      return;\n    }\n    val += nums[index];\n    findNext(index + 1);\n    val -= nums[index];\n    val -= nums[index];\n    findNext(index + 1);\n    val += nums[index];\n  };\n  findNext();\n  return ans.filter(v => v === target).length;\n}"
    },
    {
      "date": 1623081600000,
      "time": 116,
      "memory": 42.2,
      "script": "typescript",
      "desc": "(sum-target)/2=neg,target 必为非负整数。",
      "code": "function findTargetSumWays(nums: number[], target: number): number {\n  const sum = nums.reduce((total, cur) => total + cur, 0);\n  if (target > sum || (sum - target) & 1) return 0;\n  const neg = (sum - target) >> 1;\n  const len = nums.length;\n  const dp = new Array(len + 1).fill(0).map(_ => new Array(neg + 1).fill(0));\n  dp[0][0] = 1;\n  for (let i = 1; i <= len; i++) {\n    const num = nums[i - 1];\n    for (let j = 0; j <= neg; j++) {\n      dp[i][j] = dp[i - 1][j];\n      if (j >= num) dp[i][j] += dp[i - 1][j - num];\n    }\n  }\n  return dp[len][neg];\n}"
    }
  ]
}
