{
    "id": "421",
    "name": "421.数组中两个数的最大异或值",
    "url": "https://leetcode.cn/problems/maximum-xor-of-two-numbers-in-an-array",
    "difficulty": "中等",
    "tag": [
        "位运算",
        "字典树",
        "数组",
        "哈希表"
    ],
    "desc": "给你一个整数数组 nums ，返回 nums[i] XOR nums[j] 的最大运算结果，其中 0 ≤ i ≤ j < n 。",
    "solutions": [
        {
            "date": 1621094400000,
            "time": 6480,
            "memory": 40.4,
            "script": "typescript",
            "desc": "O(n2)循环。",
            "code": "function findMaximumXOR(nums: number[]): number {\n  let ans = -Infinity;\n  nums.forEach(v1 => nums.forEach(v2 => (ans = Math.max(ans, v1 ^ v2))));\n  return ans;\n}"
        },
        {
            "date": 1621094400000,
            "time": 156,
            "memory": 49.2,
            "script": "typescript",
            "desc": "利用 trie 储存二进制，每次寻找尽可能大的数。",
            "code": "class Trie {\n  /** 左 0  */\n  left: Trie | null = null;\n  /** 右 1  */\n  right: Trie | null = null;\n}\nfunction findMaximumXOR(nums: number[]): number {\n  const len = nums.length;\n  if (len === 1) return 0;\n  const root = new Trie();\n  let ans = -Infinity;\n  const add = (num: number) => {\n    let trie = root;\n    for (let i = 30; i >= 0; i--) {\n      const v = (num >> i) & 1;\n      if (v === 1) {\n        trie = trie.right ?? (trie.right = new Trie());\n      } else {\n        trie = trie.left ?? (trie.left = new Trie());\n      }\n    }\n  };\n  const check = (num: number): number => {\n    let trie = root;\n    let xorNum = 0;\n    for (let i = 30; i >= 0; i--) {\n      const v = (num >> i) & 1;\n      if (v === 1) {\n        if (trie.left) {\n          trie = trie.left;\n          xorNum = (xorNum << 1) + 1;\n        } else {\n          trie = trie.right!;\n          xorNum <<= 1;\n        }\n      } else {\n        if (trie.right) {\n          trie = trie.right;\n          xorNum = (xorNum << 1) + 1;\n        } else {\n          trie = trie.left!;\n          xorNum <<= 1;\n        }\n      }\n    }\n    return xorNum;\n  };\n  for (let i = 1; i < len; i++) {\n    add(nums[i - 1]);\n    ans = Math.max(ans, check(nums[i]));\n  }\n  return ans;\n}"
        },
        {
            "date": 1635091200000,
            "time": 788,
            "memory": 67.5,
            "script": "typescript",
            "desc": "二叉字典树。",
            "code": "const MAX = 31;\nclass BitTrieNode {\n  // 0\n  left: BitTrieNode | null = null;\n  // 1\n  right: BitTrieNode | null = null;\n  val = -1;\n}\nclass BitTrie {\n  root = new BitTrieNode();\n  add(num: number) {\n    const str = num.toString(2).padStart(MAX, '0');\n    let node = this.root;\n    for (let i = 0, l = str.length; i < l; i++) {\n      const ch = str[i];\n      if (ch === '0') node = node.left ?? (node.left = new BitTrieNode());\n      else node = node.right ?? (node.right = new BitTrieNode());\n    }\n    node.val = num;\n  }\n  find(num: number) {\n    const str = num.toString(2).padStart(MAX, '0');\n    let node = this.root;\n    for (let i = 0, l = str.length; i < l; i++) {\n      if (!node.left && !node.right) break;\n      const ch = str[i];\n      if (ch === '0') {\n        node = node.right ?? node.left!;\n      } else {\n        node = node.left ?? node.right!;\n      }\n    }\n    return node;\n  }\n}\nfunction findMaximumXOR(nums: number[]): number {\n  const trie = new BitTrie();\n  nums.forEach(num => trie.add(num));\n  let ans = -Infinity;\n  nums.forEach(num => {\n    ans = Math.max(ans, trie.find(num).val ^ num);\n  });\n  return ans;\n}"
        },
        {
            "script": "cpp",
            "time": 716,
            "memory": 172.36,
            "desc": "同上。",
            "code": "struct TrieNode {\n    TrieNode* left = nullptr;\n    TrieNode* right = nullptr;\n};\n\nvoid add(TrieNode* node, int num) {\n    int pos = 30;\n    while (pos >= 0) {\n        int v = (num >> pos) & 1;\n        if (v) {\n            if (!node->left) node->left = new TrieNode();\n            node = node->left;\n        } else {\n            if (!node->right) node->right = new TrieNode();\n            node = node->right;\n        }\n        pos -= 1;\n    }\n}\n\nint find(TrieNode* node, int num) {\n    int pos = 30, ans = 0;\n    while (pos >= 0 && node) {\n        int v = (num >> pos) & 1;\n        if (v) {\n            if (node->right) {\n                ans |= 1 << pos;\n                node = node->right;\n            } else node = node->left;\n        } else {\n            if (node->left) {\n                ans |= 1 << pos;\n                node = node->left;\n            } else node = node->right;\n        }\n        pos -= 1;\n    }\n    return ans;\n}\n\nclass Solution {\npublic:\n    int findMaximumXOR(vector<int>& nums) {\n        TrieNode *root = new TrieNode();\n        int ans = 0;\n        for (auto &num : nums) {\n            add(root, num);\n            ans = max(ans, find(root, num));\n        }\n        return ans;\n    }\n};",
            "date": 1699027200000
        },
        {
            "script": "python",
            "time": 9296,
            "memory": 444.3,
            "desc": "同上。",
            "code": "class TrieNode:\n    def __init__(self):\n        self.left = self.right = None\n    \ndef add(node, num: int, pos: int):\n    while pos >= 0:\n        v = (num >> pos) & 1\n        if v:\n            if not node.left: node.left = TrieNode()\n            node = node.left\n        else:\n            if not node.right: node.right = TrieNode()\n            node = node.right\n        pos -= 1\n        \n\ndef find(node, num: int, pos: int):\n    ans = 0\n    while pos >= 0 and node:\n        v = (num >> pos) & 1\n        if v: \n            if node.right:\n                ans |= 1 << pos\n                node = node.right\n            else:\n                node = node.left\n        else:\n            if node.left:\n                ans |= 1 << pos\n                node = node.left\n            else:\n                node = node.right\n        pos -= 1\n    return ans\n\nclass Solution:\n    def findMaximumXOR(self, nums: List[int]) -> int:\n        root = TrieNode()\n        ans = 0\n        for num in nums: \n            add(root, num, 30)\n            ans = max(ans, find(root, num, 30))\n        return ans",
            "date": 1699027200000
        },
        {
            "script": "rust",
            "time": 564,
            "memory": 85,
            "desc": "同上。",
            "code": "struct TrieNode {\n    left: Option<Box<TrieNode>>,\n    right: Option<Box<TrieNode>>,\n}\nimpl TrieNode {\n    fn new() -> Self {\n        Self {\n            left: None,\n            right: None,\n        }\n    }\n}\n\nfn add(mut node: &mut Box<TrieNode>, num: i32) {\n    let mut pos = 30;\n    while pos >= 0 {\n        let v = (num >> pos) & 1;\n        if v != 0 {\n            if node.left.is_none() {\n                node.left = Some(Box::new(TrieNode::new()));\n            }\n            node = node.left.as_mut().unwrap()\n        } else {\n            if node.right.is_none() {\n                node.right = Some(Box::new(TrieNode::new()));\n            }\n            node = node.right.as_mut().unwrap()\n        }\n        pos -= 1;\n    }\n}\n\nfn find(mut node: &Box<TrieNode>, num: i32) -> i32 {\n    let mut pos = 30;\n    let mut ans = 0;\n    let mut node = Some(node);\n    while pos >= 0 && node.is_some() {\n        let node_ref = node.unwrap();\n        let v = (num >> pos) & 1;\n        if v != 0 {\n            if node_ref.right.is_some() {\n                ans |= 1 << pos;\n                node = Some(node_ref.right.as_ref().unwrap());\n            } else if node_ref.left.is_some() {\n                node = Some(node_ref.left.as_ref().unwrap());\n            } else {\n                node = None;\n            }\n        } else {\n            if node_ref.left.is_some() {\n                ans |= 1 << pos;\n                node = Some(node_ref.left.as_ref().unwrap());\n            } else if node_ref.right.is_some() {\n                node = Some(node_ref.right.as_ref().unwrap());\n            } else {\n                node = None;\n            }\n        }\n        pos -= 1;\n    }\n    ans\n}\n\nimpl Solution {\n    pub fn find_maximum_xor(nums: Vec<i32>) -> i32 {\n        let mut root = Box::new(TrieNode::new());\n        let mut ans = 0;\n        for num in &nums {\n            add(&mut root, *num);\n        }\n        for num in &nums {\n            ans = ans.max(find(&root, *num));\n        }\n        ans\n    }\n}",
            "date": 1699027200000
        }
    ]
}