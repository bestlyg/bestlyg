{
    "id": "436",
    "name": "436.寻找右区间",
    "url": "https://leetcode.cn/problems/find-right-interval",
    "desc": "返回一个由每个区间 i 的 右侧区间 的最小起始位置组成的数组。如果某个区间 i 不存在对应的 右侧区间 ，则下标 i 处的值设为 -1 。",
    "solutions": [
        {
            "date": "2022-05-20",
            "time": 60,
            "memory": 23.3,
            "script": "cpp",
            "desc": "bs。",
            "code": "class Solution {\n   public:\n    vector<int> findRightInterval(vector<vector<int>> &intervals) {\n        int n = intervals.size();\n        vector<int> ans(n, -1);\n        vector<int> list(n);\n        for (int i = 0; i < n; i++) list[i] = i;\n        sort(list.begin(), list.end(), [&](int &a, int &b) -> bool {\n            if (intervals[a][0] == intervals[b][0])\n                return intervals[a][1] < intervals[b][1];\n            return intervals[a][0] < intervals[b][0];\n        });\n        for (int i = 0; i < n; i++)\n            ans[i] = bs(intervals, list, intervals[i][1]);\n        return ans;\n    }\n    int bs(vector<vector<int>> &intervals, vector<int> &list, int num) {\n        int l = 0, r = intervals.size(), m;\n        while (l < r) {\n            m = (l + r) >> 1;\n            if (intervals[list[m]][0] >= num)\n                r = m;\n            else\n                l = m + 1;\n        }\n        if (r == intervals.size()) return -1;\n        return list[l];\n    }\n};"
        }
    ],
    "tagList": [
        "数组",
        "二分查找",
        "排序"
    ],
    "level": "Medium"
}