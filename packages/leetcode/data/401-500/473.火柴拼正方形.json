{
    "name": "473. 火柴拼正方形",
    "url": "https://leetcode-cn.com/problems/matchsticks-to-square/",
    "difficulty": "中等",
    "tag": [
        "位运算",
        "数组",
        "动态规划",
        "回溯",
        "状态压缩"
    ],
    "desc": "输入为小女孩拥有火柴的数目，每根火柴用其长度表示。输出即为是否能用所有的火柴拼成正方形。",
    "solutions": [
        {
            "date": 1627142400000,
            "time": 344,
            "memory": 40.7,
            "script": "typescript",
            "desc": "dfs+剪枝，当前桶容量小于最小木棍时，舍弃。",
            "code": "function makesquare(matchsticks: number[]): boolean {\n  matchsticks.sort((a, b) => b - a);\n  const sum = matchsticks.reduce((total, cur) => total + cur, 0);\n  const list: number[] = new Array(4).fill(sum / 4);\n  return dfs();\n  function dfs(index = 0): boolean {\n    if (index === matchsticks.length) return list.every(v => v === 0);\n    const num = matchsticks[index];\n    for (let i = 0; i < 4; i++) {\n      if (list[i] < num) continue;\n      if (list[i] < matchsticks[matchsticks.length - 1]) return false;\n      list[i] -= num;\n      if (dfs(index + 1)) return true;\n      list[i] += num;\n    }\n    return false;\n  }\n}"
        },
        {
            "date": 1654012800000,
            "time": 224,
            "memory": 9.5,
            "script": "typescript",
            "desc": "dfs。",
            "code": "class Solution {\n   public:\n    bool makesquare(vector<int> &matchsticks) {\n        int sum = 0;\n        for (auto &num : matchsticks) sum += num;\n        int edge = sum / 4;\n        if (edge * 4 != sum) return false;\n        sort(matchsticks.begin(), matchsticks.end(),\n             [&](int a, int b) -> bool { return b < a; });\n        vector<int> list(4, 0);\n        return dfs(edge, list, 0, matchsticks);\n    }\n    bool dfs(int &edge, vector<int> &list, int idx, vector<int> &matchsticks) {\n        if (idx == matchsticks.size()) {\n            for (auto &num : list) {\n                if (num != edge) return false;\n            }\n            return true;\n        }\n        for (int i = 0; i < 4; i++) {\n            if (list[i] >= edge || list[i] + matchsticks[idx] > edge) continue;\n            list[i] += matchsticks[idx];\n            if (dfs(edge, list, idx + 1, matchsticks)) return true;\n            list[i] -= matchsticks[idx];\n        }\n        return false;\n    }\n};"
        }
    ]
}