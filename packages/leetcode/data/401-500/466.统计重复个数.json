{
    "name": "466. 统计重复个数",
    "url": "https://leetcode-cn.com/problems/count-the-repetitions/",
    "difficulty": "困难",
    "tag": [
        "动态规划"
    ],
    "desc": "由 n 个连接的字符串 s 组成字符串 S，记作  S = [s,n]。例如，[\"abc\",3]=“abcabcabc”。如果我们可以从 s2  中删除某些字符使其变为 s1，则称字符串 s1  可以从字符串 s2 获得。例如，根据定义，\"abc\" 可以从 “abdbec” 获得，但不能从 “acbbe” 获得。现在给你两个非空字符串 s1  和 s2（每个最多 100 个字符长）和两个整数 0 ≤ n1 ≤ 106  和 1 ≤ n2 ≤ 106。现在考虑字符串 S1 和 S2，其中 S1=[s1,n1] 、S2=[s2,n2] 。请你找出一个可以满足使[S2,M] 从 S1  获得的最大整数 M 。",
    "solutions": [
        {
            "date": 1587312000000,
            "time": 4132,
            "memory": 34.7,
            "script": "javascript",
            "desc": "循环判断字符串长度，如果匹配 index+1。",
            "code": "/**\n * @param {string} s1\n * @param {number} n1\n * @param {string} s2\n * @param {number} n2\n * @return {number}\n */\nvar getMaxRepetitions = function (s1, n1, s2, n2) {\n  const len1 = s1.length;\n  const len2 = s2.length;\n  let index2 = 0,\n    count = 0;\n  for (let i = 0; i < n1; i++) {\n    for (let j = 0; j < len1; j++) {\n      if (s1[j] === s2[index2]) index2++;\n      if (index2 === len2) {\n        index2 = 0;\n        count++;\n      }\n    }\n  }\n  return parseInt(count / n2);\n};"
        }
    ]
}