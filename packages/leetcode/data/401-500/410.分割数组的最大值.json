{
    "id": "410",
    "name": "410.分割数组的最大值",
    "url": "https://leetcode.cn/problems/split-array-largest-sum",
    "desc": "给定一个非负整数数组 nums 和一个整数 k ，你需要将这个数组分成 k 个非空的连续子数组。设计一个算法使得这 k 个子数组各自和的最大值最小。",
    "solutions": [
        {
            "date": "2020-07-25",
            "script": "typescript",
            "time": 188,
            "memory": 39.68,
            "desc": "dp[i][j] = 分成i份时，只有前j个元素时的最小值。",
            "code": "function splitArray(nums: number[], m: number): number {\n    const n = nums.length;\n    const dp = new Array(n + 1)\n        .fill(0)\n        .map((_) => new Array(m + 1).fill(Infinity));\n    dp[0][0] = 0;\n    const sub = new Array(n + 1).fill(0);\n    for (let i = 0; i < n; i++) sub[i + 1] = sub[i] + nums[i];\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= Math.min(i, m); j++) {\n        for (let k = 0; k < i; k++) {\n            dp[i][j] = Math.min(dp[i][j], Math.max(dp[k][j - 1], sub[i] - sub[k]));\n        }\n        }\n    }\n    return dp[n][m];\n}"
        },
        {
            "script": "python",
            "time": 7699,
            "memory": 16.83,
            "desc": "dp[i][j] = 分成i份时，只有前j个元素时的最小值。",
            "code": "class Solution:\n    def splitArray(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        dp = [[inf] * (n + 1) for _ in range(k + 1)]\n        dp[1][0] = 0\n        for i in range(1, n + 1): dp[1][i] = dp[1][i - 1] + nums[i - 1]\n        for k in range(2, k + 1):\n            for i in range(k, n + 1):\n                num = 0\n                for j in range(i, k - 1, -1):\n                    num += nums[j - 1]\n                    dp[k][i] = min(dp[k][i], max(dp[k - 1][j - 1], num))\n        return dp[k][n]",
            "date": "2024-01-21"
        }
    ],
    "tagList": ["贪心", "数组", "二分查找", "动态规划", "前缀和"],
    "level": "Hard"
}
