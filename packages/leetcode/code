class Solution:
    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:
        n = len(energyDrinkA)
        drinks = [energyDrinkA, energyDrinkB]
        @cache
        def dfs(cur: int, drink_idx: int) -> int:
            if cur == n: return 0
            # print(f'===>DFS', cur, drink_idx)
            return max(
                dfs(cur + 1, drink_idx) + drinks[drink_idx][cur],
                dfs(cur + 1, (drink_idx + 1) % 2)
            )
        return max(dfs(1, 0) + energyDrinkA[0], dfs(1, 1) + energyDrinkB[0])