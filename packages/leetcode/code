dirs1 = [(0, 1), (1, 0), (0, -1), (-1, 0)]
dirs2 = [(1, 1), (1, -1), (-1, 1), (-1, -1)]
class NeighborSum:
    def __init__(self, grid: List[List[int]]):
        self.grid = grid
        self.n = len(grid)
        self.m = len(grid[0])
        self.map = {grid[i][j]: (i, j) for i in range(self.n) for j in range(self.m)}
    def get(self, value: int, dirs: List[int]) -> int:
        i, j = self.map[value]
        res = 0
        for dir in dirs:
            ni = i + dir[0]
            nj = j + dir[1]
            if 0 <= ni < self.n and 0 <= nj < self.m:
                res += self.grid[ni][nj]
        return res
    def adjacentSum(self, value: int) -> int:
        return self.get(value, dirs1)
    def diagonalSum(self, value: int) -> int:
        return self.get(value, dirs2)