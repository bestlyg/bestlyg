(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[26755],{62281:function(e,n,t){"use strict";t.r(n);var l=t(96832),o=t(22131),r=t(89730),a=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"655-\u8f93\u51fa\u4e8c\u53c9\u6811"},l.createElement(o.AnchorLink,{to:"#655-\u8f93\u51fa\u4e8c\u53c9\u6811","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"655. \u8f93\u51fa\u4e8c\u53c9\u6811"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(o.Link,{to:"https://leetcode.cn/problems/print-binary-tree/"},"655. \u8f93\u51fa\u4e8c\u53c9\u6811"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u4e8c\u53c9\u6811",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8fd4\u56de\u6784\u9020\u5f97\u5230\u7684\u77e9\u9635 res \u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---rust"},l.createElement(o.AnchorLink,{to:"#\u9898\u89e3-1---rust","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - rust"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.08.22"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a2MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1arust"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1adfs\u3002")),l.createElement(r.Z,{code:'use std::cell::RefCell;\nuse std::rc::Rc;\nimpl Solution {\n    pub fn print_tree(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<String>> {\n        let height = Solution::get_height(root.as_ref()) - 1;\n        let n = 2_usize.pow(height as u32 + 1) - 1;\n        let mut ans = vec![vec![String::new(); n]; height + 1];\n        let root = root.unwrap();\n        Solution::dfs(root, &mut ans, height, 0, (n - 1) / 2);\n        ans\n    }\n    fn get_height(node: Option<&Rc<RefCell<TreeNode>>>) -> usize {\n        match node {\n            Some(node) => {\n                1 + Solution::get_height(node.borrow().left.as_ref())\n                    .max(Solution::get_height(node.borrow().right.as_ref()))\n            }\n            None => 0,\n        }\n    }\n    fn dfs(\n        node: Rc<RefCell<TreeNode>>,\n        data: &mut Vec<Vec<String>>,\n        height: usize,\n        r: usize,\n        c: usize,\n    ) {\n        data[r][c] = format!("{}", node.borrow().val);\n        if node.borrow().left.is_some() {\n            Solution::dfs(\n                node.borrow().left.clone().unwrap(),\n                data,\n                height,\n                r + 1,\n                c - 2_usize.pow((height - r - 1) as u32),\n            )\n        }\n        if node.borrow().right.is_some() {\n            Solution::dfs(\n                node.borrow().right.clone().unwrap(),\n                data,\n                height,\n                r + 1,\n                c + 2_usize.pow((height - r - 1) as u32),\n            )\n        }\n    }\n}',lang:"rust"})))}));n["default"]=e=>{var n=l.useContext(o.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&o.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);