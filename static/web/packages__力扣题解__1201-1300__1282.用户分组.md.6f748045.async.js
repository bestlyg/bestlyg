(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[72553],{56587:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),a=t(89730),c=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"1282-\u7528\u6237\u5206\u7ec4"},l.createElement(r.AnchorLink,{to:"#1282-\u7528\u6237\u5206\u7ec4","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"1282. \u7528\u6237\u5206\u7ec4"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode.cn/problems/group-the-people-given-the-group-size-they-belong-to/"},"1282. \u7528\u6237\u5206\u7ec4"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6570\u7ec4\u3001\u54c8\u5e0c\u8868",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8fd4\u56de\u4e00\u4e2a\u7ec4\u5217\u8868\uff0c\u4f7f\u6bcf\u4e2a\u4eba i \u90fd\u5728\u4e00\u4e2a\u5927\u5c0f\u4e3a groupSizes[i] \u7684\u7ec4\u4e2d\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---rust"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---rust","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - rust"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.08.12"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a4ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a2.3MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1arust"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1amap \u91cd\u7ec4\u3002")),l.createElement(a.Z,{code:"use std::collections::*;\nimpl Solution {\n    pub fn group_the_people(group_sizes: Vec<i32>) -> Vec<Vec<i32>> {\n        let mut ans = Vec::new();\n        let mut map = HashMap::<i32, Vec<Vec<i32>>>::new();\n        for i in 0..group_sizes.len() {\n            let k = group_sizes[i];\n            let list = map.entry(k).or_insert(vec![vec![]]);\n            let item = list.last_mut().unwrap();\n            item.push(i as i32);\n            if item.len() == k as usize {\n                ans.push(item.clone());\n                list.push(Vec::new());\n            }\n        }\n        ans\n    }\n}",lang:"rust"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(c,{demos:t})}}}]);