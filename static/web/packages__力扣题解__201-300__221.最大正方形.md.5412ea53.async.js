(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[66114],{25521:function(e,n,t){"use strict";t.r(n);var l=t(96832),a=t(22131),r=t(89730),i=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"221-\u6700\u5927\u6b63\u65b9\u5f62"},l.createElement(a.AnchorLink,{to:"#221-\u6700\u5927\u6b63\u65b9\u5f62","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"221. \u6700\u5927\u6b63\u65b9\u5f62"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(a.Link,{to:"https://leetcode-cn.com/problems/maximal-square/"},"221. \u6700\u5927\u6b63\u65b9\u5f62"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u52a8\u6001\u89c4\u5212",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u5728\u4e00\u4e2a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u4e8c\u7ef4\u77e9\u9635\u5185\uff0c\u627e\u5230\u53ea\u5305\u542b 1 \u7684\u6700\u5927\u6b63\u65b9\u5f62\uff0c\u5e76\u8fd4\u56de\u5176\u9762\u79ef\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---javascript"},l.createElement(a.AnchorLink,{to:"#\u9898\u89e3-1---javascript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - javascript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.5.8"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a440ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a74.3MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajavascript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5148\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u7136\u540e\u518d\u5229\u7528\u6808\u8ba1\u7b97\u3002")),l.createElement(r.Z,{code:"/**\n * @param {character[][]} matrix\n * @return {number}\n */\nvar maximalSquare = function (matrix) {\n  function isAllOne(i, j) {\n    let b = false;\n    try {\n      b = matrix[i + 1][j + 1] === '1' && matrix[i][j + 1] === '1' && matrix[i + 1][j] === '1';\n    } catch (error) {}\n    return b;\n  }\n  let max = 0;\n  for (let i = 0; i < matrix.length; i++) {\n    for (let j = 0; j < matrix[i].length; j++) {\n      if (matrix[i][j] === '0') continue;\n      let width = 1;\n      let size = 1;\n      let temp = [];\n      const queue = [[i, j]];\n      while (queue.length !== 0) {\n        const [nextI, nextJ] = queue.shift();\n        if (!isAllOne(nextI, nextJ)) break;\n        temp.push([nextI, nextJ + 1], [nextI + 1, nextJ], [nextI + 1, nextJ + 1]);\n        if (--size === 0) {\n          queue.push(...temp);\n          size = temp.length;\n          temp.length = 0;\n          width++;\n        }\n      }\n      max = Math.max(max, width);\n    }\n  }\n  return max ** 2;\n};",lang:"javascript"})))}));n["default"]=e=>{var n=l.useContext(a.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&a.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(i,{demos:t})}}}]);