(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[27379],{55966:function(n,e,t){"use strict";t.r(e);var i=t(96832),o=t(22131),l=t(89730),r=i.memo((n=>{n.demos;return i.createElement(i.Fragment,null,i.createElement("div",{className:"markdown"},i.createElement("h1",{id:"764-\u6700\u5927\u52a0\u53f7\u6807\u5fd7"},i.createElement(o.AnchorLink,{to:"#764-\u6700\u5927\u52a0\u53f7\u6807\u5fd7","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"764. \u6700\u5927\u52a0\u53f7\u6807\u5fd7"),i.createElement("blockquote",null,i.createElement("p",null,"\u94fe\u63a5\uff1a",i.createElement(o.Link,{to:"https://leetcode.cn/problems/largest-plus-sign/"},"764. \u6700\u5927\u52a0\u53f7\u6807\u5fd7"),i.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",i.createElement("br",null),"\u6807\u7b7e\uff1a\u6570\u7ec4\u3001\u52a8\u6001\u89c4\u5212",i.createElement("br",null),"\u7b80\u4ecb\uff1a\u8fd4\u56de  grid \u4e2d\u5305\u542b 1 \u7684\u6700\u5927\u7684 \u8f74\u5bf9\u9f50 \u52a0\u53f7\u6807\u5fd7\u7684\u9636\u6570 \u3002\u5982\u679c\u672a\u627e\u5230\u52a0\u53f7\u6807\u5fd7\uff0c\u5219\u8fd4\u56de 0 \u3002")),i.createElement("h2",{id:"\u9898\u89e3-1---cpp"},i.createElement(o.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.11.09"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a1844ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a235.8MB"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u904d\u5386\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u6700\u4e0a\u4e0b\u5de6\u53f3\u76841\u3002")),i.createElement(l.Z,{code:'struct Node {\n    int top, bottom, left, right;\n    Node(): top(0), bottom(0), left(0), right(0) {}\n};\nclass Solution {\npublic:\n    unordered_map<int, unordered_map<int, bool>> m;\n    int n;\n    int orderOfLargestPlusSign(int n, vector<vector<int>>& mines) {\n        this->n = n;\n        for (auto &item : mines) m[item[0]][item[1]] = true;\n        int ans = 0;\n        vector<vector<Node>> list(n, vector<Node>(n));\n        for (int i = 0; i < n; i++) load_row(list, i), load_col(list, i);\n        // cout << "n = " << n << endl;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (m[i][j]) continue;\n                // cout << "=====" << endl << "i = " << i << ", j = " << j << endl;\n                Node &node = list[i][j];\n                int left = j - node.left,\n                    right = node.right - j,\n                    top = i - node.top,\n                    bottom = node.bottom - i;\n                ans = max(ans, min(min(left, right), min(top, bottom)) + 1);\n                // cout << "node_top = " << list[i][j].top\n                //      << ", node_bottom = " << list[i][j].bottom\n                //      << ", node_left = " << list[i][j].left\n                //      << ", node_right = " << list[i][j].right\n                //      << endl\n                //      << "top = " << top\n                //      << ", bottom = " << bottom\n                //      << ", left = " << left\n                //      << ", right = " << right\n                //      << endl\n                //      << "ans = " << ans\n                //      << endl;\n            }\n        }\n        return ans;\n    }\n    void load_row(vector<vector<Node>> &list, int row) {\n        int l = 0;\n        for (int i = 0; i < n; i++) {\n            if (!m[row][i]) {\n                list[row][i].left = l;\n            } else {\n                l = i + 1;\n            }\n        }\n        int r = n - 1;\n        for (int i = n - 1; i >= 0; i--) {\n            if (!m[row][i]) {\n                list[row][i].right = r;\n            } else {\n                r = i - 1;\n            }\n        }\n    }\n    void load_col(vector<vector<Node>> &list, int col) {\n        int t = 0;\n        for (int i = 0; i < n; i++) {\n            if (!m[i][col]) {\n                list[i][col].top = t;\n            } else {\n                t = i + 1;\n            }\n        }\n        int b = n - 1;\n        for (int i = n - 1; i >= 0; i--) {\n            if (!m[i][col]) {\n                list[i][col].bottom = b;\n            } else {\n                b = i - 1;\n            }\n        }\n    }\n};',lang:"cpp"})))}));e["default"]=n=>{var e=i.useContext(o.context),t=e.demos;return i.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&o.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),i.createElement(r,{demos:t})}}}]);