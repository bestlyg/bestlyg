(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[26090],{57234:function(n,e,t){"use strict";t.r(e);var l=t(96832),i=t(22131),m=t(89730),a=l.memo((n=>{n.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"128-\u6700\u957f\u8fde\u7eed\u5e8f\u5217"},l.createElement(i.AnchorLink,{to:"#128-\u6700\u957f\u8fde\u7eed\u5e8f\u5217","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(i.Link,{to:"https://leetcode-cn.com/problems/longest-consecutive-sequence/"},"128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",l.createElement("br",null),"\u6807\u7b7e\uff1a\u5e76\u67e5\u96c6\u3001\u6570\u7ec4",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u51fa\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u7684\u957f\u5ea6\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(i.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.6.6"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a84ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a37.8MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6392\u5e8f\u53bb\u91cd\u904d\u5386\u3002")),l.createElement(m.Z,{code:"function longestConsecutive(nums: number[]): number {\n  if (nums.length === 0) return 0;\n  nums = [...new Set(nums)].sort((a, b) => a - b);\n  let max = 1;\n  let nowMax = 1;\n  let preNum = nums[0];\n  for (const num of nums) {\n    if (num === preNum + 1) {\n      nowMax++;\n    } else {\n      max = nowMax > max ? nowMax : max;\n      nowMax = 1;\n    }\n    preNum = num;\n  }\n  return max > nowMax ? max : nowMax;\n}",lang:"typescript"}),l.createElement("h2",{id:"\u9898\u89e3-2---typescript"},l.createElement(i.AnchorLink,{to:"#\u9898\u89e3-2---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.6.6"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a76ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a37.2MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u7528\u54c8\u5e0c\u8868\u8fdb\u884c O(1)\u7684\u67e5\u627e\uff0c\u5373\u6700\u6162\u67e5\u627e\u901f\u5ea6 O(n)\u3002")),l.createElement(m.Z,{code:"function longestConsecutive(nums: number[]): number {\n  if (nums.length === 0) return 0;\n  const set = new Set(nums);\n  let max = 1;\n  for (let num of set) {\n    if (!set.has(num - 1)) {\n      let nowMax = 1;\n      while (set.has(++num)) nowMax++;\n      max = nowMax > max ? nowMax : max;\n    }\n  }\n  return max;\n}",lang:"typescript"}),l.createElement("h2",{id:"\u9898\u89e3-3---typescript"},l.createElement(i.AnchorLink,{to:"#\u9898\u89e3-3---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 3 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.04.30"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a192ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a53.8MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5e76\u67e5\u96c6\u3002")),l.createElement(m.Z,{code:"class UnionFind {\n  elements: number[];\n  constructor(public size: number) {\n    this.elements = new Array(size).fill(0).map((_, i) => i);\n  }\n  same(v1: number, v2: number): boolean {\n    return this.find(v1) === this.find(v2);\n  }\n  find(v: number): number {\n    return v === this.elements[v] ? v : (this.elements[v] = this.find(this.elements[v]));\n  }\n  union(v1: number, v2: number): void {\n    const e1 = this.find(v1);\n    const e2 = this.find(v2);\n    if (e1 !== e2) {\n      this.elements[e1] = e2;\n      this.size--;\n    }\n  }\n}\nfunction longestConsecutive(nums: number[]): number {\n  nums = [...new Set(nums)];\n  const len = nums.length;\n  if (len === 0) return 0;\n  const uf = new UnionFind(len);\n  const map = new Map(nums.map((v, i) => [v, i]));\n  const ansMap = new Map<number, number>();\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const num_minus = map.get(num - 1);\n    if (num_minus) {\n      uf.union(i, num_minus);\n      const index = uf.find(i);\n      ansMap.set(index, (ansMap.get(index) ?? 0) + 1);\n    }\n    const num_add = map.get(num + 1);\n    if (num_add) {\n      uf.union(i, num_add);\n      const index = uf.find(i);\n      ansMap.set(index, (ansMap.get(index) ?? 0) + 1);\n    }\n  }\n  const cache: Record<number, number> = {};\n  for (let i = 0; i < len; i++) {\n    const num = uf.find(i);\n    cache[num] = (cache[num] ?? 0) + 1;\n  }\n  return [...Object.entries(cache)].sort(([, c1], [, c2]) => c2 - c1)[0][1];\n}",lang:"typescript"})))}));e["default"]=n=>{var e=l.useContext(i.context),t=e.demos;return l.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&i.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);