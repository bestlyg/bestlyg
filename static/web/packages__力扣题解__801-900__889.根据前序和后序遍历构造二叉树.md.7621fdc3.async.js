(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[40392],{35533:function(e,n,t){"use strict";t.r(n);var r=t(96832),l=t(22131),o=t(89730),a=r.memo((e=>{e.demos;return r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"889-\u6839\u636e\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811"},r.createElement(l.AnchorLink,{to:"#889-\u6839\u636e\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"889. \u6839\u636e\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811"),r.createElement("blockquote",null,r.createElement("p",null,"\u94fe\u63a5\uff1a",r.createElement(l.Link,{to:"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/"},"889. \u6839\u636e\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811"),r.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",r.createElement("br",null),"\u6807\u7b7e\uff1a\u6811",r.createElement("br",null),"\u7b80\u4ecb\uff1a\u8fd4\u56de\u4e0e\u7ed9\u5b9a\u7684\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u5339\u914d\u7684\u4efb\u4f55\u4e8c\u53c9\u6811\u3002")),r.createElement("h2",{id:"\u9898\u89e3-1---java"},r.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---java","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - java"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.2.22"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a3ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a39.4MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajava"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u901a\u8fc7\u524d\u5e8f\u7684\u5de6\u8282\u70b9\u5934\u90e8\u548c\u540e\u5e8f\u7684\u5de6\u8282\u70b9\u5934\u90e8\u8fdb\u884c\u5339\u914d\u83b7\u53d6\u5de6\u8282\u70b9\u7684\u6700\u5927\u4e0b\u6807\uff0c\u518d\u901a\u8fc7\u5206\u5272\u6570\u7ec4\u8fdb\u884c\u9012\u5f52\u904d\u5386\u65b0\u5de6\u8282\u70b9\u548c\u53f3\u8282\u70b9\u3002")),r.createElement(o.Z,{code:"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode constructFromPrePost(int[] pre, int[] post) {\n    \tint len = pre.length;\n    \tif(len==0)return null;\n    \tTreeNode node = new TreeNode(pre[0]);\n    \tif(len==1)return node;\n    \tint L=0;\n    \tfor(int i=0;i<len;i++)\n    \t\tif(post[i]==pre[1])\n    \t\t\tL=i+1;\n    \tnode.left=constructFromPrePost(Arrays.copyOfRange(pre, 1, L+1), Arrays.copyOfRange(post, 0, L));\n    \tnode.right=constructFromPrePost(Arrays.copyOfRange(pre, L+1, len), Arrays.copyOfRange(post, L,len-1));\n    \treturn node;\n    }\n}",lang:"java"})))}));n["default"]=e=>{var n=r.useContext(l.context),t=n.demos;return r.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),r.createElement(a,{demos:t})}}}]);