(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[84029],{91853:function(n,e,t){"use strict";t.r(e);var l=t(96832),i=t(22131),c=t(89730),a=l.memo((n=>{n.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"1995-\u7edf\u8ba1\u7279\u6b8a\u56db\u5143\u7ec4"},l.createElement(i.AnchorLink,{to:"#1995-\u7edf\u8ba1\u7279\u6b8a\u56db\u5143\u7ec4","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"1995. \u7edf\u8ba1\u7279\u6b8a\u56db\u5143\u7ec4"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(i.Link,{to:"https://leetcode-cn.com/problems/count-special-quadruplets/"},"1995. \u7edf\u8ba1\u7279\u6b8a\u56db\u5143\u7ec4"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u7b80\u5355",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6570\u7ec4\u3001\u679a\u4e3e",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u4f60\u4e00\u4e2a \u4e0b\u6807\u4ece 0 \u5f00\u59cb \u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u8fd4\u56de\u6ee1\u8db3\u4e0b\u8ff0\u6761\u4ef6\u7684 \u4e0d\u540c \u56db\u5143\u7ec4 (a, b, c, d) \u7684 \u6570\u76ee\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---c"},l.createElement(i.AnchorLink,{to:"#\u9898\u89e3-1---c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - c++"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.12.29"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a136ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a10.2MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac++"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5185\u5d4c\u56db\u5faa\u73af\u3002")),l.createElement(c.Z,{code:"class Solution {\n   public:\n    int countQuadruplets(vector<int>& nums) {\n        int n = nums.size(), ans = 0;\n        for (int i1 = 0; i1 < n; i1++) {\n            for (int i2 = i1 + 1; i2 < n; i2++) {\n                for (int i3 = i2 + 1; i3 < n; i3++) {\n                    for (int i4 = i3 + 1; i4 < n; i4++) {\n                        if (nums[i1] + nums[i2] + nums[i3] == nums[i4]) ans++;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};",lang:"cpp"}),l.createElement("h2",{id:"\u9898\u89e3-2---c"},l.createElement(i.AnchorLink,{to:"#\u9898\u89e3-2---c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - c++"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.12.29"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a56ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a13.9mb"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac++"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5185\u5d4c\u4e09\u5faa\u73af\u3002")),l.createElement(c.Z,{code:"class Solution {\n   public:\n    int countQuadruplets(vector<int>& nums) {\n        unordered_map<int, int> m;\n        int n = nums.size(), ans = 0;\n        for (int i3 = n - 1; i3 >= 0; i3--) {\n            m.clear();\n            for (int i4 = i3 + 1; i4 < n; i4++) {\n                int key = nums[i4] - nums[i3];\n                if (m.count(key))\n                    m[key]++;\n                else\n                    m[key] = 1;\n            }\n            for (int i1 = 0; i1 < i3; i1++) {\n                for (int i2 = i1 + 1; i2 < i3; i2++) {\n                    int key = nums[i1] + nums[i2];\n                    if (m.count(key)) {\n                        ans += m[key];\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};",lang:"cpp"}),l.createElement("h2",{id:"\u9898\u89e3-3---c"},l.createElement(i.AnchorLink,{to:"#\u9898\u89e3-3---c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 3 - c++"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.12.29"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a60ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a10.6mb"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac++"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u80cc\u5305\u95ee\u9898\uff0c\u524d i \u4e2a\u6570\u80fd\u548c\u4e3a j \u7684\u6240\u4f7f\u7528\u7684\u4e2a\u6570\u4e3a k\u3002")),l.createElement(c.Z,{code:"class Solution {\n   public:\n    int countQuadruplets(vector<int>& nums) {\n        int n = nums.size(), dp[n + 1][310][4], ans = 0;\n        memset(dp, 0, sizeof(int) * (n + 1) * 310 * 4);\n        dp[0][0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 310; j++) {\n                for (int k = 0; k < 4; k++) {\n                    dp[i][j][k] += dp[i - 1][j][k];\n                    if (j >= nums[i - 1] && k >= 1)\n                        dp[i][j][k] += dp[i - 1][j - nums[i - 1]][k - 1];\n                }\n            }\n        }\n        for (int i = 3; i < n; i++) ans += dp[i][nums[i]][3];\n        return ans;\n    }\n};",lang:"cpp"})))}));e["default"]=n=>{var e=l.useContext(i.context),t=e.demos;return l.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&i.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);