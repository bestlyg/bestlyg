(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[58141],{56848:function(e,n,t){"use strict";t.r(n);var l=t(96832),a=t(22131),r=t(89730),o=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"515-\u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c"},l.createElement(a.AnchorLink,{to:"#515-\u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(a.Link,{to:"https://leetcode.cn/problems/find-largest-value-in-each-tree-row/"},"515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u4e8c\u53c9\u6811",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u8bf7\u627e\u51fa\u8be5\u4e8c\u53c9\u6811\u4e2d\u6bcf\u4e00\u5c42\u7684\u6700\u5927\u503c\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---cpp"},l.createElement(a.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.06.24"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a8ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a21.6MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5c42\u5e8f\u904d\u5386\u3002")),l.createElement(r.Z,{code:"class Solution {\n   public:\n    vector<int> largestValues(TreeNode* root) {\n        vector<int> ans;\n        if (root == nullptr) return ans;\n        queue<TreeNode*> q;\n        q.push(root);\n        ans.push_back(root->val);\n        int size = 1, nmax = INT_MIN;\n        while (q.size()) {\n            TreeNode* node = q.front();\n            q.pop();\n            if (node->left) {\n                q.push(node->left);\n                nmax = max(nmax, node->left->val);\n            }\n            if (node->right) {\n                q.push(node->right);\n                nmax = max(nmax, node->right->val);\n            }\n            if (--size == 0) {\n                if (q.size()) ans.push_back(nmax);\n                nmax = INT_MIN;\n                size = q.size();\n            }\n        }\n        return ans;\n    }\n};",lang:"cpp"})))}));n["default"]=e=>{var n=l.useContext(a.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&a.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(o,{demos:t})}}}]);