(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[25144],{62270:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),i=t(89730),a=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"103-\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386"},l.createElement(r.AnchorLink,{to:"#103-\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"103. \u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/"},"103. \u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6808\u3001\u6811\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684\u952f\u9f7f\u5f62\u5c42\u6b21\u904d\u5386\u3002\uff08\u5373\u5148\u4ece\u5de6\u5f80\u53f3\uff0c\u518d\u4ece\u53f3\u5f80\u5de6\u8fdb\u884c\u4e0b\u4e00\u5c42\u904d\u5386\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5c42\u4e0e\u5c42\u4e4b\u95f4\u4ea4\u66ff\u8fdb\u884c\uff09\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---javascript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---javascript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - javascript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.4.26"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a76ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a34.1MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajavascript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5224\u65ad\u9ad8\u5ea6\u4e3a\u5076\u6570\u65f6\u5012\u5e8f")),l.createElement(i.Z,{code:"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar zigzagLevelOrder = function (root) {\n  if (root === null) return [];\n  const res = [];\n  const queue = [root];\n  let height = 1;\n  const pushNode = () => {\n    let valArr = [];\n    for (const node of queue) valArr.push(node.val);\n    if (height % 2 === 0) res.push(valArr.reverse());\n    else res.push(valArr);\n  };\n  pushNode();\n  let size = 1;\n  while (queue.length !== 0) {\n    const node = queue.shift();\n    if (node.left !== null) queue.push(node.left);\n    if (node.right !== null) queue.push(node.right);\n    if (--size === 0) {\n      height++;\n      size = queue.length;\n      if (queue.length !== 0) pushNode();\n    }\n  }\n  return res;\n};",lang:"javascript"}),l.createElement("h2",{id:"\u9898\u89e3-2---c"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-2---c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - c"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.11.28"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a7.1MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u4fee\u6539\u5c42\u5e8f\u904d\u5386\uff0c\u5076\u6570\u5c42\u5012\u5e8f\u3002")),l.createElement(i.Z,{code:"#define MAX 2000\nint** zigzagLevelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){\n    int **arr = (int **)malloc(sizeof(int) * MAX);\n    *returnSize = 0;\n    *returnColumnSizes = (int *)malloc(sizeof(int) * MAX);\n    if (!root) return arr;\n    // \u7ef4\u62a4\u961f\u5217\u50a8\u5b58\u8282\u70b9\u4fe1\u606f\n    struct TreeNode *q[2000];\n    q[0] = root;\n    // \u7ef4\u62a4\u961f\u5217\u5934\u5c3e\u6307\u9488\n    int head = 0, tail = 1;\n    // \u7ef4\u62a4\u5f53\u524d\u5c42\u7684\u5143\u7d20\u6570\u91cf\uff0c\u5f53\u524d\u904d\u5386\u7684\u5c42\u7ea7\n    int size = 1, height = 1, order = -1;\n    arr[0] = (int *)malloc(sizeof(int));\n    arr[0][0] = root->val;\n    (*returnColumnSizes)[0] = 1;\n    while (head != tail) {\n        // \u6bcf\u6b21\u51fa\u961f\u4e00\u4e2a\u8282\u70b9\n        struct TreeNode *node = q[head++];\n        // \u82e5\u5de6\u8282\u70b9\u4e0d\u4e3a\u7a7a\u5219\u5165\u961f\n        if (node->left) q[tail++] = node->left;\n        // \u82e5\u53f3\u8282\u70b9\u4e0d\u4e3a\u7a7a\u5219\u5165\u961f\n        if (node->right) q[tail++] = node->right;\n        // \u82e5\u5f53\u524d\u5c42\u65e0\u5143\u7d20\uff0c\u8bf4\u660e\u961f\u5217\u91cc\u90fd\u662f\u4e0b\u4e00\u5c42\u7684\u5143\u7d20\n        if (--size == 0) {\n            size = tail - head;\n            *returnSize += 1;\n            (*returnColumnSizes)[height] = size;\n            arr[height] = (int *)malloc(sizeof(int) * size);\n            if (order == 1) for(int i = head; i < tail; i++) arr[height][i - head] = q[i]->val;\n            else for(int i = tail - 1; i >= head; i--) arr[height][tail - 1 - i] = q[i]->val;\n            order *= -1;\n            ++height;\n        }\n    }\n    return arr;\n}",lang:"c"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);