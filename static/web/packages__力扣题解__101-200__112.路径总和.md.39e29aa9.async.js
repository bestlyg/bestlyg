(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[78895],{58338:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),a=t(89730),o=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"112-\u8def\u5f84\u603b\u548c"},l.createElement(r.AnchorLink,{to:"#112-\u8def\u5f84\u603b\u548c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"112. \u8def\u5f84\u603b\u548c"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/path-sum/"},"112. \u8def\u5f84\u603b\u548c"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u7b80\u5355",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u548c\uff0c\u5224\u65ad\u8be5\u6811\u4e2d\u662f\u5426\u5b58\u5728\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u503c\u76f8\u52a0\u7b49\u4e8e\u76ee\u6807\u548c\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.7.7"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a88ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a38.2MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6df1\u5ea6\u9012\u5f52\u904d\u5386\u5373\u53ef\u3002")),l.createElement(a.Z,{code:"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\nfunction hasPathSum(root: TreeNode | null, sum: number): boolean {\n  if (root === null) return false;\n  const val = root.val;\n  if (val === sum && root.left === null && root.right === null) return true;\n  else return hasPathSum(root.left, sum - val) || hasPathSum(root.right, sum - val);\n}",lang:"typescript"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(o,{demos:t})}}}]);