(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[84397],{7548:function(n,e,t){"use strict";t.r(e);var l=t(96832),r=t(22131),i=t(89730),a=l.memo((n=>{n.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"640-\u6c42\u89e3\u65b9\u7a0b"},l.createElement(r.AnchorLink,{to:"#640-\u6c42\u89e3\u65b9\u7a0b","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"640. \u6c42\u89e3\u65b9\u7a0b"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode.cn/problems/solve-the-equation/"},"640. \u6c42\u89e3\u65b9\u7a0b"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6570\u5b66\u3001\u5b57\u7b26\u4e32\u3001\u6a21\u62df",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u6c42\u89e3\u4e00\u4e2a\u7ed9\u5b9a\u7684\u65b9\u7a0b\uff0c\u5c06 x \u4ee5\u5b57\u7b26\u4e32 \"x=#value\" \u7684\u5f62\u5f0f\u8fd4\u56de\u3002\u8be5\u65b9\u7a0b\u4ec5\u5305\u542b '+' \uff0c '-' \u64cd\u4f5c\uff0c\u53d8\u91cf x \u548c\u5176\u5bf9\u5e94\u7cfb\u6570\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---rust"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---rust","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - rust"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.08.10"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a2MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1arust"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u62c6\u5206\u540e\u89e3\u6790\u3002")),l.createElement(i.Z,{code:"use std::collections::VecDeque;\nimpl Solution {\n    pub fn solve_equation(equation: String) -> String {\n        let (mut l, mut r) = (0, 0);\n        let equation = equation.split('=').collect::<Vec<&str>>();\n        Solution::analysis(&mut l, &mut r, Solution::format(equation[0]), 1);\n        Solution::analysis(&mut l, &mut r, Solution::format(equation[1]), -1);\n        if l == 0 && r == 0 {\n            String::from(\"Infinite solutions\")\n        } else if l == 0 {\n            String::from(\"No solution\")\n        } else {\n            format!(\"x={}\", r / l)\n        }\n    }\n    fn format(s: &str) -> String {\n        let mut ans = s.to_string().chars().collect::<VecDeque<char>>();\n        let front = ans.front().unwrap();\n        if *front != '+' && *front != '-' {\n            ans.push_front('+');\n        }\n        ans.push_front('0');\n        String::from_utf8(ans.iter().map(|c| *c as u8).collect::<Vec<u8>>()).unwrap()\n    }\n    fn analysis(l: &mut i32, r: &mut i32, s: String, flag: i32) {\n        let s = s.chars().collect::<Vec<char>>();\n        let mut i = 0;\n        while i < s.len() {\n            let mut num = String::new();\n            if i != 0 {\n                num.push(s[i - 1]);\n            }\n            while i < s.len() && s[i] != '+' && s[i] != '-' && s[i] != 'x' {\n                num.push(s[i]);\n                i += 1;\n            }\n            if i < s.len() && s[i] == 'x' {\n                if num.len() == 1 && (num.eq(\"+\") || num.eq(\"-\")) {\n                    num.push('1');\n                }\n                *l += flag * num.parse::<i32>().unwrap();\n                i += 1;\n            } else {\n                *r += -1 * flag * num.parse::<i32>().unwrap();\n            }\n            i += 1;\n        }\n    }\n}",lang:"rust"})))}));e["default"]=n=>{var e=l.useContext(r.context),t=e.demos;return l.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);