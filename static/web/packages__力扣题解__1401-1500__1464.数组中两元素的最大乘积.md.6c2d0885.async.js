(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[11154],{36973:function(e,n,l){"use strict";l.r(n);var t=l(96832),m=l(22131),u=l(89730),r=t.memo((e=>{e.demos;return t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"1464-\u6570\u7ec4\u4e2d\u4e24\u5143\u7d20\u7684\u6700\u5927\u4e58\u79ef"},t.createElement(m.AnchorLink,{to:"#1464-\u6570\u7ec4\u4e2d\u4e24\u5143\u7d20\u7684\u6700\u5927\u4e58\u79ef","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"1464. \u6570\u7ec4\u4e2d\u4e24\u5143\u7d20\u7684\u6700\u5927\u4e58\u79ef"),t.createElement("blockquote",null,t.createElement("p",null,"\u94fe\u63a5\uff1a",t.createElement(m.Link,{to:"https://leetcode.cn/problems/maximum-product-of-two-elements-in-an-array/"},"1464. \u6570\u7ec4\u4e2d\u4e24\u5143\u7d20\u7684\u6700\u5927\u4e58\u79ef"),t.createElement("br",null),"\u96be\u5ea6\uff1a\u7b80\u5355",t.createElement("br",null),"\u6807\u7b7e\uff1a\u6570\u7ec4\u3001\u6392\u5e8f\u3001\u5806(\u4f18\u5148\u961f\u5217)",t.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u8bf7\u4f60\u9009\u62e9\u6570\u7ec4\u7684\u4e24\u4e2a\u4e0d\u540c\u4e0b\u6807 i \u548c j\uff0c\u4f7f (nums[i]-1)*(nums[j]-1) \u53d6\u5f97\u6700\u5927\u503c\u3002")),t.createElement("h2",{id:"\u9898\u89e3-1---rust"},t.createElement(m.AnchorLink,{to:"#\u9898\u89e3-1---rust","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - rust"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.08.26"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a2MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1arust"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6392\u5e8f\u3002")),t.createElement(u.Z,{code:"impl Solution {\n    pub fn max_product(nums: Vec<i32>) -> i32 {\n        let mut nums = nums;\n        nums.sort();\n        (nums[nums.len() - 1] - 1) * (nums[nums.len() - 2] - 1)\n    }\n}",lang:"rust"}),t.createElement("h2",{id:"\u9898\u89e3-2---rust"},t.createElement(m.AnchorLink,{to:"#\u9898\u89e3-2---rust","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - rust"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.08.26"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a2MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1arust"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u904d\u5386\u3002")),t.createElement(u.Z,{code:"impl Solution {\n    pub fn max_product(nums: Vec<i32>) -> i32 {\n        let (mut num1, mut num2) = (nums[0], nums[1]);\n        if num2 > num1 {\n            num1 ^= num2;\n            num2 ^= num1;\n            num1 ^= num2;\n        }\n        let mut i = 2;\n        while i < nums.len() {\n            if nums[i] > num1 {\n                num2 = num1;\n                num1 = nums[i];\n            } else if nums[i] > num2 {\n                num2 = nums[i];\n            }\n            i += 1;\n        }\n        (num1 - 1) * (num2 - 1)\n    }\n}",lang:"rust"})))}));n["default"]=e=>{var n=t.useContext(m.context),l=n.demos;return t.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&m.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),t.createElement(r,{demos:l})}}}]);