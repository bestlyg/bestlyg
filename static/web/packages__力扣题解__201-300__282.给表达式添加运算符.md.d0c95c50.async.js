(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[80725],{40681:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),a=t(89730),c=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"282-\u7ed9\u8868\u8fbe\u5f0f\u6dfb\u52a0\u8fd0\u7b97\u7b26"},l.createElement(r.AnchorLink,{to:"#282-\u7ed9\u8868\u8fbe\u5f0f\u6dfb\u52a0\u8fd0\u7b97\u7b26","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"282. \u7ed9\u8868\u8fbe\u5f0f\u6dfb\u52a0\u8fd0\u7b97\u7b26"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/expression-add-operators/"},"282. \u7ed9\u8868\u8fbe\u5f0f\u6dfb\u52a0\u8fd0\u7b97\u7b26"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6570\u5b66\u3001\u5b57\u7b26\u4e32\u3001\u56de\u6eaf",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57 \xa00-9\xa0 \u7684\u5b57\u7b26\u4e32 num \u548c\u4e00\u4e2a\u76ee\u6807\u503c\u6574\u6570 target \uff0c\u5728 num \u7684\u6570\u5b57\u4e4b\u95f4\u6dfb\u52a0 \u4e8c\u5143 \u8fd0\u7b97\u7b26\uff08\u4e0d\u662f\u4e00\u5143\uff09+\u3001-\xa0 \u6216 \xa0*\xa0\uff0c\u8fd4\u56de\u6240\u6709\u80fd\u591f\u5f97\u5230\u76ee\u6807\u503c\u7684\u8868\u8fbe\u5f0f\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.10.16"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a7944ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a103.7MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1adfs\u3002")),l.createElement(a.Z,{code:"function addOperators(num: string, target: number): string[] {\n  const n = num.length;\n  if (n === 1) {\n    return +num === target ? [num] : [];\n  }\n  const ops = ['+', '-', '*', ''];\n  const ans = new Set<string>();\n  dfs();\n  return Array.from(ans);\n  function dfs(idx = 0, template = '') {\n    if (idx === n) {\n      if (eval(template) === target) ans.add(template);\n      return;\n    }\n    const current = num[idx];\n    template += current;\n    if (idx === n - 1) {\n      dfs(idx + 1, template);\n      return;\n    }\n    for (const op of ops) {\n      if (num[idx] === '0' && op === '') continue;\n      dfs(idx + 1, template + op);\n    }\n    while (idx < n - 1 && current !== '0' && num[idx + 1] === '0') {\n      template += '0';\n      dfs(idx + 2, template);\n      idx += 1;\n    }\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(c,{demos:t})}}}]);