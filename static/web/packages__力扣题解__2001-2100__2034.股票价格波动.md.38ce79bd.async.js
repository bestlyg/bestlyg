(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[54245],{57550:function(e,n,t){"use strict";t.r(n);var i=t(96832),r=t(22131),a=t(89730),s=i.memo((e=>{e.demos;return i.createElement(i.Fragment,null,i.createElement("div",{className:"markdown"},i.createElement("h1",{id:"2034-\u80a1\u7968\u4ef7\u683c\u6ce2\u52a8"},i.createElement(r.AnchorLink,{to:"#2034-\u80a1\u7968\u4ef7\u683c\u6ce2\u52a8","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"2034. \u80a1\u7968\u4ef7\u683c\u6ce2\u52a8"),i.createElement("blockquote",null,i.createElement("p",null,"\u94fe\u63a5\uff1a",i.createElement(r.Link,{to:"https://leetcode-cn.com/problems/stock-price-fluctuation/"},"2034. \u80a1\u7968\u4ef7\u683c\u6ce2\u52a8"),i.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",i.createElement("br",null),"\u6807\u7b7e\uff1a\u8bbe\u8ba1\u3001\u54c8\u5e0c\u8868\u3001\u6570\u636e\u6d41\u3001\u6709\u5e8f\u96c6\u5408\u3001\u5806(\u4f18\u5148\u961f\u5217)",i.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5b9e\u73b0\uff1a\u66f4\u65b0 \u80a1\u7968\u5728\u67d0\u4e00\u65f6\u95f4\u6233\u7684\u80a1\u7968\u4ef7\u683c\uff0c\u5982\u679c\u6709\u4e4b\u524d\u540c\u4e00\u65f6\u95f4\u6233\u7684\u4ef7\u683c\uff0c\u8fd9\u4e00\u64cd\u4f5c\u5c06 \xa0 \u66f4\u6b63 \xa0 \u4e4b\u524d\u7684\u9519\u8bef\u4ef7\u683c\u3002\u627e\u5230\u5f53\u524d\u8bb0\u5f55\u91cc \u6700\u65b0\u80a1\u7968\u4ef7\u683c \xa0\u3002\u6700\u65b0\u80a1\u7968\u4ef7\u683c \xa0 \u5b9a\u4e49\u4e3a\u65f6\u95f4\u6233\u6700\u665a\u7684\u80a1\u7968\u4ef7\u683c\u3002\u627e\u5230\u5f53\u524d\u8bb0\u5f55\u91cc\u80a1\u7968\u7684 \u6700\u9ad8\u4ef7\u683c \xa0\u3002\u627e\u5230\u5f53\u524d\u8bb0\u5f55\u91cc\u80a1\u7968\u7684 \u6700\u4f4e\u4ef7\u683c \xa0\u3002")),i.createElement("h2",{id:"\u9898\u89e3-1---typescript"},i.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.01.23"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a692ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a79.2MB"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u7ef4\u62a4\u5806\u5185\u4e0b\u6807\u3002")),i.createElement(a.Z,{code:"class Node {\n  constructor(\n    public timestamp: number,\n    public price: number,\n    public imax: number,\n    public imin: number\n  ) {}\n}\nclass Heap<Node> {\n  private arr: Node[] = [];\n  get isEmpty() {\n    return this.size === 0;\n  }\n  get size() {\n    return this.arr.length;\n  }\n  get top() {\n    return this.arr[0];\n  }\n  constructor(private compare: (t1: Node, t2: Node) => number, private idx_field: string) {}\n  add(num: Node): void {\n    this.arr.push(num);\n    this.shiftUp(this.size - 1);\n  }\n  remove(): Node {\n    const num = this.arr.shift()!;\n    if (this.size) {\n      this.arr.unshift(this.arr.pop()!);\n      this.shiftDown(0);\n    }\n    return num;\n  }\n  shiftUp(index: number): void {\n    if (index === 0) return;\n    const parentIndex = (index - 1) >> 1;\n    if (this.compare(this.arr[index], this.arr[parentIndex]) > 0) {\n      this.arr[index][this.idx_field] = parentIndex;\n      this.arr[parentIndex][this.idx_field] = index;\n      [this.arr[index], this.arr[parentIndex]] = [this.arr[parentIndex], this.arr[index]];\n      this.shiftUp(parentIndex);\n    }\n  }\n  shiftDown(index: number): void {\n    let childrenIndex = index * 2 + 1;\n    if (childrenIndex > this.size - 1) return;\n    if (\n      childrenIndex + 1 <= this.size - 1 &&\n      this.compare(this.arr[childrenIndex + 1], this.arr[childrenIndex]) > 0\n    ) {\n      childrenIndex++;\n    }\n    if (this.compare(this.arr[childrenIndex], this.arr[index]) > 0) {\n      this.arr[index][this.idx_field] = childrenIndex;\n      this.arr[childrenIndex][this.idx_field] = index;\n      [this.arr[childrenIndex], this.arr[index]] = [this.arr[index], this.arr[childrenIndex]];\n      this.shiftDown(childrenIndex);\n    }\n  }\n  *[Symbol.iterator](): IterableIterator<Node> {\n    for (const t of this.arr) {\n      yield t;\n    }\n  }\n}\n\nclass StockPrice {\n  heap_max = new Heap<Node>((t1, t2) => t1.price - t2.price, 'imax');\n  heap_min = new Heap<Node>((t1, t2) => t2.price - t1.price, 'imin');\n  map = new Map<number, Node>();\n  time_max = -1;\n  update(timestamp: number, price: number): void {\n    this.time_max = Math.max(this.time_max, timestamp);\n    const cnt = this.map.size;\n    let node = this.map.get(timestamp);\n    if (node) {\n      node.price = price;\n      this.heap_max.shiftUp(node.imax);\n      this.heap_max.shiftDown(node.imax);\n      this.heap_min.shiftUp(node.imin);\n      this.heap_min.shiftDown(node.imin);\n    } else {\n      this.map.set(timestamp, (node = new Node(timestamp, price, cnt, cnt)));\n      this.heap_max.add(node);\n      this.heap_min.add(node);\n    }\n  }\n  current(): number {\n    return this.map.get(this.time_max)!.price;\n  }\n  maximum(): number {\n    return this.heap_max.top.price;\n  }\n  minimum(): number {\n    return this.heap_min.top.price;\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=i.useContext(r.context),t=n.demos;return i.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),i.createElement(s,{demos:t})}}}]);