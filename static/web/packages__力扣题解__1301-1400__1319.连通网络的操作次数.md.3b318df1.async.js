(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[4712],{27750:function(e,n,t){"use strict";t.r(n);var i=t(96832),l=t(22131),c=t(89730),r=i.memo((e=>{e.demos;return i.createElement(i.Fragment,null,i.createElement("div",{className:"markdown"},i.createElement("h1",{id:"1319-\u8fde\u901a\u7f51\u7edc\u7684\u64cd\u4f5c\u6b21\u6570"},i.createElement(l.AnchorLink,{to:"#1319-\u8fde\u901a\u7f51\u7edc\u7684\u64cd\u4f5c\u6b21\u6570","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"1319. \u8fde\u901a\u7f51\u7edc\u7684\u64cd\u4f5c\u6b21\u6570"),i.createElement("blockquote",null,i.createElement("p",null,"\u94fe\u63a5\uff1a",i.createElement(l.Link,{to:"https://leetcode-cn.com/problems/number-of-operations-to-make-network-connected/"},"1319. \u8fde\u901a\u7f51\u7edc\u7684\u64cd\u4f5c\u6b21\u6570"),i.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",i.createElement("br",null),"\u6807\u7b7e\uff1a\u5e76\u67e5\u96c6\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22",i.createElement("br",null),"\u7b80\u4ecb\uff1a\u7528\u4ee5\u592a\u7f51\u7ebf\u7f06\u5c06 \xa0n\xa0 \u53f0\u8ba1\u7b97\u673a\u8fde\u63a5\u6210\u4e00\u4e2a\u7f51\u7edc\uff0c\u8ba1\u7b97\u673a\u7684\u7f16\u53f7\u4ece \xa00\xa0 \u5230 \xa0n-1\u3002\u7ebf\u7f06\u7528 \xa0connections\xa0 \u8868\u793a\uff0c\u5176\u4e2d \xa0connections[i] = [a, b]\xa0 \u8fde\u63a5\u4e86\u8ba1\u7b97\u673a \xa0a\xa0 \u548c \xa0b\u3002\u7f51\u7edc\u4e2d\u7684\u4efb\u4f55\u4e00\u53f0\u8ba1\u7b97\u673a\u90fd\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u76f4\u63a5\u6216\u8005\u95f4\u63a5\u8bbf\u95ee\u540c\u4e00\u4e2a\u7f51\u7edc\u4e2d\u5176\u4ed6\u4efb\u610f\u4e00\u53f0\u8ba1\u7b97\u673a\u3002\u7ed9\u4f60\u8fd9\u4e2a\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u521d\u59cb\u5e03\u7ebf \xa0connections\uff0c\u4f60\u53ef\u4ee5\u62d4\u5f00\u4efb\u610f\u4e24\u53f0\u76f4\u8fde\u8ba1\u7b97\u673a\u4e4b\u95f4\u7684\u7ebf\u7f06\uff0c\u5e76\u7528\u5b83\u8fde\u63a5\u4e00\u5bf9\u672a\u76f4\u8fde\u7684\u8ba1\u7b97\u673a\u3002\u8bf7\u4f60\u8ba1\u7b97\u5e76\u8fd4\u56de\u4f7f\u6240\u6709\u8ba1\u7b97\u673a\u90fd\u8fde\u901a\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u3002\u5982\u679c\u4e0d\u53ef\u80fd\uff0c\u5219\u8fd4\u56de \xa0-1 \u3002")),i.createElement("h2",{id:"\u9898\u89e3-1---typescript"},i.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.1.23"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a212ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a54.6MB"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5e76\u67e5\u96c6\u3002")),i.createElement(c.Z,{code:"class UnionFind {\n  elements: number[];\n  constructor(public size: number) {\n    this.elements = new Array(size).fill(0).map((_, i) => i);\n  }\n  same(v1: number, v2: number): boolean {\n    return this.find(v1) === this.find(v2);\n  }\n  find(v: number): number {\n    return v === this.elements[v] ? v : (this.elements[v] = this.find(this.elements[v]));\n  }\n  union(v1: number, v2: number): void {\n    const e1 = this.find(v1);\n    const e2 = this.find(v2);\n    if (e1 !== e2) {\n      this.elements[e1] = e2;\n      this.size--;\n    }\n  }\n}\nfunction makeConnected(n: number, connections: number[][]): number {\n  const uf = new UnionFind(n);\n  let count = 0;\n  for (const [c1, c2] of connections) {\n    if (uf.same(c1, c2)) {\n      count++;\n    } else {\n      uf.union(c1, c2);\n    }\n  }\n  return uf.size - 1 <= count ? uf.size - 1 : -1;\n}",lang:"typescript"}),i.createElement("h2",{id:"\u9898\u89e3-2---typescript"},i.createElement(l.AnchorLink,{to:"#\u9898\u89e3-2---typescript","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - typescript"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.04.30"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a192ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a53.8mb"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5e76\u67e5\u96c6\u3002")),i.createElement(c.Z,{code:"class UnionFind {\n  elements: number[];\n  constructor(public size: number) {\n    this.elements = new Array(size).fill(0).map((_, i) => i);\n  }\n  same(v1: number, v2: number): boolean {\n    return this.find(v1) === this.find(v2);\n  }\n  find(v: number): number {\n    return v === this.elements[v] ? v : (this.elements[v] = this.find(this.elements[v]));\n  }\n  union(v1: number, v2: number): void {\n    const e1 = this.find(v1);\n    const e2 = this.find(v2);\n    if (e1 !== e2) {\n      this.elements[e1] = e2;\n      this.size--;\n    }\n  }\n}\nfunction makeConnected(n: number, connections: number[][]): number {\n  let c = 0;\n  const uf = new UnionFind(n);\n  for (const [comp1, comp2] of connections) {\n    if (uf.same(comp1, comp2)) c++;\n    else uf.union(comp1, comp2);\n  }\n  return c >= uf.size - 1 ? uf.size - 1 : -1;\n}",lang:"typescript"})))}));n["default"]=e=>{var n=i.useContext(l.context),t=n.demos;return i.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),i.createElement(r,{demos:t})}}}]);