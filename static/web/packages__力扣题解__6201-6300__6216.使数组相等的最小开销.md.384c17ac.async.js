(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[78837],{70034:function(n,e,t){"use strict";t.r(e);var l=t(96832),o=t(22131),c=t(89730),s=l.memo((n=>{n.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"6216-\u4f7f\u6570\u7ec4\u76f8\u7b49\u7684\u6700\u5c0f\u5f00\u9500"},l.createElement(o.AnchorLink,{to:"#6216-\u4f7f\u6570\u7ec4\u76f8\u7b49\u7684\u6700\u5c0f\u5f00\u9500","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"6216. \u4f7f\u6570\u7ec4\u76f8\u7b49\u7684\u6700\u5c0f\u5f00\u9500"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(o.Link,{to:"https://leetcode.cn/problems/minimum-cost-to-make-array-equal/"},"6216. \u4f7f\u6570\u7ec4\u76f8\u7b49\u7684\u6700\u5c0f\u5f00\u9500"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",l.createElement("br",null),"\u6807\u7b7e\uff1a",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bf7\u4f60\u8fd4\u56de\u4f7f nums \u4e2d\u6240\u6709\u5143\u7d20 \u76f8\u7b49 \u7684 \u6700\u5c11 \u603b\u5f00\u9500\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---cpp"},l.createElement(o.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.10.23"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a180ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a82.3MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u8d2a\u5fc3\uff0c\u6700\u540e\u5316\u4e3a\u7684\u503c\u4e00\u5b9a\u662fnums\u4e2d\u5b58\u5728\u7684\u503c\uff0c\u901a\u8fc7\u6309\u503c\u7684\u5927\u5c0f\u6392\u5e8f\u540e\uff0c\u7ed3\u679c\u6210\u51f9\u578b\uff0c\u627e\u5230\u6700\u4f4e\u70b9\u5373\u7ed3\u679c\u3002")),l.createElement(c.Z,{code:"struct Node {\n    int num, cost;\n    Node(int num, int cost): num(num), cost(cost) {}\n    long long getCost(int num) {\n        return abs(static_cast<long long>(num) - this->num) * cost;\n    }\n};\nclass Solution {\npublic:\n    long long minCost(vector<int>& nums, vector<int>& cost) {\n        int n = nums.size();\n        vector<Node> list;\n        for (int i = 0; i < n; i++) list.push_back(Node(nums[i], cost[i]));\n        sort(list.begin(), list.end(), [](Node &a, Node &b){ return a.num < b.num; });\n        int l = 0, r = n - 1;\n        long long ans = 0;\n        while (l < r) {\n            int m1 = (l + r) / 2, m2 = m1 + 1;\n            long long m1cost = comp(list, list[m1].num), m2cost = comp(list, list[m2].num);\n            if (m1cost >= m2cost) l = m2, ans = m2cost;\n            else r = m1, ans = m1cost;\n        }\n        return ans;\n    }\n    long long comp(vector<Node> &list, int num) {\n        long long ans = 0;\n        for (int i = 0; i < list.size(); i++) {\n            ans += list[i].getCost(num);\n        }\n        return ans;\n    }\n};",lang:"cpp"})))}));e["default"]=n=>{var e=l.useContext(o.context),t=e.demos;return l.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&o.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),l.createElement(s,{demos:t})}}}]);