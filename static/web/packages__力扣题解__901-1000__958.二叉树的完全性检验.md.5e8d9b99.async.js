(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[40808],{57730:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),o=t(89730),c=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"958-\u4e8c\u53c9\u6811\u7684\u5b8c\u5168\u6027\u68c0\u9a8c"},l.createElement(r.AnchorLink,{to:"#958-\u4e8c\u53c9\u6811\u7684\u5b8c\u5168\u6027\u68c0\u9a8c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"958. \u4e8c\u53c9\u6811\u7684\u5b8c\u5168\u6027\u68c0\u9a8c"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/check-completeness-of-a-binary-tree/"},"958. \u4e8c\u53c9\u6811\u7684\u5b8c\u5168\u6027\u68c0\u9a8c"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u4e8c\u53c9\u6811",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u786e\u5b9a\u5b83\u662f\u5426\u662f\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.07.29"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a144ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a46.8MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1adfs \u9012\u5f52\u904d\u5386\u3002")),l.createElement(o.Z,{code:"function isCompleteTree(root: TreeNode | null): boolean {\n  if (root === null) return true;\n  const n = count(root);\n  let m = 1;\n  let cnt = 0;\n  while (cnt + 2 * m < n) cnt += m <<= 1;\n  return judge(root, n, m);\n  function count(node: TreeNode | null): number {\n    if (node === null) return 0;\n    return count(node.left) + count(node.right) + 1;\n  }\n  function judge(node: TreeNode | null, n: number, m: number): boolean {\n    console.log(node, n, m);\n    if (node === null) return n === 0;\n    if (n === 0) return false;\n    if (n === 1) return node.left === null && node.right === null;\n    const sum = Math.max(0, m * 2 - 1);\n    const left = Math.min(m, n - sum);\n    const right = n - sum - left;\n    return (\n      judge(node.left, ((sum - 1) >> 1) + left, m >> 1) &&\n      judge(node.right, ((sum - 1) >> 1) + right, m >> 1)\n    );\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(c,{demos:t})}}}]);