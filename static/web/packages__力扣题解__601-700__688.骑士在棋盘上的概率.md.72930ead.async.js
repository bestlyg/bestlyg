(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[70928],{65115:function(n,e,l){"use strict";l.r(e);var t=l(96832),o=l(22131),r=l(89730),c=t.memo((n=>{n.demos;return t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"688-\u9a91\u58eb\u5728\u68cb\u76d8\u4e0a\u7684\u6982\u7387"},t.createElement(o.AnchorLink,{to:"#688-\u9a91\u58eb\u5728\u68cb\u76d8\u4e0a\u7684\u6982\u7387","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"688. \u9a91\u58eb\u5728\u68cb\u76d8\u4e0a\u7684\u6982\u7387"),t.createElement("blockquote",null,t.createElement("p",null,"\u94fe\u63a5\uff1a",t.createElement(o.Link,{to:"https://leetcode-cn.com/problems/knight-probability-in-chessboard/"},"688. \u9a91\u58eb\u5728\u68cb\u76d8\u4e0a\u7684\u6982\u7387"),t.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",t.createElement("br",null),"\u6807\u7b7e\uff1a\u52a8\u6001\u89c4\u5212",t.createElement("br",null),"\u7b80\u4ecb\uff1a\u8fd4\u56de \u9a91\u58eb\u5728\u68cb\u76d8\u505c\u6b62\u79fb\u52a8\u540e\u4ecd\u7559\u5728\u68cb\u76d8\u4e0a\u7684\u6982\u7387 \u3002")),t.createElement("h2",{id:"\u9898\u89e3-1---c"},t.createElement(o.AnchorLink,{to:"#\u9898\u89e3-1---c","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - c++"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.02.17"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a5.8MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac++"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u52a8\u6001\u89c4\u5212\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u7684\u6982\u7387\u3002")),t.createElement(r.Z,{code:"int dirs[8][2] = {{-1, -2}, {-1, 2}, {-2, -1}, {-2, 1},\n          {1, 2},   {1, -2}, {2, 1},   {2, -1}};\nclass Solution {\n  public:\n   double knightProbability(int n, int k, int row, int column) {\n       double table[2][n][n], ans = 0;\n       memset(table, 0, sizeof(double) * 2 * n * n);\n       table[0][row][column] = 1;\n       for (int i = 0; i < k; i++) {\n           int idx = i & 1, nidx = (i + 1) & 1;\n           memset(table[nidx], 0, sizeof(double) * n * n);\n           for (int row = 0; row < n; row++) {\n               for (int col = 0; col < n; col++) {\n                   if (table[idx][row][col] == 0) continue;\n                   for (int next = 0; next < 8; next++) {\n                       int nrow = row + dirs[next][0],\n                           ncol = col + dirs[next][1];\n                       if (nrow < 0 || nrow >= n || ncol < 0 || ncol >= n)\n                           continue;\n                       table[nidx][nrow][ncol] +=\n                           1.0 / 8 * table[idx][row][col];\n                   }\n               }\n           }\n       }\n       for (int row = 0; row < n; row++) {\n           for (int col = 0; col < n; col++) {\n               if (table[k & 1][row][col]) ans += table[k & 1][row][col];\n           }\n       }\n       return ans;\n   }\n};",lang:"cpp"})))}));e["default"]=n=>{var e=t.useContext(o.context),l=e.demos;return t.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&o.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),t.createElement(c,{demos:l})}}}]);