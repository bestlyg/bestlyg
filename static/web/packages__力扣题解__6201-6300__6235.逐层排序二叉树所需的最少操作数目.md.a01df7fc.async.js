(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[40946],{66743:function(e,n,t){"use strict";t.r(n);var l=t(96832),i=t(22131),a=t(89730),r=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"6235-\u9010\u5c42\u6392\u5e8f\u4e8c\u53c9\u6811\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee"},l.createElement(i.AnchorLink,{to:"#6235-\u9010\u5c42\u6392\u5e8f\u4e8c\u53c9\u6811\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"6235. \u9010\u5c42\u6392\u5e8f\u4e8c\u53c9\u6811\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(i.Link,{to:"https://leetcode.cn/problems/minimum-number-of-operations-to-sort-a-binary-tree-by-level/"},"6235. \u9010\u5c42\u6392\u5e8f\u4e8c\u53c9\u6811\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8fd4\u56de\u6bcf\u4e00\u5c42\u6309 \u4e25\u683c\u9012\u589e\u987a\u5e8f \u6392\u5e8f\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---cpp"},l.createElement(i.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.11.13"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a324ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a144.3MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1abfs\u540e\u904d\u5386\u6bcf\u884c\u7edf\u8ba1\u6b21\u6570\u3002")),l.createElement(a.Z,{code:"int m[100005] = {0};\nclass Solution {\npublic:\n    set<int> s;\n    vector<int> list;\n    int minimumOperations(TreeNode* root) {\n        queue<TreeNode*> q;\n        q.push(root);\n        int size = 1, ans = 0;\n        while (q.size()) {\n            TreeNode *node = q.front();\n            q.pop();\n            if (node->left) {\n                q.push(node->left);\n                int val = node->left->val;\n                m[val] = list.size();\n                list.push_back(val);\n                s.insert(val);\n            }\n            if (node->right) {\n                q.push(node->right);\n                int val = node->right->val;\n                m[val] = list.size();\n                list.push_back(val);\n                s.insert(val);\n            }\n            if (--size == 0) {\n                ans += check();\n                list.clear();\n                s.clear();\n                size = q.size();\n            }\n        }\n        return ans;\n    }\n    int check() {\n        if (list.empty()) return 0;\n        int cnt = 0, idx = 0;\n        for (auto &num : s) {\n            if (list[idx] != num) {\n                cnt++;\n                int next = m[num];\n                swap(list[idx], list[next]); \n                m[list[next]] = next;\n                m[num] = idx;\n            }\n            idx++;\n        }\n        return cnt;\n    }\n};",lang:"cpp"})))}));n["default"]=e=>{var n=l.useContext(i.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&i.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(r,{demos:t})}}}]);