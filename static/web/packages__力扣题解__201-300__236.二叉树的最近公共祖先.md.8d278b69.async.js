(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[87532],{57562:function(e,n,t){"use strict";t.r(n);var r=t(96832),o=t(22131),l=t(89730),a=r.memo((e=>{e.demos;return r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"236-\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"},r.createElement(o.AnchorLink,{to:"#236-\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"),r.createElement("blockquote",null,r.createElement("p",null,"\u94fe\u63a5\uff1a",r.createElement(o.Link,{to:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/"},"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"),r.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",r.createElement("br",null),"\u6807\u7b7e\uff1a\u6811",r.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002")),r.createElement("h2",{id:"\u9898\u89e3-1---javascript"},r.createElement(o.AnchorLink,{to:"#\u9898\u89e3-1---javascript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - javascript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.5.10"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a84ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a42.5MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajavascript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u901a\u8fc7 js \u7279\u6027\u7ed9\u6bcf\u4e2a\u8282\u70b9\u6dfb\u52a0 parent \u5c5e\u6027\uff0c\u904d\u5386\u662f\u5426\u6709\u76f8\u540c\u7236\u8282\u70b9\u8fdb\u884c\u5224\u65ad\u3002")),r.createElement(l.Z,{code:"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {TreeNode}\n */\nvar lowestCommonAncestor = function (root, p, q) {\n  function treeNodeInorder(node) {\n    if (node.left !== null) {\n      node.left.parent = node;\n      treeNodeInorder(node.left);\n    }\n    if (node.right !== null) {\n      node.right.parent = node;\n      treeNodeInorder(node.right);\n    }\n  }\n  treeNodeInorder(root);\n  root.parent = root;\n  let temp = p;\n  const queueP = [temp];\n  while (temp.parent !== root) {\n    queueP.push(temp.parent);\n    temp = temp.parent;\n  }\n  queueP.push(root);\n  temp = q;\n  const queueQ = [temp];\n  while (temp.parent !== root) {\n    queueQ.push(temp.parent);\n    temp = temp.parent;\n  }\n  queueQ.push(root);\n  for (const node of queueP) {\n    if (queueQ.includes(node)) return node;\n  }\n  return root;\n};",lang:"javascript"})))}));n["default"]=e=>{var n=r.useContext(o.context),t=n.demos;return r.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&o.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),r.createElement(a,{demos:t})}}}]);