(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[4613],{81822:function(e,n,l){"use strict";l.r(n);var t=l(96832),r=l(22131),o=l(89730),i=t.memo((e=>{e.demos;return t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"919-\u5b8c\u5168\u4e8c\u53c9\u6811\u63d2\u5165\u5668"},t.createElement(r.AnchorLink,{to:"#919-\u5b8c\u5168\u4e8c\u53c9\u6811\u63d2\u5165\u5668","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"919. \u5b8c\u5168\u4e8c\u53c9\u6811\u63d2\u5165\u5668"),t.createElement("blockquote",null,t.createElement("p",null,"\u94fe\u63a5\uff1a",t.createElement(r.Link,{to:"https://leetcode.cn/problems/complete-binary-tree-inserter/"},"919. \u5b8c\u5168\u4e8c\u53c9\u6811\u63d2\u5165\u5668"),t.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",t.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u8bbe\u8ba1\u3001\u4e8c\u53c9\u6811",t.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bbe\u8ba1\u4e00\u79cd\u7b97\u6cd5\uff0c\u5c06\u4e00\u4e2a\u65b0\u8282\u70b9\u63d2\u5165\u5230\u4e00\u4e2a\u5b8c\u6574\u7684\u4e8c\u53c9\u6811\u4e2d\uff0c\u5e76\u5728\u63d2\u5165\u540e\u4fdd\u6301\u5176\u5b8c\u6574\u3002")),t.createElement("h2",{id:"\u9898\u89e3-1---cpp"},t.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.07.25"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a2.1MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5229\u7528\u5b8c\u5168\u4e8c\u53c9\u6811\u7279\u6027\uff0c\u5217\u8868\u5feb\u901f\u67e5\u627e\u7236\u4eb2\u3002")),t.createElement(o.Z,{code:"class CBTInserter {\n   public:\n    TreeNode* root;\n    vector<TreeNode*> list;\n    CBTInserter(TreeNode* _root) {\n        this->root = _root;\n        queue<TreeNode*> q;\n        q.push(root);\n        list.push_back(root);\n        while (q.size()) {\n            TreeNode* node = q.front();\n            q.pop();\n            if (node->left) {\n                q.push(node->left);\n                list.push_back(node->left);\n            }\n            if (node->right) {\n                q.push(node->right);\n                list.push_back(node->right);\n            }\n        }\n    }\n    int insert(int val) {\n        int idx = list.size(), pidx = idx / 2 - (idx & 1 ? 0 : 1);\n        list.push_back(new TreeNode(val));\n        if (idx & 1)\n            list[pidx]->left = list[idx];\n        else\n            list[pidx]->right = list[idx];\n        return list[pidx]->val;\n    }\n    TreeNode* get_root() { return root; }\n};",lang:"cpp"}),t.createElement("h2",{id:"\u9898\u89e3-2---rust"},t.createElement(r.AnchorLink,{to:"#\u9898\u89e3-2---rust","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - rust"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.07.25"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a2.5MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1arust"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5229\u7528\u5b8c\u5168\u4e8c\u53c9\u6811\u7279\u6027\uff0c\u5217\u8868\u5feb\u901f\u67e5\u627e\u7236\u4eb2\u3002")),t.createElement(o.Z,{code:"use std::cell::RefCell;\nuse std::collections::VecDeque;\nuse std::rc::Rc;\nstruct CBTInserter {\n    root: Rc<RefCell<TreeNode>>,\n    list: RefCell<Vec<Rc<RefCell<TreeNode>>>>,\n}\nimpl CBTInserter {\n    fn new(root: Option<Rc<RefCell<TreeNode>>>) -> Self {\n        let root = root.unwrap();\n        let list: RefCell<Vec<Rc<RefCell<TreeNode>>>> = RefCell::new(Vec::new());\n        {\n            let mut list = list.borrow_mut();\n            let mut q: VecDeque<Rc<RefCell<TreeNode>>> = VecDeque::new();\n            q.push_back(root.clone());\n            list.push(root.clone());\n            while q.len() > 0 {\n                let node = q.pop_front().unwrap();\n                if node.as_ref().borrow().left.is_some() {\n                    q.push_back(node.as_ref().borrow().left.as_ref().unwrap().clone());\n                    list\n                        .push(node.as_ref().borrow().left.as_ref().unwrap().clone());\n                }\n                if node.as_ref().borrow().right.is_some() {\n                    q.push_back(node.as_ref().borrow().right.as_ref().unwrap().clone());\n                    list\n                        .push(node.as_ref().borrow().right.as_ref().unwrap().clone());\n                }\n            }\n        }\n        Self { root, list }\n    }\n    fn insert(&self, val: i32) -> i32 {\n        let mut list = self.list.borrow_mut();\n        let idx = list.len();\n        let pidx = if idx & 1 == 1 { idx / 2 } else { idx / 2 - 1 };\n        let node = Rc::new(RefCell::new(TreeNode::new(val)));\n        list.push(node.clone());\n        let mut parent = list.get(pidx).unwrap().as_ref().borrow_mut();\n        if idx & 1 == 1 {\n            parent.left = Some(node.clone());\n        } else {\n            parent.right = Some(node.clone());\n        }\n        parent.val\n    }\n    fn get_root(&self) -> Option<Rc<RefCell<TreeNode>>> {\n        Some(self.root.clone())\n    }\n}",lang:"rust"})))}));n["default"]=e=>{var n=t.useContext(r.context),l=n.demos;return t.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),t.createElement(i,{demos:l})}}}]);