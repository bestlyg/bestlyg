(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[98361],{93575:function(e,n,t){"use strict";t.r(n);var l=t(96832),i=t(22131),c=t(89730),m=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"801-\u4f7f\u5e8f\u5217\u9012\u589e\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570"},l.createElement(i.AnchorLink,{to:"#801-\u4f7f\u5e8f\u5217\u9012\u589e\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"801. \u4f7f\u5e8f\u5217\u9012\u589e\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(i.Link,{to:"https://leetcode.cn/problems/minimum-swaps-to-make-sequences-increasing/"},"801. \u4f7f\u5e8f\u5217\u9012\u589e\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6570\u7ec4\u3001\u52a8\u6001\u89c4\u5212",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8fd4\u56de \u4f7f nums1 \u548c nums2 \u4e25\u683c\u9012\u589e \u6240\u9700\u64cd\u4f5c\u7684\u6700\u5c0f\u6b21\u6570 \u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---cpp"},l.createElement(i.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.10.10"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a236ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a117.2MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1adp[i][0|1]\u8868\u793a i \u4e3a\u7ed3\u5c3e\u4e0b\u6807\u65f6\uff0c\u4ea4\u6362\u548c\u4e0d\u4ea4\u6362\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\u3002")),l.createElement(c.Z,{code:"class Solution {\npublic:\n    int minSwap(vector<int>& nums1, vector<int>& nums2) {\n        int n = nums1.size();\n        vector<vector<int>> dp(n, vector<int>(2, n));\n        dp[0][0] = 0;\n        dp[0][1] = 1;\n        for (int i = 1; i < n; i++) {\n            if (nums1[i - 1] < nums1[i] && nums2[i - 1] < nums2[i]) {\n                dp[i][0] = min(dp[i][0], dp[i - 1][0]);\n                dp[i][1] = min(dp[i][1], dp[i - 1][1] + 1);\n            }\n            if (nums1[i - 1] < nums2[i] && nums2[i - 1] < nums1[i]) {\n                dp[i][0] = min(dp[i][0], dp[i - 1][1]);\n                dp[i][1] = min(dp[i][1], dp[i - 1][0] + 1);\n            }\n        }\n        return min(dp[n - 1][0], dp[n - 1][1]);\n    }\n};",lang:"cpp"})))}));n["default"]=e=>{var n=l.useContext(i.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&i.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(m,{demos:t})}}}]);