(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[12012],{10995:function(n,e,t){"use strict";t.r(e);var i=t(96832),r=t(22131),a=t(89730),h=i.memo((n=>{n.demos;return i.createElement(i.Fragment,null,i.createElement("div",{className:"markdown"},i.createElement("h1",{id:"295-\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570"},i.createElement(r.AnchorLink,{to:"#295-\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"295. \u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570"),i.createElement("blockquote",null,i.createElement("p",null,"\u94fe\u63a5\uff1a",i.createElement(r.Link,{to:"https://leetcode-cn.com/problems/find-median-from-data-stream/"},"295. \u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570"),i.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",i.createElement("br",null),"\u6807\u7b7e\uff1a\u5806\u3001\u8bbe\u8ba1",i.createElement("br",null),"\u7b80\u4ecb\uff1a\u4e2d\u4f4d\u6570\u662f\u6709\u5e8f\u5217\u8868\u4e2d\u95f4\u7684\u6570\u3002\u5982\u679c\u5217\u8868\u957f\u5ea6\u662f\u5076\u6570\uff0c\u4e2d\u4f4d\u6570\u5219\u662f\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002")),i.createElement("h2",{id:"\u9898\u89e3-1---typescript"},i.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.04.10"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a272ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a58.5MB"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6784\u5efa\u5de6\u4fa7\u5927\u9876\u5806\u548c\u53f3\u4fa7\u5c0f\u9876\u5806\uff0c\u4e2d\u95f4\u503c\u4e3a\u5de6\u4fa7\u5806\u6700\u5927\u503c\u548c\u53f3\u4fa7\u5806\u6700\u5c0f\u503c\u7684\u6bd4\u8f83\u3002")),i.createElement(a.Z,{code:"class Heap<T> {\n  private arr: T[] = [];\n  get isEmpty() {\n    return this.size === 0;\n  }\n  get size() {\n    return this.arr.length;\n  }\n  get top() {\n    return this.arr[0];\n  }\n  constructor(private compare: (t1: T, t2: T) => number) {}\n  add(num: T): void {\n    this.arr.push(num);\n    this.shiftUp(this.size - 1);\n  }\n  remove(): T {\n    const num = this.arr.shift()!;\n    if (this.size) {\n      this.arr.unshift(this.arr.pop()!);\n      this.shiftDown(0);\n    }\n    return num;\n  }\n  private shiftUp(index: number): void {\n    if (index === 0) return;\n    const parentIndex = (index - 1) >> 1;\n    if (this.compare(this.arr[index], this.arr[parentIndex]) > 0) {\n      [this.arr[index], this.arr[parentIndex]] = [this.arr[parentIndex], this.arr[index]];\n      this.shiftUp(parentIndex);\n    }\n  }\n  private shiftDown(index: number): void {\n    let childrenIndex = index * 2 + 1;\n    if (childrenIndex > this.size - 1) return;\n    if (\n      childrenIndex + 1 <= this.size - 1 &&\n      this.compare(this.arr[childrenIndex + 1], this.arr[childrenIndex]) > 0\n    ) {\n      childrenIndex++;\n    }\n    if (this.compare(this.arr[childrenIndex], this.arr[index]) > 0) {\n      [this.arr[childrenIndex], this.arr[index]] = [this.arr[index], this.arr[childrenIndex]];\n      this.shiftDown(childrenIndex);\n    }\n  }\n}\n\nclass MedianFinder {\n  private leftHeap = new Heap<number>((num1: number, num2: number) => num1 - num2);\n  private rightHeap = new Heap<number>((num1: number, num2: number) => num2 - num1);\n  get size() {\n    return this.leftHeap.size + this.rightHeap.size;\n  }\n  addNum(num: number): void {\n    if (!this.leftHeap.size || this.leftHeap.top >= num) {\n      this.leftHeap.add(num);\n    } else {\n      this.rightHeap.add(num);\n    }\n    if (this.leftHeap.size === this.rightHeap.size + 2) {\n      this.rightHeap.add(this.leftHeap.remove());\n    } else if (this.leftHeap.size === this.rightHeap.size - 1) {\n      this.leftHeap.add(this.rightHeap.remove());\n    }\n  }\n  findMedian(): number {\n    if (this.size % 2 === 0) {\n      return (this.leftHeap.top + this.rightHeap.top) / 2;\n    } else {\n      return this.leftHeap.top;\n    }\n  }\n}",lang:"typescript"}),i.createElement("h2",{id:"\u9898\u89e3-2---typescript"},i.createElement(r.AnchorLink,{to:"#\u9898\u89e3-2---typescript","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - typescript"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.08.27"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a1648ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a68.1mb"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6784\u5efa\u5de6\u4fa7\u5927\u9876\u5806\uff0c\u53f3\u4fa7\u5c0f\u9876\u5806\uff0c\u5feb\u901f\u53d6\u4e2d\u503c\u3002")),i.createElement(a.Z,{code:"class Heap<T> {\n  private arr: T[] = [];\n  get isEmpty() {\n    return this.size === 0;\n  }\n  get size() {\n    return this.arr.length;\n  }\n  get top() {\n    return this.arr[0];\n  }\n  constructor(private compare: (t1: T, t2: T) => number) {}\n  add(num: T): void {\n    this.arr.push(num);\n    this.shiftUp(this.size - 1);\n  }\n  remove(): T {\n    const num = this.arr.shift()!;\n    if (this.size) {\n      this.arr.unshift(this.arr.pop()!);\n      this.shiftDown(0);\n    }\n    return num;\n  }\n  private shiftUp(index: number): void {\n    if (index === 0) return;\n    const parentIndex = (index - 1) >> 1;\n    if (this.compare(this.arr[index], this.arr[parentIndex]) > 0) {\n      [this.arr[index], this.arr[parentIndex]] = [this.arr[parentIndex], this.arr[index]];\n      this.shiftUp(parentIndex);\n    }\n  }\n  private shiftDown(index: number): void {\n    let childrenIndex = index * 2 + 1;\n    if (childrenIndex > this.size - 1) return;\n    if (\n      childrenIndex + 1 <= this.size - 1 &&\n      this.compare(this.arr[childrenIndex + 1], this.arr[childrenIndex]) > 0\n    ) {\n      childrenIndex++;\n    }\n    if (this.compare(this.arr[childrenIndex], this.arr[index]) > 0) {\n      [this.arr[childrenIndex], this.arr[index]] = [this.arr[index], this.arr[childrenIndex]];\n      this.shiftDown(childrenIndex);\n    }\n  }\n}\nclass MedianFinder {\n  left = new Heap<number>((t1, t2) => t1 - t2);\n  right = new Heap<number>((t1, t2) => t2 - t1);\n  get cnt() {\n    return this.left.size + this.right.size;\n  }\n  addNum(num: number): void {\n    if (this.left.size === 0 && this.right.size === 0) {\n      this.left.add(num);\n    } else if (this.left.top < num) {\n      this.right.add(num);\n    } else {\n      this.left.add(num);\n    }\n    if (this.right.size + 1 > this.left.size) this.left.add(this.right.remove());\n    if (this.left.size - 1 > this.right.size) this.right.add(this.left.remove());\n  }\n  findMedian(): number {\n    return this.cnt % 2 === 0 ? (this.left.top + this.right.top) / 2 : this.left.top;\n  }\n}",lang:"typescript"}),i.createElement("h2",{id:"\u9898\u89e3-3---c"},i.createElement(r.AnchorLink,{to:"#\u9898\u89e3-3---c","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 3 - c"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.11.28"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a376ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a83mb"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5806\u3002")),i.createElement(a.Z,{code:'#define swap(a, b)              \\\n    {                           \\\n        __typeof(a) __temp = a; \\\n        a = b;                  \\\n        b = __temp;             \\\n    }\n\ntypedef struct\n{\n    int size, len, *data;\n    int(*comp)(int, int);\n} Heap;\nHeap *heap_create(int len, int (*comp)(int, int))\n{\n    Heap *h = (Heap *)malloc(sizeof(Heap));\n    h->comp = comp;\n    h->len = len;\n    h->size = 0;\n    h->data = (int *)malloc(sizeof(int) * len);\n    return h;\n}\nvoid heap_free(Heap *h)\n{\n    if (!h)\n        return;\n    free(h->data);\n    free(h);\n}\nvoid heap_shift_up(Heap *h, int idx)\n{\n    while (idx)\n    {\n        int p = (idx - 1) / 2;\n        if (h->comp(h->data[idx], h->data[p]) > 0)\n        {\n            swap(h->data[p], h->data[idx]);\n            idx = p;\n        }\n        else\n            break;\n    }\n}\nvoid heap_shift_down(Heap *h, int idx)\n{\n    while (idx * 2 + 1 < h->size)\n    {\n        int child = idx;\n        if (h->comp(h->data[child], h->data[idx * 2 + 1]) < 0)\n        {\n            child = idx * 2 + 1;\n        }\n        if (\n            idx * 2 + 2 < h->len && h->comp(h->data[child], h->data[idx * 2 + 2]) < 0)\n        {\n            child = idx * 2 + 2;\n        }\n        if (child == idx)\n            break;\n        swap(h->data[idx], h->data[child]);\n        idx = child;\n    }\n}\nint heap_remove(Heap *h)\n{\n    if (!h || h->size == 0)\n        return -1;\n    int val = h->data[0];\n    h->data[0] = h->data[--h->size];\n    heap_shift_down(h, 0);\n    return val;\n}\nint heap_add(Heap *h, int val)\n{\n    if (!h || h->len == h->size)\n        return 0;\n    h->data[h->size] = val;\n    heap_shift_up(h, h->size++);\n    return val;\n}\nint heap_top(Heap *h)\n{\n    if (!h || h->size == 0)\n        return -1;\n    return h->data[0];\n}\nvoid heap_show(Heap *h)\n{\n#ifdef DEBUG\n    printf("Heap : [");\n    for (int i = 0; i < h->len; i++)\n    {\n        if (!h->data[i])\n            continue;\n        i != 0 && printf(",");\n        printf("%d", h->data[i]);\n    }\n    printf("]\\n");\n#endif\n}\n\nint comp1(int a, int b)\n{\n    return a - b;\n}\nint comp2(int a, int b)\n{\n    return b- a;\n}\n\ntypedef struct {\n    Heap *h1, *h2;\n} MedianFinder;\n\n#define MAX 200000\nMedianFinder* medianFinderCreate() {\n    MedianFinder *o = (MedianFinder *)malloc(sizeof(MedianFinder));\n    o->h1 = heap_create(MAX, comp1);\n    o->h2 = heap_create(MAX, comp2);\n    return o;\n}\n\nvoid medianFinderAddNum(MedianFinder* obj, int num) {\n    if(obj->h1->size == 0 || num <= heap_top(obj->h1)) {\n        heap_add(obj->h1, num);\n        if (obj->h1->size > obj->h2->size + 1) heap_add(obj->h2, heap_remove(obj->h1));\n    }\n    else {\n        heap_add(obj->h2, num);\n        if (obj->h2->size > obj->h1->size) heap_add(obj->h1, heap_remove(obj->h2));\n    }\n}\n\ndouble medianFinderFindMedian(MedianFinder* obj) {\n    if((obj->h1->size + obj->h2->size) & 1) return heap_top(obj->h1);\n    else return (heap_top(obj->h1) + heap_top(obj->h2)) / 2.0;\n}\n\nvoid medianFinderFree(MedianFinder* obj) {\n    heap_free(obj->h1);\n    heap_free(obj->h2);\n    free(obj);\n}',lang:"c"})))}));e["default"]=n=>{var e=i.useContext(r.context),t=e.demos;return i.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),i.createElement(h,{demos:t})}}}]);