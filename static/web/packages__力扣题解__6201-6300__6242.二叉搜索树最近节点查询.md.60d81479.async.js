(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[18847],{31556:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),i=t(89730),o=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"6242-\u4e8c\u53c9\u641c\u7d22\u6811\u6700\u8fd1\u8282\u70b9\u67e5\u8be2"},l.createElement(r.AnchorLink,{to:"#6242-\u4e8c\u53c9\u641c\u7d22\u6811\u6700\u8fd1\u8282\u70b9\u67e5\u8be2","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"6242. \u4e8c\u53c9\u641c\u7d22\u6811\u6700\u8fd1\u8282\u70b9\u67e5\u8be2"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode.cn/problems/closest-nodes-queries-in-a-binary-search-tree/"},"6242. \u4e8c\u53c9\u641c\u7d22\u6811\u6700\u8fd1\u8282\u70b9\u67e5\u8be2"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u4f60\u4e00\u4e2a \u4e8c\u53c9\u641c\u7d22\u6811 \u7684\u6839\u8282\u70b9 root \uff0c\u548c\u4e00\u4e2a\u7531\u6b63\u6574\u6570\u7ec4\u6210\u3001\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 queries \u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---cpp"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.11.20"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a308ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a150.5MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1abs\u3002")),l.createElement(i.Z,{code:'// bestlyg\n# define X first\n# define Y second\n# define lb(x) ((x) & (-x))\n# define mem(a,b) memset(a,b,sizeof(a))\n# define debug freopen("r.txt","r",stdin)\n# define pi pair<int,int>\n\n#ifdef DEBUG\n#define log(frm, args...) {    printf(frm, ##args);}\n#else\n#define log(frm, args...)\n#endif\n\ntypedef long long ll;\n\nusing namespace std;\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> list;\n    vector<vector<int>> ans;\n    vector<vector<int>> closestNodes(TreeNode* root, vector<int>& queries) {\n        dfs(root);\n        for (auto &q : queries) {\n            vector<int> item(2);\n            item[0] = find1(q);\n            item[1] = find2(q);\n            ans.push_back(item);\n        }\n        return ans;\n    }\n    void dfs(TreeNode *node) {\n        if (!node) return;\n        dfs(node->left);\n        list.push_back(node->val);\n        dfs(node->right);\n    }\n    int find1(int q) {\n        int l = -1, r = list.size() - 1, m;\n        while (l < r) {\n            m = (l + r + 1) / 2;\n            if (list[m] > q) r = m - 1;\n            else l = m;\n        }\n        if (l == -1) return l;\n        return list[l];\n    }\n\n    int find2(int q) {\n        int l = 0, r = list.size(), m;\n        while (l < r) {\n            m = (l + r) / 2;\n            if (list[m] >= q) r = m;\n            else l = m + 1;\n        }\n        if (l == list.size()) return -1;\n        return list[l];\n    }\n};',lang:"cpp"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(o,{demos:t})}}}]);