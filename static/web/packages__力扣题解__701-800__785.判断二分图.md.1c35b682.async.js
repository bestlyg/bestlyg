(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[34650],{30700:function(e,n,l){"use strict";l.r(n);var o=l(96832),r=l(22131),t=l(89730),c=o.memo((e=>{e.demos;return o.createElement(o.Fragment,null,o.createElement("div",{className:"markdown"},o.createElement("h1",{id:"785-\u5224\u65ad\u4e8c\u5206\u56fe"},o.createElement(r.AnchorLink,{to:"#785-\u5224\u65ad\u4e8c\u5206\u56fe","aria-hidden":"true",tabIndex:-1},o.createElement("span",{className:"icon icon-link"})),"785. \u5224\u65ad\u4e8c\u5206\u56fe"),o.createElement("blockquote",null,o.createElement("p",null,"\u94fe\u63a5\uff1a",o.createElement(r.Link,{to:"https://leetcode-cn.com/problems/is-graph-bipartite/"},"785. \u5224\u65ad\u4e8c\u5206\u56fe"),o.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",o.createElement("br",null),"\u6807\u7b7e\uff1a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u56fe",o.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe graph\uff0c\u5f53\u8fd9\u4e2a\u56fe\u4e3a\u4e8c\u5206\u56fe\u65f6\u8fd4\u56de true\u3002")),o.createElement("h2",{id:"\u9898\u89e3-1---typescript"},o.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},o.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),o.createElement("ul",null,o.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.7.16"),o.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a84ms"),o.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a38MB"),o.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),o.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u904d\u5386\u540e\u91c7\u53d6\u7ea2\u7eff\u5237\u8272\u3002")),o.createElement(t.Z,{code:"function isBipartite(graph: number[][]): boolean {\n  enum Color {\n    red,\n    green,\n    none,\n  }\n  const len = graph.length;\n  let valid = true;\n  const colors = new Array<Color>(len).fill(Color.none);\n  for (let i = 0; i < len && valid; i++) {\n    colors[i] === Color.none && dfs(i, Color.red);\n  }\n  return valid;\n  function dfs(node: number, color: Color): void {\n    colors[node] = color;\n    const newColor = color === Color.red ? Color.green : Color.red;\n    for (const neighbor of graph[node]) {\n      if (colors[neighbor] === Color.none) {\n        dfs(neighbor, newColor);\n        if (!valid) return;\n      } else if (colors[neighbor] !== newColor) {\n        valid = false;\n        return;\n      }\n    }\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=o.useContext(r.context),l=n.demos;return o.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),o.createElement(c,{demos:l})}}}]);