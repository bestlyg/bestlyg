(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[3633],{95957:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),a=t(89730),i=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"622-\u8bbe\u8ba1\u5faa\u73af\u961f\u5217"},l.createElement(r.AnchorLink,{to:"#622-\u8bbe\u8ba1\u5faa\u73af\u961f\u5217","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"622. \u8bbe\u8ba1\u5faa\u73af\u961f\u5217"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/design-circular-queue/"},"622. \u8bbe\u8ba1\u5faa\u73af\u961f\u5217"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u8bbe\u8ba1\u3001\u961f\u5217",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bbe\u8ba1\u4f60\u7684\u5faa\u73af\u961f\u5217\u5b9e\u73b0\u3002 \u5faa\u73af\u961f\u5217\u662f\u4e00\u79cd\u7ebf\u6027\u6570\u636e\u7ed3\u6784\uff0c\u5176\u64cd\u4f5c\u8868\u73b0\u57fa\u4e8e FIFO\uff08\u5148\u8fdb\u5148\u51fa\uff09\u539f\u5219\u5e76\u4e14\u961f\u5c3e\u88ab\u8fde\u63a5\u5728\u961f\u9996\u4e4b\u540e\u4ee5\u5f62\u6210\u4e00\u4e2a\u5faa\u73af\u3002\u5b83\u4e5f\u88ab\u79f0\u4e3a\u201c\u73af\u5f62\u7f13\u51b2\u5668\u201d\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.3.14"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a172ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a45.1MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5229\u7528 js \u7279\u6027\u76f4\u63a5\u6784\u5efa\u6570\u7ec4\u3002")),l.createElement(a.Z,{code:"function copyRandomList(head: Node | null): Node | null {\n  if (head === null) return null;\n  let p: Node | null = head;\n  while (p !== null) {\n    p.next = new Node(p.val, p.next, p.random);\n    p = p.next.next;\n  }\n  p = head.next;\n  while (p) {\n    if (p.random) p.random = p.random!.next;\n    p = p.next?.next ?? null;\n  }\n  const newHead: Node | null = head.next;\n  p = head;\n  while (p) {\n    const q: Node = p.next!;\n    p.next = q.next;\n    q.next = q.next?.next ?? null;\n    p = p.next;\n  }\n  return newHead;\n}",lang:"typescript"}),l.createElement("h2",{id:"\u9898\u89e3-2---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-2---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.3.14"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a152ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a45.4mb"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u521b\u5efa\u5934\u5c3e\u6307\u9488\u63a7\u5236\u3002")),l.createElement(a.Z,{code:"class MyCircularQueue {\n  private arr: number[];\n  private head = 0;\n  private rear = 0;\n  private count = 0;\n  constructor(private k: number) {\n    this.arr = new Array(k);\n  }\n  enQueue(value: number): boolean {\n    if (this.isFull()) return false;\n    this.arr[this.rear] = value;\n    this.rear = (this.rear + 1) % this.k;\n    this.count++;\n    return true;\n  }\n  deQueue(): boolean {\n    if (this.isEmpty()) return false;\n    this.head = (this.head + 1) % this.k;\n    this.count--;\n    return true;\n  }\n  Front(): number {\n    if (this.isEmpty()) return -1;\n    return this.arr[this.head];\n  }\n  Rear(): number {\n    if (this.isEmpty()) return -1;\n    return this.arr[this.rear === 0 ? this.k - 1 : this.rear - 1];\n  }\n  isEmpty(): boolean {\n    return this.count === 0;\n  }\n  isFull(): boolean {\n    return this.count === this.k;\n  }\n}",lang:"typescript"}),l.createElement("h2",{id:"\u9898\u89e3-3---c"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-3---c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 3 - c++"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.03.03"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a20ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a16.3MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac++"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u53cc\u6307\u9488\u3002")),l.createElement(a.Z,{code:"class MyCircularQueue {\n   public:\n    int head, tail, *list, n;\n    MyCircularQueue(int k) : head(0), tail(0), n(k + 1) {\n        list = ((int *)malloc(sizeof(int) * n));\n    }\n    ~MyCircularQueue() { free(list); }\n    bool enQueue(int value) {\n        if (isFull()) return 0;\n        list[tail] = value;\n        tail = (tail + 1) % n;\n        return 1;\n    }\n    bool deQueue() {\n        if (isEmpty()) return 0;\n        head = (head + 1) % n;\n        return 1;\n    }\n    int Front() {\n        if (isEmpty()) return -1;\n        return list[head];\n    }\n    int Rear() {\n        if (isEmpty()) return -1;\n        return list[tail == 0 ? n - 1 : tail - 1];\n    }\n    bool isEmpty() { return head == tail; }\n    bool isFull() { return (tail + 1) % n == head; }\n};",lang:"cpp"}),l.createElement("h2",{id:"\u9898\u89e3-4---rust"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-4---rust","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 4 - rust"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.08.02"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a4ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a2.3MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1arust"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1aqueue\u3002")),l.createElement(a.Z,{code:"struct MyCircularQueue {\n    list: Vec<i32>,\n    max: usize,\n    head: usize,\n    rear: usize,\n}\nimpl MyCircularQueue {\n    fn new(k: i32) -> Self {\n        let max = (k + 1) as usize;\n        let mut list = Vec::with_capacity(max);\n        for _ in 0..max {\n            list.push(0);\n        }\n        MyCircularQueue {\n            max,\n            list,\n            head: 0,\n            rear: 0,\n        }\n    }\n\n    fn en_queue(&mut self, value: i32) -> bool {\n        if self.is_full() {\n            false\n        } else {\n            self.list[self.rear] = value;\n            self.rear = (self.rear + 1) % self.max;\n            true\n        }\n    }\n\n    fn de_queue(&mut self) -> bool {\n        if self.is_empty() {\n            false\n        } else {\n            self.head = (self.head + 1) % self.max;\n            true\n        }\n    }\n\n    fn front(&self) -> i32 {\n        if self.is_empty() {\n            -1\n        } else {\n            *self.list.get(self.head).unwrap()\n        }\n    }\n\n    fn rear(&self) -> i32 {\n        if self.is_empty() {\n            -1\n        } else {\n            let rear = if self.rear == 0 {\n                self.max - 1\n            } else {\n                self.rear - 1\n            };\n            *self.list.get(rear).unwrap()\n        }\n    }\n\n    fn is_empty(&self) -> bool {\n        self.rear == self.head\n    }\n\n    fn is_full(&self) -> bool {\n        (self.rear + 1) % self.max == self.head\n    }\n}",lang:"rust"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(i,{demos:t})}}}]);