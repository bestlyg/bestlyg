(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[90148],{89703:function(e,n,t){"use strict";t.r(n);var o=t(96832),l=t(22131),d=t(89730),i=o.memo((e=>{e.demos;return o.createElement(o.Fragment,null,o.createElement("div",{className:"markdown"},o.createElement("h1",{id:"1206-\u8bbe\u8ba1\u8df3\u8868"},o.createElement(l.AnchorLink,{to:"#1206-\u8bbe\u8ba1\u8df3\u8868","aria-hidden":"true",tabIndex:-1},o.createElement("span",{className:"icon icon-link"})),"1206. \u8bbe\u8ba1\u8df3\u8868"),o.createElement("blockquote",null,o.createElement("p",null,"\u94fe\u63a5\uff1a",o.createElement(l.Link,{to:"https://leetcode.cn/problems/design-skiplist/"},"1206. \u8bbe\u8ba1\u8df3\u8868"),o.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",o.createElement("br",null),"\u6807\u7b7e\uff1a\u8bbe\u8ba1\u3001\u94fe\u8868",o.createElement("br",null),"\u7b80\u4ecb\uff1a\u4e0d\u4f7f\u7528\u4efb\u4f55\u5e93\u51fd\u6570\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u8df3\u8868 \u3002")),o.createElement("h2",{id:"\u9898\u89e3-1---cpp"},o.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},o.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),o.createElement("ul",null,o.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.07.26"),o.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a516ms"),o.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a28.1MB"),o.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),o.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6784\u9020\u8df3\u8868\u3002")),o.createElement(d.Z,{code:"class Node {\n   public:\n    int key, cnt;\n    Node *next, *skip_next;\n    Node(int _key) {\n        key = _key;\n        cnt = 1;\n        next = skip_next = nullptr;\n    }\n};\n\nclass Skiplist {\n   public:\n    Node *head;\n    Skiplist() { head = new Node(0); }\n    bool search(int target) {\n        Node *node = head->next;\n        while (node && node->key < target) {\n            if (node->skip_next && node->skip_next->key < target)\n                node = node->skip_next;\n            else\n                node = node->next;\n        }\n        return node && node->key == target;\n    }\n    void add(int num) {\n        Node *node = head->next, *prev = head;\n        while (node && node->key < num) {\n            prev = node;\n            if (node->skip_next && node->skip_next->key < num)\n                node = node->skip_next;\n            else\n                node = node->next;\n        }\n        if (node && node->key == num)\n            node->cnt++;\n        else {\n            Node *next = new Node(num);\n            next->next = node;\n            prev->next = next;\n            maintain_skip();\n        }\n    }\n    bool erase(int num) {\n        Node *node = head->next, *prev = head;\n        while (node && node->key < num) {\n            prev = node;\n            if (node->skip_next && node->skip_next->key < num)\n                node = node->skip_next;\n            else\n                node = node->next;\n        }\n        if (!node || node->key != num) return false;\n        if (node->cnt > 1)\n            node->cnt--;\n        else {\n            prev->next = node->next;\n            maintain_skip();\n            delete node;\n        }\n        return true;\n    }\n    void maintain_skip() {\n        bool check = true;\n        Node *node = head->next;\n        while (node) {\n            if (check && node->next && node->next->next) {\n                node->skip_next = node->next->next;\n            } else {\n                node->skip_next = nullptr;\n            }\n            node = node->next;\n        }\n    }\n};",lang:"cpp"})))}));n["default"]=e=>{var n=o.useContext(l.context),t=n.demos;return o.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),o.createElement(i,{demos:t})}}}]);