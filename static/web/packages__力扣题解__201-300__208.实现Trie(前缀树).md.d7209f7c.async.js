(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[54355],{35652:function(e,n,t){"use strict";t.r(n);var r=t(96832),i=t(22131),l=t(89730),o=r.memo((e=>{e.demos;return r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"208-\u5b9e\u73b0-trie-\u524d\u7f00\u6811"},r.createElement(i.AnchorLink,{to:"#208-\u5b9e\u73b0-trie-\u524d\u7f00\u6811","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811)"),r.createElement("blockquote",null,r.createElement("p",null,"\u94fe\u63a5\uff1a",r.createElement(i.Link,{to:"https://leetcode-cn.com/problems/implement-trie-prefix-tree/"},"208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811)"),r.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",r.createElement("br",null),"\u6807\u7b7e\uff1a\u8bbe\u8ba1\u3001\u5b57\u5178\u6811",r.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bf7\u4f60\u5b9e\u73b0 Trie \u7c7b\u3002")),r.createElement("h2",{id:"\u9898\u89e3-1---typescript"},r.createElement(i.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.04.14"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a248ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a55.5MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6784\u5efa\u524d\u7f00\u6811\u3002")),r.createElement(l.Z,{code:"class Trie {\n  private children = new Map<string, Trie>();\n  constructor(public char = '', public end = false) {}\n  insert(word: string): void {\n    if (word === '') {\n      this.end = true;\n      return;\n    }\n    const first = word[0];\n    let nextTrieNode = this.children.get(first);\n    if (!nextTrieNode)\n      this.children.set(first, (nextTrieNode = new Trie(first, word.length === 1)));\n    nextTrieNode.insert(word.substr(1));\n  }\n  search(word: string): boolean {\n    if (word === '') return this.end;\n    return !!this.children.get(word[0])?.search(word.substr(1));\n  }\n  startsWith(prefix: string): boolean {\n    if (prefix.length === 1) return this.children.has(prefix);\n    return !!this.children.get(prefix[0])?.startsWith(prefix.substr(1));\n  }\n}",lang:"typescript"}),r.createElement("h2",{id:"\u9898\u89e3-2---typescript"},r.createElement(i.AnchorLink,{to:"#\u9898\u89e3-2---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.10.25"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a196ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a56.4mb"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6570\u7ec4\u6784\u5efa trie\u3002")),r.createElement(l.Z,{code:"const MAX_COUNT = 26;\nconst getIdx = (ch: string) => ch.codePointAt(0)! - 'a'.codePointAt(0)!;\nclass TrieNode {\n  end = false;\n  children: TrieNode[] = new Array(MAX_COUNT);\n  constructor(public val: string) {}\n}\nclass Trie {\n  root = new TrieNode('');\n  insert(word: string): void {\n    let node = this.root;\n    for (const ch of word) {\n      const idx = getIdx(ch);\n      if (!node.children[idx]) node.children[idx] = new TrieNode(ch);\n      node = node.children[idx];\n    }\n    node.end = true;\n  }\n  findNode(word: string): TrieNode | null {\n    let node = this.root;\n    for (const ch of word) {\n      const idx = getIdx(ch);\n      if (!node.children[idx]) return null;\n      node = node.children[idx];\n    }\n    return node;\n  }\n  search(word: string): boolean {\n    return !!this.findNode(word)?.end;\n  }\n  startsWith(prefix: string): boolean {\n    return !!this.findNode(prefix);\n  }\n}",lang:"typescript"}),r.createElement("h2",{id:"\u9898\u89e3-3---typescript"},r.createElement(i.AnchorLink,{to:"#\u9898\u89e3-3---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 3 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.10.25"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a244ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a55mb"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6784\u5efa trie\u3002")),r.createElement(l.Z,{code:"class TrieNode {\n  end = false;\n  children: Record<string, TrieNode> = {};\n  constructor(public val: string) {}\n}\nclass Trie {\n  private root = new TrieNode('');\n  insert(word: string): void {\n    let node = this.root;\n    for (const ch of word) {\n      if (!node.children[ch]) node.children[ch] = new TrieNode(ch);\n      node = node.children[ch];\n    }\n    node.end = true;\n  }\n  private findNode(word: string): TrieNode | null {\n    let node = this.root;\n    for (const ch of word) {\n      if (!node.children[ch]) return null;\n      node = node.children[ch];\n    }\n    return node;\n  }\n  search(word: string): boolean {\n    return !!this.findNode(word)?.end;\n  }\n  startsWith(prefix: string): boolean {\n    return !!this.findNode(prefix);\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=r.useContext(i.context),t=n.demos;return r.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&i.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),r.createElement(o,{demos:t})}}}]);