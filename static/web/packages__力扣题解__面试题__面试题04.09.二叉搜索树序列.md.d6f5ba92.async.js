(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[89870],{90218:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),o=t(89730),i=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"\u9762\u8bd5\u9898-0409-\u4e8c\u53c9\u641c\u7d22\u6811\u5e8f\u5217"},l.createElement(r.AnchorLink,{to:"#\u9762\u8bd5\u9898-0409-\u4e8c\u53c9\u641c\u7d22\u6811\u5e8f\u5217","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9762\u8bd5\u9898 04.09. \u4e8c\u53c9\u641c\u7d22\u6811\u5e8f\u5217"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/bst-sequences-lcci/"},"\u9762\u8bd5\u9898 04.09. \u4e8c\u53c9\u641c\u7d22\u6811\u5e8f\u5217"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u4e8c\u53c9\u641c\u7d22\u6811\u3001\u52a8\u6001\u89c4\u5212\u3001\u4e8c\u53c9\u6811",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u4ece\u5de6\u5411\u53f3\u904d\u5386\u4e00\u4e2a\u6570\u7ec4\uff0c\u901a\u8fc7\u4e0d\u65ad\u5c06\u5176\u4e2d\u7684\u5143\u7d20\u63d2\u5165\u6811\u4e2d\u53ef\u4ee5\u9010\u6b65\u5730\u751f\u6210\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u3002\u7ed9\u5b9a\u4e00\u4e2a\u7531\u4e0d\u540c\u8282\u70b9\u7ec4\u6210\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8f93\u51fa\u6240\u6709\u53ef\u80fd\u751f\u6210\u6b64\u6811\u7684\u6570\u7ec4\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.08.07"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a120ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a46.1MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u751f\u6210\u5de6\u53f3\u5b50\u6811\uff0c\u4fdd\u8bc1\u5de6\u53f3\u5b50\u6811\u987a\u5e8f\u4e0d\u53d8\u3002")),l.createElement(o.Z,{code:"function BSTSequences(root: TreeNode | null): number[][] {\n  if (root === null) return [[]];\n  if (root.left === null && root.right === null) return [[root.val]];\n  if (root.left !== null && root.right === null) {\n    const sub = BSTSequences(root.left);\n    return sub.map(v => [root.val, ...v]);\n  }\n  if (root.right !== null && root.left === null) {\n    const sub = BSTSequences(root.right);\n    return sub.map(v => [root.val, ...v]);\n  }\n  const subl = BSTSequences(root.left);\n  const subr = BSTSequences(root.right);\n  const ans: number[][] = [];\n  for (const l of subl) {\n    for (const r of subr) {\n      merge(l, 0, r, 0, [], root.val);\n    }\n  }\n  return ans;\n  function merge(\n    l: number[],\n    idxl: number,\n    r: number[],\n    idxr: number,\n    list: number[],\n    root: number\n  ): void {\n    if (l.length === idxl) {\n      for (let i = idxr; i < r.length; i++) list.push(r[i]);\n      list.unshift(root);\n      ans.push(list);\n      return;\n    }\n    if (r.length === idxr) {\n      for (let i = idxl; i < l.length; i++) list.push(l[i]);\n      list.unshift(root);\n      ans.push(list);\n      return;\n    }\n    merge(l, idxl + 1, r, idxr, [...list, l[idxl]], root);\n    merge(l, idxl, r, idxr + 1, [...list, r[idxr]], root);\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(i,{demos:t})}}}]);