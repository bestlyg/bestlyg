(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[55430],{54298:function(e,n,t){"use strict";t.r(n);var r=t(96832),i=t(22131),l=t(89730),s=r.memo((e=>{e.demos;return r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"14-\u6700\u957f\u516c\u5171\u524d\u7f00"},r.createElement(i.AnchorLink,{to:"#14-\u6700\u957f\u516c\u5171\u524d\u7f00","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"14. \u6700\u957f\u516c\u5171\u524d\u7f00"),r.createElement("blockquote",null,r.createElement("p",null,"\u94fe\u63a5\uff1a",r.createElement(i.Link,{to:"https://leetcode-cn.com/problems/longest-common-prefix/"},"14. \u6700\u957f\u516c\u5171\u524d\u7f00"),r.createElement("br",null),"\u96be\u5ea6\uff1a\u7b80\u5355",r.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",r.createElement("br",null),"\u6807\u7b7e\uff1a\u5b57\u7b26\u4e32",r.createElement("br",null),"\u7b80\u4ecb\uff1a\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002")),r.createElement("h2",{id:"\u9898\u89e3-1---typescript"},r.createElement(i.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.6.3"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a80ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a36.4MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5185\u90e8\u7528\u51fd\u6570\u5224\u65ad\u5934\u90e8\u91cd\u590d\u5b57\u7b26\u6570\u3002")),r.createElement(l.Z,{code:"function longestCommonPrefix(strs: string[]): string {\n  const len = strs.length;\n  if (len === 0) return '';\n  let commonS = strs[0];\n  for (let i = 1; i < len; i++) if ((commonS = comp(strs[i], commonS)) === '') return commonS;\n  return commonS;\n  function comp(s: string, commonS: string): string {\n    for (let i = 0, minLen = Math.min(s.length, commonS.length); i <= minLen; i++)\n      if (s[i] !== commonS[i]) return commonS.substring(0, i);\n    return commonS;\n  }\n}",lang:"typescript"}),r.createElement("h2",{id:"\u9898\u89e3-2---typescript"},r.createElement(i.AnchorLink,{to:"#\u9898\u89e3-2---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.6.15"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a84ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a37MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u7eb5\u5411\u5224\u65ad\u3002")),r.createElement(l.Z,{code:"function longestCommonPrefix(strs: string[]): string {\n  const len = strs.length;\n  if (len === 0) return '';\n  const commonPrefix = strs[0];\n  for (let i = 0, cl = commonPrefix.length; i < cl; i++)\n    for (const str of strs) if (commonPrefix[i] !== str[i]) return commonPrefix.substring(0, i);\n  return commonPrefix;\n}",lang:"typescript"}),r.createElement("h2",{id:"\u9898\u89e3-3---typescript"},r.createElement(i.AnchorLink,{to:"#\u9898\u89e3-3---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 3 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.10.16"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a80ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a40.4MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5b57\u5178\u6811\u3002")),r.createElement(l.Z,{code:"class TrieNode {\n  end = false;\n  children: Map<string, TrieNode> = new Map();\n  constructor(public val: string) {}\n}\nclass Trie {\n  private _size = 0;\n  get size() {\n    return this._size;\n  }\n  get empty() {\n    return this._size === 0;\n  }\n  private _root = new TrieNode('');\n  get root() {\n    return this._root;\n  }\n  clear() {\n    this._root = new TrieNode('');\n    this._size = 0;\n  }\n  add(str: string) {\n    return this._add(str);\n  }\n  private _add(str: string, node = this._root) {\n    if (str.length === 0) {\n      this._root.end = true;\n      this._size++;\n      return;\n    }\n    if (str.length === 1) {\n      let endNode = node.children.get(str);\n      if (!endNode) node.children.set(str, (endNode = new TrieNode(str)));\n      if (!endNode.end) {\n        endNode.end = true;\n        this._size++;\n      }\n      return;\n    }\n    const first = str[0];\n    let nextNode = node.children.get(first);\n    if (!nextNode) node.children.set(first, (nextNode = new TrieNode(first)));\n    const nextStr = str.substr(1);\n    this._add(nextStr, nextNode);\n  }\n  contains(str: string) {\n    const endNode = this.findEndNode(str);\n    return endNode ? endNode.end : false;\n  }\n  remove(str: string) {\n    const endNode = this.findEndNode(str);\n    if (endNode && endNode.end) {\n      endNode.end = false;\n      this._size--;\n    }\n  }\n  starsWith(str: string) {\n    return this.findEndNode(str) !== null;\n  }\n  private findEndNode(str: string, node = this._root): TrieNode | null {\n    if (str.length === 0) return this._root;\n    if (str.length === 1) return node.children.get(str) ?? null;\n    const first = str[0];\n    let nextNode = node.children.get(first);\n    if (!nextNode) return null;\n    const nextStr = str.substr(1);\n    return this.findEndNode(nextStr, nextNode);\n  }\n}\nfunction longestCommonPrefix(strs: string[]): string {\n  const trie = new Trie();\n  for (const str of strs) {\n    if (str === '') return '';\n    trie.add(str);\n  }\n  let node = trie.root;\n  let ans = '';\n  while (node.children.size === 1 && !node.end) {\n    ans += node.val;\n    node = [...node.children.values()][0];\n  }\n  ans += node.val;\n  return ans;\n}",lang:"typescript"}),r.createElement("h2",{id:"\u9898\u89e3-4---c"},r.createElement(i.AnchorLink,{to:"#\u9898\u89e3-4---c","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 4 - c++"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.12.20"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a4ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a9mb"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac++"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u904d\u5386\u6bcf\u4e00\u4f4d\u3002")),r.createElement(l.Z,{code:'class Solution {\n   public:\n    string longestCommonPrefix(vector<string>& strs) {\n        int n = strs.size();\n        int maxn = 200;\n        for (int i = 0; i < n; i++) {\n            if (strs[i].size() < maxn) maxn = strs[i].size();\n        }\n        string ans = "";\n        if (maxn == 0) return ans;\n        for (int i = 0; i < maxn; i++) {\n            char ch = strs[0][i];\n            for (int j = 1; j < n; j++) {\n                if (strs[j][i] != ch) return ans;\n            }\n            ans += ch;\n        }\n        return ans;\n    }\n};',lang:"cpp"})))}));n["default"]=e=>{var n=r.useContext(i.context),t=n.demos;return r.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&i.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),r.createElement(s,{demos:t})}}}]);