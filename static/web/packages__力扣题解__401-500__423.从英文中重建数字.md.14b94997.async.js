(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[28592],{65268:function(n,e,t){"use strict";t.r(e);var c=t(96832),i=t(22131),l=t(89730),r=c.memo((n=>{n.demos;return c.createElement(c.Fragment,null,c.createElement("div",{className:"markdown"},c.createElement("h1",{id:"423-\u4ece\u82f1\u6587\u4e2d\u91cd\u5efa\u6570\u5b57"},c.createElement(i.AnchorLink,{to:"#423-\u4ece\u82f1\u6587\u4e2d\u91cd\u5efa\u6570\u5b57","aria-hidden":"true",tabIndex:-1},c.createElement("span",{className:"icon icon-link"})),"423. \u4ece\u82f1\u6587\u4e2d\u91cd\u5efa\u6570\u5b57"),c.createElement("blockquote",null,c.createElement("p",null,"\u94fe\u63a5\uff1a",c.createElement(i.Link,{to:"https://leetcode-cn.com/problems/reconstruct-original-digits-from-english/"},"423. \u4ece\u82f1\u6587\u4e2d\u91cd\u5efa\u6570\u5b57"),c.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",c.createElement("br",null),"\u6807\u7b7e\uff1a\u54c8\u5e0c\u8868\u3001\u6570\u5b66\u3001\u5b57\u7b26\u4e32",c.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u5176\u4e2d\u5305\u542b\u5b57\u6bcd\u987a\u5e8f\u6253\u4e71\u7684\u7528\u82f1\u6587\u5355\u8bcd\u8868\u793a\u7684\u82e5\u5e72\u6570\u5b57\uff080-9\uff09\u3002\u6309 \u5347\u5e8f \u8fd4\u56de\u539f\u59cb\u7684\u6570\u5b57\u3002")),c.createElement("h2",{id:"\u9898\u89e3-1---typescript"},c.createElement(i.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},c.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),c.createElement("ul",null,c.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.11.24"),c.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a124ms"),c.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a41.3MB"),c.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),c.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5bf9\u4e8e\u6570\u5b57\u4e00\u6b21\u6392\u5e8f\u5220\u51cf\u3002")),c.createElement(l.Z,{code:"const dict: Record<number, string[]> = {\n  1: 'one'.split(''),\n  2: 'two'.split(''), // w\n  3: 'three'.split(''), //t\n  4: 'four'.split(''), // u\n  5: 'five'.split(''), // f\n  6: 'six'.split(''), // x\n  7: 'seven'.split(''), // v\n  8: 'eight'.split(''), // g\n  9: 'nine'.split(''), // i\n  0: 'zero'.split(''), // z\n};\nconst checkList = [\n  { num: 2, key: 'w' },\n  { num: 6, key: 'x' },\n  { num: 0, key: 'z' },\n  { num: 8, key: 'g' },\n  { num: 3, key: 't' },\n  { num: 4, key: 'u' },\n  { num: 5, key: 'f' },\n  { num: 7, key: 'v' },\n  { num: 9, key: 'i' },\n  { num: 1, key: 'o' },\n];\nfunction originalDigits(s: string): string {\n  const map: Record<string, number> = {};\n  for (const c of s) map[c] = (map[c] ?? 0) + 1;\n  const list: number[] = new Array(10).fill(0);\n  for (const { num, key } of checkList) {\n    if (!map[key]) continue;\n    const cnt = map[key];\n    list[num] += cnt;\n    for (const ch of dict[num]) map[ch] -= cnt;\n  }\n  return list.reduce((ans, cnt, num) => ans + num.toString().repeat(cnt), '');\n}",lang:"typescript"}),c.createElement("h2",{id:"\u9898\u89e3-2---c"},c.createElement(i.AnchorLink,{to:"#\u9898\u89e3-2---c","aria-hidden":"true",tabIndex:-1},c.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - c"),c.createElement("ul",null,c.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.11.24"),c.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a276ms"),c.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a6.3mb"),c.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac"),c.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5bf9\u4e8e\u6570\u5b57\u4e00\u6b21\u6392\u5e8f\u5220\u51cf\u3002")),c.createElement(l.Z,{code:"struct {\n    int num;\n    char key;\n} checkList[10] = {\n    {2, 'w'}, {6, 'x'}, {0, 'z'}, {8, 'g'}, {3, 't'},\n    {4, 'u'}, {5, 'f'}, {7, 'v'}, {9, 'i'}, {1, 'o'}\n};\nchar dict[10][6] = {\n    {\"zero\"}, {\"one\"}, {\"two\"},{\"three\"}, {\"four\"},\n    {\"five\"}, {\"six\"}, {\"seven\"}, {\"eight\"}, {\"nine\"}\n};\nchar * originalDigits(char * s){\n    int map[26] = {0}, list[10] = {0}, sum = 0;\n    for (int i = 0; i < strlen(s); i++) map[s[i] - 'a']++;\n    for (int i = 0; i < 10; i++) {\n        char key = checkList[i].key;\n        int num = checkList[i].num;\n        if (!map[key - 'a']) continue;\n        int cnt = map[key - 'a'];\n        list[num] += cnt;\n        sum += cnt;\n        for (int i = 0; i < strlen(dict[num]); i++) {\n            char ch = dict[num][i];\n            map[ch - 'a'] -=cnt;\n        }\n    }\n    int idx = 0;\n    char *ans = (char *)malloc(sizeof(char) * (sum + 1));\n    ans[sum] = '\\0';\n    for (int num = 0; num < 10; num++) {\n        int cnt = list[num];\n        if (!cnt) continue;\n        memset(ans + idx, num + '0', sizeof(char) * cnt);\n        idx += cnt;\n        // printf(\"sum = %d, num = %d, cnt = %d, ans = %s\\n\", sum, num, cnt, ans);\n    }\n    // printf(\"ans = %s\\n\", ans);\n    return ans;\n}",lang:"c"})))}));e["default"]=n=>{var e=c.useContext(i.context),t=e.demos;return c.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&i.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),c.createElement(r,{demos:t})}}}]);