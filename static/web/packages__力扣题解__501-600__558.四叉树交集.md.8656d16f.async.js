(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[92467],{87834:function(e,t,n){"use strict";n.r(t);var r=n(96832),l=n(22131),a=n(89730),o=r.memo((e=>{e.demos;return r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"558-\u56db\u53c9\u6811\u4ea4\u96c6"},r.createElement(l.AnchorLink,{to:"#558-\u56db\u53c9\u6811\u4ea4\u96c6","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"558. \u56db\u53c9\u6811\u4ea4\u96c6"),r.createElement("blockquote",null,r.createElement("p",null,"\u94fe\u63a5\uff1a",r.createElement(l.Link,{to:"https://leetcode.cn/problems/logical-or-of-two-binary-grids-represented-as-quad-trees/"},"558. \u56db\u53c9\u6811\u4ea4\u96c6"),r.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",r.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u5206\u6cbb",r.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u8868\u793a n * n \u4e8c\u8fdb\u5236\u77e9\u9635\u7684\u56db\u53c9\u6811\uff0c\u5b83\u662f quadTree1 \u548c quadTree2 \u6240\u8868\u793a\u7684\u4e24\u4e2a\u4e8c\u8fdb\u5236\u77e9\u9635\u8fdb\u884c \u6309\u4f4d\u903b\u8f91\u6216\u8fd0\u7b97 \u7684\u7ed3\u679c\u3002")),r.createElement("h2",{id:"\u9898\u89e3-1---cpp"},r.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.07.15"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a24ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a16.2MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5206\u6cbb,\u5982\u679c\u4e00\u4e2a\u53f6\u5b50\u4e14 true,\u5219\u4e0e\u8be5\u8282\u70b9\u76f8\u540c,\u5982\u679c false,\u5219\u4e0e\u53e6\u4e00\u4e2a\u8282\u70b9\u76f8\u540c,\u5426\u5219\u9012\u5f52\u3002")),r.createElement(a.Z,{code:"class Solution {\n   public:\n    Node *intersect(Node *quadTree1, Node *quadTree2) {\n        if (quadTree1->isLeaf) {\n            if (quadTree1->val)\n                return new Node(true, true);\n            else\n                return new Node(quadTree2->val, quadTree2->isLeaf,\n                                quadTree2->topLeft, quadTree2->topRight,\n                                quadTree2->bottomLeft, quadTree2->bottomRight);\n        }\n        if (quadTree2->isLeaf) {\n            if (quadTree2->val)\n                return new Node(true, true);\n            else\n                return new Node(true, false, quadTree1->topLeft,\n                                quadTree1->topRight, quadTree1->bottomLeft,\n                                quadTree1->bottomRight);\n        }\n        Node *tl = intersect(quadTree1->topLeft, quadTree2->topLeft),\n             *tr = intersect(quadTree1->topRight, quadTree2->topRight),\n             *bl = intersect(quadTree1->bottomLeft, quadTree2->bottomLeft),\n             *br = intersect(quadTree1->bottomRight, quadTree2->bottomRight);\n        if (tl->isLeaf && tr->isLeaf && bl->isLeaf && br->isLeaf &&\n            tl->val == tr->val && tl->val == bl->val && tl->val == br->val)\n            return new Node(tl->val, true);\n        else\n            return new Node(false, false, tl, tr, bl, br);\n    }\n};",lang:"cpp"})))}));t["default"]=e=>{var t=r.useContext(l.context),n=t.demos;return r.useEffect((()=>{var t;null!==e&&void 0!==e&&null!==(t=e.location)&&void 0!==t&&t.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),r.createElement(o,{demos:n})}}}]);