(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[47409],{43526:function(e,n,l){"use strict";l.r(n);var t=l(96832),r=l(22131),o=l(89730),c=t.memo((e=>{e.demos;return t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"1091-\u4e8c\u8fdb\u5236\u77e9\u9635\u4e2d\u7684\u6700\u77ed\u8def\u5f84"},t.createElement(r.AnchorLink,{to:"#1091-\u4e8c\u8fdb\u5236\u77e9\u9635\u4e2d\u7684\u6700\u77ed\u8def\u5f84","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"1091. \u4e8c\u8fdb\u5236\u77e9\u9635\u4e2d\u7684\u6700\u77ed\u8def\u5f84"),t.createElement("blockquote",null,t.createElement("p",null,"\u94fe\u63a5\uff1a",t.createElement(r.Link,{to:"https://leetcode-cn.com/problems/shortest-path-in-binary-matrix/"},"1091. \u4e8c\u8fdb\u5236\u77e9\u9635\u4e2d\u7684\u6700\u77ed\u8def\u5f84"),t.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",t.createElement("br",null),"\u6807\u7b7e\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u6570\u7ec4\u3001\u77e9\u9635",t.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u4f60\u4e00\u4e2a n x n \u7684\u4e8c\u8fdb\u5236\u77e9\u9635 grid \u4e2d\uff0c\u8fd4\u56de\u77e9\u9635\u4e2d\u6700\u77ed \u7545\u901a\u8def\u5f84 \u7684\u957f\u5ea6\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8def\u5f84\uff0c\u8fd4\u56de -1 \u3002")),t.createElement("h2",{id:"\u9898\u89e3-1---typescript"},t.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.07.25"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a208ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a47.8MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1abfs\u3002")),t.createElement(o.Z,{code:"function shortestPathBinaryMatrix(grid: number[][]): number {\n  const n = grid.length;\n  if (grid[0][0] === 1) return -1;\n  const queue: [number, number, number][] = [[0, 0, 1]];\n  const format = (row: number, col: number) => `${row}::${col}`;\n  const set = new Set<string>([format(0, 0)]);\n  const add = (row: number, col: number, level: number) => {\n    if (grid[row][col] === 1) return;\n    const str = format(row, col);\n    if (set.has(str)) return;\n    set.add(str);\n    queue.push([row, col, level]);\n  };\n  let ans = -1;\n  while (queue.length) {\n    const [row, col, level] = queue.shift()!;\n    if (row === n - 1 && col === n - 1) ans = Math.max(ans, level);\n    if (row > 0) add(row - 1, col, level + 1);\n    if (col > 0) add(row, col - 1, level + 1);\n    if (row > 0 && col > 0) add(row - 1, col - 1, level + 1);\n    if (row < n - 1) add(row + 1, col, level + 1);\n    if (col < n - 1) add(row, col + 1, level + 1);\n    if (row < n - 1 && col < n - 1) add(row + 1, col + 1, level + 1);\n    if (row > 0 && col < n - 1) add(row - 1, col + 1, level + 1);\n    if (row < n - 1 && col > 0) add(row + 1, col - 1, level + 1);\n  }\n  return ans;\n}",lang:"typescript"})))}));n["default"]=e=>{var n=t.useContext(r.context),l=n.demos;return t.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),t.createElement(c,{demos:l})}}}]);