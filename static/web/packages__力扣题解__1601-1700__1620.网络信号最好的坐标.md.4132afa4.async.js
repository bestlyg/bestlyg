(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[15514],{57283:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),c=t(89730),o=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"1620-\u7f51\u7edc\u4fe1\u53f7\u6700\u597d\u7684\u5750\u6807"},l.createElement(r.AnchorLink,{to:"#1620-\u7f51\u7edc\u4fe1\u53f7\u6700\u597d\u7684\u5750\u6807","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"1620. \u7f51\u7edc\u4fe1\u53f7\u6700\u597d\u7684\u5750\u6807"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode.cn/problems/coordinate-with-maximum-network-quality/"},"1620. \u7f51\u7edc\u4fe1\u53f7\u6700\u597d\u7684\u5750\u6807"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6570\u7ec4\u3001\u679a\u4e3e",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bf7\u4f60\u8fd4\u56de\u6570\u7ec4 [cx, cy] \uff0c\u8868\u793a \u4fe1\u53f7\u5f3a\u5ea6 \u6700\u5927\u7684 \u6574\u6570 \u5750\u6807\u70b9 (cx, cy) \u3002\u5982\u679c\u6709\u591a\u4e2a\u5750\u6807\u7f51\u7edc\u4fe1\u53f7\u4e00\u6837\u5927\uff0c\u8bf7\u4f60\u8fd4\u56de\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 \u975e\u8d1f \u5750\u6807\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---cpp"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.11.02"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a44ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a8.5MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u66b4\u529b\u679a\u4e3e\u3002")),l.createElement(c.Z,{code:"class Solution {\npublic:\n    const int MAX = 51;\n    vector<int> bestCoordinate(vector<vector<int>>& towers, int radius) {\n        vector<int> ans(2);\n        int maxQ = 0;\n        for (int x = 0; x < MAX; x++) {\n            for (int y = 0; y < MAX; y++) {\n                int q = comp(towers, radius, x, y);\n                if (q > maxQ || q == maxQ && (x < ans[0] || ans[0] == x && y < ans[1])) {\n                    ans[0] = x;\n                    ans[1] = y;\n                    maxQ = q;\n                }\n            }\n        }\n        return ans;\n    }\n    int comp(vector<vector<int>>& towers, int radius, int x, int y) {\n        int cur = 0;\n        for (auto &tower : towers) {\n            double d = sqrt(pow(tower[0] - x, 2) + pow(tower[1] - y, 2));\n            if (d > radius) continue;\n            cur += floor(1.0 * tower[2] / (1 + d));\n        }\n        return cur;\n    }\n};",lang:"cpp"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(o,{demos:t})}}}]);