(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[30956],{1512:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),a=t(89730),u=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"124-\u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c"},l.createElement(r.AnchorLink,{to:"#124-\u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"124. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/"},"124. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5176\u6700\u5927\u8def\u5f84\u548c\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.6.21"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a88ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a46.4MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u8c03\u7528\u5224\u65ad\u90e8\u5206\u548c\u4e0e\u5355\u94fe\u548c\u3002")),l.createElement(a.Z,{code:"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\nfunction maxPathSum(root: TreeNode | null): number {\n  const [link, part] = sum(root);\n  return Math.max(link, part);\n  function sum(node: TreeNode | null): [number, number] {\n    if (node === null) return [0, -Infinity];\n    const [linkSumL, partSumL] = sum(node.left);\n    const [linkSumR, partSumR] = sum(node.right);\n    const partSum = Math.max(\n      node.val,\n      node.val + linkSumL + linkSumR,\n      node.val + linkSumL,\n      node.val + linkSumR,\n      partSumL,\n      partSumR\n    );\n    const linkSum = Math.max(linkSumL, linkSumR, 0) + node.val;\n    return [linkSum, partSum];\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(u,{demos:t})}}}]);