(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[50957],{54471:function(n,e,c){"use strict";c.r(e);var t=c(96832),r=c(22131),l=c(89730),o=t.memo((n=>{n.demos;return t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"1219-\u9ec4\u91d1\u77ff\u5de5"},t.createElement(r.AnchorLink,{to:"#1219-\u9ec4\u91d1\u77ff\u5de5","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"1219. \u9ec4\u91d1\u77ff\u5de5"),t.createElement("blockquote",null,t.createElement("p",null,"\u94fe\u63a5\uff1a",t.createElement(r.Link,{to:"https://leetcode-cn.com/problems/path-with-maximum-gold/"},"1219. \u9ec4\u91d1\u77ff\u5de5"),t.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",t.createElement("br",null),"\u6807\u7b7e\uff1a\u6570\u7ec4\u3001\u56de\u6eaf\u3001\u77e9\u9635",t.createElement("br",null),"\u7b80\u4ecb\uff1a\u8981\u5f00\u53d1\u4e00\u5ea7\u91d1\u77ff\uff0c\u5730\u8d28\u52d8\u6d4b\u5b66\u5bb6\u5df2\u7ecf\u63a2\u660e\u4e86\u8fd9\u5ea7\u91d1\u77ff\u4e2d\u7684\u8d44\u6e90\u5206\u5e03\uff0c\u5e76\u7528\u5927\u5c0f\u4e3a \xa0m * n \u7684\u7f51\u683c grid \u8fdb\u884c\u4e86\u6807\u6ce8\u3002\u6bcf\u4e2a\u5355\u5143\u683c\u4e2d\u7684\u6574\u6570\u5c31\u8868\u793a\u8fd9\u4e00\u5355\u5143\u683c\u4e2d\u7684\u9ec4\u91d1\u6570\u91cf\uff1b\u5982\u679c\u8be5\u5355\u5143\u683c\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u5c31\u662f 0\u3002")),t.createElement("h2",{id:"\u9898\u89e3-1---c"},t.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---c","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - c++"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.02.05"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a580ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a169.2MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac++"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1adfs\u3002")),t.createElement(l.Z,{code:"int dirs[4][2] = {\n    {0, 1},\n    {0, -1},\n    {1, 0},\n    {-1, 0},\n};\n\nclass Solution {\n   public:\n    int m, n, ans = 0;\n    int getMaximumGold(vector<vector<int>>& grid) {\n        m = grid.size();\n        n = grid[0].size();\n        vector<vector<int>> check(m, vector(n, 0));\n        for (int row = 0; row < m; row++) {\n            for (int col = 0; col < n; col++) {\n                if (grid[row][col] == 0) continue;\n                int cnt = 0;\n                for (int i = 0; i < 4; i++) {\n                    int nrow = row + dirs[i][0], ncol = col + dirs[i][1];\n                    if (nrow >= 0 && nrow < m && ncol >= 0 && ncol < n &&\n                        grid[nrow][ncol] != 0)\n                        cnt++;\n                }\n                if (cnt < 3) dfs(grid, check, row, col, 0);\n            }\n        }\n        return ans;\n    }\n    void dfs(vector<vector<int>>& grid, vector<vector<int>> check, int row,\n             int col, int cur) {\n        check[row][col] = 1;\n        cur += grid[row][col];\n        ans = max(ans, cur);\n        for (int i = 0; i < 4; i++) {\n            int nrow = row + dirs[i][0], ncol = col + dirs[i][1];\n            if (nrow < 0 || nrow >= m || ncol < 0 || ncol >= n ||\n                grid[nrow][ncol] == 0 || check[nrow][ncol] == 1)\n                continue;\n            dfs(grid, check, nrow, ncol, cur);\n        }\n        check[row][col] = 0;\n    }\n};",lang:"cpp"})))}));e["default"]=n=>{var e=t.useContext(r.context),c=e.demos;return t.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),t.createElement(o,{demos:c})}}}]);