(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[39892],{56974:function(e,n,l){"use strict";l.r(n);var t=l(96832),a=l(22131),c=l(89730),r=t.memo((e=>{e.demos;return t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"646-\u6700\u957f\u6570\u5bf9\u94fe"},t.createElement(a.AnchorLink,{to:"#646-\u6700\u957f\u6570\u5bf9\u94fe","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"646. \u6700\u957f\u6570\u5bf9\u94fe"),t.createElement("blockquote",null,t.createElement("p",null,"\u94fe\u63a5\uff1a",t.createElement(a.Link,{to:"https://leetcode.cn/problems/maximum-length-of-pair-chain/"},"646. \u6700\u957f\u6570\u5bf9\u94fe"),t.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",t.createElement("br",null),"\u6807\u7b7e\uff1a\u8d2a\u5fc3\u3001\u6570\u7ec4\u3001\u52a8\u6001\u89c4\u5212\u3001\u6392\u5e8f",t.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6570\u5bf9\u96c6\u5408\uff0c\u627e\u51fa\u80fd\u591f\u5f62\u6210\u7684\u6700\u957f\u6570\u5bf9\u94fe\u7684\u957f\u5ea6\u3002\u4f60\u4e0d\u9700\u8981\u7528\u5230\u6240\u6709\u7684\u6570\u5bf9\uff0c\u4f60\u53ef\u4ee5\u4ee5\u4efb\u4f55\u987a\u5e8f\u9009\u62e9\u5176\u4e2d\u7684\u4e00\u4e9b\u6570\u5bf9\u6765\u6784\u9020\u3002")),t.createElement("h2",{id:"\u9898\u89e3-1---cpp"},t.createElement(a.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.09.03"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a32ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a2.2MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1adp \u8bb0\u5f55\u5f53\u524d\u70b9\u4e3a\u7ed3\u5c3e\u7684\u6700\u5927\u94fe\u8def\u3002")),t.createElement(c.Z,{code:"impl Solution {\n    pub fn find_longest_chain(pairs: Vec<Vec<i32>>) -> i32 {\n        let mut pairs = pairs;\n        pairs.sort_by(|a, b| {\n            if a[0] != b[0] {\n                a[0].cmp(&b[0])\n            } else {\n                a[1].cmp(&b[1])\n            }\n        });\n        let len = pairs.len();\n        let mut dp = vec![1; len];\n        let mut ans = 0;\n        for i in 0..len {\n            for j in 0..i {\n                if pairs[j][1] < pairs[i][0] {\n                    dp[i] = dp[i].max(dp[j] + 1)\n                }\n            }\n            ans = ans.max(dp[i]);\n        }\n        ans\n    }\n}",lang:"cpp"})))}));n["default"]=e=>{var n=t.useContext(a.context),l=n.demos;return t.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&a.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),t.createElement(r,{demos:l})}}}]);