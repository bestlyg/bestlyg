(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[93558],{62659:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),a=t(89730),s=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"1656-\u8bbe\u8ba1\u6709\u5e8f\u6d41"},l.createElement(r.AnchorLink,{to:"#1656-\u8bbe\u8ba1\u6709\u5e8f\u6d41","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"1656. \u8bbe\u8ba1\u6709\u5e8f\u6d41"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode.cn/problems/design-an-ordered-stream/"},"1656. \u8bbe\u8ba1\u6709\u5e8f\u6d41"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u7b80\u5355",l.createElement("br",null),"\u6807\u7b7e\uff1a\u8bbe\u8ba1\u3001\u6570\u7ec4\u3001\u54c8\u5e0c\u8868\u3001\u6570\u636e\u6d41",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bbe\u8ba1\u4e00\u4e2a\u6d41\uff0c\u4ee5 \u4efb\u610f \u987a\u5e8f\u83b7\u53d6 n \u4e2a (id, value) \u5bf9\uff0c\u5e76\u5728\u591a\u6b21\u8c03\u7528\u65f6 \u6309 id \u9012\u589e\u7684\u987a\u5e8f \u8fd4\u56de\u4e00\u4e9b\u503c\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---rust"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---rust","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - rust"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.08.16"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a32ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a2.8MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1arust"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u904d\u5386\u3002")),l.createElement(a.Z,{code:"struct OrderedStream {\n    ptr: usize,\n    n: usize,\n    list: Vec<String>,\n}\nimpl OrderedStream {\n    fn new(n: i32) -> Self {\n        let n = n as usize;\n        let mut list = Vec::<String>::with_capacity(n);\n        for _ in 0..n {\n            list.push(String::new());\n        }\n        Self { ptr: 0, list, n }\n    }\n    fn insert(&mut self, id_key: i32, value: String) -> Vec<String> {\n        self.list[(id_key - 1) as usize] = value;\n        let mut ans = Vec::new();\n        while self.ptr < self.n && self.list[self.ptr].len() == 5 {\n            ans.push(self.list[self.ptr].clone());\n            self.ptr += 1;\n        }\n        ans\n    }\n}",lang:"rust"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(s,{demos:t})}}}]);