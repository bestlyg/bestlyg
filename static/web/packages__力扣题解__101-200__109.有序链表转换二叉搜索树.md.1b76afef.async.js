(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[86624],{23869:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),a=t(89730),c=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"109-\u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e8c\u53c9\u641c\u7d22\u6811"},l.createElement(r.AnchorLink,{to:"#109-\u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e8c\u53c9\u641c\u7d22\u6811","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"109. \u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e8c\u53c9\u641c\u7d22\u6811"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/"},"109. \u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e8c\u53c9\u641c\u7d22\u6811"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u94fe\u8868",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.8.18"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a96ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a46.7MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u901a\u8fc7\u6709\u5e8f\u6570\u7ec4\u8fdb\u884c\u6df1\u5ea6\u904d\u5386\u3002")),l.createElement(a.Z,{code:"function sortedListToBST(head: ListNode | null): TreeNode | null {\n  if (head === null) return null;\n  const arr: number[] = [];\n  while (head !== null) {\n    arr.push(head.val);\n    head = head.next;\n  }\n  return toBST(arr);\n  function toBST(array: number[]): TreeNode | null {\n    const len = array.length;\n    if (len === 0) return null;\n    const mid = len >> 1;\n    const node = new TreeNode(\n      array[mid],\n      toBST(array.slice(0, mid)),\n      toBST(array.slice(mid + 1, len))\n    );\n    return node;\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(c,{demos:t})}}}]);