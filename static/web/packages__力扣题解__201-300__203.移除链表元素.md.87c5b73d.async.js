(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[56097],{78647:function(e,n,t){"use strict";t.r(n);var l=t(96832),a=t(22131),r=t(89730),c=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"203-\u79fb\u9664\u94fe\u8868\u5143\u7d20"},l.createElement(a.AnchorLink,{to:"#203-\u79fb\u9664\u94fe\u8868\u5143\u7d20","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"203. \u79fb\u9664\u94fe\u8868\u5143\u7d20"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(a.Link,{to:"https://leetcode-cn.com/problems/remove-linked-list-elements/"},"203. \u79fb\u9664\u94fe\u8868\u5143\u7d20"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u7b80\u5355",l.createElement("br",null),"\u6807\u7b7e\uff1a\u94fe\u8868",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u7b49\u4e8e\u7ed9\u5b9a\u503c val \u7684\u6240\u6709\u8282\u70b9\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---java"},l.createElement(a.AnchorLink,{to:"#\u9898\u89e3-1---java","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - java"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.2.13"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a1ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a40.1MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajava"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u521b\u5efa\u65b0\u94fe\u8868\uff0c\u904d\u5386\u8282\u70b9\uff0c\u82e5\u5b58\u5728\u7b26\u5408\u7684\u503c\u5219\u79fb\u9664\u3002")),l.createElement(r.Z,{code:"class Solution {\n    public ListNode removeElements(ListNode head, int val) {\n        ListNode newHead=new ListNode(0);\n        newHead.next=head;\n        ListNode tem=newHead;\n        while(tem!=null&&tem.next!=null) {\n        \tif(tem.next.val==val) {\n        \t\ttem.next=tem.next.next;\n                continue;\n        \t}\n        \ttem=tem.next;\n        }\n        return newHead.next;\n    }\n}",lang:"java"}),l.createElement("h2",{id:"\u9898\u89e3-2---typescript"},l.createElement(a.AnchorLink,{to:"#\u9898\u89e3-2---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.06.05"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a108ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a43.3MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u521d\u59cb\u5316\u7a7a\u5934\u8282\u70b9\u4fbf\u4e8e\u8fd0\u7b97\u3002")),l.createElement(r.Z,{code:"function removeElements(head: ListNode | null, val: number): ListNode | null {\n  if (head === null) return null;\n  const tempHead = new ListNode(0, head);\n  let p: ListNode | null = tempHead;\n  while (p !== null) {\n    let next: ListNode | null = p.next;\n    while (next !== null && next.val === val) next = next.next;\n    p.next = next;\n    p = next;\n  }\n  return tempHead.next;\n}",lang:"typescript"}),l.createElement("h2",{id:"\u9898\u89e3-3---c"},l.createElement(a.AnchorLink,{to:"#\u9898\u89e3-3---c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 3 - c"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.11.19"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a8ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a7.9mb"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u53cc\u6307\u9488\u3002")),l.createElement(r.Z,{code:"struct ListNode* removeElements(struct ListNode* head, int val){\n    if (!head) return NULL;\n    while (head && head->val == val) head = head->next;\n    if (!head) return NULL;\n    struct ListNode *p = head;\n    struct ListNode *work = head;\n    while (work) {\n        work = work->next;\n        while(work && work->val == val) work = work->next;\n        p->next = work;\n        p = p->next;\n    }\n    return head;\n}",lang:"c"})))}));n["default"]=e=>{var n=l.useContext(a.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&a.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(c,{demos:t})}}}]);