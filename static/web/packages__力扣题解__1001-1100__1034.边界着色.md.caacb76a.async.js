(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[57486],{49086:function(e,n,r){"use strict";r.r(n);var o=r(96832),l=r(22131),t=r(89730),c=o.memo((e=>{e.demos;return o.createElement(o.Fragment,null,o.createElement("div",{className:"markdown"},o.createElement("h1",{id:"1034-\u8fb9\u754c\u7740\u8272"},o.createElement(l.AnchorLink,{to:"#1034-\u8fb9\u754c\u7740\u8272","aria-hidden":"true",tabIndex:-1},o.createElement("span",{className:"icon icon-link"})),"1034. \u8fb9\u754c\u7740\u8272"),o.createElement("blockquote",null,o.createElement("p",null,"\u94fe\u63a5\uff1a",o.createElement(l.Link,{to:"https://leetcode-cn.com/problems/coloring-a-border/"},"1034. \u8fb9\u754c\u7740\u8272"),o.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",o.createElement("br",null),"\u6807\u7b7e\uff1a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u6570\u7ec4\u3001\u77e9\u9635",o.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bf7\u4f60\u4f7f\u7528\u6307\u5b9a\u989c\u8272 color \u4e3a\u6240\u6709\u5305\u542b\u7f51\u683c\u5757 grid[row][col] \u7684 \u8fde\u901a\u5206\u91cf\u7684\u8fb9\u754c \u8fdb\u884c\u7740\u8272\uff0c\u5e76\u8fd4\u56de\u6700\u7ec8\u7684\u7f51\u683c grid \u3002")),o.createElement("h2",{id:"\u9898\u89e3-1---typescript"},o.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},o.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),o.createElement("ul",null,o.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.12.07"),o.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a84ms"),o.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a41.7MB"),o.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),o.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1adfs\u3002")),o.createElement(t.Z,{code:"function colorBorder(grid: number[][], row: number, col: number, color: number): number[][] {\n  const ori_color = grid[row][col];\n  const m = grid.length;\n  const n = grid[0].length;\n  const list: number[][] = [];\n  const set = new Set<string>();\n  const format = (row: number, col: number) => `${row}:${col}`;\n  draw(row, col);\n  for (const [row, col] of list) grid[row][col] = color;\n  return grid;\n  function draw(row: number, col: number) {\n    if (\n      row < 0 ||\n      row >= m ||\n      col < 0 ||\n      col >= n ||\n      grid[row][col] !== ori_color ||\n      set.has(format(row, col))\n    )\n      return;\n    set.add(format(row, col));\n    if (\n      !(\n        row > 0 &&\n        col > 0 &&\n        row < m - 1 &&\n        col < n - 1 &&\n        grid[row - 1][col] === ori_color &&\n        grid[row + 1][col] === ori_color &&\n        grid[row][col - 1] === ori_color &&\n        grid[row][col + 1] === ori_color\n      )\n    ) {\n      list.push([row, col]);\n    }\n    draw(row - 1, col);\n    draw(row + 1, col);\n    draw(row, col - 1);\n    draw(row, col + 1);\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=o.useContext(l.context),r=n.demos;return o.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),o.createElement(c,{demos:r})}}}]);