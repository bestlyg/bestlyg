(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[97594],{84750:function(e,n,t){"use strict";t.r(n);var i=t(96832),l=t(22131),r=t(89730),c=i.memo((e=>{e.demos;return i.createElement(i.Fragment,null,i.createElement("div",{className:"markdown"},i.createElement("h1",{id:"1345-\u8df3\u8dc3\u6e38\u620f-iv"},i.createElement(l.AnchorLink,{to:"#1345-\u8df3\u8dc3\u6e38\u620f-iv","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"1345. \u8df3\u8dc3\u6e38\u620f IV"),i.createElement("blockquote",null,i.createElement("p",null,"\u94fe\u63a5\uff1a",i.createElement(l.Link,{to:"https://leetcode-cn.com/problems/jump-game-iv/"},"1345. \u8df3\u8dc3\u6e38\u620f IV"),i.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",i.createElement("br",null),"\u6807\u7b7e\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u6570\u7ec4\u3001\u54c8\u5e0c\u8868",i.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bf7\u4f60\u8fd4\u56de\u5230\u8fbe\u6570\u7ec4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u6807\u5904\u6240\u9700\u7684 \u6700\u5c11\u64cd\u4f5c\u6b21\u6570 \u3002")),i.createElement("h2",{id:"\u9898\u89e3-1---c"},i.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---c","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - c++"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.01.21"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a248ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a95.7MB"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac++"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1abfs\u3002")),i.createElement(r.Z,{code:"class Solution {\n   public:\n    struct node {\n        int idx, step;\n    };\n    int minJumps(vector<int>& arr) {\n        unordered_map<int, vector<int>> m;\n        unordered_set<int> s;\n        s.insert(0);\n        queue<node> q;\n        q.push((node){0, 0});\n        int n = arr.size();\n        for (int i = 0; i < n; i++) m[arr[i]].push_back(i);\n        while (q.size()) {\n            node v = q.front();\n            if (v.idx == n - 1) return v.step;\n            q.pop();\n            if (v.idx > 0 && !s.count(v.idx - 1)) {\n                q.push((node){v.idx - 1, v.step + 1});\n                s.insert(v.idx - 1);\n            }\n            if (v.idx < n - 1 && !s.count(v.idx + 1)) {\n                q.push((node){v.idx + 1, v.step + 1});\n                s.insert(v.idx + 1);\n            }\n            if (!m.count(arr[v.idx])) continue;\n            for (auto& next_idx : m[arr[v.idx]]) {\n                if (next_idx == v.idx || s.count(next_idx)) continue;\n                q.push((node){next_idx, v.step + 1});\n                s.insert(next_idx);\n            }\n            m.erase(arr[v.idx]);\n        }\n        return 0;\n    }\n};",lang:"cpp"})))}));n["default"]=e=>{var n=i.useContext(l.context),t=n.demos;return i.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),i.createElement(c,{demos:t})}}}]);