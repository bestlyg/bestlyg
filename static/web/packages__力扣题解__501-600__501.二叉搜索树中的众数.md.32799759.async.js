(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[60424],{97261:function(e,n,t){"use strict";t.r(n);var r=t(96832),l=t(22131),c=t(89730),a=r.memo((e=>{e.demos;return r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"501-\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4f17\u6570"},r.createElement(l.AnchorLink,{to:"#501-\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4f17\u6570","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"501. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4f17\u6570"),r.createElement("blockquote",null,r.createElement("p",null,"\u94fe\u63a5\uff1a",r.createElement(l.Link,{to:"https://leetcode-cn.com/problems/find-mode-in-binary-search-tree/"},"501. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4f17\u6570"),r.createElement("br",null),"\u96be\u5ea6\uff1a\u7b80\u5355",r.createElement("br",null),"\u6807\u7b7e\uff1a\u6811",r.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6709\u76f8\u540c\u503c\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff08BST\uff09\uff0c\u627e\u51fa BST \u4e2d\u7684\u6240\u6709\u4f17\u6570\uff08\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\u5143\u7d20\uff09\u3002")),r.createElement("h2",{id:"\u9898\u89e3-1---typescript"},r.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.9.24"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a120ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a47.2MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u4e2d\u5e8f\u904d\u5386\u3002")),r.createElement(c.Z,{code:"function findMode(root: TreeNode | null): number[] {\n  const cache: Record<number, number> = {};\n  const setCache = (val: number) => {\n    if (!cache[val]) cache[val] = 0;\n    cache[val] += 1;\n  };\n  const inorder = (root: TreeNode | null) => {\n    if (root === null) return;\n    inorder(root.left);\n    setCache(root.val);\n    inorder(root.right);\n  };\n  inorder(root);\n  return Object.entries(cache)\n    .sort(([, c1], [, c2]) => c2 - c1)\n    .filter(([, c], _, arr) => c === arr[0][1])\n    .map(([val]) => parseInt(val));\n}",lang:"typescript"}),r.createElement("h2",{id:"\u9898\u89e3-2---typescript"},r.createElement(l.AnchorLink,{to:"#\u9898\u89e3-2---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.9.24"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a88ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a44.1mb"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a",r.createElement(l.Link,{to:"https://leetcode-cn.com/problems/find-mode-in-binary-search-tree/solution/er-cha-sou-suo-shu-zhong-de-zhong-shu-by-leetcode-/"},"\u53c2\u8003\u94fe\u63a5"),"\u3002")),r.createElement(c.Z,{code:"function findMode(root: TreeNode | null): number[] {\n  let base = 0;\n  let count = 0;\n  let maxCount = 0;\n  let answer: number[] = [];\n  const update = (x: number) => {\n    if (x === base) count++;\n    else {\n      count = 1;\n      base = x;\n    }\n    if (count === maxCount) answer.push(base);\n    if (count > maxCount) {\n      maxCount = count;\n      answer = [base];\n    }\n  };\n\n  let cur = root,\n    pre = null;\n  while (cur !== null) {\n    if (cur.left === null) {\n      update(cur.val);\n      cur = cur.right;\n      continue;\n    }\n    pre = cur.left;\n    while (pre.right !== null && pre.right !== cur) pre = pre.right;\n    if (pre.right === null) {\n      pre.right = cur;\n      cur = cur.left;\n    } else {\n      pre.right = null;\n      update(cur.val);\n      cur = cur.right;\n    }\n  }\n  return answer;\n}",lang:"typescript"}),r.createElement("h2",{id:"\u9898\u89e3-3---typescript"},r.createElement(l.AnchorLink,{to:"#\u9898\u89e3-3---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 3 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.08.07"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a88ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a47.1mb"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u4e2d\u5e8f\u904d\u5386\u3002")),r.createElement(c.Z,{code:"function findMode(root: TreeNode | null): number[] {\n  if (root === null) return [];\n  const map = new Map<number, number>();\n  inorder(root);\n  return [...map.entries()]\n    .sort(([, v1], [, v2]) => v2 - v1)\n    .filter(([, v], _, list) => v === list[0][1])\n    .map(([k]) => k);\n  function inorder(node: TreeNode | null): void {\n    if (node === null) return;\n    inorder(node.left);\n    map.set(node.val, 1 + (map.get(node.val) ?? 0));\n    inorder(node.right);\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=r.useContext(l.context),t=n.demos;return r.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),r.createElement(a,{demos:t})}}}]);