(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[28856],{35646:function(e,n,t){"use strict";t.r(n);var l=t(96832),i=t(22131),c=t(89730),a=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"2039-\u7f51\u7edc\u7a7a\u95f2\u7684\u65f6\u523b"},l.createElement(i.AnchorLink,{to:"#2039-\u7f51\u7edc\u7a7a\u95f2\u7684\u65f6\u523b","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"2039. \u7f51\u7edc\u7a7a\u95f2\u7684\u65f6\u523b"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(i.Link,{to:"https://leetcode-cn.com/problems/the-time-when-the-network-becomes-idle/"},"2039. \u7f51\u7edc\u7a7a\u95f2\u7684\u65f6\u523b"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u56fe\u3001\u6570\u7ec4",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bf7\u8fd4\u56de\u8ba1\u7b97\u673a\u7f51\u7edc\u53d8\u4e3a \u7a7a\u95f2 \u72b6\u6001\u7684 \u6700\u65e9\u79d2\u6570 \u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---cpp"},l.createElement(i.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.03.20"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a540ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a185.9MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1abfs \u540e\u7edf\u8ba1\u6bcf\u4e2a\u7684\u65f6\u957f\u3002")),l.createElement(c.Z,{code:"class Solution {\n   public:\n    struct node {\n        int idx;\n        vector<int> next;\n    };\n    int networkBecomesIdle(vector<vector<int>>& edges, vector<int>& patience) {\n        int n = patience.size();\n        vector<node> list(n);\n        for (int i = 0; i < n; i++) list[i].idx = i;\n        for (auto& edge : edges) {\n            list[edge[0]].next.push_back(edge[1]);\n            list[edge[1]].next.push_back(edge[0]);\n        }\n        int ans = 0;\n        queue<int> q;\n        q.push(0);\n        vector<bool> check(list.size(), false);\n        check[0] = true;\n        int cur_time = 1, size = 1;\n        while (q.size()) {\n            int idx = q.front();\n            q.pop();\n            for (auto& next : list[idx].next) {\n                if (check[next]) continue;\n                check[next] = true;\n                q.push(next);\n                int time = cur_time * 2, pat = patience[list[next].idx];\n                // \u8d85\u51fa\u4e00\u904d\u7b49\u5f85\uff0c \u6309\u6700\u540e\u4e00\u4e2a\u7b97\n                if (time > pat)\n                    time += time % pat == 0 ? time - pat : time - time % pat;\n                ans = max(ans, time);\n            }\n            if (--size == 0) {\n                size = q.size();\n                cur_time++;\n            }\n        }\n\n        return ans + 1;\n    }\n};",lang:"cpp"})))}));n["default"]=e=>{var n=l.useContext(i.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&i.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);