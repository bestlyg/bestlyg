(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[69718],{98423:function(e,n,t){"use strict";t.r(n);var l=t(96832),a=t(22131),r=t(89730),s=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"234-\u56de\u6587\u94fe\u8868"},l.createElement(a.AnchorLink,{to:"#234-\u56de\u6587\u94fe\u8868","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"234. \u56de\u6587\u94fe\u8868"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(a.Link,{to:"https://leetcode-cn.com/problems/palindrome-linked-list/"},"234. \u56de\u6587\u94fe\u8868"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u7b80\u5355",l.createElement("br",null),"\u6807\u7b7e\uff1a\u94fe\u8868\u3001\u53cc\u6307\u9488",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bf7\u5224\u65ad\u4e00\u4e2a\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(a.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.10.23"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a104ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a43mb"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5feb\u6162\u6307\u9488\u4e00\u6b21\u904d\u5386\u3002")),l.createElement(r.Z,{code:"function isPalindrome(head: ListNode | null): boolean {\n  if (head === null) return true;\n  let fast: ListNode | null = head;\n  let slow: ListNode | null = head;\n  const cache: number[] = [];\n  while (fast !== null && fast.next !== null) {\n    fast = fast.next.next;\n    cache.push(slow!.val);\n    slow = slow!.next;\n  }\n  if (fast?.next === null) slow = slow!.next;\n  while (slow) {\n    const val = cache.pop();\n    if (slow.val !== val) return false;\n    slow = slow.next;\n  }\n  return true;\n}",lang:"typescript"}),l.createElement("h2",{id:"\u9898\u89e3-2---typescript"},l.createElement(a.AnchorLink,{to:"#\u9898\u89e3-2---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.08.20"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a260ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a66.2MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5229\u7528\u5b57\u7b26\u4e32\u4fdd\u5b58\u7ffb\u8f6c\u503c\u3002")),l.createElement(r.Z,{code:"function isPalindrome(head: ListNode): boolean {\n  let str1 = '';\n  let str2 = '';\n  let p: ListNode | null = head;\n  while (p) {\n    str1 = str1 + p.val;\n    str2 = p.val + str2;\n    p = p.next;\n  }\n  return str1 === str2;\n}",lang:"typescript"}),l.createElement("h2",{id:"\u9898\u89e3-3---javascript"},l.createElement(a.AnchorLink,{to:"#\u9898\u89e3-3---javascript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 3 - javascript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.09.22"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a228ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a69.9mb"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajavascript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u53cd\u8f6c\u540e\u534a\u90e8\u5206\u3002")),l.createElement(r.Z,{code:"function isPalindrome(head: ListNode): boolean {\n        let slow = head;\n        let fast = head.next;\n        if (!fast) return true;\n        while (fast && fast.next) {\n          slow = slow.next!;\n          fast = fast.next.next;\n        }\n        fast = reverse(slow.next!)[0];\n        slow = head;\n        while (fast) {\n          if (slow.val !== fast.val) return false;\n          slow = slow.next!;\n          fast = fast.next!;\n        }\n        return true;\n        function reverse(node: ListNode): [ListNode, ListNode] {\n          if (node.next === null) return [node, node];\n          const [first, last] = reverse(node.next);\n          last.next = node;\n          node.next = null;\n          return [first, node];\n        }\n      }",lang:"javascript"}),l.createElement("h2",{id:"\u9898\u89e3-4---javascript"},l.createElement(a.AnchorLink,{to:"#\u9898\u89e3-4---javascript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 4 - javascript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.09.22"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a152ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a60.7mb"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajavascript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u53cd\u8f6c\u540e\u534a\u90e8\u5206\uff0c\u904d\u5386\u53cd\u8f6c\u3002")),l.createElement(r.Z,{code:"function isPalindrome(head: ListNode): boolean {\n        let slow = head;\n        let fast = head.next;\n        if (!fast) return true;\n        while (fast && fast.next) {\n          slow = slow.next!;\n          fast = fast.next.next;\n        }\n        fast = reverse(slow.next!);\n        slow = head;\n        while (fast) {\n          if (slow.val !== fast.val) return false;\n          slow = slow.next!;\n          fast = fast.next!;\n        }\n        return true;\n        function reverse(node: ListNode): ListNode {\n          const head = new ListNode();\n          let p: ListNode | null = node;\n          while (p) {\n            const oldNext = head.next;\n            const next = p.next;\n            head.next = p;\n            p.next = oldNext;\n            p = next;\n          }\n          return head.next!;\n        }\n      }",lang:"javascript"}),l.createElement("h2",{id:"\u9898\u89e3-5---c"},l.createElement(a.AnchorLink,{to:"#\u9898\u89e3-5---c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 5 - c"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.11.19"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a164ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a40.8mb"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u50a8\u5b58\u6570\u7ec4\u518d\u904d\u5386\u3002")),l.createElement(r.Z,{code:"bool isPalindrome(struct ListNode* head){\n    int nums[100000] = {0}, len = 0;\n    struct ListNode *p = head;\n    while(p){\n        nums[len++] = p->val;\n        p = p->next;\n    }\n    for (int i = 0; i < len / 2; i++) {\n        if (nums[i] != nums[len - 1 - i]) return 0;\n    }\n    return 1;\n}",lang:"c"})))}));n["default"]=e=>{var n=l.useContext(a.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&a.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(s,{demos:t})}}}]);