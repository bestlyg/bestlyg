(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[52727],{19821:function(e,n,t){"use strict";t.r(n);var l=t(96832),i=t(22131),a=t(89730),s=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"\u5806\u6392\u5e8fheapsort"},l.createElement(i.AnchorLink,{to:"#\u5806\u6392\u5e8fheapsort","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u5806\u6392\u5e8f(HeapSort)"),l.createElement("h2",{id:"\u65b9\u5f0f"},l.createElement(i.AnchorLink,{to:"#\u65b9\u5f0f","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u65b9\u5f0f"),l.createElement("ol",null,l.createElement("li",null,"\u6784\u5efa\u7ed3\u5c3e\u4e0b\u6807\uff0c\u4e0a\u6d6e\u4e0b\u6c89\u51fd\u6570"),l.createElement("li",null,"\u4f9d\u6b21\u5bf9\u6bcf\u4e2a\u4e0b\u6807\u8fdb\u884c\u4e0a\u6d6e"),l.createElement("li",null,"\u628a\u7ed3\u5c3e\u5143\u7d20\u4e0e\u9996\u5143\u7d20\u8fdb\u884c\u4ea4\u6362\uff0c\u5e76\u91cd\u7f6e\u7ed3\u5c3e\u4e0b\u6807\uff0c\u5bf9\u9996\u5143\u7d20\u8fdb\u884c\u4e0b\u6c89\uff0c\u91cd\u590d\u76f4\u5230\u7ed3\u5c3e\u4e0b\u6807\u4e3a 0")),l.createElement("h2",{id:"\u6838\u5fc3\u4ee3\u7801"},l.createElement(i.AnchorLink,{to:"#\u6838\u5fc3\u4ee3\u7801","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),l.createElement(i.Link,{to:"https://gitee.com/bestlyg/bestlyg/tree/master/packages/algorithms/src/sorting/heapSort.ts"},"\u6838\u5fc3\u4ee3\u7801")),l.createElement(a.Z,{code:"import { Comparator } from '@/shared';\n\nexport const heapSort = <T extends any>(compare: Comparator<T>, list: T[]) => {\n  let lastIndex = list.length - 1;\n  const shiftUp = (index: number): void => {\n    if (index === 0) return;\n    const parentIndex = (index - 1) >> 1;\n    if (compare(list[index], list[parentIndex]) > 0) {\n      [list[index], list[parentIndex]] = [list[parentIndex], list[index]];\n      shiftUp(parentIndex);\n    }\n  };\n  const shiftDown = (index: number): void => {\n    let childIndex = index * 2 + 1;\n    if (childIndex > lastIndex) return;\n    if (childIndex + 1 <= lastIndex && compare(list[childIndex + 1], list[childIndex]) > 0)\n      childIndex++;\n    if (compare(list[childIndex], list[index]) > 0) {\n      [list[childIndex], list[index]] = [list[index], list[childIndex]];\n      shiftDown(childIndex);\n    }\n  };\n  for (let i = 0; i <= lastIndex; i++) shiftUp(i);\n  while (lastIndex > 0) {\n    [list[0], list[lastIndex--]] = [list[lastIndex], list[0]];\n    shiftDown(0);\n  }\n};",lang:"ts"})))}));n["default"]=e=>{var n=l.useContext(i.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&i.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(s,{demos:t})}}}]);