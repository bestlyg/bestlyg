(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[8932],{82626:function(e,n,l){"use strict";l.r(n);var t=l(96832),r=l(22131),o=l(89730),a=t.memo((e=>{e.demos;return t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"1161-\u6700\u5927\u5c42\u5185\u5143\u7d20\u548c"},t.createElement(r.AnchorLink,{to:"#1161-\u6700\u5927\u5c42\u5185\u5143\u7d20\u548c","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"1161. \u6700\u5927\u5c42\u5185\u5143\u7d20\u548c"),t.createElement("blockquote",null,t.createElement("p",null,"\u94fe\u63a5\uff1a",t.createElement(r.Link,{to:"https://leetcode.cn/problems/maximum-level-sum-of-a-binary-tree/"},"1161. \u6700\u5927\u5c42\u5185\u5143\u7d20\u548c"),t.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",t.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u4e8c\u53c9\u6811",t.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bf7\u8fd4\u56de\u5c42\u5185\u5143\u7d20\u4e4b\u548c \u6700\u5927 \u7684\u90a3\u51e0\u5c42\uff08\u53ef\u80fd\u53ea\u6709\u4e00\u5c42\uff09\u7684\u5c42\u53f7\uff0c\u5e76\u8fd4\u56de\u5176\u4e2d \u6700\u5c0f \u7684\u90a3\u4e2a\u3002")),t.createElement("h2",{id:"\u9898\u89e3-1---cpp"},t.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.08.01"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a156ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a104.7MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5c42\u5e8f\u904d\u5386\u3002")),t.createElement(o.Z,{code:"class Solution {\n   public:\n    int maxLevelSum(TreeNode *root) {\n        queue<TreeNode *> q;\n        q.push(root);\n        int max_level = 1, max_sum = root->val, cur = 0, size = 1, level = 1;\n        while (q.size()) {\n            TreeNode *node = q.front();\n            q.pop();\n            if (node->left) {\n                cur += node->left->val;\n                q.push(node->left);\n            }\n            if (node->right) {\n                cur += node->right->val;\n                q.push(node->right);\n            }\n            if (--size == 0) {\n                size = q.size();\n                level++;\n                if (size > 0 && cur > max_sum) {\n                    max_sum = cur;\n                    max_level = level;\n                }\n                cur = 0;\n            }\n        }\n        return max_level;\n    }\n};",lang:"cpp"}),t.createElement("h2",{id:"\u9898\u89e3-2---rust"},t.createElement(r.AnchorLink,{to:"#\u9898\u89e3-2---rust","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - rust"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.08.01"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a24ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a3.2MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1arust"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5c42\u5e8f\u904d\u5386\u3002")),t.createElement(o.Z,{code:"use std::cell::RefCell;\nuse std::rc::Rc;\nimpl Solution {\n    pub fn max_level_sum(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        use std::collections::VecDeque;\n        let root = root.unwrap();\n        let mut q: VecDeque<Rc<RefCell<TreeNode>>> = VecDeque::new();\n        q.push_back(root.clone());\n        let (mut max_level, mut max_sum, mut cur, mut size, mut level) =\n            (1, root.borrow().val, 0, 1, 1);\n        while let Some(node) = q.pop_front() {\n            if node.as_ref().borrow().left.is_some() {\n                cur += node.as_ref().borrow().left.as_ref().unwrap().borrow().val;\n                q.push_back(node.as_ref().borrow().left.as_ref().unwrap().clone());\n            }\n            if node.as_ref().borrow().right.is_some() {\n                cur += node.as_ref().borrow().right.as_ref().unwrap().borrow().val;\n                q.push_back(node.as_ref().borrow().right.as_ref().unwrap().clone());\n            }\n            size -= 1;\n            if size == 0 {\n                size = q.len();\n                level += 1;\n                if size > 0 && cur > max_sum {\n                    max_sum = cur;\n                    max_level = level;\n                }\n                cur = 0;\n            }\n        }\n        max_level\n    }\n}",lang:"rust"})))}));n["default"]=e=>{var n=t.useContext(r.context),l=n.demos;return t.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),t.createElement(a,{demos:l})}}}]);