(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[94666],{40493:function(e,n,l){"use strict";l.r(n);var t=l(96832),o=l(22131),r=l(89730),a=t.memo((e=>{e.demos;return t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"623-\u5728\u4e8c\u53c9\u6811\u4e2d\u589e\u52a0\u4e00\u884c"},t.createElement(o.AnchorLink,{to:"#623-\u5728\u4e8c\u53c9\u6811\u4e2d\u589e\u52a0\u4e00\u884c","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"623. \u5728\u4e8c\u53c9\u6811\u4e2d\u589e\u52a0\u4e00\u884c"),t.createElement("blockquote",null,t.createElement("p",null,"\u94fe\u63a5\uff1a",t.createElement(o.Link,{to:"https://leetcode.cn/problems/add-one-row-to-tree/"},"623. \u5728\u4e8c\u53c9\u6811\u4e2d\u589e\u52a0\u4e00\u884c"),t.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",t.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u4e8c\u53c9\u6811",t.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839 root \u548c\u4e24\u4e2a\u6574\u6570 val \u548c depth \uff0c\u5728\u7ed9\u5b9a\u7684\u6df1\u5ea6 depth \u5904\u6dfb\u52a0\u4e00\u4e2a\u503c\u4e3a val \u7684\u8282\u70b9\u884c\u3002")),t.createElement("h2",{id:"\u9898\u89e3-1---cpp"},t.createElement(o.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.08.05"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a20ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a24.4MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6392\u5e8f\u540e\uff0c\u4ece\u540e\u5f80\u524d\u53d6\u503c\u3002")),t.createElement(r.Z,{code:"class Solution {\n   public:\n    TreeNode* addOneRow(TreeNode* root, int val, int depth) {\n        if (depth == 1) return new TreeNode(val, root, nullptr);\n        queue<TreeNode*> q;\n        q.push(root);\n        int size = 1, level = 1;\n        while (level < depth - 1) {\n            TreeNode* node = q.front();\n            q.pop();\n            if (node->left) q.push(node->left);\n            if (node->right) q.push(node->right);\n            if (--size == 0) {\n                level++;\n                size = q.size();\n            }\n        }\n        while (q.size()) {\n            TreeNode* node = q.front();\n            q.pop();\n            node->left = new TreeNode(val, node->left, nullptr);\n            node->right = new TreeNode(val, nullptr, node->right);\n        }\n        return root;\n    }\n};",lang:"cpp"}),t.createElement("h2",{id:"\u9898\u89e3-2---rust"},t.createElement(o.AnchorLink,{to:"#\u9898\u89e3-2---rust","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - rust"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.08.05"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a2.6MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1arust"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5c42\u5e8f\u904d\u5386\u3002")),t.createElement(r.Z,{code:"use std::cell::RefCell;\nuse std::collections::VecDeque;\nuse std::rc::Rc;\nimpl Solution {\n    pub fn add_one_row(\n        root: Option<Rc<RefCell<TreeNode>>>,\n        val: i32,\n        depth: i32,\n    ) -> Option<Rc<RefCell<TreeNode>>> {\n        if depth == 1 {\n            let mut new_root = TreeNode::new(val);\n            new_root.left = root;\n            Some(Rc::new(RefCell::new(new_root)))\n        } else {\n            let root = root.unwrap();\n            let mut q = VecDeque::<Rc<RefCell<TreeNode>>>::new();\n            q.push_back(root.clone());\n            let (mut size, mut level) = (1, 1);\n            while level < depth - 1 {\n                let node = q.pop_front();\n                let node = node.as_ref().unwrap().borrow();\n                if node.left.is_some() {\n                    q.push_back(node.left.as_ref().unwrap().clone());\n                }\n                if node.right.is_some() {\n                    q.push_back(node.right.as_ref().unwrap().clone());\n                }\n                size -= 1;\n                if size == 0 {\n                    level += 1;\n                    size = q.len();\n                }\n            }\n            while !q.is_empty() {\n                let node = q.pop_front();\n                let mut node = node.as_ref().unwrap().borrow_mut();\n                let left = node.left.clone();\n                let mut new_left = TreeNode::new(val);\n                new_left.left = left;\n                node.left = Some(Rc::new(RefCell::new(new_left)));\n                let right = node.right.clone();\n                let mut new_right = TreeNode::new(val);\n                new_right.right = right;\n                node.right = Some(Rc::new(RefCell::new(new_right)));\n            }\n            Some(root)\n        }\n    }\n}",lang:"rust"})))}));n["default"]=e=>{var n=t.useContext(o.context),l=n.demos;return t.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&o.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),t.createElement(a,{demos:l})}}}]);