(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[21833],{42490:function(n,e,o){"use strict";o.r(e);var l=o(96832),r=o(22131),c=o(89730),t=l.memo((n=>{n.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"529-\u626b\u96f7\u6e38\u620f"},l.createElement(r.AnchorLink,{to:"#529-\u626b\u96f7\u6e38\u620f","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"529. \u626b\u96f7\u6e38\u620f"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/minesweeper/"},"529. \u626b\u96f7\u6e38\u620f"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8ba9\u6211\u4eec\u4e00\u8d77\u6765\u73a9\u626b\u96f7\u6e38\u620f\uff01")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.8.20"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a200ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a46MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6df1\u5ea6\u904d\u5386\u3002")),l.createElement(c.Z,{code:"function updateBoard(board: string[][], click: number[]): string[][] {\n  const rowLen = board.length;\n  const colLen = board[0].length;\n  console.log(rowLen, colLen);\n  const set = new Set<string>();\n  const format = (row: number, col: number) => `${row}:${col}`;\n  dfs(click[0], click[1]);\n  return board;\n  function countMine(row: number, col: number): number {\n    let num = 0;\n    // top\n    if (row !== 0 && col !== 0 && isMine(row - 1, col - 1)) num++;\n    if (row !== 0 && isMine(row - 1, col)) num++;\n    if (row !== 0 && col !== colLen - 1 && isMine(row - 1, col + 1)) num++;\n    // mid\n    if (col !== 0 && isMine(row, col - 1)) num++;\n    if (col !== colLen - 1 && isMine(row, col + 1)) num++;\n    // bottom\n    if (row !== rowLen - 1 && col !== 0 && isMine(row + 1, col - 1)) num++;\n    if (row !== rowLen - 1 && isMine(row + 1, col)) num++;\n    if (row !== rowLen - 1 && col !== colLen - 1 && isMine(row + 1, col + 1)) num++;\n    return num;\n  }\n  function isMine(row: number, col: number): boolean {\n    return board[row][col] === 'M';\n  }\n  function dfs(row: number, col: number): void {\n    const formatName = format(row, col);\n    if (set.has(formatName)) return;\n    else set.add(formatName);\n    if (isMine(row, col)) {\n      board[row][col] = 'X';\n    } else if (countMine(row, col) > 0) {\n      board[row][col] = countMine(row, col) + '';\n    } else {\n      console.log(row, col);\n      board[row][col] = 'B';\n      // top\n      if (row !== 0 && col !== 0) dfs(row - 1, col - 1);\n      if (row !== 0) dfs(row - 1, col);\n      if (row !== 0 && col !== colLen - 1) dfs(row - 1, col + 1);\n      // mid\n      if (col !== 0) dfs(row, col - 1);\n      if (col !== colLen - 1) dfs(row, col + 1);\n      // bottom\n      if (row !== rowLen - 1 && col !== 0) dfs(row + 1, col - 1);\n      if (row !== rowLen - 1) dfs(row + 1, col);\n      if (row !== rowLen - 1 && col !== colLen - 1) dfs(row + 1, col + 1);\n    }\n  }\n}",lang:"typescript"})))}));e["default"]=n=>{var e=l.useContext(r.context),o=e.demos;return l.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),l.createElement(t,{demos:o})}}}]);