(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[48080],{27688:function(e,n,t){"use strict";t.r(n);var l=t(96832),i=t(22131),r=t(89730),o=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"593-\u6709\u6548\u7684\u6b63\u65b9\u5f62"},l.createElement(i.AnchorLink,{to:"#593-\u6709\u6548\u7684\u6b63\u65b9\u5f62","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"593. \u6709\u6548\u7684\u6b63\u65b9\u5f62"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(i.Link,{to:"https://leetcode.cn/problems/valid-square/"},"593. \u6709\u6548\u7684\u6b63\u65b9\u5f62"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u51e0\u4f55\u3001\u6570\u5b66",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a 2D \u7a7a\u95f4\u4e2d\u56db\u4e2a\u70b9\u7684\u5750\u6807 p1, p2, p3 \u548c p4\uff0c\u5982\u679c\u8fd9\u56db\u4e2a\u70b9\u6784\u6210\u4e00\u4e2a\u6b63\u65b9\u5f62\uff0c\u5219\u8fd4\u56de true \u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---rust"},l.createElement(i.AnchorLink,{to:"#\u9898\u89e3-1---rust","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - rust"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.07.29"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a2.1MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1arust"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6bcf\u6761\u8fb9\u90fd\u76f8\u7b49\u4e14\u4efb\u610f\u4e09\u4e2a\u89d2\u90fd\u80fd\u7ec4\u6210\u76f4\u89d2\u4e09\u89d2\u5f62\u3002")),l.createElement(r.Z,{code:"impl Solution {\n    pub fn valid_square(p1: Vec<i32>, p2: Vec<i32>, p3: Vec<i32>, p4: Vec<i32>) -> bool {\n        Solution::is_right_triangle(&p1, &p2, &p3)\n            && Solution::is_right_triangle(&p1, &p2, &p4)\n            && Solution::is_right_triangle(&p1, &p3, &p4)\n            && Solution::is_right_triangle(&p2, &p3, &p4)\n    }\n    fn is_right_triangle(p1: &Vec<i32>, p2: &Vec<i32>, p3: &Vec<i32>) -> bool {\n        let d1 = Solution::get_length(p1, p2);\n        let d2 = Solution::get_length(p1, p3);\n        let d3 = Solution::get_length(p3, p2);\n        d1 != 0\n            && d2 != 0\n            && d3 != 0\n            && (d1 + d2 == d3 && d1 == d2 || d1 + d3 == d2 && d1 == d3 || d2 + d3 == d1 && d2 == d3)\n    }\n    fn get_length(p1: &Vec<i32>, p2: &Vec<i32>) -> i32 {\n        (p1[0] - p2[0]).pow(2) + (p1[1] - p2[1]).pow(2)\n    }\n}",lang:"rust"})))}));n["default"]=e=>{var n=l.useContext(i.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&i.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(o,{demos:t})}}}]);