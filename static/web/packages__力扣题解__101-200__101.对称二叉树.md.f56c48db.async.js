(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[12137],{70820:function(e,t,n){"use strict";n.r(t);var l=n(96832),r=n(22131),o=n(89730),i=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"101-\u5bf9\u79f0\u4e8c\u53c9\u6811"},l.createElement(r.AnchorLink,{to:"#101-\u5bf9\u79f0\u4e8c\u53c9\u6811","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"101. \u5bf9\u79f0\u4e8c\u53c9\u6811"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/symmetric-tree/"},"101. \u5bf9\u79f0\u4e8c\u53c9\u6811"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u7b80\u5355",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---java"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---java","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - java"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.2.22"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a1ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a37.7MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajava"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u904d\u5386\u3002")),l.createElement(o.Z,{code:"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n\tpublic boolean isSymmetric(TreeNode root) {\n\t\tif (root == null)\n\t\t\treturn true;\n\t\tDeque<TreeNode> deque = new LinkedList<TreeNode>();\n\t\tdeque.offer(root.left);\n\t\tdeque.offer(root.right);\n\t\twhile (!deque.isEmpty()) {\n\t\t\tTreeNode left = deque.pollFirst();\n\t\t\tTreeNode right = deque.pollLast();\n\t\t\tif (left == null && right == null)\n\t\t\t\tcontinue;\n\t\t\tif (left == null || right == null)\n\t\t\t\treturn false;\n\t\t\tif(left.val!=right.val)return false;\n\t\t\tdeque.offerFirst(left.right);\n\t\t\tdeque.offerFirst(left.left);\n\t\t\tdeque.offerLast(right.left);\n\t\t\tdeque.offerLast(right.right);\n\t\t}\n\t\treturn true;\n\t}\n}",lang:"java"}),l.createElement("h2",{id:"\u9898\u89e3-2---java"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-2---java","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - java"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.2.22"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a1ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a37.9MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajava"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u3002")),l.createElement(o.Z,{code:"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n\tpublic boolean isSymmetric(TreeNode root) {\n\t\tif (root == null)\n\t\t\treturn true;\n\t\tif (!inIsSymmetric(root.left, root.right))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tpublic boolean inIsSymmetric(TreeNode node1, TreeNode node2) {\n\t\tif (node1 == null && node2 == null)\n\t\t\treturn true;\n\t\tif (node1 == null || node2 == null)\n\t\t\treturn false;\n\t\tif (node1.val != node2.val)\n\t\t\treturn false;\n\t\treturn inIsSymmetric(node1.left, node2.right) && inIsSymmetric(node1.right, node2.left);\n\t}\n}",lang:"java"}),l.createElement("h2",{id:"\u9898\u89e3-3---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-3---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 3 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.2.22"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a88ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a37MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u3002")),l.createElement(o.Z,{code:"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\nvar isSymmetric = function (root: TreeNode | null): boolean {\n  if (root === null) return true;\n  return isSymNode(root.left, root.right);\n  function isSymNode(node1: TreeNode | null, node2: TreeNode | null): boolean {\n    if (node1 === null && node2 === null) return true;\n    if (node1 === null || node2 === null || node1.val !== node2.val) return false;\n    return isSymNode(node1.left, node2.right) && isSymNode(node1.right, node2.left);\n  }\n};",lang:"typescript"}),l.createElement("h2",{id:"\u9898\u89e3-4---c"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-4---c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 4 - c"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.11.27"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a4ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a6.5MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u3002")),l.createElement(o.Z,{code:"// \u6821\u9a8c\u4e24\u4e2a\u6811\u662f\u5426\u955c\u50cf\nbool _isSymmetric(struct TreeNode *node1, struct TreeNode *node2){\n    // \u90fd\u4e3aNULL\u5c31\u662f\n    if (!node1 && !node2) return 1;\n    // \u5176\u4e2d\u4e00\u4e2a\u4e3aNULL\u6216\u8005\u503c\u4e0d\u7b49\u5c31\u4e0d\u662f\n    if (!node1 || !node2 || node1->val != node2->val) return 0;\n    // \u5426\u5219\u9012\u5f52\u5224\u65ad\uff1anode1\u7684\u5de6\u548cnode2\u7684\u53f3\u662f\u5426\u955c\u50cf\u3001node1\u7684\u53f3\u548cnode2\u7684\u5de6\u662f\u5426\u955c\u50cf\n    return _isSymmetric(node1->left, node2->right) && _isSymmetric(node1->right, node2->left);\n}\nbool isSymmetric(struct TreeNode* root){\n    return _isSymmetric(root->left, root->right);\n}",lang:"c"})))}));t["default"]=e=>{var t=l.useContext(r.context),n=t.demos;return l.useEffect((()=>{var t;null!==e&&void 0!==e&&null!==(t=e.location)&&void 0!==t&&t.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(i,{demos:n})}}}]);