(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[96744],{14062:function(e,n,r){"use strict";r.r(n);var t=r(96832),l=r(22131),o=r(89730),c=t.memo((e=>{e.demos;return t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"304-\u4e8c\u7ef4\u533a\u57df\u548c\u68c0\u7d22---\u77e9\u9635\u4e0d\u53ef\u53d8"},t.createElement(l.AnchorLink,{to:"#304-\u4e8c\u7ef4\u533a\u57df\u548c\u68c0\u7d22---\u77e9\u9635\u4e0d\u53ef\u53d8","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"304. \u4e8c\u7ef4\u533a\u57df\u548c\u68c0\u7d22 - \u77e9\u9635\u4e0d\u53ef\u53d8"),t.createElement("blockquote",null,t.createElement("p",null,"\u94fe\u63a5\uff1a",t.createElement(l.Link,{to:"https://leetcode-cn.com/problems/range-sum-query-2d-immutable/"},"304. \u4e8c\u7ef4\u533a\u57df\u548c\u68c0\u7d22 - \u77e9\u9635\u4e0d\u53ef\u53d8"),t.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",t.createElement("br",null),"\u6807\u7b7e\uff1a\u52a8\u6001\u89c4\u5212",t.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\uff0c\u8ba1\u7b97\u5176\u5b50\u77e9\u5f62\u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u8be5\u5b50\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u4e3a (row1, col1) \uff0c\u53f3\u4e0b\u89d2\u4e3a (row2, col2) \u3002")),t.createElement("h2",{id:"\u9898\u89e3-1---typescript"},t.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.3.2"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a120ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a42.9MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5229\u7528\u524d\u7f00\u548c\u8fdb\u884c\u5feb\u901f\u8ba1\u7b97\u3002")),t.createElement(o.Z,{code:"class NumMatrix {\n  private sumMatrix: number[][] = [];\n  constructor(matrix: number[][]) {\n    const rowLen = matrix.length;\n    if (rowLen === 0) return;\n    const colLen = matrix[0].length;\n    for (let row = 0; row < rowLen; row++) {\n      const arr: number[] = [];\n      for (let col = 0; col < colLen; col++) {\n        const num = matrix[row][col];\n        if (col === 0 && row === 0) {\n          arr.push(num);\n        } else if (col === 0) {\n          arr.push(this.sumMatrix[row - 1][col] + num);\n        } else if (row === 0) {\n          arr.push(arr[col - 1] + num);\n        } else {\n          arr.push(\n            this.sumMatrix[row - 1][col] + arr[col - 1] + num - this.sumMatrix[row - 1][col - 1]\n          );\n        }\n      }\n      this.sumMatrix.push(arr);\n    }\n  }\n  sumRegion(row1: number, col1: number, row2: number, col2: number): number {\n    return (\n      this.sumMatrix[row2][col2] -\n      (col1 > 0 ? this.sumMatrix[row2][col1 - 1] : 0) -\n      (row1 > 0 ? this.sumMatrix[row1 - 1][col2] : 0) +\n      (row1 > 0 && col1 > 0 ? this.sumMatrix[row1 - 1][col1 - 1] : 0)\n    );\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=t.useContext(l.context),r=n.demos;return t.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),t.createElement(c,{demos:r})}}}]);