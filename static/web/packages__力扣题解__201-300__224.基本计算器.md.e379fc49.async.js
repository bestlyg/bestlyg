(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[35313],{61169:function(t,n,e){"use strict";e.r(n);var c=e(96832),a=e(22131),s=e(89730),r=c.memo((t=>{t.demos;return c.createElement(c.Fragment,null,c.createElement("div",{className:"markdown"},c.createElement("h1",{id:"224-\u57fa\u672c\u8ba1\u7b97\u5668"},c.createElement(a.AnchorLink,{to:"#224-\u57fa\u672c\u8ba1\u7b97\u5668","aria-hidden":"true",tabIndex:-1},c.createElement("span",{className:"icon icon-link"})),"224. \u57fa\u672c\u8ba1\u7b97\u5668"),c.createElement("blockquote",null,c.createElement("p",null,"\u94fe\u63a5\uff1a",c.createElement(a.Link,{to:"https://leetcode-cn.com/problems/basic-calculator/"},"224. \u57fa\u672c\u8ba1\u7b97\u5668"),c.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",c.createElement("br",null),"\u6807\u7b7e\uff1a\u6808\u3001\u6570\u5b66",c.createElement("br",null),"\u7b80\u4ecb\uff1a\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u8ba1\u7b97\u5668\u6765\u8ba1\u7b97\u4e00\u4e2a\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u7684\u503c\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5305\u542b\u5de6\u62ec\u53f7 ( \uff0c\u53f3\u62ec\u53f7 )\uff0c\u52a0\u53f7 + \uff0c\u51cf\u53f7 -\uff0c\u975e\u8d1f\u6574\u6570\u548c\u7a7a\u3002")),c.createElement("h2",{id:"\u9898\u89e3-1---java"},c.createElement(a.AnchorLink,{to:"#\u9898\u89e3-1---java","aria-hidden":"true",tabIndex:-1},c.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - java"),c.createElement("ul",null,c.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.2.16"),c.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a145ms"),c.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a76.4MB"),c.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajava"),c.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5148\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u7136\u540e\u518d\u5229\u7528\u6808\u8ba1\u7b97\u3002")),c.createElement(s.Z,{code:'class Solution {\n    public int calculate(String s) {\n\t\tStack<String> stack1 = new Stack<String>();\n\t\tStack<String> stack2 = new Stack<String>();\n\t\tint len = s.length();\n\t\tString tem = "";\n\t\tfor (int i = 0; i < len; i++) {\n//\t\t\tSystem.out.println("tem:" + tem);\n//\t\t\tSystem.out.println("stack1:" + stack1);\n//\t\t\tSystem.out.println("stack2:" + stack2);\n\t\t\tString ch = s.charAt(i) + "";\n\t\t\tif (ch.compareTo(" ") == 0)\n\t\t\t\tcontinue;\n\t\t\tif (ch.compareTo("+") == 0 || ch.compareTo("-") == 0 || ch.compareTo("(") == 0) {\n\t\t\t\tstack1.push(ch);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (ch.compareTo(")") == 0) {\n\t\t\t\tstack1.pop();\n\t\t\t\tif (!stack1.isEmpty())\n\t\t\t\t\tstack2.push(stack1.pop());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (i != len - 1 && s.charAt(i + 1) >= 48 && s.charAt(i) <= 57) {\n//\t\t\t\tSystem.out.println(1);\n\t\t\t\ttem += ch;\n\t\t\t\tcontinue;\n\t\t\t} else {\n//\t\t\t\tSystem.out.println(2);\n\t\t\t\tif(tem.compareTo("")!=0) {\n\t\t\t\t\tch = tem+ch;\n\t\t\t\t\ttem = "";\n\t\t\t\t}\n\t\t\t}\n\t\t\tstack2.push(ch);\n\t\t\tif (stack1.isEmpty())\n\t\t\t\tcontinue;\n\t\t\tif (stack1.peek().compareTo("+") == 0 || stack1.peek().compareTo("-") == 0) {\n\t\t\t\tstack2.push(stack1.pop());\n\t\t\t}\n\t\t}\n\n//\t\tSystem.out.println(stack2);\n\t\tDeque<String> tokens = new LinkedList<String>();\n\t\twhile (!stack2.isEmpty()) {\n\t\t\ttokens.offerFirst(stack2.pop() + "");\n\t\t}\n//\t\tSystem.out.println(tokens);\n\t\treturn evalRPN(tokens);\n//\t\treturn evalRPN("");\n\t}\n\n\tpublic int evalRPN(Deque<String> tokens) {\n\t\tStack<String> stack = new Stack<String>();\n\t\tint a, b;\n\t\tfor (String s : tokens) {\n\t\t\tswitch (s) {\n\t\t\tcase "+":\n\t\t\t\ta = Integer.parseInt(stack.pop());\n\t\t\t\tb = Integer.parseInt(stack.pop());\n\t\t\t\tstack.push((a + b) + "");\n\t\t\t\tbreak;\n\t\t\tcase "-":\n\t\t\t\ta = Integer.parseInt(stack.pop());\n\t\t\t\tb = Integer.parseInt(stack.pop());\n\t\t\t\tstack.push((b - a) + "");\n\t\t\t\tbreak;\n\t\t\tcase "*":\n\t\t\t\ta = Integer.parseInt(stack.pop());\n\t\t\t\tb = Integer.parseInt(stack.pop());\n\t\t\t\tstack.push((a * b) + "");\n\t\t\t\tbreak;\n\t\t\tcase "/":\n\t\t\t\ta = Integer.parseInt(stack.pop());\n\t\t\t\tb = Integer.parseInt(stack.pop());\n\t\t\t\tstack.push((b / a) + "");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tstack.push(s);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn Integer.parseInt(stack.pop());\n\t}\n\n}',lang:"java"}),c.createElement("h2",{id:"\u9898\u89e3-2---typescript"},c.createElement(a.AnchorLink,{to:"#\u9898\u89e3-2---typescript","aria-hidden":"true",tabIndex:-1},c.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - typescript"),c.createElement("ul",null,c.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.3.10"),c.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a148ms"),c.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a44.9MB"),c.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),c.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5229\u7528\u6808\u4f9d\u6b21\u8ba1\u7b97\uff0c\u5e76\u8f6c\u6362\u51cf\u6cd5\u4e3a\u52a0\u6cd5\u3002")),c.createElement(s.Z,{code:"const numReg = /\\-?\\d+/;\nconst opReg = /\\+|\\-/;\nconst squareReg = /\\(|\\)/;\nconst opMap: Record<string, (num1: number, num2: number) => number> = {\n  '+': (num1, num2) => num1 + num2,\n  '-': (num1, num2) => num1 - num2,\n  '*': (num1, num2) => num1 * num2,\n  '/': (num1, num2) => num1 / num2,\n};\nconst emptyReg = / /g;\nfunction calculate(s: string): number {\n  s = s.replace(emptyReg, '');\n  const stack: string[] = [];\n  const peek = () => stack[stack.length - 1];\n  if (s[0] === '-') s = '0' + s;\n  const len = s.length;\n  for (let i = 0; i < len; i++) {\n    let c = s[i];\n    if (opReg.test(c) || c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      let c = 0;\n      let str = '';\n      while (peek() !== '(') {\n        str = stack.pop()! + str;\n        c++;\n      }\n      stack.pop();\n      str = (c === 1 ? str : calculate(str)) + '';\n      if (peek() === '-') {\n        stack[stack.length - 1] = '+';\n        str = str.startsWith('-') ? str.substring(1) : '-' + str;\n      }\n      stack.push(str);\n    } else {\n      while (i < len - 1 && numReg.test(s[i + 1])) {\n        c += s[++i];\n      }\n      if (peek() === '-') {\n        c = stack.pop()! + c;\n        if (numReg.test(peek())) stack.push('+');\n      }\n      const top = peek();\n      if (opReg.test(top)) {\n        const op = stack.pop()!;\n        const num1 = stack.pop()!;\n        stack.push(opMap[op](Number(num1), Number(c)) + '');\n      } else {\n        stack.push(c);\n      }\n    }\n  }\n  return stack.length === 1 ? Number(stack[0]) : calculate(stack.join(''));\n}",lang:"typescript"})))}));n["default"]=t=>{var n=c.useContext(a.context),e=n.demos;return c.useEffect((()=>{var n;null!==t&&void 0!==t&&null!==(n=t.location)&&void 0!==n&&n.hash&&a.AnchorLink.scrollToAnchor(decodeURIComponent(t.location.hash.slice(1)))}),[]),c.createElement(r,{demos:e})}}}]);