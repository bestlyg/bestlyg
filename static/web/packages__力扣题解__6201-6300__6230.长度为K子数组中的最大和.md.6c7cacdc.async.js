(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[55998],{54963:function(n,e,l){"use strict";l.r(e);var t=l(96832),m=l(22131),r=l(89730),c=t.memo((n=>{n.demos;return t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"6230-\u957f\u5ea6\u4e3a-k-\u5b50\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u548c"},t.createElement(m.AnchorLink,{to:"#6230-\u957f\u5ea6\u4e3a-k-\u5b50\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u548c","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"6230. \u957f\u5ea6\u4e3a K \u5b50\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u548c"),t.createElement("blockquote",null,t.createElement("p",null,"\u94fe\u63a5\uff1a",t.createElement(m.Link,{to:"https://leetcode.cn/problems/maximum-sum-of-distinct-subarrays-with-length-k/"},"6230. \u957f\u5ea6\u4e3a K \u5b50\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u548c"),t.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",t.createElement("br",null),"\u6807\u7b7e\uff1a",t.createElement("br",null),"\u7b80\u4ecb\uff1a\u8fd4\u56de\u6ee1\u8db3\u9898\u9762\u8981\u6c42\u7684\u6700\u5927\u5b50\u6570\u7ec4\u548c\u3002\u5982\u679c\u4e0d\u5b58\u5728\u5b50\u6570\u7ec4\u6ee1\u8db3\u8fd9\u4e9b\u6761\u4ef6\uff0c\u8fd4\u56de 0 \u3002")),t.createElement("h2",{id:"\u9898\u89e3-1---cpp"},t.createElement(m.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.11.06"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a192ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a90.8MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6ed1\u52a8\u7a97\u53e3\u904d\u5386\u3002")),t.createElement(r.Z,{code:'class Solution {\npublic:\n    long long maximumSubarraySum(vector<int>& nums, int k) {\n        long long sum = 0, ans = 0;\n        int l = 0, r = 0, n = nums.size();\n        int cnt = 0;\n        unordered_map<int, int> m;\n        while (r < k) {\n            m[nums[r]]++;\n            sum += nums[r];\n            if (m[nums[r]] == 2) cnt++;\n            r++;\n        }\n        if (cnt == 0) ans = sum;\n        // cout << "l = " << l << ", r = " << r << endl;\n        // cout << "sum = " << sum << ", cnt = " << cnt << endl;\n        while (r < n) {\n            sum -= nums[l];\n            m[nums[l]]--;\n            if (m[nums[l]] == 1) cnt--;\n            l++;\n\n            sum += nums[r];\n            m[nums[r]]++;\n            if (m[nums[r]] == 2) cnt++;\n            r++;\n\n            // cout << "l = " << l << ", r = " << r << endl;\n            if (cnt == 0) ans = max(ans, sum);\n        }\n        return ans;\n    }\n};',lang:"cpp"})))}));e["default"]=n=>{var e=t.useContext(m.context),l=e.demos;return t.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&m.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),t.createElement(c,{demos:l})}}}]);