(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[82596],{86175:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),c=t(89730),a=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"1417-\u91cd\u65b0\u683c\u5f0f\u5316\u5b57\u7b26\u4e32"},l.createElement(r.AnchorLink,{to:"#1417-\u91cd\u65b0\u683c\u5f0f\u5316\u5b57\u7b26\u4e32","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"1417. \u91cd\u65b0\u683c\u5f0f\u5316\u5b57\u7b26\u4e32"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode.cn/problems/reformat-the-string/"},"1417. \u91cd\u65b0\u683c\u5f0f\u5316\u5b57\u7b26\u4e32"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u7b80\u5355",l.createElement("br",null),"\u6807\u7b7e\uff1a\u5b57\u7b26\u4e32",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bf7\u4f60\u8fd4\u56de \u91cd\u65b0\u683c\u5f0f\u5316\u540e \u7684\u5b57\u7b26\u4e32\uff1b\u5982\u679c\u65e0\u6cd5\u6309\u8981\u6c42\u91cd\u65b0\u683c\u5f0f\u5316\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a \u7a7a\u5b57\u7b26\u4e32 \u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---rust"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---rust","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - rust"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.08.11"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a4ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a2.1MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1arust"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u91cd\u65b0\u6392\u5217\u3002")),l.createElement(c.Z,{code:"impl Solution {\n    pub fn reformat(s: String) -> String {\n        let (mut list_num, mut list_char) = (Vec::new(), Vec::new());\n        for c in s.chars().collect::<Vec<char>>() {\n            if c.is_numeric() {\n                list_num.push(c);\n            } else {\n                list_char.push(c);\n            }\n        }\n        let mut ans = String::new();\n        if (list_num.len() as i32 - list_char.len() as i32).abs() > 1 {\n            return ans;\n        }\n        let (mut list1, mut list2) = if list_num.len() > list_char.len() {\n            (list_num.into_iter(), list_char.into_iter())\n        } else {\n            (list_char.into_iter(), list_num.into_iter())\n        };\n        loop {\n            let mut c;\n            c = list1.next();\n            if c.is_none() {\n                break;\n            };\n            ans.push(c.unwrap());\n            c = list2.next();\n            if c.is_none() {\n                break;\n            };\n            ans.push(c.unwrap());\n        }\n        ans\n    }\n}",lang:"rust"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);