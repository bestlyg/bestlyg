(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[88876],{14395:function(n,e,t){"use strict";t.r(e);var s=t(96832),i=t(22131),r=t(89730),o=s.memo((n=>{n.demos;return s.createElement(s.Fragment,null,s.createElement("div",{className:"markdown"},s.createElement("h1",{id:"241-\u4e3a\u8fd0\u7b97\u8868\u8fbe\u5f0f\u8bbe\u8ba1\u4f18\u5148\u7ea7"},s.createElement(i.AnchorLink,{to:"#241-\u4e3a\u8fd0\u7b97\u8868\u8fbe\u5f0f\u8bbe\u8ba1\u4f18\u5148\u7ea7","aria-hidden":"true",tabIndex:-1},s.createElement("span",{className:"icon icon-link"})),"241. \u4e3a\u8fd0\u7b97\u8868\u8fbe\u5f0f\u8bbe\u8ba1\u4f18\u5148\u7ea7"),s.createElement("blockquote",null,s.createElement("p",null,"\u94fe\u63a5\uff1a",s.createElement(i.Link,{to:"https://leetcode-cn.com/problems/different-ways-to-add-parentheses/"},"241. \u4e3a\u8fd0\u7b97\u8868\u8fbe\u5f0f\u8bbe\u8ba1\u4f18\u5148\u7ea7"),s.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",s.createElement("br",null),"\u6807\u7b7e\uff1a\u9012\u5f52\u3001\u8bb0\u5fc6\u5316\u641c\u7d22\u3001\u6570\u5b66\u3001\u5b57\u7b26\u4e32\u3001\u52a8\u6001\u89c4\u5212",s.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709\u6570\u5b57\u548c\u8fd0\u7b97\u7b26\u7684\u5b57\u7b26\u4e32\uff0c\u4e3a\u8868\u8fbe\u5f0f\u6dfb\u52a0\u62ec\u53f7\uff0c\u6539\u53d8\u5176\u8fd0\u7b97\u4f18\u5148\u7ea7\u4ee5\u6c42\u51fa\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u4f60\u9700\u8981\u7ed9\u51fa\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u7684\u7ed3\u679c\u3002\u6709\u6548\u7684\u8fd0\u7b97\u7b26\u53f7\u5305\u542b +,\xa0-\xa0 \u4ee5\u53ca \xa0*\xa0\u3002")),s.createElement("h2",{id:"\u9898\u89e3-1---typescript"},s.createElement(i.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},s.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),s.createElement("ul",null,s.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.10.25"),s.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a88ms"),s.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a41.3MB"),s.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),s.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u64cd\u4f5c\u7b26\u5f53\u4f5c\u6839\u8282\u70b9\u8ba1\u7b97\u3002")),s.createElement(r.Z,{code:"function diffWaysToCompute(expression: string): number[] {\n  return dfs(expression);\n  function split(expression: string, idx: number) {\n    return [expression.substring(0, idx), expression.substring(idx + 1)];\n  }\n  function comp(num1: number, num2: number, op: string): number {\n    switch (op) {\n      case '+':\n        return num1 + num2;\n      case '-':\n        return num1 - num2;\n      case '*':\n        return num1 * num2;\n      default:\n        return num1 + num2;\n    }\n  }\n  function dfs(expression: string): number[] {\n    const n = expression.length;\n    const opIdxs: number[] = [];\n    for (let i = 0; i < n; i++) {\n      const ch = expression[i];\n      if (ch === '+' || ch === '-' || ch === '*') opIdxs.push(i);\n    }\n    if (opIdxs.length === 0) return [+expression];\n    const ans: number[] = [];\n    for (const idx of opIdxs) {\n      const [left, right] = split(expression, idx);\n      for (const num1 of dfs(left)) {\n        for (const num2 of dfs(right)) {\n          ans.push(comp(num1, num2, expression[idx]));\n        }\n      }\n    }\n    return ans;\n  }\n}",lang:"typescript"}),s.createElement("h2",{id:"\u9898\u89e3-2---cpp"},s.createElement(i.AnchorLink,{to:"#\u9898\u89e3-2---cpp","aria-hidden":"true",tabIndex:-1},s.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - cpp"),s.createElement("ul",null,s.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.07.01"),s.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a8ms"),s.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a12.4MB"),s.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),s.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5206\u6cbb\u3002")),s.createElement(r.Z,{code:"class Solution {\n   public:\n    unordered_set<char> opset;\n    Solution() {\n        opset.insert('+');\n        opset.insert('-');\n        opset.insert('*');\n    }\n    vector<int> diffWaysToCompute(string expression) {\n        vector<int> ans, oplist;\n        int n = expression.size();\n        for (int i = 0; i < n; i++) {\n            if (opset.count(expression[i])) oplist.push_back(i);\n        }\n        if (oplist.size() == 0)\n            ans.push_back(toNum(expression));\n        else\n            dfs(expression, oplist, ans);\n        return ans;\n    }\n    int toNum(string &expression) {\n        int num = 0, n = expression.size(), i = 0;\n        while (i < n && !opset.count(expression[i]))\n            num = num * 10 + expression[i++] - '0';\n        return num;\n    }\n    void dfs(string &expression, vector<int> &oplist, vector<int> &ans) {\n        for (auto &idx : oplist) {\n            vector<int> llist = diffWaysToCompute(expression.substr(0, idx));\n            vector<int> rlist = diffWaysToCompute(\n                expression.substr(idx + 1, expression.size() - idx));\n            for (auto &num1 : llist) {\n                for (auto &num2 : rlist) {\n                    switch (expression[idx]) {\n                        case '+':\n                            ans.push_back(num1 + num2);\n                            break;\n                        case '-':\n                            ans.push_back(num1 - num2);\n                            break;\n                        case '*':\n                            ans.push_back(num1 * num2);\n                            break;\n                    }\n                }\n            }\n        }\n    }\n};",lang:"cpp"}),s.createElement("h2",{id:"\u9898\u89e3-3---cpp"},s.createElement(i.AnchorLink,{to:"#\u9898\u89e3-3---cpp","aria-hidden":"true",tabIndex:-1},s.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 3 - cpp"),s.createElement("ul",null,s.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.07.01"),s.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a8ms"),s.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a12.4MB"),s.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),s.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5206\u6cbb\u3002")),s.createElement(r.Z,{code:"class Solution {\n   public:\n    unordered_set<char> opset;\n    Solution() {\n        opset.insert('+');\n        opset.insert('-');\n        opset.insert('*');\n    }\n    vector<int> diffWaysToCompute(string expression) {\n        vector<int> ans, oplist;\n        int n = expression.size();\n        for (int i = 0; i < n; i++) {\n            if (opset.count(expression[i])) oplist.push_back(i);\n        }\n        if (oplist.size() == 0)\n            ans.push_back(toNum(expression));\n        else\n            dfs(expression, oplist, ans);\n        return ans;\n    }\n    int toNum(string &expression) {\n        int num = 0, n = expression.size(), i = 0;\n        while (i < n && !opset.count(expression[i]))\n            num = num * 10 + expression[i++] - '0';\n        return num;\n    }\n    void dfs(string &expression, vector<int> &oplist, vector<int> &ans) {\n        for (auto &idx : oplist) {\n            vector<int> llist = diffWaysToCompute(expression.substr(0, idx));\n            vector<int> rlist = diffWaysToCompute(\n                expression.substr(idx + 1, expression.size() - idx));\n            for (auto &num1 : llist) {\n                for (auto &num2 : rlist) {\n                    switch (expression[idx]) {\n                        case '+':\n                            ans.push_back(num1 + num2);\n                            break;\n                        case '-':\n                            ans.push_back(num1 - num2);\n                            break;\n                        case '*':\n                            ans.push_back(num1 * num2);\n                            break;\n                    }\n                }\n            }\n        }\n    }\n};",lang:"cpp"})))}));e["default"]=n=>{var e=s.useContext(i.context),t=e.demos;return s.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&i.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),s.createElement(o,{demos:t})}}}]);