(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[26726],{37988:function(n,e,i){"use strict";i.r(e);var r=i(96832),t=i(22131),l=i(89730),o=r.memo((n=>{n.demos;return r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"745-\u524d\u7f00\u548c\u540e\u7f00\u641c\u7d22"},r.createElement(t.AnchorLink,{to:"#745-\u524d\u7f00\u548c\u540e\u7f00\u641c\u7d22","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"745. \u524d\u7f00\u548c\u540e\u7f00\u641c\u7d22"),r.createElement("blockquote",null,r.createElement("p",null,"\u94fe\u63a5\uff1a",r.createElement(t.Link,{to:"https://leetcode.cn/problems/prefix-and-suffix-search/"},"745. \u524d\u7f00\u548c\u540e\u7f00\u641c\u7d22"),r.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",r.createElement("br",null),"\u6807\u7b7e\uff1a\u8bbe\u8ba1\u3001\u5b57\u5178\u6811\u3001\u5b57\u7b26\u4e32",r.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bbe\u8ba1\u4e00\u4e2a\u5305\u542b\u4e00\u4e9b\u5355\u8bcd\u7684\u7279\u6b8a\u8bcd\u5178\uff0c\u5e76\u80fd\u591f\u901a\u8fc7\u524d\u7f00\u548c\u540e\u7f00\u6765\u68c0\u7d22\u5355\u8bcd\u3002")),r.createElement("h2",{id:"\u9898\u89e3-1---cpp"},r.createElement(t.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.07.14"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a880ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a609.9MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5934\u5c3e\u63d2\u5165,\u4f8b\u5982\u63d2\u5165 app,\u5373#app, p#app, pp#app, app#app,\u63d2\u5165\u6240\u6709\u7684\u53ef\u80fd\u6027,\u7136\u540e\u4ece\u5934\u5f00\u59cb\u627e\u3002")),r.createElement(l.Z,{code:"#define CHILD_SIZE 27\nclass TrieNode {\n   public:\n    int key, idx;\n    bool end;\n    TrieNode **children;\n    TrieNode(int k) {\n        key = k;\n        idx = -1;\n        end = false;\n        children = (TrieNode **)malloc(sizeof(TrieNode *) * CHILD_SIZE);\n        for (int i = 0; i < CHILD_SIZE; i++) children[i] = nullptr;\n    }\n};\nclass Trie {\n   public:\n    TrieNode *root;\n    Trie() { root = new TrieNode(0); }\n    void insert(string str, int idx) {\n        TrieNode *node = root;\n        for (int i = 0; i < str.size(); i++) {\n            int idx = str[i] == '#' ? (CHILD_SIZE - 1) : str[i] - 'a';\n            if (node->children[idx] == nullptr)\n                node->children[idx] = new TrieNode(idx);\n            node = node->children[idx];\n        }\n        node->end = true;\n        node->idx = idx;\n    }\n    TrieNode *find(string str) {\n        TrieNode *node = root;\n        for (int i = 0; i < str.size(); i++) {\n            int idx = str[i] == '#' ? (CHILD_SIZE - 1) : str[i] - 'a';\n            if (node->children[idx] == nullptr) return nullptr;\n            node = node->children[idx];\n        }\n        return node;\n    }\n};\nclass WordFilter {\n   public:\n    Trie *t;\n    WordFilter(vector<string> &words) {\n        t = new Trie();\n        for (int i = 0; i < words.size(); i++) {\n            string w = words[i], insertw = \"#\" + w;\n            for (int j = w.size() - 1; j >= 0; j--) {\n                insertw = w[j] + insertw;\n                t->insert(insertw, i);\n            }\n        }\n    }\n    int f(string pref, string suff) {\n        TrieNode *n = t->find(suff + \"#\" + pref);\n        int ans = -1;\n        if (n == nullptr) return ans;\n        dfs(ans, n);\n        return ans;\n    }\n    void dfs(int &ans, TrieNode *n) {\n        if (n->end) ans = max(ans, n->idx);\n        for (int i = 0; i < CHILD_SIZE; i++) {\n            if (n->children[i] == nullptr) continue;\n            dfs(ans, n->children[i]);\n        }\n    }\n};",lang:"cpp"})))}));e["default"]=n=>{var e=r.useContext(t.context),i=e.demos;return r.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&t.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),r.createElement(o,{demos:i})}}}]);