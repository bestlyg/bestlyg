(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[6907],{47372:function(n,e,t){"use strict";t.r(e);var l=t(96832),c=t(22131),r=t(89730),o=l.memo((n=>{n.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"892-\u4e09\u7ef4\u5f62\u4f53\u7684\u8868\u9762\u79ef"},l.createElement(c.AnchorLink,{to:"#892-\u4e09\u7ef4\u5f62\u4f53\u7684\u8868\u9762\u79ef","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"892. \u4e09\u7ef4\u5f62\u4f53\u7684\u8868\u9762\u79ef"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(c.Link,{to:"https://leetcode-cn.com/problems/surface-area-of-3d-shapes/"},"892. \u4e09\u7ef4\u5f62\u4f53\u7684\u8868\u9762\u79ef"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u7b80\u5355",l.createElement("br",null),"\u6807\u7b7e\uff1a\u51e0\u4f55\u3001\u6570\u7ec4\u3001\u6570\u5b66\u3001\u77e9\u9635",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bf7\u4f60\u8fd4\u56de\u6700\u7ec8\u8fd9\u4e9b\u5f62\u4f53\u7684\u603b\u8868\u9762\u79ef\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---cpp"},l.createElement(c.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.03.22"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a4ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a9MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5bf9\u6bcf\u4e00\u5757\u7684\u56db\u8fb9\u8fdb\u884c\u7edf\u8ba1\u3002")),l.createElement(r.Z,{code:"int dirs[4][2] = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};\nclass Solution {\n   public:\n    int surfaceArea(vector<vector<int>>& grid) {\n        int n = grid.size(), ans = 0;\n        for (int row = 0; row < n; row++) {\n            for (int col = 0; col < n; col++) {\n                int cnt = grid[row][col];\n                if (cnt == 0) continue;\n                ans += 2;\n                for (int i = 0; i < 4; i++) {\n                    int nrow = row + dirs[i][0], ncol = col + dirs[i][1];\n                    if (nrow < 0 || nrow >= n || ncol < 0 || ncol >= n) {\n                        ans += cnt;\n                        continue;\n                    }\n                    int ncnt = grid[nrow][ncol];\n                    if (ncnt < cnt) ans += cnt - ncnt;\n                }\n            }\n        }\n        return ans;\n    }\n};",lang:"cpp"})))}));e["default"]=n=>{var e=l.useContext(c.context),t=e.demos;return l.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&c.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),l.createElement(o,{demos:t})}}}]);