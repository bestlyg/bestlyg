(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[86458],{14239:function(e,n,l){"use strict";l.r(n);var r=l(96832),t=l(22131),o=l(89730),i=r.memo((e=>{e.demos;return r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"1106-\u89e3\u6790\u5e03\u5c14\u8868\u8fbe\u5f0f"},r.createElement(t.AnchorLink,{to:"#1106-\u89e3\u6790\u5e03\u5c14\u8868\u8fbe\u5f0f","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"1106. \u89e3\u6790\u5e03\u5c14\u8868\u8fbe\u5f0f"),r.createElement("blockquote",null,r.createElement("p",null,"\u94fe\u63a5\uff1a",r.createElement(t.Link,{to:"https://leetcode.cn/problems/parsing-a-boolean-expression/"},"1106. \u89e3\u6790\u5e03\u5c14\u8868\u8fbe\u5f0f"),r.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",r.createElement("br",null),"\u6807\u7b7e\uff1a\u6808\u3001\u9012\u5f52\u3001\u5b57\u7b26\u4e32",r.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u4f60\u4e00\u4e2a\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u8ff0\u7684 \u5e03\u5c14\u8868\u8fbe\u5f0f\uff08boolean\uff09 expression\uff0c\u8fd4\u56de\u8be5\u5f0f\u7684\u8fd0\u7b97\u7ed3\u679c\u3002")),r.createElement("h2",{id:"\u9898\u89e3-1---cpp"},r.createElement(t.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.11.05"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a4ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a7MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u904d\u5386\u3002")),r.createElement(o.Z,{code:"class Solution {\npublic:\n    int n, i;\n    string expression;\n    bool parseBoolExpr(string expression) {\n        this->expression = expression;\n        n = expression.size();\n        i = 0;\n        return _parseBoolExpr();\n    }\n    bool _parseBoolExpr() {\n        if (expression[i] == 't' || expression[i] == 'f') return expression[i++] == 't';\n        return nextBlock();\n    }\n    bool nextBlock() {\n        char op = expression[i];\n        i += 2;\n        bool init = true, cur;\n        while (i < n && expression[i] != ')') {\n            bool load = _parseBoolExpr();\n            if (init) cur = load, init = false;\n            else if (op == '|') cur |= load;\n            else if (op == '&') cur &= load;\n            if (expression[i] == ',') i++;\n        }\n        if (op == '!') cur = !cur;\n        i++;\n        return cur;\n    }\n};",lang:"cpp"})))}));n["default"]=e=>{var n=r.useContext(t.context),l=n.demos;return r.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&t.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),r.createElement(i,{demos:l})}}}]);