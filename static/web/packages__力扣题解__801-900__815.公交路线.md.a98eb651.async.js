(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[78050],{75514:function(e,n,t){"use strict";t.r(n);var s=t(96832),o=t(22131),u=t(89730),a=s.memo((e=>{e.demos;return s.createElement(s.Fragment,null,s.createElement("div",{className:"markdown"},s.createElement("h1",{id:"815-\u516c\u4ea4\u8def\u7ebf"},s.createElement(o.AnchorLink,{to:"#815-\u516c\u4ea4\u8def\u7ebf","aria-hidden":"true",tabIndex:-1},s.createElement("span",{className:"icon icon-link"})),"815. \u516c\u4ea4\u8def\u7ebf"),s.createElement("blockquote",null,s.createElement("p",null,"\u94fe\u63a5\uff1a",s.createElement(o.Link,{to:"https://leetcode-cn.com/problems/bus-routes/"},"815. \u516c\u4ea4\u8def\u7ebf"),s.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",s.createElement("br",null),"\u6807\u7b7e\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u6570\u7ec4\u3001\u54c8\u5e0c\u8868",s.createElement("br",null),"\u7b80\u4ecb\uff1a\u6c42\u51fa \u6700\u5c11\u4e58\u5750\u7684\u516c\u4ea4\u8f66\u6570\u91cf \u3002\u5982\u679c\u4e0d\u53ef\u80fd\u5230\u8fbe\u7ec8\u70b9\u8f66\u7ad9\uff0c\u8fd4\u56de -1 \u3002")),s.createElement("h2",{id:"\u9898\u89e3-1---typescript"},s.createElement(o.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},s.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),s.createElement("ul",null,s.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.06.28"),s.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a268ms"),s.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a71.6MB"),s.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),s.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u50a8\u5b58\u7ad9\u70b9\u4fe1\u606f\u548c\u516c\u4ea4\u6362\u7ad9\u4fe1\u606f\u3002")),s.createElement(u.Z,{code:"function numBusesToDestination(routes: number[][], source: number, target: number): number {\n  if (source === target) return 0;\n  const stationMap = new Map<number, Set<number>>();\n  for (let routeIndex = 0, routeLen = routes.length; routeIndex < routeLen; routeIndex++) {\n    const route = routes[routeIndex];\n    for (\n      let stationIndex = 0, stationLen = route.length;\n      stationIndex < stationLen;\n      stationIndex++\n    ) {\n      const station = route[stationIndex];\n      let set = stationMap.get(station);\n      if (!set) stationMap.set(station, (set = new Set()));\n      set.add(routeIndex);\n    }\n  }\n  const busMap = new Map<number, Set<number>>();\n  for (const busList of stationMap.values()) {\n    if (busList.size === 1) continue;\n    for (const bus of busList) {\n      let set = busMap.get(bus);\n      if (!set) busMap.set(bus, (set = new Set()));\n      for (const nextBus of busList) if (nextBus !== bus) set.add(nextBus);\n    }\n  }\n  const FIRST_BUS = stationMap.get(source)!;\n  const LAST_BUS = stationMap.get(target)!;\n  if (!FIRST_BUS || !LAST_BUS || FIRST_BUS.size === 0 || LAST_BUS.size === 0) return -1;\n  for (const bus of FIRST_BUS) if (LAST_BUS.has(bus)) return 1;\n  let ans = Infinity;\n  const stepMap = new Map<number, number>();\n  for (const bus of FIRST_BUS) stepMap.set(bus, 1);\n  const queue: number[] = [...FIRST_BUS];\n  while (queue.length !== 0) {\n    const bus = queue.shift()!;\n    const step = stepMap.get(bus)!;\n    if (LAST_BUS.has(bus)) {\n      ans = Math.min(ans, step);\n      continue;\n    }\n    const nextBusList = busMap.get(bus)!;\n    for (const nextBus of nextBusList ?? []) {\n      if (!stepMap.has(nextBus)) queue.push(nextBus);\n      stepMap.set(nextBus, Math.min(stepMap.get(nextBus) ?? Infinity, step + 1));\n    }\n  }\n  return ans === Infinity ? -1 : ans;\n}",lang:"typescript"})))}));n["default"]=e=>{var n=s.useContext(o.context),t=n.demos;return s.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&o.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),s.createElement(a,{demos:t})}}}]);