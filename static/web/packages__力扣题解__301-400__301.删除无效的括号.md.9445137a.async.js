(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[97104],{99119:function(e,t,n){"use strict";n.r(t);var r=n(96832),l=n(22131),i=n(89730),s=r.memo((e=>{e.demos;return r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"301-\u5220\u9664\u65e0\u6548\u7684\u62ec\u53f7"},r.createElement(l.AnchorLink,{to:"#301-\u5220\u9664\u65e0\u6548\u7684\u62ec\u53f7","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"301. \u5220\u9664\u65e0\u6548\u7684\u62ec\u53f7"),r.createElement("blockquote",null,r.createElement("p",null,"\u94fe\u63a5\uff1a",r.createElement(l.Link,{to:"https://leetcode-cn.com/problems/remove-invalid-parentheses/"},"301. \u5220\u9664\u65e0\u6548\u7684\u62ec\u53f7"),r.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",r.createElement("br",null),"\u6807\u7b7e\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5b57\u7b26\u4e32\u3001\u56de\u6eaf",r.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u4f60\u4e00\u4e2a\u7531\u82e5\u5e72\u62ec\u53f7\u548c\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 s \uff0c\u5220\u9664\u6700\u5c0f\u6570\u91cf\u7684\u65e0\u6548\u62ec\u53f7\uff0c\u4f7f\u5f97\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u6709\u6548\u3002")),r.createElement("h2",{id:"\u9898\u89e3-1---typescript"},r.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.10.27"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a104ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a46.3MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1adfs\u3002")),r.createElement(i.Z,{code:"const map: Record<string, string[]> = {};\nfunction removeInvalidParentheses(s: string): string[] {\n  if (map[s]) return map[s];\n  const replaceStr = s.replace(new RegExp('[(]|[)]', 'g'), '');\n  const leftList: number[] = [];\n  const rightList: number[] = [];\n  const n = s.length;\n  for (let i = 0; i < n; i++) {\n    const ch = s[i];\n    if (ch === '(') leftList.push(i);\n    if (ch === ')') rightList.push(i);\n  }\n  if (leftList.length === 0 || rightList.length === 0) return [replaceStr];\n  let max = replaceStr.length;\n  const ans = new Set<string>(['', replaceStr]);\n  for (const left of leftList) {\n    let rightIdx = findRight(left);\n    for (let rlen = rightList.length; rightIdx < rlen; rightIdx++) {\n      const right = rightList[rightIdx];\n      for (const s0 of removeInvalidParentheses(s.substring(0, left))) {\n        for (const s1 of removeInvalidParentheses(s.substring(left + 1, right))) {\n          for (const s2 of removeInvalidParentheses(s.substring(right + 1))) {\n            const str = `${s0}(${s1})${s2}`;\n            max = Math.max(max, str.length);\n            ans.add(str);\n          }\n        }\n      }\n    }\n  }\n  return (map[s] = Array.from(ans).filter(v => v.length === max));\n  function findRight(leftIdx: number) {\n    let left = 0;\n    let right = rightList.length - 1;\n    if (rightList[right] < leftIdx) return Infinity;\n    while (left < right) {\n      const mid = (left + right) >> 1;\n      if (rightList[mid] >= leftIdx) right = mid;\n      else left = mid + 1;\n    }\n    return left;\n  }\n}",lang:"typescript"})))}));t["default"]=e=>{var t=r.useContext(l.context),n=t.demos;return r.useEffect((()=>{var t;null!==e&&void 0!==e&&null!==(t=e.location)&&void 0!==t&&t.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),r.createElement(s,{demos:n})}}}]);