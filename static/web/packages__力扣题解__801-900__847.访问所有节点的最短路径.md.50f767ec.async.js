(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[59662],{57719:function(e,n,t){"use strict";t.r(n);var l=t(96832),a=t(22131),r=t(89730),s=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"847-\u8bbf\u95ee\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84"},l.createElement(a.AnchorLink,{to:"#847-\u8bbf\u95ee\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"847. \u8bbf\u95ee\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(a.Link,{to:"https://leetcode-cn.com/problems/shortest-path-visiting-all-nodes/"},"847. \u8bbf\u95ee\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",l.createElement("br",null),"\u6807\u7b7e\uff1a\u4f4d\u8fd0\u7b97\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u56fe\u3001\u52a8\u6001\u89c4\u5212\u3001\u72b6\u6001\u538b\u7f29",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8fd4\u56de\u80fd\u591f\u8bbf\u95ee\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(a.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.08.06"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a120ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a45mb"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1abfs,\u5229\u7528 set \u505a\u91cd\u590d\u503c\u8fc7\u6ee4\u3002")),l.createElement(r.Z,{code:"function shortestPathLength(graph: number[][]): number {\n  const n = graph.length;\n  const queue: [number, number, number][] = [];\n  const seen = new Array(n).fill(0).map(_ => new Set<number>());\n  for (let i = 0; i < n; i++) {\n    queue.push([i, 1 << i, 0]);\n    seen[i].add(1 << i);\n  }\n  let ans = Infinity;\n  while (queue.length) {\n    const data = queue.shift()!;\n    const [idx, mask, step] = data;\n    if (mask === (1 << n) - 1) {\n      ans = step;\n      break;\n    }\n    for (const next of graph[idx]) {\n      const newMask = mask | (1 << next);\n      if (seen[next].has(newMask)) continue;\n      queue.push([next, newMask, step + 1]);\n      seen[next].add(newMask);\n    }\n  }\n  return ans;\n}",lang:"typescript"})))}));n["default"]=e=>{var n=l.useContext(a.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&a.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(s,{demos:t})}}}]);