(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[39220],{59109:function(e,n,r){"use strict";r.r(n);var t=r(96832),o=r(22131),a=r(89730),l=t.memo((e=>{e.demos;return t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"773-\u6ed1\u52a8\u8c1c\u9898"},t.createElement(o.AnchorLink,{to:"#773-\u6ed1\u52a8\u8c1c\u9898","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"773. \u6ed1\u52a8\u8c1c\u9898"),t.createElement("blockquote",null,t.createElement("p",null,"\u94fe\u63a5\uff1a",t.createElement(o.Link,{to:"https://leetcode-cn.com/problems/sliding-puzzle/"},"773. \u6ed1\u52a8\u8c1c\u9898"),t.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",t.createElement("br",null),"\u6807\u7b7e\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u6570\u7ec4\u3001\u77e9\u9635",t.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u51fa\u4e00\u4e2a\u8c1c\u677f\u7684\u521d\u59cb\u72b6\u6001\uff0c\u8fd4\u56de\u6700\u5c11\u53ef\u4ee5\u901a\u8fc7\u591a\u5c11\u6b21\u79fb\u52a8\u89e3\u5f00\u8c1c\u677f\uff0c\u5982\u679c\u4e0d\u80fd\u89e3\u5f00\u8c1c\u677f\uff0c\u5219\u8fd4\u56de -1 \u3002")),t.createElement("h2",{id:"\u9898\u89e3-1---typescript"},t.createElement(o.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.06.26"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a192ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a50.8MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5e7f\u5ea6\u60a0\u95f2\u641c\u7d22\uff0c\u8ba1\u7b97\u6bcf\u6b21\u79fb\u52a8\u540e\u7684\u6700\u5c0f\u6b65\u6570\u3002")),t.createElement(a.Z,{code:"function slidingPuzzle(board: number[][]): number {\n  const ANS_STR = '123,450';\n  const stringify = (board: (number | string)[][]) => board.map(v => v.join('')).join(',');\n  if (stringify(board) === ANS_STR) return 0;\n  const parse = (boardStr: string) => boardStr.split(',').map(v => v.split(''));\n  const getZeroIndex = (index: number): [number, number] =>\n    index <= 2 ? [0, index] : [1, index - 4];\n  const queue: string[] = [stringify(board)];\n  const map = new Map<string, number>([[queue[0], 0]]);\n  let ans = Infinity;\n  const updateMap = (newStr: string, step: number) => {\n    if (newStr === ANS_STR) ans = Math.min(ans, step + 1);\n    else {\n      map.has(newStr) || queue.push(newStr);\n      map.set(newStr, Math.min(map.get(newStr) ?? Infinity, step + 1));\n    }\n  };\n  const swap = (board: string[][], row1: number, col1: number, row2: number, col2: number) => {\n    [board[row1][col1], board[row2][col2]] = [board[row2][col2], board[row1][col1]];\n  };\n  while (queue.length !== 0) {\n    const boardStr = queue.shift()!;\n    const step = map.get(boardStr)!;\n    const [row, col] = getZeroIndex(boardStr.indexOf('0'));\n    const board = parse(boardStr);\n    if (row === 0) {\n      swap(board, row, col, row + 1, col);\n      updateMap(stringify(board), step);\n      swap(board, row, col, row + 1, col);\n    }\n    if (row === 1) {\n      swap(board, row, col, row - 1, col);\n      updateMap(stringify(board), step);\n      swap(board, row, col, row - 1, col);\n    }\n    if (col > 0) {\n      swap(board, row, col, row, col - 1);\n      updateMap(stringify(board), step);\n      swap(board, row, col, row, col - 1);\n    }\n    if (col < 2) {\n      swap(board, row, col, row, col + 1);\n      updateMap(stringify(board), step);\n      swap(board, row, col, row, col + 1);\n    }\n  }\n  return ans === Infinity ? -1 : ans;\n}",lang:"typescript"})))}));n["default"]=e=>{var n=t.useContext(o.context),r=n.demos;return t.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&o.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),t.createElement(l,{demos:r})}}}]);