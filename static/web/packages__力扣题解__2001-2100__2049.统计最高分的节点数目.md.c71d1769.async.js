(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[20973],{20419:function(n,t,e){"use strict";e.r(t);var l=e(96832),i=e(22131),c=e(89730),s=l.memo((n=>{n.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"2049-\u7edf\u8ba1\u6700\u9ad8\u5206\u7684\u8282\u70b9\u6570\u76ee"},l.createElement(i.AnchorLink,{to:"#2049-\u7edf\u8ba1\u6700\u9ad8\u5206\u7684\u8282\u70b9\u6570\u76ee","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"2049. \u7edf\u8ba1\u6700\u9ad8\u5206\u7684\u8282\u70b9\u6570\u76ee"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(i.Link,{to:"https://leetcode-cn.com/problems/count-nodes-with-the-highest-score/"},"2049. \u7edf\u8ba1\u6700\u9ad8\u5206\u7684\u8282\u70b9\u6570\u76ee"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u6570\u7ec4\u3001\u4e8c\u53c9\u6811",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bf7\u4f60\u8fd4\u56de\u6709 \u6700\u9ad8\u5f97\u5206 \u8282\u70b9\u7684 \u6570\u76ee \u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---c"},l.createElement(i.AnchorLink,{to:"#\u9898\u89e3-1---c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - c++"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.03.11"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a128ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a79.6MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac++"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u7684\u7236\u8282\u70b9\uff0c\u5de6\u5b50\u6811\u4e2a\u6570\uff0c\u53f3\u5b50\u6811\u4e2a\u6570\u3002")),l.createElement(c.Z,{code:"class Solution {\n   public:\n    struct node {\n        int parent, left, right, lcnt, rcnt;\n    };\n    // ans\n    int ans = 0;\n    long long maxnum = -1;\n    void setAns(long long num) {\n        if (num >= maxnum) {\n            if (num > maxnum) ans = 0;\n            ans++;\n            maxnum = num;\n        }\n    }\n    int countHighestScoreNodes(vector<int>& parents) {\n        int n = parents.size();\n        vector<node> list(n);\n        // init\n        for (int i = 0; i < n; i++) {\n            list[i].parent = parents[i];\n            list[i].left = list[i].right = -1;\n            list[i].lcnt = list[i].rcnt = 0;\n        }\n        // load\n        for (int i = 1; i < n; i++) {\n            if (list[list[i].parent].left == -1)\n                list[list[i].parent].left = i;\n            else\n                list[list[i].parent].right = i;\n        }\n        // check\n        int sum = check(list, 0);\n        // res\n        for (int i = 1; i < n; i++) {\n            if (list[i].lcnt == 0 && list[i].rcnt == 0) {\n                setAns((long long)list[0].lcnt + list[0].rcnt);\n                continue;\n            }\n            setAns((long long)format(sum - 1 - list[i].lcnt - list[i].rcnt) *\n                   format(list[i].lcnt) * format(list[i].rcnt));\n        }\n        // res0\n        setAns((long long)format(list[0].lcnt) * format(list[0].rcnt));\n        return ans;\n    }\n    int check(vector<node>& list, int node) {\n        int ans = 0;\n        if (list[node].left != -1) {\n            list[node].lcnt = check(list, list[node].left);\n            ans += list[node].lcnt;\n        }\n        if (list[node].right != -1) {\n            list[node].rcnt = check(list, list[node].right);\n            ans += list[node].rcnt;\n        }\n        return ans + 1;\n    }\n    int format(int num) { return num == 0 ? 1 : num; }\n};",lang:"cpp"})))}));t["default"]=n=>{var t=l.useContext(i.context),e=t.demos;return l.useEffect((()=>{var t;null!==n&&void 0!==n&&null!==(t=n.location)&&void 0!==t&&t.hash&&i.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),l.createElement(s,{demos:e})}}}]);