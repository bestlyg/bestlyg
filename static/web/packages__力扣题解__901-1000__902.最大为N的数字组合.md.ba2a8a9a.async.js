(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[95893],{63871:function(n,e,t){"use strict";t.r(e);var i=t(96832),l=t(22131),r=t(89730),s=i.memo((n=>{n.demos;return i.createElement(i.Fragment,null,i.createElement("div",{className:"markdown"},i.createElement("h1",{id:"902-\u6700\u5927\u4e3a-n-\u7684\u6570\u5b57\u7ec4\u5408"},i.createElement(l.AnchorLink,{to:"#902-\u6700\u5927\u4e3a-n-\u7684\u6570\u5b57\u7ec4\u5408","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"902. \u6700\u5927\u4e3a N \u7684\u6570\u5b57\u7ec4\u5408"),i.createElement("blockquote",null,i.createElement("p",null,"\u94fe\u63a5\uff1a",i.createElement(l.Link,{to:"https://leetcode.cn/problems/numbers-at-most-n-given-digit-set/"},"902. \u6700\u5927\u4e3a N \u7684\u6570\u5b57\u7ec4\u5408"),i.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",i.createElement("br",null),"\u6807\u7b7e\uff1a\u6570\u7ec4\u3001\u6570\u5b66\u3001\u5b57\u7b26\u4e32\u3001\u4e8c\u5206\u67e5\u627e\u3001\u52a8\u6001\u89c4\u5212",i.createElement("br",null),"\u7b80\u4ecb\uff1a\u8fd4\u56de \u53ef\u4ee5\u751f\u6210\u7684\u5c0f\u4e8e\u6216\u7b49\u4e8e\u7ed9\u5b9a\u6574\u6570 n \u7684\u6b63\u6574\u6570\u7684\u4e2a\u6570 \u3002")),i.createElement("h2",{id:"\u9898\u89e3-1---cpp"},i.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.10.18"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a8MB"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5148\u7edf\u8ba1\u5c11\u4e00\u4f4d\u6570\u7684\u60c5\u51b5\uff0c\u518d\u5bf9\u4e8e\u4f4d\u6570\u76f8\u540c\u7684\u60c5\u51b5\u8fdb\u884c\u904d\u5386\u3002")),i.createElement(r.Z,{code:"class Solution {\npublic:\n    int getCnt(int n, int &first, int &firstNum) {\n        int ans = 0;\n        for (; n; n /= 10) {\n            ans++;\n            if (n < 10) first *= n, firstNum = n;\n            else first *= 10;\n        }\n        return ans;\n    }\n    int atMostNGivenDigitSet(vector<string>& digits, int n, bool empty = true) {\n        if (n == 0) return 0;\n        if (n < 10) {\n            int idx = digits.size() - 1;\n            while (idx >= 0 && digits[idx][0] - '0' > n) idx--;\n            return idx + 1;\n        }\n        int firstNum, first = 1, cnt = getCnt(n, first, firstNum), sum = 0, ans = 0;\n        for (int i = 1; i < cnt; i++) sum += pow(digits.size(), i);\n        int idx = digits.size() - 1;\n        string s = to_string(n);\n        while (idx >= 0 && digits[idx][0] - '0' > firstNum) idx--;\n        if (idx < 0) return empty ? sum : 0;\n        if (digits[idx][0] - '0' == firstNum) {\n            int _first = 0, _firstNum = 0;\n            if (getCnt(n - first, _first, _firstNum) == cnt - 1) ans += atMostNGivenDigitSet(digits, n - first, false);\n            idx--;\n        }\n        ans += (idx + 1) * pow(digits.size(), cnt - 1);\n        return empty ? ans + sum : ans;\n    }\n};",lang:"cpp"})))}));e["default"]=n=>{var e=i.useContext(l.context),t=e.demos;return i.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),i.createElement(s,{demos:t})}}}]);