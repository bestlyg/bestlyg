(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[76562],{41975:function(n,e,i){"use strict";i.r(e);var t=i(96832),l=i(22131),s=i(89730),o=t.memo((n=>{n.demos;return t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"564-\u5bfb\u627e\u6700\u8fd1\u7684\u56de\u6587\u6570"},t.createElement(l.AnchorLink,{to:"#564-\u5bfb\u627e\u6700\u8fd1\u7684\u56de\u6587\u6570","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"564. \u5bfb\u627e\u6700\u8fd1\u7684\u56de\u6587\u6570"),t.createElement("blockquote",null,t.createElement("p",null,"\u94fe\u63a5\uff1a",t.createElement(l.Link,{to:"https://leetcode-cn.com/problems/find-the-closest-palindrome/"},"564. \u5bfb\u627e\u6700\u8fd1\u7684\u56de\u6587\u6570"),t.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",t.createElement("br",null),"\u6807\u7b7e\uff1a\u6570\u5b66\u3001\u5b57\u7b26\u4e32",t.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u8868\u793a\u6574\u6570\u7684\u5b57\u7b26\u4e32 n \uff0c\u8fd4\u56de\u4e0e\u5b83\u6700\u8fd1\u7684\u56de\u6587\u6574\u6570\uff08\u4e0d\u5305\u62ec\u81ea\u8eab\uff09\u3002\u5982\u679c\u4e0d\u6b62\u4e00\u4e2a\uff0c\u8fd4\u56de\u8f83\u5c0f\u7684\u90a3\u4e2a\u3002 \u201c\u6700\u8fd1\u7684\u201d\u5b9a\u4e49\u4e3a\u4e24\u4e2a\u6574\u6570\u5dee\u7684\u7edd\u5bf9\u503c\u6700\u5c0f\u3002")),t.createElement("h2",{id:"\u9898\u89e3-1---c"},t.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---c","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - c++"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.03.02"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a6.3MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac++"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u68c0\u6d4b\u8fdb\u4f4d\u548c\u9000\u4f4d\u7684\u95ee\u9898\u540e\uff0c\u7ffb\u8f6c\u524d\u534a\u90e8\u4efd\u3002")),t.createElement(s.Z,{code:"class Solution {\n   public:\n    string nearestPalindromic(string n) {\n        // \u68c0\u6d4b\u4e00\u4f4d\u6570\n        if (n.size() == 1) {\n            n[0] -= 1;\n            return n;\n        }\n        // \u68c0\u6d4b10000\n        if (n[0] == '1') {\n            int i = 1;\n            while (i < n.size() && n[i] == '0') i++;\n            if (i == n.size() || i == n.size() - 1 && n[i] == '1') {\n                string ans = \"\";\n                for (int i = 1; i < n.size(); i++) ans += '9';\n                return ans;\n            }\n        }\n        // \u68c0\u6d4b99999\n        if (n[0] == '9') {\n            int i = 1;\n            while (i < n.size() && n[i] == '9') i++;\n            if (i == n.size()) {\n                string ans = \"1\";\n                for (int i = 1; i < n.size(); i++) ans += \"0\";\n                ans += \"1\";\n                return ans;\n            }\n        }\n        // \u68c0\u6d4b\u5176\u5b83\n        return common(n);\n    }\n    string common(const string &n) {\n        long long num = stoll(n);\n        vector<long long> list = getlist(n);\n        long long ans = -1, minus_num = INT_MAX;\n        for (int i = 0; i < list.size(); i++) {\n            int minus = abs(list[i] - num);\n            if (minus == 0) continue;\n            if (minus < minus_num || minus == minus_num && list[i] < ans) {\n                ans = list[i];\n                minus_num = minus;\n            }\n        }\n        return to_string(ans);\n    }\n    vector<long long> getlist(const string &n) {\n        if (n.size() & 1)\n            return getlist_odd(n);\n        else\n            return getlist_even(n);\n    }\n    vector<long long> getlist_odd(const string &n) {\n        vector<long long> ans;\n        long long high_num = 0;\n        for (int i = 0; i <= n.size() / 2; i++) {\n            high_num = high_num * 10 + n[i] - '0';\n        }\n        ans.push_back(getnum(high_num / 10, getlow(high_num / 10), n.size() / 2,\n                             high_num % 10));\n        ans.push_back(getnum((high_num + 1) / 10, getlow((high_num + 1) / 10),\n                             n.size() / 2, (high_num + 1) % 10));\n        ans.push_back(getnum((high_num - 1) / 10, getlow((high_num - 1) / 10),\n                             n.size() / 2, (high_num - 1) % 10));\n        return ans;\n    }\n    vector<long long> getlist_even(const string &n) {\n        vector<long long> ans;\n        long long high_num = 0;\n        for (int i = 0; i < n.size() / 2; i++) {\n            high_num = high_num * 10 + n[i] - '0';\n        }\n        ans.push_back(getnum(high_num, getlow(high_num), n.size() / 2, -1));\n        ans.push_back(\n            getnum(high_num + 1, getlow(high_num + 1), n.size() / 2, -1));\n        ans.push_back(\n            getnum(high_num - 1, getlow(high_num - 1), n.size() / 2, -1));\n        return ans;\n    }\n    long long getnum(const long long &high, const long long &low,\n                     const int size, const int mid) {\n        long long num = high;\n        num *= pow(10, size);\n        if (mid != -1) {\n            num *= 10;\n            num += mid * pow(10, size);\n        }\n        num += low;\n        return num;\n    }\n    long long getlow(const long long &num) {\n        string ans = to_string(num);\n        reverse(ans.begin(), ans.end());\n        return stoll(ans);\n    }\n};",lang:"cpp"})))}));e["default"]=n=>{var e=t.useContext(l.context),i=e.demos;return t.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),t.createElement(o,{demos:i})}}}]);