(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[94465],{5515:function(e,n,t){"use strict";t.r(n);var l=t(96832),c=t(22131),r=t(89730),a=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"1405-\u6700\u957f\u5feb\u4e50\u5b57\u7b26\u4e32"},l.createElement(c.AnchorLink,{to:"#1405-\u6700\u957f\u5feb\u4e50\u5b57\u7b26\u4e32","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"1405. \u6700\u957f\u5feb\u4e50\u5b57\u7b26\u4e32"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(c.Link,{to:"https://leetcode-cn.com/problems/longest-happy-string/"},"1405. \u6700\u957f\u5feb\u4e50\u5b57\u7b26\u4e32"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u8d2a\u5fc3\u3001\u5b57\u7b26\u4e32\u3001\u5806(\u4f18\u5148\u961f\u5217)",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u4f60\u4e09\u4e2a\u6574\u6570 a\uff0cb \uff0cc\uff0c\u8bf7\u4f60\u8fd4\u56de \u4efb\u610f\u4e00\u4e2a \u6ee1\u8db3\u4e0b\u5217\u5168\u90e8\u6761\u4ef6\u7684\u5b57\u7b26\u4e32 s\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---c"},l.createElement(c.AnchorLink,{to:"#\u9898\u89e3-1---c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - c++"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.02.07"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a5.9MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac++"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u8d2a\u5fc3,\u5806,\u6bcf\u6b21\u53d6\u6700\u5927\u7684\u5143\u7d20\u8fdb\u884c\u585e\u5165\u3002")),l.createElement(r.Z,{code:"class Solution {\n   public:\n    typedef pair<char, int> node;\n    string longestDiverseString(int a, int b, int c) {\n        auto cmp = [&](node x, node y) -> bool { return x.second < y.second; };\n        priority_queue<node, vector<node>, decltype(cmp)> q(cmp);\n        q.push(make_pair('a', a));\n        q.push(make_pair('b', b));\n        q.push(make_pair('c', c));\n        string ans = \"\";\n        while (1) {\n            node v = q.top();\n            int prev_cnt = 0;  // \u770b\u770b\u524d\u9762\u6709\u51e0\u4e2a\u4e00\u6837\u7684\n            for (int i = ans.size() - 1; i >= 0 && ans[i] == v.first; i--)\n                prev_cnt++;\n            if (v.second == 0 || prev_cnt >= 2)\n                break;  // \u5982\u679c\u6240\u6709\u7684\u90fd\u6ca1\u4e86\u6216\u8005\u524d\u9762\u6709\u4e24\u4e2a\u4e00\u6837\u7684\uff0c\u5c31\u4e0d\u8981\u4e86\n            q.pop();\n            int cnt = prev_cnt == 1 ? 1 : v.second >= 2 ? 2 : 1;\n            v.second -= cnt;\n            while (cnt--) ans += v.first;  // \u585e\u8fdb\u53bb\n            node nv = q.top();  // \u5c1d\u8bd5\u4ece\u4e0b\u4e00\u4e2a\u5b57\u7b26\u62ff\u4e00\u4e2a\u505a\u95f4\u9694\n            q.pop();\n            if (nv.second >= 1) {\n                ans += nv.first;\n                nv.second -= 1;\n            }\n            q.push(nv);\n            q.push(v);\n        }\n        return ans;\n    }\n};",lang:"cpp"})))}));n["default"]=e=>{var n=l.useContext(c.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&c.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);