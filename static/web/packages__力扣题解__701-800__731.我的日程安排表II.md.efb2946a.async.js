(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[58281],{63444:function(e,n,l){"use strict";l.r(n);var t=l(96832),r=l(22131),a=l(89730),i=t.memo((e=>{e.demos;return t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"731-\u6211\u7684\u65e5\u7a0b\u5b89\u6392\u8868-ii"},t.createElement(r.AnchorLink,{to:"#731-\u6211\u7684\u65e5\u7a0b\u5b89\u6392\u8868-ii","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"731. \u6211\u7684\u65e5\u7a0b\u5b89\u6392\u8868 II"),t.createElement("blockquote",null,t.createElement("p",null,"\u94fe\u63a5\uff1a",t.createElement(r.Link,{to:"https://leetcode.cn/problems/my-calendar-ii/"},"731. \u6211\u7684\u65e5\u7a0b\u5b89\u6392\u8868 II"),t.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",t.createElement("br",null),"\u6807\u7b7e\uff1a\u8bbe\u8ba1\u3001\u7ebf\u6bb5\u6811\u3001\u4e8c\u5206\u67e5\u627e\u3001\u6709\u5e8f\u96c6\u5408",t.createElement("br",null),"\u7b80\u4ecb\uff1a\u5b9e\u73b0\u4e00\u4e2a MyCalendar \u7c7b\u6765\u5b58\u653e\u4f60\u7684\u65e5\u7a0b\u5b89\u6392\u3002\u5982\u679c\u8981\u6dfb\u52a0\u7684\u65f6\u95f4\u5185\u4e0d\u4f1a\u5bfc\u81f4\u4e09\u91cd\u9884\u8ba2\u65f6\uff0c\u5219\u53ef\u4ee5\u5b58\u50a8\u8fd9\u4e2a\u65b0\u7684\u65e5\u7a0b\u5b89\u6392\u3002")),t.createElement("h2",{id:"\u9898\u89e3-1---rust"},t.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---rust","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - rust"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.07.19"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a28ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a2.7MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1arust"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u8bb0\u5f55\u5df2\u7ecf\u91cd\u53e0\u7684\u90e8\u5206\uff0c\u6bcf\u6b21\u904d\u5386\u65f6\u5224\u65ad\u65b0\u6dfb\u52a0\u7684\u662f\u5426\u548c\u5df2\u91cd\u53e0\u90e8\u5206\u6709\u51b2\u7a81\u3002")),t.createElement(a.Z,{code:'struct MyCalendarTwo {\n    list: Vec<(i32, i32)>,\n    overlap: Vec<(i32, i32)>,\n}\nimpl MyCalendarTwo {\n    fn new() -> Self {\n        MyCalendarTwo {\n            list: Vec::new(),\n            overlap: Vec::new(),\n        }\n    }\n    fn book(&mut self, start: i32, end: i32) -> bool {\n        let block = (start, end);\n        for item in &self.overlap {\n            if self.is_overlap(&block, item) {\n                return false;\n            }\n        }\n        for item in &self.list {\n            if self.is_overlap(&block, item) {\n                self.overlap.push((block.0.max(item.0), block.1.min(item.1)));\n            }\n        }\n        self.list.push(block);\n        print!("{}", block.0);\n        true\n    }\n    fn is_overlap(&self, v1: &(i32, i32), v2: &(i32, i32)) -> bool {\n        v1.0 < v2.1 && v1.1 > v2.0\n    }\n}',lang:"rust"})))}));n["default"]=e=>{var n=t.useContext(r.context),l=n.demos;return t.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),t.createElement(i,{demos:l})}}}]);