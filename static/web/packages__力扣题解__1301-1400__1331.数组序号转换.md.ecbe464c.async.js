(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[74054],{73843:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),a=t(89730),i=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"1331-\u6570\u7ec4\u5e8f\u53f7\u8f6c\u6362"},l.createElement(r.AnchorLink,{to:"#1331-\u6570\u7ec4\u5e8f\u53f7\u8f6c\u6362","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"1331. \u6570\u7ec4\u5e8f\u53f7\u8f6c\u6362"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode.cn/problems/rank-transform-of-an-array/"},"1331. \u6570\u7ec4\u5e8f\u53f7\u8f6c\u6362"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u7b80\u5355",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6570\u7ec4\u3001\u54c8\u5e0c\u8868\u3001\u6392\u5e8f",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 arr \uff0c\u8bf7\u4f60\u5c06\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u66ff\u6362\u4e3a\u5b83\u4eec\u6392\u5e8f\u540e\u7684\u5e8f\u53f7\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---rust"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---rust","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - rust"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.07.28"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a32ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a5.5MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1arust"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5b58\u5230 map\u3002")),l.createElement(a.Z,{code:"use std::collections::HashMap;\nimpl Solution {\n    pub fn array_rank_transform(arr: Vec<i32>) -> Vec<i32> {\n        let n = arr.len();\n        let mut ilist = Vec::with_capacity(n);\n        for i in 0..n {\n            ilist.push(i)\n        }\n        ilist.sort_by(|a, b| arr[*a].cmp(&arr[*b]));\n        let mut map = HashMap::<i32, i32>::new();\n        let mut idx = 1;\n        for i in 0..n {\n            if i == 0 {\n                map.insert(arr[ilist[i]], idx);\n            } else if arr[ilist[i - 1]] == arr[ilist[i]] {\n                continue;\n            } else {\n                idx += 1;\n                map.insert(arr[ilist[i]], idx);\n            }\n        }\n        arr\n            .iter()\n            .map(|num|*map.get(&num).unwrap())\n            .collect()\n    }\n}",lang:"rust"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(i,{demos:t})}}}]);