(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[31644],{28569:function(e,n,r){"use strict";r.r(n);var t=r(96832),o=r(22131),l=r(89730),a=t.memo((e=>{e.demos;return t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"\u4e8c\u53c9\u641c\u7d22\u6811binarysearchtree"},t.createElement(o.AnchorLink,{to:"#\u4e8c\u53c9\u641c\u7d22\u6811binarysearchtree","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u4e8c\u53c9\u641c\u7d22\u6811(BinarySearchTree)"),t.createElement("p",null,"\u4e8c\u53c9\u6811\u7684\u4e00\u79cd\uff0c\u53ef\u4ee5\u5feb\u901f\u63d0\u9ad8\u641c\u7d22\u6548\u7387"),t.createElement("ul",null,t.createElement("li",null,"\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u5927\u4e8e\u5176\u5de6\u5b50\u6811\u6240\u6709\u8282\u70b9\u7684\u503c"),t.createElement("li",null,"\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u5c0f\u4e8e\u5176\u53f3\u5b50\u6811\u6240\u6709\u8282\u70b9\u7684\u503c")),t.createElement("h2",{id:"\u6838\u5fc3\u4ee3\u7801"},t.createElement(o.AnchorLink,{to:"#\u6838\u5fc3\u4ee3\u7801","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),t.createElement(o.Link,{to:"https://gitee.com/bestlyg/bestlyg/tree/master/packages/data-structures/src/tree/binarySearchTree.ts"},"\u6838\u5fc3\u4ee3\u7801")),t.createElement(l.Z,{code:"import { BinaryTree, BinaryTreeNode } from './binaryTree';\n\nexport interface IBinarySearchTree<T> {\n  /** \u6811\u4e2d\u503c\u7684\u6570\u91cf */\n  size: number;\n  /** \u6811\u662f\u5426\u4e3a\u7a7a */\n  empty: boolean;\n  /** \u6e05\u7a7a\u6811 */\n  clear(): void;\n  /** \u6dfb\u52a0\u5143\u7d20 */\n  add(val: T): void;\n  /** \u5220\u9664\u5143\u7d20 */\n  remove(val: T): void;\n  /** \u662f\u5426\u5305\u542b\u67d0\u4e2a\u5143\u7d20 */\n  contains(val: T): boolean;\n}\nexport class BinarySearchTree<T> extends BinaryTree<T> implements IBinarySearchTree<T> {\n  protected createNode(\n    val: T,\n    parent: BinaryTreeNode<T> | null = null,\n    left: BinaryTreeNode<T> | null = null,\n    right: BinaryTreeNode<T> | null = null\n  ): BinaryTreeNode<T> {\n    return new BinaryTreeNode(val, parent, left, right);\n  }\n  add(val: T) {\n    // \u5982\u679c\u6839\u8282\u70b9\u4e3a\u7a7a\u5219\u76f4\u63a5\u8d4b\u503c\u7ed9\u6839\u8282\u70b9\n    if (this.root === null) {\n      this.afterAdd((this.root = this.createNode(val)));\n    } else {\n      let node = this.root;\n      let pos: 'left' | 'right' = 'left';\n      while (node !== null) {\n        const compare = this.compare(node.val, val);\n        if (compare > 0) {\n          if (node.left === null) break;\n          node = node.left;\n        } else if (compare < 0) {\n          if (node.right === null) {\n            pos = 'right';\n            break;\n          }\n          node = node.right;\n        } else {\n          // \u6bd4\u8f83\u503c\u76f8\u7b49\u65f6\uff0c\u76f4\u63a5\u8fdb\u884c\u8986\u76d6\uff0c\u9632\u6b62val\u4e3a\u5f15\u7528\u7c7b\u578b\n          node.val = val;\n          return;\n        }\n      }\n      this.afterAdd((node[pos] = this.createNode(val, node)));\n    }\n    this._size++;\n  }\n  protected afterAdd(node: BinaryTreeNode<T>) {}\n  remove(val: T) {\n    if (this.root === null) return;\n    // \u5bfb\u627ecompare\u4e3a0\u7684node\u503c\n    let node: BinaryTreeNode<T> | null = this.findNode(val);\n    // \u5982\u679c\u4e0d\u5b58\u5728\u8be5node\u76f4\u63a5\u8fd4\u56de\n    if (node === null) return;\n    this._size--;\n    if (node.degree === 2) {\n      const successor = node.successor()!;\n      [node.val, successor.val] = [successor.val, node.val];\n      node = successor;\n    }\n    // \u5982\u679cnode\u5ea6\u4e3a0\n    if (node.degree === 0) {\n      // \u5982\u679c\u4e3a\u6839\u8282\u70b9\u5219\u76f4\u63a5\u6e05\u7a7a\n      if (node === this.root) this.root = null;\n      else node.remove();\n      this.afterRemove(node);\n      return;\n    }\n    // \u5982\u679cnode\u5ea6\u4e3a1\n    //\u5982\u679c\u4e3a\u6839\u8282\u70b9\n    const nextNode = node.left ?? node.right!;\n    if (node.parent === null) {\n      this.root = nextNode;\n      nextNode.parent = null;\n    }\n    // \u5426\u5219\u7236\u8282\u70b9\u8d4b\u503c\u7ed9\u5b50\u8282\u70b9\n    else {\n      node.parent[node.childPosition] = nextNode;\n      nextNode.parent = node.parent;\n    }\n    this.afterRemove(nextNode);\n  }\n  protected afterRemove(node: BinaryTreeNode<T>) {}\n  contains(val: T) {\n    return this.findNode(val) !== null;\n  }\n  private findNode(val: T): BinaryTreeNode<T> | null {\n    if (this.empty) return null;\n    let node = this.root;\n    while (node !== null) {\n      const compare = this.compare(node.val, val);\n      if (compare > 0) node = node.left;\n      else if (compare < 0) node = node.right;\n      else return node;\n    }\n    return null;\n  }\n}",lang:"ts"})))}));n["default"]=e=>{var n=t.useContext(o.context),r=n.demos;return t.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&o.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),t.createElement(a,{demos:r})}}}]);