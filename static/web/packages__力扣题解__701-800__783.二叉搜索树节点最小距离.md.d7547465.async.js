(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[61661],{73097:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),i=t(89730),a=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"783-\u4e8c\u53c9\u641c\u7d22\u6811\u8282\u70b9\u6700\u5c0f\u8ddd\u79bb"},l.createElement(r.AnchorLink,{to:"#783-\u4e8c\u53c9\u641c\u7d22\u6811\u8282\u70b9\u6700\u5c0f\u8ddd\u79bb","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"783. \u4e8c\u53c9\u641c\u7d22\u6811\u8282\u70b9\u6700\u5c0f\u8ddd\u79bb"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/"},"783. \u4e8c\u53c9\u641c\u7d22\u6811\u8282\u70b9\u6700\u5c0f\u8ddd\u79bb"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u7b80\u5355",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u9012\u5f52",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u7ed3\u70b9 root, \u8fd4\u56de\u6811\u4e2d\u4efb\u610f\u4e24\u8282\u70b9\u7684\u5dee\u7684\u6700\u5c0f\u503c\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---java"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---java","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - java"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.2.23"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a36.9MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajava"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u4e2d\u5e8f\u904d\u5386\u6392\u5e8f\u540e\uff0c\u83b7\u53d6\u76f8\u90bb\u5143\u7d20\u4e4b\u95f4\u7684\u5dee\u5224\u65ad\u6700\u5c0f\u503c\u3002")),l.createElement(i.Z,{code:"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n\tArrayList<Integer> list = new ArrayList<Integer>();\n\tpublic int minDiffInBST(TreeNode root) {\n\t\tinorder(root);\n\t\tint min = list.get(1) - list.get(0);\n\t\tfor (int i = 0, len = list.size() - 1; i < len; i++)\n\t\t\tmin=Math.min(list.get(i + 1) - list.get(i), min);\n\t\treturn min;\n\t}\n\tpublic void inorder(TreeNode node) {\n\t\tif (node.left != null) {\n\t\t\tinorder(node.left);\n\t\t}\n\t\tlist.add(node.val);\n\t\tif (node.right != null) {\n\t\t\tinorder(node.right);\n\t\t}\n\t}\n}",lang:"java"}),l.createElement("h2",{id:"\u9898\u89e3-2---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-2---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.04.13"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a88ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a39.8MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u4e2d\u5e8f\u904d\u5386\u3002")),l.createElement(i.Z,{code:"function minDiffInBST(root: TreeNode | null): number {\n  if (root === null) return 0;\n  const arr: number[] = [];\n  const inorder = (node: TreeNode | null) => {\n    if (node === null) return;\n    inorder(node.left);\n    arr.push(node.val);\n    inorder(node.right);\n  };\n  inorder(root);\n  let min = Infinity;\n  for (let i = 1, l = arr.length; i < l; i++) {\n    min = Math.min(min, arr[i] - arr[i - 1]);\n  }\n  return min;\n}",lang:"typescript"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);