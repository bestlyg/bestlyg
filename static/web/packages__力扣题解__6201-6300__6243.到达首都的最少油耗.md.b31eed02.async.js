(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[86991],{5786:function(n,e,t){"use strict";t.r(e);var i=t(96832),l=t(22131),s=t(89730),r=i.memo((n=>{n.demos;return i.createElement(i.Fragment,null,i.createElement("div",{className:"markdown"},i.createElement("h1",{id:"6243-\u5230\u8fbe\u9996\u90fd\u7684\u6700\u5c11\u6cb9\u8017"},i.createElement(l.AnchorLink,{to:"#6243-\u5230\u8fbe\u9996\u90fd\u7684\u6700\u5c11\u6cb9\u8017","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"6243. \u5230\u8fbe\u9996\u90fd\u7684\u6700\u5c11\u6cb9\u8017"),i.createElement("blockquote",null,i.createElement("p",null,"\u94fe\u63a5\uff1a",i.createElement(l.Link,{to:"https://leetcode.cn/problems/minimum-fuel-cost-to-report-to-the-capital/"},"6243. \u5230\u8fbe\u9996\u90fd\u7684\u6700\u5c11\u6cb9\u8017"),i.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",i.createElement("br",null),"\u6807\u7b7e\uff1a",i.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bf7\u4f60\u8fd4\u56de\u5230\u8fbe\u9996\u90fd\u6700\u5c11\u9700\u8981\u591a\u5c11\u5347\u6c7d\u6cb9\u3002")),i.createElement("h2",{id:"\u9898\u89e3-1---cpp"},i.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.11.20"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a796ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a256.5MB"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\uff0c\u4ece\u5916\u5411\u91cc\u904d\u5386\u3002")),i.createElement(s.Z,{code:'// bestlyg\n# define X first\n# define Y second\n# define lb(x) ((x) & (-x))\n# define mem(a,b) memset(a,b,sizeof(a))\n# define debug freopen("r.txt","r",stdin)\n# define pi pair<int,int>\n\n#ifdef DEBUG\n#define log(frm, args...) {    printf(frm, ##args);}\n#else\n#define log(frm, args...)\n#endif\n\ntypedef long long ll;\n\nusing namespace std;\n\nstruct City {\n    int len, idx, size;\n    unordered_set<int> next;\n    City(): len(0), idx(0), size(1) {}\n};\nclass Solution {\npublic:\n    vector<City> list;\n    vector<int> idxlist;\n    long long minimumFuelCost(vector<vector<int>>& roads, int seats) {\n        int n = roads.size() + 1;\n        if (n == 1) return 0;\n        list = vector<City>(n);\n        idxlist = vector<int>(n);\n        for (int i = 0; i < n; i++) {\n            list[i].idx = i;\n            idxlist[i] = i;\n        }\n        for (auto &road : roads) {\n            list[road[0]].next.insert(road[1]);\n            list[road[1]].next.insert(road[0]);\n        }\n        initLen();\n        // for (int i = 0; i < n; i++) {\n        //     cout << "i = " << i \n        //          << ", len = " << list[i].len \n        //          << ", idx = " << list[i].idx \n        //          << ", next = ";\n        //     for (auto &next : list[i].next) {\n        //         cout << next << ", ";\n        //     }\n        //     cout << endl;\n        // }\n        sort(idxlist.begin(), idxlist.end(), [&](auto &a, auto &b){\n            return list[a].len < list[b].len;\n        });\n        // cout << "-====" << endl;\n        long long ans = 0;\n        for (int idx = n - 1; idx > 0; idx--) {\n            int i = idxlist[idx];\n            ans += 1 + (list[i].size - 1) / seats;\n            int next = *list[i].next.begin();\n            list[next].size += list[i].size;\n            list[next].next.erase(i);\n            // cout << "i = " << i \n            //      << ", idx = " << list[i].idx\n            //      << ", next = " << list[next].idx\n            //      << ", cursize = " << list[i].size\n            //      << ", nextsize = " << list[next].size\n            //      << endl;\n        }\n        return ans;\n    }\n    void initLen() {\n        queue<int> q;\n        q.push(0);\n        int size = 1, cur = 1;\n        while (q.size()) {\n            int node = q.front();\n            q.pop();\n            for (auto &next : list[node].next) {\n                if (next == 0 || list[next].len != 0) continue;\n                list[next].len = cur;\n                q.push(next);\n            }\n            if (--size == 0) {\n                size = q.size();\n                cur++;\n            }\n        }\n    }\n};',lang:"cpp"})))}));e["default"]=n=>{var e=i.useContext(l.context),t=e.demos;return i.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),i.createElement(r,{demos:t})}}}]);