(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[2023],{12309:function(e,n,t){"use strict";t.r(n);var r=t(96832),d=t(22131),o=t(89730),s=r.memo((e=>{e.demos;return r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"211-\u6dfb\u52a0\u4e0e\u641c\u7d22\u5355\u8bcd---\u6570\u636e\u7ed3\u6784\u8bbe\u8ba1"},r.createElement(d.AnchorLink,{to:"#211-\u6dfb\u52a0\u4e0e\u641c\u7d22\u5355\u8bcd---\u6570\u636e\u7ed3\u6784\u8bbe\u8ba1","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"211. \u6dfb\u52a0\u4e0e\u641c\u7d22\u5355\u8bcd - \u6570\u636e\u7ed3\u6784\u8bbe\u8ba1"),r.createElement("blockquote",null,r.createElement("p",null,"\u94fe\u63a5\uff1a",r.createElement(d.Link,{to:"https://leetcode-cn.com/problems/design-add-and-search-words-data-structure/"},"211. \u6dfb\u52a0\u4e0e\u641c\u7d22\u5355\u8bcd - \u6570\u636e\u7ed3\u6784\u8bbe\u8ba1"),r.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",r.createElement("br",null),"\u6807\u7b7e\uff1a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u8bbe\u8ba1\u3001\u5b57\u5178\u6811\u3001\u5b57\u7b26\u4e32",r.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301 \u6dfb\u52a0\u65b0\u5355\u8bcd \u548c \u67e5\u627e\u5b57\u7b26\u4e32\u662f\u5426\u4e0e\u4efb\u4f55\u5148\u524d\u6dfb\u52a0\u7684\u5b57\u7b26\u4e32\u5339\u914d \u3002")),r.createElement("h2",{id:"\u9898\u89e3-1---typescript"},r.createElement(d.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.10.19"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a216ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a56.6MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1atrie\u3002")),r.createElement(o.Z,{code:"class TrieNode {\n  end = false;\n  children: Map<string, TrieNode> = new Map();\n  constructor(public val: string) {}\n}\nclass Trie {\n  private _size = 0;\n  get size() {\n    return this._size;\n  }\n  get empty() {\n    return this._size === 0;\n  }\n  private _root = new TrieNode('');\n  get root() {\n    return this._root;\n  }\n  clear() {\n    this._root = new TrieNode('');\n    this._size = 0;\n  }\n  add(str: string) {\n    return this._add(str);\n  }\n  private _add(str: string, node = this._root) {\n    if (str.length === 0) {\n      this._root.end = true;\n      this._size++;\n      return;\n    }\n    if (str.length === 1) {\n      let endNode = node.children.get(str);\n      if (!endNode) node.children.set(str, (endNode = new TrieNode(str)));\n      if (!endNode.end) {\n        endNode.end = true;\n        this._size++;\n      }\n      return;\n    }\n    const first = str[0];\n    let nextNode = node.children.get(first);\n    if (!nextNode) node.children.set(first, (nextNode = new TrieNode(first)));\n    const nextStr = str.substr(1);\n    this._add(nextStr, nextNode);\n  }\n  contains(str: string) {\n    const endNode = this.findEndNode(str);\n    return endNode ? endNode.end : false;\n  }\n  remove(str: string) {\n    const endNode = this.findEndNode(str);\n    if (endNode && endNode.end) {\n      endNode.end = false;\n      this._size--;\n    }\n  }\n  starsWith(str: string) {\n    return this.findEndNode(str) !== null;\n  }\n  private findEndNode(str: string, node = this._root): TrieNode | null {\n    if (str.length === 0) return this._root;\n    if (str.length === 1) return node.children.get(str) ?? null;\n    const first = str[0];\n    let nextNode = node.children.get(first);\n    if (!nextNode) return null;\n    const nextStr = str.substr(1);\n    return this.findEndNode(nextStr, nextNode);\n  }\n}\n\nclass WordDictionary {\n  private trie = new Trie();\n  addWord(word: string): void {\n    this.trie.add(word);\n  }\n  search(word: string): boolean {\n    return this._search(0, word, this.trie.root);\n  }\n  private _search(idx: number, word: string, node: TrieNode): boolean {\n    const ch = word[idx];\n    if (idx === word.length - 1) {\n      if (ch === '.') return Array.from(node.children.values()).some(node => node.end);\n      const lastNode = node.children.get(ch);\n      return !!lastNode?.end;\n    }\n    if (ch === '.') {\n      for (const nextNode of node.children.values()) {\n        if (this._search(idx + 1, word, nextNode)) return true;\n      }\n      return false;\n    }\n    const nextNode = node.children.get(ch);\n    if (!nextNode) return false;\n    return this._search(idx + 1, word, nextNode);\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=r.useContext(d.context),t=n.demos;return r.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&d.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),r.createElement(s,{demos:t})}}}]);