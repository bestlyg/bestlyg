(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[20067],{30961:function(n,e,i){"use strict";i.r(e);var t=i(96832),s=i(22131),r=i(89730),l=t.memo((n=>{n.demos;return t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"736-lisp-\u8bed\u6cd5\u89e3\u6790"},t.createElement(s.AnchorLink,{to:"#736-lisp-\u8bed\u6cd5\u89e3\u6790","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"736. Lisp \u8bed\u6cd5\u89e3\u6790"),t.createElement("blockquote",null,t.createElement("p",null,"\u94fe\u63a5\uff1a",t.createElement(s.Link,{to:"https://leetcode.cn/problems/parse-lisp-expression/"},"736. Lisp \u8bed\u6cd5\u89e3\u6790"),t.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",t.createElement("br",null),"\u6807\u7b7e\uff1a\u6808\u3001\u9012\u5f52\u3001\u54c8\u5e0c\u8868\u3001\u5b57\u7b26\u4e32",t.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u4f60\u4e00\u4e2a\u7c7b\u4f3c Lisp \u8bed\u53e5\u7684\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f expression\uff0c\u6c42\u51fa\u5176\u8ba1\u7b97\u7ed3\u679c\u3002")),t.createElement("h2",{id:"\u9898\u89e3-1---cpp"},t.createElement(s.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.07.06"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a32ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a26MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u6bd4\u8f83\uff0c\u6bcf\u6b21\u5b58\u50a8\u5f53\u524d\u53d8\u91cf\u3002")),t.createElement(r.Z,{code:"class Solution {\n   public:\n    vector<unordered_map<string, int>> varStark;\n    int evaluate(string expression) {\n        if (expression[0] == '(')\n            expression = expression.substr(1, expression.size() - 2);\n        vector<string> list = toToken(expression);\n        return comp(list);\n    }\n    vector<string> toToken(string &expression) {\n        vector<string> list;\n        int i;\n        if (expression[0] == 'l') list.push_back(\"let\"), i = 4;\n        if (expression[0] == 'm') list.push_back(\"mult\"), i = 5;\n        if (expression[0] == 'a') list.push_back(\"add\"), i = 4;\n        while (i < expression.size()) {\n            int end = expression[i] == '(' ? findEndIdx1(expression, i)\n                                           : findEndIdx2(expression, i);\n            list.push_back(expression.substr(i, end - i));\n            i = end;\n            while (i < expression.size() && expression[i] == ' ' ||\n                   expression[i] == ')')\n                i++;\n        }\n        return list;\n    }\n    int comp(vector<string> &list) {\n        int ans;\n        if (list[0] == \"let\") ans = comp_let(list);\n        if (list[0] == \"add\") ans = comp_var(list[1]) + comp_var(list[2]);\n        if (list[0] == \"mult\") ans = comp_var(list[1]) * comp_var(list[2]);\n        return ans;\n    }\n    int comp_let(vector<string> &list) {\n        int n = list.size();\n        unordered_map<string, int> m;\n        for (int i = 1; i < n - 1; i += 2) {\n            int val;\n            varStark.push_back(m);\n            if (list[i + 1][0] == '(')\n                val = evaluate(list[i + 1]);\n            else\n                val = get_var(list[i + 1]);\n            varStark.pop_back();\n            m[list[i]] = val;\n        }\n        int val;\n        varStark.push_back(m);\n        if (list[n - 1][0] == '(') {\n            val = evaluate(list[n - 1]);\n        } else\n            val = get_var(list[n - 1]);\n        varStark.pop_back();\n        return val;\n    }\n    int comp_var(string &str) {\n        int val;\n        if (str[0] == '(')\n            val = evaluate(str);\n        else\n            val = get_var(str);\n        return val;\n    }\n    int get_var(string &str) {\n        for (int i = varStark.size() - 1; i >= 0; i--)\n            if (varStark[i].count(str)) return varStark[i][str];\n        return stoi(str);\n    }\n    int findEndIdx1(string &expression, int start) {\n        int end = start, deep = 0;\n        do {\n            if (expression[end] == '(')\n                deep++;\n            else if (expression[end] == ')')\n                deep--;\n            end++;\n        } while (deep > 0);\n        return end;\n    }\n    int findEndIdx2(string &expression, int start) {\n        int end = start;\n        while (end < expression.size() && expression[end] != ' ') end++;\n        return end;\n    }\n};",lang:"cpp"}),t.createElement("h2",{id:"\u9898\u89e3-2---cpp"},t.createElement(s.AnchorLink,{to:"#\u9898\u89e3-2---cpp","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - cpp"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.07.06"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a32ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a26MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u6bd4\u8f83\uff0c\u6bcf\u6b21\u5b58\u50a8\u5f53\u524d\u53d8\u91cf\u3002")),t.createElement(r.Z,{code:"class Solution {\n   public:\n    vector<unordered_map<string, int>> varStark;\n    int evaluate(string expression) {\n        if (expression[0] == '(')\n            expression = expression.substr(1, expression.size() - 2);\n        vector<string> list = toToken(expression);\n        return comp(list);\n    }\n    vector<string> toToken(string &expression) {\n        vector<string> list;\n        int i;\n        if (expression[0] == 'l') list.push_back(\"let\"), i = 4;\n        if (expression[0] == 'm') list.push_back(\"mult\"), i = 5;\n        if (expression[0] == 'a') list.push_back(\"add\"), i = 4;\n        while (i < expression.size()) {\n            int end = expression[i] == '(' ? findEndIdx1(expression, i)\n                                           : findEndIdx2(expression, i);\n            list.push_back(expression.substr(i, end - i));\n            i = end;\n            while (i < expression.size() && expression[i] == ' ' ||\n                   expression[i] == ')')\n                i++;\n        }\n        return list;\n    }\n    int comp(vector<string> &list) {\n        int ans;\n        if (list[0] == \"let\") ans = comp_let(list);\n        if (list[0] == \"add\") ans = comp_var(list[1]) + comp_var(list[2]);\n        if (list[0] == \"mult\") ans = comp_var(list[1]) * comp_var(list[2]);\n        return ans;\n    }\n    int comp_let(vector<string> &list) {\n        int n = list.size();\n        unordered_map<string, int> m;\n        for (int i = 1; i < n - 1; i += 2) {\n            int val;\n            varStark.push_back(m);\n            if (list[i + 1][0] == '(')\n                val = evaluate(list[i + 1]);\n            else\n                val = get_var(list[i + 1]);\n            varStark.pop_back();\n            m[list[i]] = val;\n        }\n        int val;\n        varStark.push_back(m);\n        if (list[n - 1][0] == '(') {\n            val = evaluate(list[n - 1]);\n        } else\n            val = get_var(list[n - 1]);\n        varStark.pop_back();\n        return val;\n    }\n    int comp_var(string &str) {\n        int val;\n        if (str[0] == '(')\n            val = evaluate(str);\n        else\n            val = get_var(str);\n        return val;\n    }\n    int get_var(string &str) {\n        for (int i = varStark.size() - 1; i >= 0; i--)\n            if (varStark[i].count(str)) return varStark[i][str];\n        return stoi(str);\n    }\n    int findEndIdx1(string &expression, int start) {\n        int end = start, deep = 0;\n        do {\n            if (expression[end] == '(')\n                deep++;\n            else if (expression[end] == ')')\n                deep--;\n            end++;\n        } while (deep > 0);\n        return end;\n    }\n    int findEndIdx2(string &expression, int start) {\n        int end = start;\n        while (end < expression.size() && expression[end] != ' ') end++;\n        return end;\n    }\n};",lang:"cpp"}),t.createElement("h2",{id:"\u9898\u89e3-3---cpp"},t.createElement(s.AnchorLink,{to:"#\u9898\u89e3-3---cpp","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 3 - cpp"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.07.06"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a32ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a26MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u6bd4\u8f83\uff0c\u6bcf\u6b21\u5b58\u50a8\u5f53\u524d\u53d8\u91cf\u3002")),t.createElement(r.Z,{code:"class Solution {\n   public:\n    vector<unordered_map<string, int>> varStark;\n    int evaluate(string expression) {\n        if (expression[0] == '(')\n            expression = expression.substr(1, expression.size() - 2);\n        vector<string> list = toToken(expression);\n        return comp(list);\n    }\n    vector<string> toToken(string &expression) {\n        vector<string> list;\n        int i;\n        if (expression[0] == 'l') list.push_back(\"let\"), i = 4;\n        if (expression[0] == 'm') list.push_back(\"mult\"), i = 5;\n        if (expression[0] == 'a') list.push_back(\"add\"), i = 4;\n        while (i < expression.size()) {\n            int end = expression[i] == '(' ? findEndIdx1(expression, i)\n                                           : findEndIdx2(expression, i);\n            list.push_back(expression.substr(i, end - i));\n            i = end;\n            while (i < expression.size() && expression[i] == ' ' ||\n                   expression[i] == ')')\n                i++;\n        }\n        return list;\n    }\n    int comp(vector<string> &list) {\n        int ans;\n        if (list[0] == \"let\") ans = comp_let(list);\n        if (list[0] == \"add\") ans = comp_var(list[1]) + comp_var(list[2]);\n        if (list[0] == \"mult\") ans = comp_var(list[1]) * comp_var(list[2]);\n        return ans;\n    }\n    int comp_let(vector<string> &list) {\n        int n = list.size();\n        unordered_map<string, int> m;\n        for (int i = 1; i < n - 1; i += 2) {\n            int val;\n            varStark.push_back(m);\n            if (list[i + 1][0] == '(')\n                val = evaluate(list[i + 1]);\n            else\n                val = get_var(list[i + 1]);\n            varStark.pop_back();\n            m[list[i]] = val;\n        }\n        int val;\n        varStark.push_back(m);\n        if (list[n - 1][0] == '(') {\n            val = evaluate(list[n - 1]);\n        } else\n            val = get_var(list[n - 1]);\n        varStark.pop_back();\n        return val;\n    }\n    int comp_var(string &str) {\n        int val;\n        if (str[0] == '(')\n            val = evaluate(str);\n        else\n            val = get_var(str);\n        return val;\n    }\n    int get_var(string &str) {\n        for (int i = varStark.size() - 1; i >= 0; i--)\n            if (varStark[i].count(str)) return varStark[i][str];\n        return stoi(str);\n    }\n    int findEndIdx1(string &expression, int start) {\n        int end = start, deep = 0;\n        do {\n            if (expression[end] == '(')\n                deep++;\n            else if (expression[end] == ')')\n                deep--;\n            end++;\n        } while (deep > 0);\n        return end;\n    }\n    int findEndIdx2(string &expression, int start) {\n        int end = start;\n        while (end < expression.size() && expression[end] != ' ') end++;\n        return end;\n    }\n};",lang:"cpp"})))}));e["default"]=n=>{var e=t.useContext(s.context),i=e.demos;return t.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&s.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),t.createElement(l,{demos:i})}}}]);