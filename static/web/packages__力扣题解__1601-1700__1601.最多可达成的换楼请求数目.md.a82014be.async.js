(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[20117],{1876:function(n,e,t){"use strict";t.r(e);var i=t(96832),r=t(22131),s=t(89730),l=i.memo((n=>{n.demos;return i.createElement(i.Fragment,null,i.createElement("div",{className:"markdown"},i.createElement("h1",{id:"1601-\u6700\u591a\u53ef\u8fbe\u6210\u7684\u6362\u697c\u8bf7\u6c42\u6570\u76ee"},i.createElement(r.AnchorLink,{to:"#1601-\u6700\u591a\u53ef\u8fbe\u6210\u7684\u6362\u697c\u8bf7\u6c42\u6570\u76ee","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"1601. \u6700\u591a\u53ef\u8fbe\u6210\u7684\u6362\u697c\u8bf7\u6c42\u6570\u76ee"),i.createElement("blockquote",null,i.createElement("p",null,"\u94fe\u63a5\uff1a",i.createElement(r.Link,{to:"https://leetcode-cn.com/problems/maximum-number-of-achievable-transfer-requests/"},"1601. \u6700\u591a\u53ef\u8fbe\u6210\u7684\u6362\u697c\u8bf7\u6c42\u6570\u76ee"),i.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",i.createElement("br",null),"\u6807\u7b7e\uff1a\u4f4d\u8fd0\u7b97\u3001\u6570\u7ec4\u3001\u56de\u6eaf\u3001\u679a\u4e3e",i.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bf7\u4f60\u4ece\u539f\u8bf7\u6c42\u5217\u8868\u4e2d\u9009\u51fa\u82e5\u5e72\u4e2a\u8bf7\u6c42\uff0c\u4f7f\u5f97\u5b83\u4eec\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u8bf7\u6c42\u5217\u8868\uff0c\u5e76\u8fd4\u56de\u6240\u6709\u53ef\u884c\u5217\u8868\u4e2d\u6700\u5927\u8bf7\u6c42\u6570\u76ee\u3002")),i.createElement("h2",{id:"\u9898\u89e3-1---c"},i.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---c","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - c++"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.02.28"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a416ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a24.1MB"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac++"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u7edf\u8ba1\u6240\u6709\u73af\uff0c\u4f9d\u6b21\u9009\u62e9\u73af\u3002")),i.createElement(s.Z,{code:"class Solution {\n   public:\n    struct node {\n        int data, cnt;\n        unordered_map<int, int> next;\n    };\n    int maximumRequests(int n, vector<vector<int>> &requests) {\n        vector<node> list(n);\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            list[i].data = i;\n            list[i].cnt = 0;\n        }\n        for (auto &request : requests) {\n            int from = request[0], to = request[1];\n            if (from == to) {\n                ans++;\n                continue;\n            }\n            list[from].next[to]++;\n            list[from].cnt++;\n        }\n        unordered_set<int> s;\n        vector<vector<int>> arr;\n        for (int i = 0; i < n; i++) {\n            vector<vector<int>> res = getlist(list, i, s, i, 1);\n            for (auto &item : res) {\n                reverse(item.begin(), item.end());\n                arr.push_back(item);\n            }\n        }\n        return dfs(list, arr, s) + ans;\n    }\n\n    int dfs(vector<node> &list, vector<vector<int>> &arr,\n            unordered_set<int> &used) {\n        int n = arr.size(), ans = 0;\n        for (int i = 0; i < n; i++) {\n            if (used.count(i) || !check(list, arr[i])) continue;\n            int cur = 0, cnt = 0;\n            while (check(list, arr[i])) {\n                cnt++;\n                cur += arr[i].size() - 1;\n                setlist(list, arr[i], -1);\n            }\n            used.insert(i);\n            cur += dfs(list, arr, used);\n            used.erase(i);\n            while (cnt--) setlist(list, arr[i], 1);\n            ans = max(ans, cur);\n        }\n        return ans;\n    }\n\n    void setlist(vector<node> &list, vector<int> &arr, int add) {\n        for (int i = 0; i < arr.size() - 1; i++) {\n            list[arr[i]].next[arr[i + 1]] += add;\n        }\n    }\n    bool check(vector<node> &list, vector<int> &arr) {\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (list[arr[i]].next[arr[i + 1]] == 0) return 0;\n        }\n        return 1;\n    }\n    vector<vector<int>> getlist(vector<node> &list, int &find,\n                                unordered_set<int> &s, int cur, int init) {\n        vector<vector<int>> ans;\n        if (init == 0 && cur == find) {\n            vector<int> res(1, cur);\n            ans.push_back(res);\n            return ans;\n        }\n        s.insert(cur);\n        for (auto &item : list[cur].next) {\n            if (!s.count(item.first) || init == 0 && item.first == find) {\n                vector<vector<int>> nextlist =\n                    getlist(list, find, s, item.first, 0);\n                if (nextlist.size() == 0) continue;\n                for (auto &next : nextlist) {\n                    next.push_back(cur);\n                    ans.push_back(next);\n                }\n            }\n        }\n        s.erase(cur);\n        return ans;\n    }\n};",lang:"cpp"}),i.createElement("h2",{id:"\u9898\u89e3-2---c"},i.createElement(r.AnchorLink,{to:"#\u9898\u89e3-2---c","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - c++"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.02.28"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a36ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a8.6MB"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac++"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u9009\u62e9\u6216\u4e0d\u9009\u62e9\u3002")),i.createElement(s.Z,{code:"class Solution {\n   public:\n    int ans = 0, samecnt = 0;\n    vector<vector<int>> list;\n    vector<int> houses = vector<int>(20, 0);\n    int maximumRequests(int n, vector<vector<int>> &requests) {\n        for (auto &request : requests) {\n            if (request[0] == request[1]) {\n                samecnt++;\n                continue;\n            }\n            list.push_back(request);\n        }\n        dfs(0, 0);\n        return ans + samecnt;\n    }\n    void dfs(int idx, int cnt) {\n        if (idx == list.size()) {\n            for (auto &house : houses) {\n                if (house) return;\n            }\n            ans = max(ans, cnt);\n            return;\n        }\n        dfs(idx + 1, cnt);\n        houses[list[idx][0]]++;\n        houses[list[idx][1]]--;\n        dfs(idx + 1, cnt + 1);\n        houses[list[idx][0]]--;\n        houses[list[idx][1]]++;\n    }\n};",lang:"cpp"})))}));e["default"]=n=>{var e=i.useContext(r.context),t=e.demos;return i.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),i.createElement(l,{demos:t})}}}]);