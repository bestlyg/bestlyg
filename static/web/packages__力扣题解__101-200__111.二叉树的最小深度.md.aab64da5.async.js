(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[51452],{72808:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),i=t(89730),o=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"111-\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6"},l.createElement(r.AnchorLink,{to:"#111-\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/"},"111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u7b80\u5355",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5c0f\u6df1\u5ea6\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.8.21"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a92ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a42.3MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6df1\u5ea6\u4f18\u5148\u3002")),l.createElement(i.Z,{code:"function minDepth(root: TreeNode | null): number {\n  if (root === null) return 0;\n  else if (root.left === null && root.right === null) return 1;\n  else {\n    let minD = Infinity;\n    if (root.left) minD = Math.min(minDepth(root.left), minD);\n    if (root.right) minD = Math.min(minDepth(root.right), minD);\n    return minD + 1;\n  }\n}",lang:"typescript"}),l.createElement("h2",{id:"\u9898\u89e3-2---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-2---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.8.21"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a88ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a41.6MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5e7f\u5ea6\u4f18\u5148\u3002")),l.createElement(i.Z,{code:"function minDepth(root: TreeNode | null): number {\n  if (root === null) return 0;\n  const queue: TreeNode[] = [root];\n  let height = 1;\n  let size = 1;\n  while (queue.length !== 0) {\n    const node = queue.shift() as TreeNode;\n    if (node.left === null && node.right === null) return height;\n    if (node.left !== null) queue.push(node.left);\n    if (node.right !== null) queue.push(node.right);\n    if (--size === 0) {\n      height++;\n      size = queue.length;\n    }\n  }\n  return 0;\n}",lang:"typescript"}),l.createElement("h2",{id:"\u9898\u89e3-3---c"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-3---c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 3 - c"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.11.27"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a132ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a73.8MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u3002")),l.createElement(i.Z,{code:"// \u9012\u5f52\u904d\u5386\u6bcf\u4e2a\u8282\u70b9\nvoid inorder(struct TreeNode *root, int level, int *min){\n    if (!root) return ;\n    // \u5982\u679c\u662f\u53f6\u5b50\u4e14\u5c42\u7ea7\u6bd4\u8f83\u5c0f\u5219\u8d4b\u503c\n    if (!root->left && !root->right) {\n        if (*min > level) *min = level;\n        return ;\n    }\n    inorder(root->left, level + 1, min);\n    inorder(root->right, level + 1, min);\n}\nint minDepth(struct TreeNode* root){\n    if (!root) return 0;\n    int min = 10000;\n    inorder(root, 1, &min);\n    return min;\n}",lang:"c"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(o,{demos:t})}}}]);