(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[85457],{62675:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),s=t(89730),a=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"761-\u7279\u6b8a\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217"},l.createElement(r.AnchorLink,{to:"#761-\u7279\u6b8a\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"761. \u7279\u6b8a\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode.cn/problems/special-binary-string/"},"761. \u7279\u6b8a\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",l.createElement("br",null),"\u6807\u7b7e\uff1a\u9012\u5f52\u3001\u5b57\u7b26\u4e32",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u5728\u4efb\u610f\u6b21\u6570\u7684\u64cd\u4f5c\u4e4b\u540e\uff0c\u4ea4\u6362\u540e\u7684\u5b57\u7b26\u4e32\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5217\u7684\u6700\u5927\u7684\u7ed3\u679c\u662f\u4ec0\u4e48\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---rust"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---rust","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - rust"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.08.08"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a2.1MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1arust"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5f53\u4f5c\u5de6\u62ec\u53f7\u548c\u53f3\u62ec\u53f7\u7684\u5339\u914d\u3002")),l.createElement(s.Z,{code:'impl Solution {\n    pub fn make_largest_special(s: String) -> String {\n        let s = s.chars().collect::<Vec<char>>();\n        Solution::_make_largest_special(&s, 0, s.len())\n    }\n    fn _make_largest_special(s: &Vec<char>, l: usize, r: usize) -> String {\n        if l >= r - 1 {\n            return String::new();\n        }\n        let (mut i, mut cnt, mut left, mut substrs) = (l, 0, l, Vec::<String>::new());\n        while i < r {\n            if s[i] == \'1\' {\n                cnt += 1;\n            } else {\n                cnt -= 1;\n                if cnt == 0 {\n                    substrs.push(format!(\n                        "1{}0",\n                        Solution::_make_largest_special(s, left + 1, i)\n                    ));\n                    left = i + 1;\n                }\n            }\n            i += 1;\n        }\n        substrs.sort_by(|s1, s2| s2.cmp(s1));\n        substrs.join("")\n    }\n}',lang:"rust"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);