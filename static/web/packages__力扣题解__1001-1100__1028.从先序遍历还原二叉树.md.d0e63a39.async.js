(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[94306],{91003:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),o=t(89730),c=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"1028-\u4ece\u5148\u5e8f\u904d\u5386\u8fd8\u539f\u4e8c\u53c9\u6811"},l.createElement(r.AnchorLink,{to:"#1028-\u4ece\u5148\u5e8f\u904d\u5386\u8fd8\u539f\u4e8c\u53c9\u6811","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"1028. \u4ece\u5148\u5e8f\u904d\u5386\u8fd8\u539f\u4e8c\u53c9\u6811"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/recover-a-tree-from-preorder-traversal/"},"1028. \u4ece\u5148\u5e8f\u904d\u5386\u8fd8\u539f\u4e8c\u53c9\u6811"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u6211\u4eec\u4ece\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root\xa0 \u5f00\u59cb\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3002\u5728\u904d\u5386\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5904\uff0c\u6211\u4eec\u8f93\u51fa \xa0D\xa0 \u6761\u77ed\u5212\u7ebf\uff08\u5176\u4e2d \xa0D\xa0 \u662f\u8be5\u8282\u70b9\u7684\u6df1\u5ea6\uff09\uff0c\u7136\u540e\u8f93\u51fa\u8be5\u8282\u70b9\u7684\u503c\u3002\uff08\u5982\u679c\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a D\uff0c\u5219\u5176\u76f4\u63a5\u5b50\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a D + 1\u3002\u6839\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a 0\uff09\u3002\u5982\u679c\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u4fdd\u8bc1\u8be5\u5b50\u8282\u70b9\u4e3a\u5de6\u5b50\u8282\u70b9\u3002\u7ed9\u51fa\u904d\u5386\u8f93\u51fa \xa0S\uff0c\u8fd8\u539f\u6811\u5e76\u8fd4\u56de\u5176\u6839\u8282\u70b9 \xa0root\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.6.18"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a148ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a43.1MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5229\u7528\u6b63\u5219\u89e3\u6790\u5b57\u7b26\u4e32\uff0c\u4f7f\u7528\u9012\u5f52\u53bb\u6df1\u5ea6\u83b7\u53d6\u8282\u70b9\uff0c\u7531\u4e8e leetcode \u5b58\u5728 Bug \u65e0\u6cd5\u5728\u51fd\u6570\u5185 new TreeNode()\uff0c\u4f7f\u7528\u5185\u5efa TreeNode1 \u4ee3\u66ff\u5185\u90e8 TreeNode\u3002")),l.createElement(o.Z,{code:"class TreeNode1 {\n  val: number;\n  left: TreeNode | null;\n  right: TreeNode | null;\n  constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n    this.val = val === undefined ? 0 : val;\n    this.left = left === undefined ? null : left;\n    this.right = right === undefined ? null : right;\n  }\n}\nfunction recoverFromPreorder(S: string): TreeNode | null {\n  const maxVal = 10 ** 9;\n  const maxValLen = maxVal.toString().length;\n  const maxValReg = `\\d{1,${maxValLen}}`;\n  const nextReg = (h: string): string => `${maxValReg}${h}${maxValReg}`;\n  return getNode(S, 1);\n  function getNode(nodeStr: string, level: number): TreeNode | null {\n    // console.log(\"====\");\n    // console.log(\"nodeStr:\" + nodeStr);\n    // console.log(\"level:\" + level);\n    const nodeStrLen = nodeStr.length;\n    if (nodeStrLen === 0) return null;\n    const h = ''.padStart(level, '-');\n    const reg = new RegExp(nextReg(h), 'g');\n    // console.log(reg);\n    const node = new TreeNode1(parseInt(nodeStr));\n    const cache: { index: number; str: string }[] = [];\n    let index = -1;\n    let match: RegExpMatchArray | null = nodeStr.substr(index + 1).match(reg);\n    while (match !== null) {\n      // console.log(match);\n      index = nodeStr.indexOf(match[0]);\n      const str = match[0];\n      cache.push({\n        index,\n        str,\n      });\n      const tempIndexH = str.indexOf('-');\n      const newNodeStr = nodeStr.substr(index + tempIndexH + h.length);\n      // console.log(str);\n      match = newNodeStr.match(reg);\n      // console.log(match);\n    }\n    // console.log(cache);\n    for (let i = 0, len = cache.length; i < len; i++) {\n      const { index, str } = cache[i];\n      const indexH = str.indexOf(h);\n      const newStr = nodeStr.substr(\n        index + indexH + h.length,\n        i === len - 1 ? nodeStrLen : cache[i + 1].index\n      );\n      if (node.left === null) {\n        node.left = getNode(newStr, level + 1);\n      } else {\n        node.right = getNode(newStr, level + 1);\n      }\n    }\n    return node;\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(c,{demos:t})}}}]);