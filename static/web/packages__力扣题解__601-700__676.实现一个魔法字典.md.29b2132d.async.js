(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[67505],{37877:function(e,n,r){"use strict";r.r(n);var i=r(96832),t=r(22131),o=r(89730),l=i.memo((e=>{e.demos;return i.createElement(i.Fragment,null,i.createElement("div",{className:"markdown"},i.createElement("h1",{id:"676-\u5b9e\u73b0\u4e00\u4e2a\u9b54\u6cd5\u5b57\u5178"},i.createElement(t.AnchorLink,{to:"#676-\u5b9e\u73b0\u4e00\u4e2a\u9b54\u6cd5\u5b57\u5178","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"676. \u5b9e\u73b0\u4e00\u4e2a\u9b54\u6cd5\u5b57\u5178"),i.createElement("blockquote",null,i.createElement("p",null,"\u94fe\u63a5\uff1a",i.createElement(t.Link,{to:"https://leetcode-cn.com/problems/implement-magic-dictionary/"},"676. \u5b9e\u73b0\u4e00\u4e2a\u9b54\u6cd5\u5b57\u5178"),i.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",i.createElement("br",null),"\u6807\u7b7e\uff1a\u8bbe\u8ba1\u3001\u5b57\u5178\u6811\u3001\u54c8\u5e0c\u8868\u3001\u5b57\u7b26\u4e32",i.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bbe\u8ba1\u4e00\u4e2a\u4f7f\u7528\u5355\u8bcd\u5217\u8868\u8fdb\u884c\u521d\u59cb\u5316\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u5355\u8bcd \u4e92\u4e0d\u76f8\u540c \u3002 \u5982\u679c\u7ed9\u51fa\u4e00\u4e2a\u5355\u8bcd\uff0c\u8bf7\u5224\u5b9a\u80fd\u5426\u53ea\u5c06\u8fd9\u4e2a\u5355\u8bcd\u4e2d\u4e00\u4e2a\u5b57\u6bcd\u6362\u6210\u53e6\u4e00\u4e2a\u5b57\u6bcd\uff0c\u4f7f\u5f97\u6240\u5f62\u6210\u7684\u65b0\u5355\u8bcd\u5b58\u5728\u4e8e\u4f60\u6784\u5efa\u7684\u5b57\u5178\u4e2d\u3002")),i.createElement("h2",{id:"\u9898\u89e3-1---typescript"},i.createElement(t.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.11.05"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a132ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a45.9MB"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1atrie\u3002")),i.createElement(o.Z,{code:"const getIdx = (ch: string) => ch.codePointAt(0)! - 'a'.codePointAt(0)!;\nclass TrieNode {\n  end = false;\n  children: TrieNode[] = [];\n  constructor(public val: string) {}\n}\nclass Trie {\n  root = new TrieNode('');\n  insert(word: string): void {\n    let node = this.root;\n    for (const ch of word) {\n      const idx = getIdx(ch);\n      if (!node.children[idx]) node.children[idx] = new TrieNode(ch);\n      node = node.children[idx];\n    }\n    node.end = true;\n  }\n  search(word: string): boolean {\n    return this._search(word);\n  }\n  _search(word: string, node = this.root, idx = 0, err = 1): boolean {\n    if (idx === word.length) return node.end && err === 0;\n    const ch = word[idx];\n    const chIdx = getIdx(ch);\n    if (node.children[chIdx] && this._search(word, node.children[chIdx], idx + 1, err)) return true;\n    if (err === 0) return false;\n    for (const child of node.children) {\n      if (child === node.children[chIdx]) continue;\n      if (this._search(word, child, idx + 1, err - 1)) return true;\n    }\n    return false;\n  }\n}\n\nclass MagicDictionary {\n  trie = new Trie();\n  buildDict(dictionary: string[]): void {\n    dictionary.forEach(word => this.trie.insert(word));\n  }\n  search(searchWord: string): boolean {\n    return this.trie.search(searchWord);\n  }\n}",lang:"typescript"}),i.createElement("h2",{id:"\u9898\u89e3-2---cpp"},i.createElement(t.AnchorLink,{to:"#\u9898\u89e3-2---cpp","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - cpp"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.07.11"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a712ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a101.6MB"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1atrie, \u5bf9\u4e8e\u6bcf\u79cd\u53ef\u80fd\u51fa\u73b0 1 \u4e2a\u66ff\u6362\uff0c\u8fdb\u884c\u9012\u5f52\u8003\u8651\u3002")),i.createElement(o.Z,{code:"#define CHILD_SIZE 26\nclass TrieNode {\n   public:\n    int key;\n    bool end;\n    TrieNode **children;\n    TrieNode(int key) {\n        this->key = key;\n        this->end = false;\n        this->children = (TrieNode **)malloc(sizeof(TrieNode *) * CHILD_SIZE);\n        for (int i = 0; i < CHILD_SIZE; i++) children[i] = nullptr;\n    }\n};\nclass Trie {\n   public:\n    TrieNode *root;\n    Trie() { this->root = new TrieNode(0); }\n    void insert(string words) {\n        TrieNode *node = root;\n        for (auto &w : words) {\n            if (node->children[w - 'a'] == nullptr)\n                node->children[w - 'a'] = new TrieNode(w);\n            node = node->children[w - 'a'];\n        }\n        node->end = true;\n    }\n    bool search(string words) { return _search(words, 0, root, 0); }\n    bool _search(string &words, int idx, TrieNode *node, int replaceCnt) {\n        int w = words[idx];\n        if (idx == words.size() - 1) {\n            if (replaceCnt > 1)\n                return false;\n            else if (replaceCnt == 1)\n                return node->children[w - 'a'] != nullptr &&\n                       node->children[w - 'a']->end;\n            else {\n                for (int i = 0; i < CHILD_SIZE; i++) {\n                    if (node->children[i] == nullptr || w - 'a' == i) continue;\n                    if (node->children[i]->end) return true;\n                }\n            }\n            return false;\n        }\n        int nextw = words[idx + 1];\n        for (int i = 0; i < CHILD_SIZE; i++) {\n            if (node->children[i] == nullptr) continue;\n            if (w - 'a' == i &&\n                _search(words, idx + 1, node->children[i], replaceCnt))\n                return true;\n            if (w - 'a' != i &&\n                _search(words, idx + 1, node->children[i], replaceCnt + 1))\n                return true;\n        }\n        return false;\n    }\n};\n\nclass MagicDictionary {\n   public:\n    Trie *trie;\n    MagicDictionary() { trie = new Trie(); }\n    void buildDict(vector<string> dictionary) {\n        for (auto &words : dictionary) trie->insert(words);\n    }\n    bool search(string searchWord) { return trie->search(searchWord); }\n};",lang:"cpp"})))}));n["default"]=e=>{var n=i.useContext(t.context),r=n.demos;return i.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&t.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),i.createElement(l,{demos:r})}}}]);