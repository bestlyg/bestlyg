(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[42522],{57504:function(e,n,t){"use strict";t.r(n);var l=t(96832),o=t(22131),r=t(89730),a=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"1339-\u5206\u88c2\u4e8c\u53c9\u6811\u7684\u6700\u5927\u4e58\u79ef"},l.createElement(o.AnchorLink,{to:"#1339-\u5206\u88c2\u4e8c\u53c9\u6811\u7684\u6700\u5927\u4e58\u79ef","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"1339. \u5206\u88c2\u4e8c\u53c9\u6811\u7684\u6700\u5927\u4e58\u79ef"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(o.Link,{to:"https://leetcode-cn.com/problems/maximum-product-of-splitted-binary-tree/"},"1339. \u5206\u88c2\u4e8c\u53c9\u6811\u7684\u6700\u5927\u4e58\u79ef"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u4e8c\u53c9\u6811",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5b83\u7684\u6839\u4e3a root \u3002\u8bf7\u4f60\u5220\u9664 1 \u6761\u8fb9\uff0c\u4f7f\u4e8c\u53c9\u6811\u5206\u88c2\u6210\u4e24\u68f5\u5b50\u6811\uff0c\u4e14\u5b83\u4eec\u5b50\u6811\u548c\u7684\u4e58\u79ef\u5c3d\u53ef\u80fd\u5927\u3002 \u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(o.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.08.14"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a184ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a63.9MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5bfb\u627e\u6700\u63a5\u8fd1 sum/2 \u7684\u503c\u3002")),l.createElement(r.Z,{code:"function maxProduct(root: TreeNode): number {\n  const map = new Map<TreeNode, number>();\n  const sum = dfsSum(root);\n  let ans = 0;\n  dfsNode(root);\n  return ((sum - ans) * ans) % (10 ** 9 + 7);\n  function dfsSum(node: TreeNode | null): number {\n    if (node === null) return 0;\n    const sum = dfsSum(node.left) + dfsSum(node.right) + node.val;\n    map.set(node, sum);\n    return sum;\n  }\n  function dfsNode(node: TreeNode | null): void {\n    if (node === null) return;\n    if (Math.abs(sum / 2 - ans) > Math.abs(sum / 2 - map.get(node!)!)) {\n      ans = map.get(node!)!;\n    }\n    dfsNode(node.left);\n    dfsNode(node.right);\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=l.useContext(o.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&o.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);