(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[73407],{51096:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),o=t(89730),a=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"662-\u4e8c\u53c9\u6811\u6700\u5927\u5bbd\u5ea6"},l.createElement(r.AnchorLink,{to:"#662-\u4e8c\u53c9\u6811\u6700\u5927\u5bbd\u5ea6","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"662. \u4e8c\u53c9\u6811\u6700\u5927\u5bbd\u5ea6"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode.cn/problems/maximum-product-of-two-elements-in-an-array/"},"662. \u4e8c\u53c9\u6811\u6700\u5927\u5bbd\u5ea6"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u7b80\u5355",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6570\u7ec4\u3001\u6392\u5e8f\u3001\u5806(\u4f18\u5148\u961f\u5217)",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u8bf7\u4f60\u9009\u62e9\u6570\u7ec4\u7684\u4e24\u4e2a\u4e0d\u540c\u4e0b\u6807 i \u548c j\uff0c\u4f7f (nums[i]-1)*(nums[j]-1) \u53d6\u5f97\u6700\u5927\u503c\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---rust"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---rust","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - rust"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.08.27"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a2.5MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1arust"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5c42\u5e8f\u904d\u5386\u3002")),l.createElement(o.Z,{code:"use std::cell::RefCell;\nuse std::collections::VecDeque;\nuse std::rc::Rc;\nimpl Solution {\n    pub fn width_of_binary_tree(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        let root = root.unwrap();\n        let mut q = VecDeque::<(i32, Rc<RefCell<TreeNode>>)>::new();\n        q.push_back((0, root.clone()));\n        let mut ans = 1_i32;\n        let mut size = 1;\n        while !q.is_empty() {\n            let (idx, node) = q.pop_front().unwrap();\n            if node.as_ref().borrow().left.is_some() {\n                q.push_back((\n                    idx * 2 + 1,\n                    node.as_ref().borrow().left.as_ref().unwrap().clone(),\n                ));\n            }\n            if node.as_ref().borrow().right.is_some() {\n                q.push_back((\n                    idx * 2 + 2,\n                    node.as_ref().borrow().right.as_ref().unwrap().clone(),\n                ));\n            }\n            size -= 1;\n            if size == 0 {\n                size = q.len();\n                if !q.is_empty() {\n                    ans = ans.max(q.back().unwrap().0 - q.front().unwrap().0 + 1);\n                }\n            }\n        }\n        ans\n    }\n}",lang:"rust"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);