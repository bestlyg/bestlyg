(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[52349],{50976:function(e,n,t){"use strict";t.r(n);var r=t(96832),i=t(22131),l=t(89730),u=r.memo((e=>{e.demos;return r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"307-\u533a\u57df\u548c\u68c0\u7d22---\u6570\u7ec4\u53ef\u4fee\u6539"},r.createElement(i.AnchorLink,{to:"#307-\u533a\u57df\u548c\u68c0\u7d22---\u6570\u7ec4\u53ef\u4fee\u6539","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539"),r.createElement("blockquote",null,r.createElement("p",null,"\u94fe\u63a5\uff1a",r.createElement(i.Link,{to:"https://leetcode-cn.com/problems/range-sum-query-mutable/"},"307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539"),r.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",r.createElement("br",null),"\u6807\u7b7e\uff1a\u8bbe\u8ba1\u3001\u6811\u72b6\u6570\u7ec4\u3001\u7ebf\u6bb5\u6811\u3001\u6570\u7ec4",r.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 nums \uff0c\u8bf7\u4f60\u5b8c\u6210\u4e24\u7c7b\u67e5\u8be2\uff0c\u5176\u4e2d\u4e00\u7c7b\u67e5\u8be2\u8981\u6c42\u66f4\u65b0\u6570\u7ec4\u4e0b\u6807\u5bf9\u5e94\u7684\u503c\uff0c\u53e6\u4e00\u7c7b\u67e5\u8be2\u8981\u6c42\u8fd4\u56de\u6570\u7ec4\u4e2d\u67d0\u4e2a\u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\u3002")),r.createElement("h2",{id:"\u9898\u89e3-1---typescript"},r.createElement(i.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.11.14"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a532ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a70.5MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6811\u72b6\u6570\u7ec4\u3002")),r.createElement(l.Z,{code:"class FenwickTree {\n  private arr: number[];\n  constructor(private n: number) {\n    this.arr = new Array(n + 1).fill(0);\n  }\n  add(idx: number, num: number): void {\n    while (idx <= this.n) {\n      this.arr[idx] += num;\n      idx += this.lowbit(idx);\n    }\n  }\n  at(idx: number): number {\n    return this.query(idx) - this.query(idx - 1);\n  }\n  query(idx: number): number {\n    let sum = 0;\n    while (idx) {\n      sum += this.arr[idx];\n      idx -= this.lowbit(idx);\n    }\n    return sum;\n  }\n  private lowbit(num: number) {\n    return num & -num;\n  }\n}\nclass NumArray {\n  private tree: FenwickTree;\n  constructor(nums: number[]) {\n    this.tree = new FenwickTree(nums.length);\n    for (let i = 0; i < nums.length; i++) {\n      this.tree.add(i + 1, nums[i]);\n    }\n  }\n  update(index: number, val: number): void {\n    this.tree.add(index + 1, val - this.tree.at(index + 1));\n  }\n  sumRange(left: number, right: number): number {\n    return this.tree.query(right + 1) - this.tree.query(left);\n  }\n}",lang:"typescript"}),r.createElement("h2",{id:"\u9898\u89e3-2---cpp"},r.createElement(i.AnchorLink,{to:"#\u9898\u89e3-2---cpp","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - cpp"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.04.04"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a372ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a146.4MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6811\u72b6\u6570\u7ec4\u3002")),r.createElement(l.Z,{code:"class FenwickTree {\n   public:\n    int n;\n    vector<int> arr;\n    FenwickTree(int n) : n(n + 1), arr(vector<int>(n + 1, 0)) {}\n    int lowbit(int num) { return num & -num; }\n    void add(int idx, int num) {\n        idx += 1;\n        while (idx < n) {\n            arr[idx] += num;\n            idx += lowbit(idx);\n        }\n    }\n    int at(int idx) { return query(idx) - query(idx - 1); }\n    int query(int idx) {\n        idx += 1;\n        int num = 0;\n        while (idx) {\n            num += arr[idx];\n            idx -= lowbit(idx);\n        }\n        return num;\n    }\n};\nclass NumArray {\n   public:\n    FenwickTree tree;\n    NumArray(vector<int>& nums) : tree(nums.size()) {\n        for (int i = 0; i < nums.size(); i++) {\n            tree.add(i, nums[i]);\n        }\n    }\n    void update(int index, int val) { tree.add(index, val - tree.at(index)); }\n    int sumRange(int left, int right) {\n        return tree.query(right) - tree.query(left - 1);\n    }\n};",lang:"cpp"})))}));n["default"]=e=>{var n=r.useContext(i.context),t=n.demos;return r.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&i.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),r.createElement(u,{demos:t})}}}]);