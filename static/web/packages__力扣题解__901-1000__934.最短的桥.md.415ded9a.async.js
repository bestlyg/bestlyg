(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[52079],{79501:function(n,e,t){"use strict";t.r(e);var i=t(96832),l=t(22131),r=t(89730),c=i.memo((n=>{n.demos;return i.createElement(i.Fragment,null,i.createElement("div",{className:"markdown"},i.createElement("h1",{id:"934-\u6700\u77ed\u7684\u6865"},i.createElement(l.AnchorLink,{to:"#934-\u6700\u77ed\u7684\u6865","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"934. \u6700\u77ed\u7684\u6865"),i.createElement("blockquote",null,i.createElement("p",null,"\u94fe\u63a5\uff1a",i.createElement(l.Link,{to:"https://leetcode.cn/problems/shortest-bridge/"},"934. \u6700\u77ed\u7684\u6865"),i.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",i.createElement("br",null),"\u6807\u7b7e\uff1a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u6570\u7ec4\u3001\u77e9\u9635",i.createElement("br",null),"\u7b80\u4ecb\uff1a\u8fd4\u56de\u5fc5\u987b\u7ffb\u8f6c\u7684 0 \u7684\u6700\u5c0f\u6570\u76ee\u3002")),i.createElement("h2",{id:"\u9898\u89e3-1---cpp"},i.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.10.25"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a44ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a18.6MB"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1abfs\u3002")),i.createElement(r.Z,{code:"typedef pair<int, int> node;\nconst int dirs[4][2] = {\n    {0, 1}, {0, -1},\n    {1, 0}, {-1, 0}\n};\nclass Solution {\npublic:\n    int shortestBridge(vector<vector<int>>& grid) {\n        int n = grid.size();\n        vector<vector<bool>> check(n, vector<bool>(n, false));\n        queue<node> q;\n        int f = true;\n        for (int i = 0; i < n && f; i++) {\n            for (int j = 0; j < n && f; j++) {\n                if (grid[i][j] == 1) {\n                    queue<node> tmp;\n                    tmp.push(make_pair(i, j));\n                    check[i][j] = true;\n                    while (tmp.size()) {\n                        node v = tmp.front();\n                        tmp.pop();\n                        q.push(make_pair(v.first, v.second));\n                        for (int k = 0; k < 4; k++) {\n                            int ni = v.first + dirs[k][0], nj = v.second + dirs[k][1];\n                            if (ni < 0 || ni == n || nj < 0 || nj == n || grid[ni][nj] == 0 || check[ni][nj]) continue;\n                            tmp.push(make_pair(ni, nj));\n                            check[ni][nj] = true;\n                        }\n                    }\n                    f = false;\n                }\n            }\n        }\n        int level = 1, size = q.size();\n        while (q.size()) {\n            node v = q.front();\n            q.pop();\n            for (int i = 0; i < 4; i++) {\n                int ni = v.first + dirs[i][0], nj = v.second + dirs[i][1];\n                if (ni < 0 || ni == n || nj < 0 || nj == n || check[ni][nj]) continue;\n                if (grid[ni][nj]) return level - 1;\n                check[ni][nj] = true;\n                q.push(make_pair(ni, nj));\n            }\n            if (--size == 0) {\n                size = q.size();\n                level++;\n            }\n        }\n        return 0;\n    }\n};",lang:"cpp"})))}));e["default"]=n=>{var e=i.useContext(l.context),t=e.demos;return i.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),i.createElement(c,{demos:t})}}}]);