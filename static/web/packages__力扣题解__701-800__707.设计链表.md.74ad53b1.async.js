(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[65040],{20103:function(e,n,t){"use strict";t.r(n);var l=t(96832),i=t(22131),d=t(89730),a=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"707-\u8bbe\u8ba1\u94fe\u8868"},l.createElement(i.AnchorLink,{to:"#707-\u8bbe\u8ba1\u94fe\u8868","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"707. \u8bbe\u8ba1\u94fe\u8868"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(i.Link,{to:"https://leetcode.cn/problems/design-linked-list/"},"707. \u8bbe\u8ba1\u94fe\u8868"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u8bbe\u8ba1\u3001\u94fe\u8868",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bbe\u8ba1\u94fe\u8868\u7684\u5b9e\u73b0\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---cpp"},l.createElement(i.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.09.23"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a36ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a19.2MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6784\u9020\u94fe\u8868\u3002")),l.createElement(d.Z,{code:"class Node {\npublic:\n    Node *next;\n    int val;\n    Node(int val): Node(val, nullptr) {}\n    Node(int val, Node *next): val(val), next(next) {}\n};\nclass MyLinkedList {\npublic:\n    int size;\n    Node *head, *tail;\n    MyLinkedList(): head(nullptr), tail(nullptr), size(0) {}\n    int get(int index) {\n        if (index < 0 || index >= size) return -1;\n        Node *p = head;\n        while (index--) p = p->next;\n        return p->val;\n    }\n    void addAtHead(int val) {\n        if (size == 0) return addFirst(val);\n        head = new Node(val, head);\n        size++;\n    }\n    void addAtTail(int val) {\n        if (size == 0) return addFirst(val);\n        Node *node = new Node(val);\n        tail->next = node;\n        tail = node;\n        size++;\n    }\n    void addAtIndex(int index, int val) {\n        if (index < 0 || index > size) return;\n        if (index == 0) return addAtHead(val);\n        if (index == size) return addAtTail(val);\n        Node *p = head;\n        while (--index) p = p->next;\n        Node *node = new Node(val, p->next);\n        p->next = node;\n        size++;\n    }\n    void deleteAtIndex(int index) {\n        if (index < 0 || index >= size) return;\n        if (size == 1) {\n            delete head;\n            head = tail = nullptr;\n        } else if (index == 0) {\n            Node *node = head;\n            head = head->next;\n            delete node;\n        } else {\n            bool isTail = index == size - 1;\n            Node *p = head;\n            while (--index) p = p->next;\n            Node *node = p->next;\n            p->next = node->next;\n            if (isTail) tail = p;\n            delete node;\n        }\n        size--;\n    }\n    void addFirst(int val){\n        head = tail = new Node(val);\n        size++;\n    }\n};",lang:"cpp"})))}));n["default"]=e=>{var n=l.useContext(i.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&i.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);