(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[28285],{67639:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),o=t(89730),a=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"1302-\u5c42\u6570\u6700\u6df1\u53f6\u5b50\u8282\u70b9\u7684\u548c"},l.createElement(r.AnchorLink,{to:"#1302-\u5c42\u6570\u6700\u6df1\u53f6\u5b50\u8282\u70b9\u7684\u548c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"1302. \u5c42\u6570\u6700\u6df1\u53f6\u5b50\u8282\u70b9\u7684\u548c"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/deepest-leaves-sum/"},"1302. \u5c42\u6570\u6700\u6df1\u53f6\u5b50\u8282\u70b9\u7684\u548c"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u8bf7\u4f60\u8fd4\u56de \u5c42\u6570\u6700\u6df1\u7684\u53f6\u5b50\u8282\u70b9\u7684\u548c \u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.05.13"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a124ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a48.3MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5c42\u5e8f\u904d\u5386\u3002")),l.createElement(o.Z,{code:"function deepestLeavesSum(root: TreeNode | null): number {\n  if (root === null) return 0;\n  const queue: TreeNode[] = [root];\n  let size = 1;\n  let ans = root.val;\n  while (queue.length !== 0) {\n    const node = queue.shift()!;\n    node.left && queue.push(node.left);\n    node.right && queue.push(node.right);\n    if (--size === 0) {\n      if (queue.length !== 0) ans = queue.reduce((total, node) => total + node.val, 0);\n      size = queue.length;\n    }\n  }\n  return ans;\n}",lang:"typescript"}),l.createElement("h2",{id:"\u9898\u89e3-2---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-2---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.05.13"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a116ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a48.3mb"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u4e2d\u5e8f\u904d\u5386\u3002")),l.createElement(o.Z,{code:"function deepestLeavesSum(root: TreeNode | null): number {\n  if (root === null) return 0;\n  let maxDep = 1;\n  let ans = root.val;\n  const inorder = (node: TreeNode, dep = 1): void => {\n    if (dep > maxDep) {\n      ans = 0;\n      maxDep = dep;\n    }\n    node.left && inorder(node.left, dep + 1);\n    node.right && inorder(node.right, dep + 1);\n    if (!node.left && !node.right && dep === maxDep) ans += node.val;\n  };\n  inorder(root);\n  return ans;\n}",lang:"typescript"}),l.createElement("h2",{id:"\u9898\u89e3-3---rust"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-3---rust","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 3 - rust"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.08.17"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a12ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a3MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1arust"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5c42\u5e8f\u904d\u5386\u3002")),l.createElement(o.Z,{code:"use std::cell::RefCell;\nuse std::collections::VecDeque;\nuse std::rc::Rc;\nimpl Solution {\n    pub fn deepest_leaves_sum(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        let root = root.unwrap();\n        let mut q = VecDeque::<Rc<RefCell<TreeNode>>>::new();\n        q.push_back(root.clone());\n        let mut ans = root.as_ref().borrow().val;\n        let mut cur = 0;\n        let mut size = 1;\n        while !q.is_empty() {\n            let node = q.pop_front().unwrap();\n            let node = node.as_ref().borrow();\n            if node.left.is_some() {\n                cur += node.left.as_ref().unwrap().as_ref().borrow().val;\n                q.push_back(node.left.as_ref().unwrap().clone());\n            }\n            if node.right.is_some() {\n                cur += node.right.as_ref().unwrap().as_ref().borrow().val;\n                q.push_back(node.right.as_ref().unwrap().clone());\n            }\n            size -= 1;\n            if size == 0 {\n                size = q.len();\n                if size != 0 {\n                    ans = cur;\n                }\n                cur = 0;\n            }\n        }\n        ans\n    }\n}",lang:"rust"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);