(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[5021],{85191:function(e,n,t){"use strict";t.r(n);var r=t(96832),l=t(22131),i=t(89730),o=r.memo((e=>{e.demos;return r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"677-\u952e\u503c\u6620\u5c04"},r.createElement(l.AnchorLink,{to:"#677-\u952e\u503c\u6620\u5c04","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"677. \u952e\u503c\u6620\u5c04"),r.createElement("blockquote",null,r.createElement("p",null,"\u94fe\u63a5\uff1a",r.createElement(l.Link,{to:"https://leetcode-cn.com/problems/rank-from-stream-lcci/"},"677. \u952e\u503c\u6620\u5c04"),r.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",r.createElement("br",null),"\u6807\u7b7e\uff1a\u8bbe\u8ba1\u3001\u5b57\u5178\u6811\u3001\u54c8\u5e0c\u8868\u3001\u5b57\u7b26\u4e32",r.createElement("br",null),"\u7b80\u4ecb\uff1a\u5b9e\u73b0\u4e00\u4e2a MapSum \u7c7b\u3002")),r.createElement("h2",{id:"\u9898\u89e3-1---typescript"},r.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.11.14"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a80ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a39.8MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1atrie\u3002")),r.createElement(i.Z,{code:"const getIdx = (ch: string) => ch.codePointAt(0)! - 'a'.codePointAt(0)!;\nclass TrieNode {\n  data = 0;\n  end = false;\n  children: TrieNode[] = [];\n  constructor(public val: string) {}\n  sum() {\n    let sum = this.data;\n    for (const child of this.children) {\n      if (child) sum += child.sum();\n    }\n    return sum;\n  }\n}\nclass Trie {\n  root = new TrieNode('');\n  insert(word: string, data: number): void {\n    let node = this.root;\n    for (const ch of word) {\n      const idx = getIdx(ch);\n      if (!node.children[idx]) node.children[idx] = new TrieNode(ch);\n      node = node.children[idx];\n    }\n    node.data = data;\n    node.end = true;\n  }\n  findNode(word: string): TrieNode | null {\n    let node = this.root;\n    for (const ch of word) {\n      const idx = getIdx(ch);\n      if (!node.children[idx]) return null;\n      node = node.children[idx];\n    }\n    return node;\n  }\n  search(word: string): boolean {\n    return !!this.findNode(word)?.end;\n  }\n  startsWith(prefix: string): boolean {\n    return !!this.findNode(prefix);\n  }\n}\n\nclass MapSum {\n  trie = new Trie();\n  insert(key: string, val: number): void {\n    this.trie.insert(key, val);\n  }\n  sum(prefix: string): number {\n    return this.trie.findNode(prefix)?.sum() ?? 0;\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=r.useContext(l.context),t=n.demos;return r.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),r.createElement(o,{demos:t})}}}]);