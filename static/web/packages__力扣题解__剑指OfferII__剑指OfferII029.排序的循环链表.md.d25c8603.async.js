(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[34402],{38511:function(e,n,l){"use strict";l.r(n);var t=l(96832),a=l(22131),r=l(89730),i=t.memo((e=>{e.demos;return t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"\u5251\u6307-offer-ii-029-\u6392\u5e8f\u7684\u5faa\u73af\u94fe\u8868"},t.createElement(a.AnchorLink,{to:"#\u5251\u6307-offer-ii-029-\u6392\u5e8f\u7684\u5faa\u73af\u94fe\u8868","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u5251\u6307 Offer II 029. \u6392\u5e8f\u7684\u5faa\u73af\u94fe\u8868"),t.createElement("blockquote",null,t.createElement("p",null,"\u94fe\u63a5\uff1a",t.createElement(a.Link,{to:"https://leetcode.cn/problems/4ueAj6/"},"\u5251\u6307 Offer II 029. \u6392\u5e8f\u7684\u5faa\u73af\u94fe\u8868"),t.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",t.createElement("br",null),"\u6807\u7b7e\uff1a\u94fe\u8868",t.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u5faa\u73af\u5355\u8c03\u975e\u9012\u51cf\u5217\u8868\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u5411\u8fd9\u4e2a\u5217\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u5143\u7d20 insertVal \uff0c\u4f7f\u8fd9\u4e2a\u5217\u8868\u4ecd\u7136\u662f\u5faa\u73af\u5347\u5e8f\u7684\u3002")),t.createElement("h2",{id:"\u9898\u89e3-1---cpp"},t.createElement(a.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.06.18"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a8ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a7.9MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u904d\u5386\uff0c\u8003\u8651\u5c0f\u4e8e\u6700\u5c0f\u503c\u548c\u5927\u4e8e\u6700\u5927\u503c\u3002")),t.createElement(r.Z,{code:"class Solution {\n   public:\n    Node* insert(Node* head, int insertVal) {\n        if (!head) {\n            Node* ans = new Node(insertVal);\n            ans->next = ans;\n            return ans;\n        }\n        Node *p = head, *node = new Node(insertVal);\n        if (p->next != head) {\n            int nmin = INT_MAX, nmax = INT_MIN;\n            do {\n                nmin = min(nmin, p->val);\n                nmax = max(nmax, p->val);\n                p = p->next;\n            } while (p != head);\n            if (nmin >= insertVal || nmax <= insertVal) {\n                while (p->val <= p->next->val && p->next != head) p = p->next;\n            } else {\n                while (!(p->val <= insertVal && p->next->val >= insertVal))\n                    p = p->next;\n            }\n        }\n        node->next = p->next;\n        p->next = node;\n        return head;\n    }\n};",lang:"cpp"})))}));n["default"]=e=>{var n=t.useContext(a.context),l=n.demos;return t.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&a.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),t.createElement(i,{demos:l})}}}]);