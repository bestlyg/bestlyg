(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[29996],{43840:function(e,t,n){"use strict";n.r(t);var i=n(96832),r=n(22131),s=n(89730),l=i.memo((e=>{e.demos;return i.createElement(i.Fragment,null,i.createElement("div",{className:"markdown"},i.createElement("h1",{id:"30-\u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32"},i.createElement(r.AnchorLink,{to:"#30-\u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32"),i.createElement("blockquote",null,i.createElement("p",null,"\u94fe\u63a5\uff1a",i.createElement(r.Link,{to:"https://leetcode.cn/problems/substring-with-concatenation-of-all-words/"},"30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32"),i.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",i.createElement("br",null),"\u6807\u7b7e\uff1a\u54c8\u5e0c\u8868\u3001\u5b57\u7b26\u4e32\u3001\u6ed1\u52a8\u7a97\u53e3",i.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e9b \u957f\u5ea6\u76f8\u540c \u7684\u5355\u8bcd words \u3002\u627e\u51fa s \u4e2d\u6070\u597d\u53ef\u4ee5\u7531 words \u4e2d\u6240\u6709\u5355\u8bcd\u4e32\u8054\u5f62\u6210\u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002")),i.createElement("h2",{id:"\u9898\u89e3-1---cpp"},i.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.06.23"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a172ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a28.3MB"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u68c0\u6d4b\u6bcf\u4e00\u4e2a\u53ef\u80fd\u6210\u529f\u7684\u70b9\u3002")),i.createElement(s.Z,{code:"class Solution {\n   public:\n    int wordSize, sSize, wordsSize;\n    unordered_map<string, int> m;\n    string s;\n    vector<string> words;\n    vector<int> findSubstring(string s, vector<string> &words) {\n        this->s = s;\n        this->words = words;\n        sSize = s.size();\n        wordSize = words[0].size();\n        wordsSize = words.size();\n        for (auto &w : words) m[w]++;\n        vector<int> ans, list = getlist();\n        unordered_map<int, int> listmap;\n        for (int i = 0; i < list.size(); i++) listmap[list[i]] = i;\n        for (int i = 0; i < list.size(); i++)\n            if (check(list, listmap, i)) ans.push_back(list[i]);\n        return ans;\n    }\n    vector<int> getlist() {\n        vector<int> list;\n        string tmp = s.substr(0, wordSize);\n        for (int i = wordSize; i < sSize; i++) {\n            if (m.count(tmp)) list.push_back(i - wordSize);\n            tmp = tmp.substr(1, wordSize - 1) + s[i];\n        }\n        if (m.count(tmp)) list.push_back(sSize - wordSize);\n        return list;\n    }\n    bool check(vector<int> &list, unordered_map<int, int> &listmap, int start) {\n        int firstIdx = list[start];\n        int lastIdx = firstIdx + (wordsSize - 1) * wordSize;\n        if (!listmap.count(lastIdx)) return false;\n        return _check(list, listmap, start, m);\n    }\n    bool _check(vector<int> &list, unordered_map<int, int> &listmap, int start,\n                unordered_map<string, int> m) {\n        for (int i = list[start], cnt = 0; cnt < wordsSize;\n             cnt++, i += wordSize) {\n            if (!listmap.count(i)) return false;\n            if (m[s.substr(list[listmap[i]], wordSize)]-- == 0) return false;\n        }\n        return true;\n    }\n};",lang:"cpp"})))}));t["default"]=e=>{var t=i.useContext(r.context),n=t.demos;return i.useEffect((()=>{var t;null!==e&&void 0!==e&&null!==(t=e.location)&&void 0!==t&&t.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),i.createElement(l,{demos:n})}}}]);