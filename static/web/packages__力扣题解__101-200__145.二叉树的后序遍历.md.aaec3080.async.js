(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[1722],{52377:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),o=t(89730),a=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"145-\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386"},l.createElement(r.AnchorLink,{to:"#145-\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"145. \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/binary-tree-postorder-traversal/"},"145. \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6808\u3001\u6811",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684 \u540e\u5e8f \u904d\u5386\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---java"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---java","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - java"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.2.21"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a37.7MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajava"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u3002")),l.createElement(o.Z,{code:"class Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        List<Integer> list=new LinkedList<Integer>();\n        if(root!=null) {\n        \tpostorder(root, list);\n        }\n        return list;\n    }\n    public void postorder(TreeNode node,List<Integer> list) {\n    \tif(node.left!=null)postorder(node.left, list);\n    \tif(node.right!=null)postorder(node.right, list);\n    \tlist.add(node.val);\n    }\n}",lang:"java"}),l.createElement("h2",{id:"\u9898\u89e3-2---java"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-2---java","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - java"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.2.21"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a1ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a38.1MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajava"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u8fed\u4ee3\u3002")),l.createElement(o.Z,{code:"class Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        LinkedList<Integer> list=new LinkedList<Integer>();\n        if(root==null)return list;\n        Stack<TreeNode> stack = new Stack<TreeNode>();\n        stack.push(root);\n        while(!stack.isEmpty()) {\n        \tTreeNode node = stack.pop();\n        \tlist.addFirst(node.val);\n        \tif(node.left!=null)stack.push(node.left);\n        \tif(node.right!=null)stack.push(node.right);\n        }\n        return list;\n    }\n}",lang:"java"}),l.createElement("h2",{id:"\u9898\u89e3-3---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-3---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 3 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.9.29"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a84ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a39.6MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u3002")),l.createElement(o.Z,{code:"function postorderTraversal(root: TreeNode | null): number[] {\n  const ans: number[] = [];\n  postOrder(root);\n  return ans;\n  function postOrder(root: TreeNode | null): void {\n    if (root === null) return;\n    root.left && postOrder(root.left);\n    root.right && postOrder(root.right);\n    ans.push(root.val);\n  }\n}",lang:"typescript"}),l.createElement("h2",{id:"\u9898\u89e3-4---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-4---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 4 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.9.29"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a96ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a39.8mb"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u8fed\u4ee3\u904d\u5386\u3002")),l.createElement(o.Z,{code:"function postorderTraversal(root: TreeNode | null): number[] {\n  const ans: number[] = [];\n  if (root === null) return [];\n  const used = new Set<TreeNode>();\n  const stack: TreeNode[] = [root];\n  while (stack.length !== 0) {\n    const node = stack.pop()!;\n    if (used.has(node)) ans.push(node.val);\n    else {\n      stack.push(node);\n      node.right && stack.push(node.right);\n      node.left && stack.push(node.left);\n      used.add(node);\n    }\n  }\n  return ans;\n}",lang:"typescript"}),l.createElement("h2",{id:"\u9898\u89e3-5---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-5---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 5 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.3.19"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a100ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a39.5mb"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u904d\u5386\u3002")),l.createElement(o.Z,{code:"function postorderTraversal(root: TreeNode | null): number[] {\n  const ans: number[] = [];\n  const preorder = (node: TreeNode | null): void => {\n    if (node === null) return;\n    preorder(node.left);\n    preorder(node.right);\n    ans.push(node.val);\n  };\n  preorder(root);\n  return ans;\n}",lang:"typescript"}),l.createElement("h2",{id:"\u9898\u89e3-6---c"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-6---c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 6 - c"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.11.27"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a5.7mb"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u3002")),l.createElement(o.Z,{code:"// \u5148\u9012\u5f52\u5de6\uff0c\u518d\u9012\u5f52\u53f3\uff0c\u518d\u8ba1\u7b97\u5f53\u524d\u8282\u70b9\nvoid order(struct TreeNode *root, int *arr, int *idx){\n    if (!root) return ;\n    order(root->left, arr, idx);\n    order(root->right, arr, idx);\n    arr[(*idx)++] = root->val;\n}\nint* postorderTraversal(struct TreeNode* root, int* returnSize){\n    int *arr = (int *)malloc(sizeof(int) * 100);\n    *returnSize = 0;\n    order(root, arr, returnSize);\n    return arr;\n}",lang:"c"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);