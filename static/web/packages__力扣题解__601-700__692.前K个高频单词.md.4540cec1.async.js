(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[30210],{15806:function(n,e,t){"use strict";t.r(e);var r=t(96832),i=t(22131),s=t(89730),a=r.memo((n=>{n.demos;return r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"692-\u524d-k-\u4e2a\u9ad8\u9891\u5355\u8bcd"},r.createElement(i.AnchorLink,{to:"#692-\u524d-k-\u4e2a\u9ad8\u9891\u5355\u8bcd","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"692. \u524d K \u4e2a\u9ad8\u9891\u5355\u8bcd"),r.createElement("blockquote",null,r.createElement("p",null,"\u94fe\u63a5\uff1a",r.createElement(i.Link,{to:"https://leetcode-cn.com/problems/top-k-frequent-words/"},"692. \u524d K \u4e2a\u9ad8\u9891\u5355\u8bcd"),r.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",r.createElement("br",null),"\u6807\u7b7e\uff1a\u5806\u3001\u54c8\u5e0c\u8868\u3001\u5b57\u5178\u6811",r.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u4e00\u975e\u7a7a\u7684\u5355\u8bcd\u5217\u8868\uff0c\u8fd4\u56de\u524d k \u4e2a\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5355\u8bcd\u3002")),r.createElement("h2",{id:"\u9898\u89e3-1---typescript"},r.createElement(i.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.04.09"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a144ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a44.6MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6784\u5efa\u5806\u3002")),r.createElement(s.Z,{code:"class Heap<T> {\n  private arr: T[] = [];\n  get isEmpty() {\n    return this.size === 0;\n  }\n  get size() {\n    return this.arr.length;\n  }\n  get top() {\n    return this.arr[0];\n  }\n  constructor(private compare: (num1: T, num2: T) => number) {}\n  add(num: T): void {\n    this.arr.push(num);\n    this.shiftUp(this.size - 1);\n  }\n  remove(): T {\n    const num = this.arr.shift()!;\n    if (this.size) {\n      this.arr.unshift(this.arr.pop()!);\n      this.shiftDown(0);\n    }\n    return num;\n  }\n  private shiftUp(index: number): void {\n    if (index === 0) return;\n    const parentIndex = (index - 1) >> 1;\n    if (this.compare(this.arr[index], this.arr[parentIndex]) > 0) {\n      [this.arr[index], this.arr[parentIndex]] = [this.arr[parentIndex], this.arr[index]];\n      this.shiftUp(parentIndex);\n    }\n  }\n  private shiftDown(index: number): void {\n    let childrenIndex = index * 2 + 1;\n    if (childrenIndex > this.size - 1) return;\n    if (\n      childrenIndex + 1 <= this.size - 1 &&\n      this.compare(this.arr[childrenIndex + 1], this.arr[childrenIndex]) > 0\n    ) {\n      childrenIndex++;\n    }\n    if (this.compare(this.arr[childrenIndex], this.arr[index]) > 0) {\n      [this.arr[childrenIndex], this.arr[index]] = [this.arr[index], this.arr[childrenIndex]];\n      this.shiftDown(childrenIndex);\n    }\n  }\n}\nfunction topKFrequent(words: string[], k: number): string[] {\n  const map: Record<string, number> = {};\n  for (const word of words) map[word] = (map[word] ?? 0) + 1;\n  const strCheck = (str1: string, str2: string) => {\n    let i = 0;\n    while (str1[i] && str1[i] === str2[i]) i++;\n    if (str1[i] && !str2[i]) return -1;\n    else if (!str1[i] && str2[i]) return 1;\n    else return str2.codePointAt(i)! - str1.codePointAt(i)!;\n  };\n  const heap = new Heap<[string, number]>(([str1, v1], [str2, v2]) =>\n    v1 === v2 ? strCheck(str1, str2) : v1 - v2\n  );\n  Object.entries(map).forEach(v => heap.add(v));\n  const ans: string[] = [];\n  while (heap.size && k--) {\n    ans.push(heap.remove()[0]);\n  }\n  return ans;\n}",lang:"typescript"}),r.createElement("h2",{id:"\u9898\u89e3-2---typescript"},r.createElement(i.AnchorLink,{to:"#\u9898\u89e3-2---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.05.20"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a132ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a44.3mb"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5229\u7528\u5806\u53bb\u83b7\u53d6\u3002")),r.createElement(s.Z,{code:"class Heap<T = number> {\n  private arr: T[] = [];\n  get isEmpty() {\n    return this.size === 0;\n  }\n  get size() {\n    return this.arr.length;\n  }\n  get top() {\n    return this.arr[0];\n  }\n  constructor(private compare: (t1: T, t2: T) => number) {}\n  add(num: T): void {\n    this.arr.push(num);\n    this.shiftUp(this.size - 1);\n  }\n  remove(): T {\n    const num = this.arr.shift()!;\n    if (this.size) {\n      this.arr.unshift(this.arr.pop()!);\n      this.shiftDown(0);\n    }\n    return num;\n  }\n  private shiftUp(index: number): void {\n    if (index === 0) return;\n    const parentIndex = (index - 1) >> 1;\n    if (this.compare(this.arr[index], this.arr[parentIndex]) > 0) {\n      [this.arr[index], this.arr[parentIndex]] = [this.arr[parentIndex], this.arr[index]];\n      this.shiftUp(parentIndex);\n    }\n  }\n  private shiftDown(index: number): void {\n    let childrenIndex = index * 2 + 1;\n    if (childrenIndex > this.size - 1) return;\n    if (\n      childrenIndex + 1 <= this.size - 1 &&\n      this.compare(this.arr[childrenIndex + 1], this.arr[childrenIndex]) > 0\n    ) {\n      childrenIndex++;\n    }\n    if (this.compare(this.arr[childrenIndex], this.arr[index]) > 0) {\n      [this.arr[childrenIndex], this.arr[index]] = [this.arr[index], this.arr[childrenIndex]];\n      this.shiftDown(childrenIndex);\n    }\n  }\n  *[Symbol.iterator](): IterableIterator<T> {\n    for (const t of this.arr) {\n      yield t;\n    }\n  }\n}\nfunction topKFrequent(words: string[], k: number): string[] {\n  const map: Record<string, number> = {};\n  for (const word of words) map[word] = (map[word] ?? 0) + 1;\n  const chartToNumber = (char: string) => char.codePointAt(0)! - 'a'.codePointAt(0)!;\n  const heap = new Heap<[string, number]>(([k1, v1], [k2, v2]) => {\n    if (v1 !== v2) return v1 - v2;\n    let i1 = 0;\n    const end1 = k1.length;\n    let i2 = 0;\n    const end2 = k2.length;\n    for (; i1 < end1 && i2 < end2; i1++, i2++)\n      if (k1[i1] !== k2[i2]) return chartToNumber(k2[i2]) - chartToNumber(k1[i1]);\n    if (i1 === end1) return 1;\n    else if (i2 === end2) return -1;\n    else return 0;\n  });\n  for (const data of Object.entries(map)) heap.add(data);\n  const ans: string[] = [];\n  while (heap.size !== 0 && k--) ans.push(heap.remove()[0]);\n  return ans;\n}",lang:"typescript"})))}));e["default"]=n=>{var e=r.useContext(i.context),t=e.demos;return r.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&i.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),r.createElement(a,{demos:t})}}}]);