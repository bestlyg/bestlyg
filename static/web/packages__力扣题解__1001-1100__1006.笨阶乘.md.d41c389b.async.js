(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[63692],{17051:function(e,n,t){"use strict";t.r(n);var l=t(96832),c=t(22131),m=t(89730),a=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"1006-\u7b28\u9636\u4e58"},l.createElement(c.AnchorLink,{to:"#1006-\u7b28\u9636\u4e58","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"1006. \u7b28\u9636\u4e58"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(c.Link,{to:"https://leetcode-cn.com/problems/clumsy-factorial/"},"1006. \u7b28\u9636\u4e58"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6570\u5b66",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 N\uff0c\u5b83\u8fd4\u56de N \u7684\u7b28\u9636\u4e58\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(c.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.04.01"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a112ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a45.8MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5148\u7b97\u51fa\u6a21\u677f\uff0c\u518d\u5229\u7528\u6a21\u677f\u8fdb\u884c\u8fd0\u7b97\u3002")),l.createElement(m.Z,{code:"const op = ['*', '/', '+', '-'];\nconst opMap: Record<string, (num1: number, num2: number) => number> = {\n  '*': (num1, num2) => num1 * num2,\n  '/': (num1, num2) => ~~(num1 / num2),\n  '+': (num1, num2) => num1 + num2,\n  '-': (num1, num2) => num1 - num2,\n};\nfunction clumsy(N: number): number {\n  let curOp = 0;\n  const template: (number | string)[] = [];\n  while (N) {\n    template.push(N--);\n    template.push(op[curOp]);\n    curOp = (curOp + 1) % 4;\n  }\n  template.pop();\n  const stack: (number | string)[] = [];\n  for (let i = 0, l = template.length; i < l; i++) {\n    const c = template[i];\n    if (c === '*' || c === '/') {\n      const num1 = stack.pop() as number;\n      const num2 = template[++i] as number;\n      stack.push(opMap[c](num1, num2));\n    } else stack.push(c);\n  }\n  template.length = 0;\n  template.push(...stack);\n  stack.length = 0;\n  for (let i = 0, l = template.length; i < l; i++) {\n    const c = template[i];\n    if (c === '+' || c === '-') {\n      const num1 = stack.pop() as number;\n      const num2 = template[++i] as number;\n      stack.push(opMap[c](num1, num2));\n    } else stack.push(c);\n  }\n  return stack[0] as number;\n}",lang:"typescript"})))}));n["default"]=e=>{var n=l.useContext(c.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&c.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);