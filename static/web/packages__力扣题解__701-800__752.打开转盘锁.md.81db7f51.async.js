(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[45374],{22172:function(e,n,t){"use strict";t.r(n);var r=t(96832),s=t(22131),l=t(89730),c=r.memo((e=>{e.demos;return r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"752-\u6253\u5f00\u8f6c\u76d8\u9501"},r.createElement(s.AnchorLink,{to:"#752-\u6253\u5f00\u8f6c\u76d8\u9501","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"752. \u6253\u5f00\u8f6c\u76d8\u9501"),r.createElement("blockquote",null,r.createElement("p",null,"\u94fe\u63a5\uff1a",r.createElement(s.Link,{to:"https://leetcode-cn.com/problems/open-the-lock/"},"752. \u6253\u5f00\u8f6c\u76d8\u9501"),r.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",r.createElement("br",null),"\u6807\u7b7e\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u6570\u7ec4\u3001\u54c8\u5e0c\u8868\u3001\u5b57\u7b26\u4e32",r.createElement("br",null),"\u7b80\u4ecb\uff1a\u5b57\u7b26\u4e32 target \u4ee3\u8868\u53ef\u4ee5\u89e3\u9501\u7684\u6570\u5b57\uff0c\u4f60\u9700\u8981\u7ed9\u51fa\u89e3\u9501\u9700\u8981\u7684\u6700\u5c0f\u65cb\u8f6c\u6b21\u6570\uff0c\u5982\u679c\u65e0\u8bba\u5982\u4f55\u4e0d\u80fd\u89e3\u9501\uff0c\u8fd4\u56de -1 \u3002")),r.createElement("h2",{id:"\u9898\u89e3-1---typescript"},r.createElement(s.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.06.26"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a776ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a56.8MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u50a8\u5b58\u540e\u8fdb\u884c\u904d\u5386\u3002")),r.createElement(l.Z,{code:"function openLock(deadends: string[], target: string): number {\n  const prevMap: Record<string, string> = {\n    0: '9',\n    1: '0',\n    2: '1',\n    3: '2',\n    4: '3',\n    5: '4',\n    6: '5',\n    7: '6',\n    8: '7',\n    9: '8',\n  };\n  const nextMap: Record<string, string> = {\n    0: '1',\n    1: '2',\n    2: '3',\n    3: '4',\n    4: '5',\n    5: '6',\n    6: '7',\n    7: '8',\n    8: '9',\n    9: '0',\n  };\n  const INIT_STR = '0000';\n  const set = new Set(deadends);\n  if (set.has(INIT_STR)) return -1;\n  if (target === INIT_STR) return 0;\n  const queue = [INIT_STR];\n  const map = new Map<string, number>([[INIT_STR, 0]]);\n  let ans = Infinity;\n  const updateQueue = (str: string, index: number, dict: Record<string, string>, step: number) => {\n    const replaceStr = str.substring(0, index) + dict[str[index]] + str.substring(index + 1);\n    if (replaceStr === target) {\n      ans = Math.min(ans, step + 1);\n      return;\n    }\n    if (!set.has(replaceStr)) {\n      map.has(replaceStr) || queue.push(replaceStr);\n      map.set(replaceStr, Math.min(map.get(replaceStr) ?? Infinity, step + 1));\n    }\n  };\n  while (queue.length !== 0) {\n    const str = queue.shift()!;\n    const step = map.get(str)!;\n    for (let i = 0; i < 4; i++) {\n      updateQueue(str, i, prevMap, step);\n      updateQueue(str, i, nextMap, step);\n    }\n  }\n  return ans === Infinity ? -1 : ans;\n}",lang:"typescript"}),r.createElement("h2",{id:"\u9898\u89e3-2---typescript"},r.createElement(s.AnchorLink,{to:"#\u9898\u89e3-2---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.07.25"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a200ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a49.1mb"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1abfs\u3002")),r.createElement(l.Z,{code:"function openLock(deadends: string[], target: string): number {\n  const headendSet = new Set(deadends);\n  if (headendSet.has('0000')) return -1;\n  const queue: [string, number][] = [['0000', 0]];\n  const set = new Set<string>(['0000']);\n  const getNext = (num: number) => (num + 1) % 10;\n  const getPrev = (num: number) => (num === 0 ? 10 : num) - 1;\n  const add = (str: string, count) => {\n    if (set.has(str) || headendSet.has(str)) return;\n    set.add(str);\n    queue.push([str, count]);\n  };\n  while (queue.length) {\n    const [str, count] = queue.shift()!;\n    if (str === target) return count;\n    for (let i = 0; i < 4; i++) {\n      const num = str.codePointAt(i)! - '0'.codePointAt(0)!;\n      add(str.substr(0, i) + getNext(num) + str.substr(i + 1), count + 1);\n      add(str.substr(0, i) + getPrev(num) + str.substr(i + 1), count + 1);\n    }\n  }\n  return -1;\n}",lang:"typescript"})))}));n["default"]=e=>{var n=r.useContext(s.context),t=n.demos;return r.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&s.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),r.createElement(c,{demos:t})}}}]);