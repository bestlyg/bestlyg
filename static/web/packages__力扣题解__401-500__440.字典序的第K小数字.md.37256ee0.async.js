(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[72648],{72645:function(e,n,t){"use strict";t.r(n);var r=t(96832),l=t(22131),i=t(89730),c=r.memo((e=>{e.demos;return r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"440-\u5b57\u5178\u5e8f\u7684\u7b2c-k-\u5c0f\u6570\u5b57"},r.createElement(l.AnchorLink,{to:"#440-\u5b57\u5178\u5e8f\u7684\u7b2c-k-\u5c0f\u6570\u5b57","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"440. \u5b57\u5178\u5e8f\u7684\u7b2c K \u5c0f\u6570\u5b57"),r.createElement("blockquote",null,r.createElement("p",null,"\u94fe\u63a5\uff1a",r.createElement(l.Link,{to:"https://leetcode-cn.com/problems/k-th-smallest-in-lexicographical-order/"},"440. \u5b57\u5178\u5e8f\u7684\u7b2c K \u5c0f\u6570\u5b57"),r.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",r.createElement("br",null),"\u6807\u7b7e\uff1a\u5b57\u5178\u6811",r.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u6574\u6570 n \u548c k\uff0c\u627e\u5230 1 \u5230 n \u4e2d\u5b57\u5178\u5e8f\u7b2c k \u5c0f\u7684\u6570\u5b57\u3002")),r.createElement("h2",{id:"\u9898\u89e3-1---typescript"},r.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.10.26"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a76ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a39.4MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6784\u5efa\u5b57\u5178\u6811\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u5b57\u6570\u5305\u542b\u7684\u8282\u70b9\u6570\u3002")),r.createElement(i.Z,{code:"function findKthNumber(n: number, k: number): number {\n  for (let i = 1; i <= 9; i++) {\n    const c = count(i);\n    if (c < k) k -= c;\n    else return find(i, k);\n  }\n  return 0;\n  function find(prifix: number, k: number): number {\n    if (k === 1) return prifix;\n    k--;\n    for (let i = 0; i <= 9; i++) {\n      const next = prifix * 10 + i;\n      if (next > n) continue;\n      const c = count(next);\n      if (c >= k) return find(next, k);\n      else k -= c;\n    }\n    return 0;\n  }\n  function count(prifix: number): number {\n    let nextPrifix = prifix + 1;\n    let ans = 0;\n    while (prifix <= n) {\n      ans += Math.min(n + 1, nextPrifix) - prifix;\n      prifix *= 10;\n      nextPrifix *= 10;\n    }\n    return ans;\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=r.useContext(l.context),t=n.demos;return r.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),r.createElement(c,{demos:t})}}}]);