(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[13807],{46838:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),i=t(89730),a=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"706-\u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04"},l.createElement(r.AnchorLink,{to:"#706-\u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"706. \u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/design-hashmap/"},"706. \u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u7b80\u5355",l.createElement("br",null),"\u6807\u7b7e\uff1a\u8bbe\u8ba1\u3001\u6570\u7ec4\u3001\u54c8\u5e0c\u8868\u3001\u94fe\u8868\u3001\u54c8\u5e0c\u51fd\u6570",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u4e0d\u4f7f\u7528\u4efb\u4f55\u5185\u5efa\u7684\u54c8\u5e0c\u8868\u5e93\u8bbe\u8ba1\u4e00\u4e2a\u54c8\u5e0c\u6620\u5c04\uff08HashMap\uff09\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.07.24"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a204ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a48.8MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5229\u7528\u94fe\u8868\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81\u3002")),l.createElement(i.Z,{code:"class LinkedListNode {\n  constructor(\n    public val: [number, number],\n    public prev: LinkedListNode | null = null,\n    public next: LinkedListNode | null = null\n  ) {}\n}\nclass LinkedList {\n  private head = new LinkedListNode([0, 0]);\n  private last: LinkedListNode | null = null;\n  private getNode(key: number): LinkedListNode | null {\n    let p: LinkedListNode = this.head;\n    while (p.next) {\n      if (p.next.val[0] === key) return p;\n      p = p.next;\n    }\n    return null;\n  }\n  contains(key: number): boolean {\n    return this.getNode(key) !== null;\n  }\n  put(key: number, value: number): void {\n    let node = this.getNode(key);\n    if (node !== null) {\n      node.next!.val[1] = value;\n      return;\n    }\n    node = new LinkedListNode([key, value]);\n    if (this.last === null) this.head.next = node;\n    else this.last.next = node;\n    this.last = node;\n  }\n  get(key: number): number {\n    const node = this.getNode(key);\n    if (node === null) return -1;\n    return node.next!.val[1];\n  }\n  remove(key: number): void {\n    const node = this.getNode(key);\n    if (node === null) return;\n    if (this.last === node.next) this.last = node;\n    node.next = node.next!.next;\n  }\n}\nconst SIZE = 1000;\nclass MyHashMap {\n  private list = new Array(SIZE).fill(0).map(_ => new LinkedList());\n  private hash(key: number) {\n    return key % SIZE;\n  }\n  put(key: number, value: number): void {\n    this.list[this.hash(key)].put(key, value);\n  }\n  get(key: number): number {\n    return this.list[this.hash(key)].get(key);\n  }\n  remove(key: number): void {\n    return this.list[this.hash(key)].remove(key);\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);