(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[49953],{50142:function(e,t,n){"use strict";n.r(t);var l=n(96832),r=n(22131),i=n(89730),a=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"102-\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"},l.createElement(r.AnchorLink,{to:"#102-\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/"},"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5176\u6309\u5c42\u6b21\u904d\u5386\u7684\u8282\u70b9\u503c\u3002 \uff08\u5373\u9010\u5c42\u5730\uff0c\u4ece\u5de6\u5230\u53f3\u8bbf\u95ee\u6240\u6709\u8282\u70b9\uff09\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---java"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---java","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - java"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.2.21"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a2ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a39.6MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajava"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u8fed\u4ee3\u3002")),l.createElement(i.Z,{code:"class Solution {\n   \tpublic List<List<Integer>> levelOrder(TreeNode root) {\n\t\tList<List<Integer>> list = new LinkedList<List<Integer>>();\n\t\tif (root == null)\n\t\t\treturn list;\n\t\tList<Integer> tmplist = new LinkedList<Integer>();\n\t\tint size=1;\n\t\tQueue<TreeNode> queue = new LinkedList<>();\n\t\tqueue.offer(root);\n\t\twhile (!queue.isEmpty()) {\n\t\t\tTreeNode node = queue.poll();\n\t\t\ttmplist.add(node.val);\n\t\t\tif(node.left!=null)queue.offer(node.left);\n\t\t\tif(node.right!=null)queue.offer(node.right);\n\t\t\tsize--;\n\t\t\tif(size==0) {\n\t\t\t\tsize=queue.size();\n\t\t\t\tlist.add(tmplist);\n\t\t\t\ttmplist=new LinkedList<Integer>();\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n}",lang:"java"}),l.createElement("h2",{id:"\u9898\u89e3-2---java"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-2---java","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - java"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.2.21"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a1ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a39.3MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajava"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u3002")),l.createElement(i.Z,{code:"class Solution {\n   \tLinkedList<List<Integer>> list = new LinkedList<List<Integer>>();\n\tpublic List<List<Integer>> levelOrder(TreeNode root) {\n\t\tif (root == null)\n\t\t\treturn list;\n\t\tinLevelOrder(root,0);\n\t\treturn list;\n\t}\n\tpublic void inLevelOrder(TreeNode node,int level){\n\t\tif(list.size()==level) {\n\t\t\tlist.add(new ArrayList<Integer>());\n\t\t}\n\t\tlist.get(level).add(node.val);\n\t\tif(node.left!=null)\n\t\tinLevelOrder(node.left, 1+level);\n\t\tif(node.right!=null)\n\t\tinLevelOrder(node.right, 1+level);\n\t}\n}",lang:"java"}),l.createElement("h2",{id:"\u9898\u89e3-3---javascript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-3---javascript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 3 - javascript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.2.21"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a72ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a34.8MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajavascript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u8fed\u4ee3\u3002")),l.createElement(i.Z,{code:"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function (root) {\n  if (root === null) return [];\n  const queue = [root];\n  const res = [[root.val]];\n  let size = 1;\n  while (queue.length !== 0) {\n    const node = queue.shift();\n    if (node.left !== null) queue.push(node.left);\n    if (node.right !== null) queue.push(node.right);\n    if (--size === 0) {\n      if (queue.length !== 0) res.push(queue.map(node => node.val));\n      size = queue.length;\n    }\n  }\n  return res;\n};",lang:"javascript"}),l.createElement("h2",{id:"\u9898\u89e3-4---c"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-4---c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 4 - c"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.11.27"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a8ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a7.3MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u3002")),l.createElement(i.Z,{code:"#define MAX 2000\nint** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){\n    int **arr = (int **)malloc(sizeof(int) * MAX);\n    *returnSize = 0;\n    *returnColumnSizes = (int *)malloc(sizeof(int) * MAX);\n    if (!root) return arr;\n    // \u7ef4\u62a4\u961f\u5217\u50a8\u5b58\u8282\u70b9\u4fe1\u606f\n    struct TreeNode *q[2000];\n    q[0] = root;\n    // \u7ef4\u62a4\u961f\u5217\u5934\u5c3e\u6307\u9488\n    int head = 0, tail = 1;\n    // \u7ef4\u62a4\u5f53\u524d\u5c42\u7684\u5143\u7d20\u6570\u91cf\uff0c\u5f53\u524d\u904d\u5386\u7684\u5c42\u7ea7\n    int size = 1, height = 1;\n    arr[0] = (int *)malloc(sizeof(int));\n    arr[0][0] = root->val;\n    (*returnColumnSizes)[0] = 1;\n    while (head != tail) {\n        // \u6bcf\u6b21\u51fa\u961f\u4e00\u4e2a\u8282\u70b9\n        struct TreeNode *node = q[head++];\n        // \u82e5\u5de6\u8282\u70b9\u4e0d\u4e3a\u7a7a\u5219\u5165\u961f\n        if (node->left) q[tail++] = node->left;\n        // \u82e5\u53f3\u8282\u70b9\u4e0d\u4e3a\u7a7a\u5219\u5165\u961f\n        if (node->right) q[tail++] = node->right;\n        // \u82e5\u5f53\u524d\u5c42\u65e0\u5143\u7d20\uff0c\u8bf4\u660e\u961f\u5217\u91cc\u90fd\u662f\u4e0b\u4e00\u5c42\u7684\u5143\u7d20\n        if (--size == 0) {\n            size = tail - head;\n            *returnSize += 1;\n            (*returnColumnSizes)[height] = size;\n            arr[height] = (int *)malloc(sizeof(int) * size);\n            for(int i = head; i < tail; i++) arr[height][i - head] = q[i]->val;\n            height++;\n        }\n    }\n    return arr;\n}",lang:"c"})))}));t["default"]=e=>{var t=l.useContext(r.context),n=t.demos;return l.useEffect((()=>{var t;null!==e&&void 0!==e&&null!==(t=e.location)&&void 0!==t&&t.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(a,{demos:n})}}}]);