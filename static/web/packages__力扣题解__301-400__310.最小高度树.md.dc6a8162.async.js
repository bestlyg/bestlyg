(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[87619],{31946:function(n,e,t){"use strict";t.r(e);var i=t(96832),l=t(22131),c=t(89730),r=i.memo((n=>{n.demos;return i.createElement(i.Fragment,null,i.createElement("div",{className:"markdown"},i.createElement("h1",{id:"310-\u6700\u5c0f\u9ad8\u5ea6\u6811"},i.createElement(l.AnchorLink,{to:"#310-\u6700\u5c0f\u9ad8\u5ea6\u6811","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"310. \u6700\u5c0f\u9ad8\u5ea6\u6811"),i.createElement("blockquote",null,i.createElement("p",null,"\u94fe\u63a5\uff1a",i.createElement(l.Link,{to:"https://leetcode-cn.com/problems/minimum-height-trees/"},"310. \u6700\u5c0f\u9ad8\u5ea6\u6811"),i.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",i.createElement("br",null),"\u6807\u7b7e\uff1a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u56fe\u3001\u62d3\u6251\u6392\u5e8f",i.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bf7\u4f60\u627e\u5230\u6240\u6709\u7684 \u6700\u5c0f\u9ad8\u5ea6\u6811 \u5e76\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u5b83\u4eec\u7684\u6839\u8282\u70b9\u6807\u7b7e\u5217\u8868\u3002")),i.createElement("h2",{id:"\u9898\u89e3-1---c"},i.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---c","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - c++"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.03.14"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a180ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a77.6MB"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac++"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u4ece\u6240\u6709\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\u904d\u5386\uff0c\u7531\u5916\u5230\u5185\u3002")),i.createElement(c.Z,{code:"class Solution {\n   public:\n    struct node {\n        int idx, cnt;\n        unordered_set<int> chilren;\n    };\n    vector<int> findMinHeightTrees(int n, vector<vector<int>> &edges) {\n        if (n == 1) return vector(1, 0);\n        vector<node> list(n);\n        for (int i = 0; i < n; i++) {\n            list[i].idx = i;\n            list[i].cnt = 0;\n        }\n        for (auto &edge : edges) {\n            int n1 = edge[0], n2 = edge[1];\n            list[n1].cnt++;\n            list[n2].cnt++;\n            list[n1].chilren.insert(n2);\n            list[n2].chilren.insert(n1);\n        }\n        queue<int> q;\n        for (int i = 0; i < n; i++) {\n            if (list[i].cnt == 1) q.push(i);\n        }\n        vector<int> ans;\n        while (q.size()) {\n            ans.clear();\n            int size = q.size();\n            for (int i = 0; i < size; i++) {\n                int node = q.front();\n                q.pop();\n                ans.push_back(node);\n                list[node].cnt--;\n                for (auto &child : list[node].chilren) {\n                    list[child].cnt--;\n                    if (list[child].cnt == 1) q.push(child);\n                }\n            }\n        }\n        return ans;\n    }\n};",lang:"cpp"}),i.createElement("h2",{id:"\u9898\u89e3-2---cpp"},i.createElement(l.AnchorLink,{to:"#\u9898\u89e3-2---cpp","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - cpp"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.04.06"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a172ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a77.7MB"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u4ece\u5916\u5411\u5185\u904d\u5386\u3002")),i.createElement(c.Z,{code:"class Solution {\n   public:\n    struct node {\n        int val, cnt;\n        unordered_set<int> children;\n    };\n    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {\n        if (n == 1) return {0};\n        vector<node> list(n);\n        for (int i = 0; i < n; i++) {\n            list[i].val = i;\n            list[i].cnt = 0;\n        }\n        for (auto& edge : edges) {\n            int n0 = edge[0], n1 = edge[1];\n            list[n0].children.insert(n1);\n            list[n1].children.insert(n0);\n            list[n0].cnt++;\n            list[n1].cnt++;\n        }\n        queue<int> q;\n        for (auto& node : list) {\n            if (node.cnt == 1) q.push(node.val);\n        }\n        vector<int> ans;\n        int size = q.size();\n        while (q.size()) {\n            int idx = q.front();\n            ans.push_back(idx);\n            q.pop();\n            list[idx].cnt--;\n            for (auto& child : list[idx].children) {\n                if (--list[child].cnt != 1) continue;\n                q.push(child);\n            }\n            if (--size == 0) {\n                size = q.size();\n                if (size) ans.clear();\n            }\n        }\n        return ans;\n    }\n};",lang:"cpp"})))}));e["default"]=n=>{var e=i.useContext(l.context),t=e.demos;return i.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),i.createElement(r,{demos:t})}}}]);