(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[32197],{57426:function(n,e,t){"use strict";t.r(e);var r=t(96832),i=t(22131),s=t(89730),l=r.memo((n=>{n.demos;return r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"373-\u67e5\u627e\u548c\u6700\u5c0f\u7684-k-\u5bf9\u6570\u5b57"},r.createElement(i.AnchorLink,{to:"#373-\u67e5\u627e\u548c\u6700\u5c0f\u7684-k-\u5bf9\u6570\u5b57","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"373. \u67e5\u627e\u548c\u6700\u5c0f\u7684 K \u5bf9\u6570\u5b57"),r.createElement("blockquote",null,r.createElement("p",null,"\u94fe\u63a5\uff1a",r.createElement(i.Link,{to:"https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/"},"373. \u67e5\u627e\u548c\u6700\u5c0f\u7684 K \u5bf9\u6570\u5b57"),r.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",r.createElement("br",null),"\u6807\u7b7e\uff1a\u5806",r.createElement("br",null),"\u7b80\u4ecb\uff1a\u627e\u5230\u548c\u6700\u5c0f\u7684 k \u5bf9\u6570\u5b57 (u1,v1), (u2,v2) ... (uk,vk)\u3002")),r.createElement("h2",{id:"\u9898\u89e3-1---typescript"},r.createElement(i.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.04.09"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a2136ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a77mb"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6784\u5efa\u5806\u3002")),r.createElement(s.Z,{code:"class Heap<T> {\n  private arr: T[] = [];\n  get isEmpty() {\n    return this.size === 0;\n  }\n  get size() {\n    return this.arr.length;\n  }\n  constructor(private compare: (num1: T, num2: T) => number) {}\n  add(num: T): void {\n    this.arr.push(num);\n    this.shiftUp(this.size - 1);\n  }\n  remove(): T {\n    const num = this.arr.shift()!;\n    if (this.size) {\n      this.arr.unshift(this.arr.pop()!);\n      this.shiftDown(0);\n    }\n    return num;\n  }\n  private shiftUp(index: number): void {\n    if (index === 0) return;\n    const parentIndex = (index - 1) >> 1;\n    if (this.compare(this.arr[index], this.arr[parentIndex]) > 0) {\n      [this.arr[index], this.arr[parentIndex]] = [this.arr[parentIndex], this.arr[index]];\n      this.shiftUp(parentIndex);\n    }\n  }\n  private shiftDown(index: number): void {\n    let childrenIndex = index * 2 + 1;\n    if (childrenIndex > this.size - 1) return;\n    if (\n      childrenIndex + 1 < this.size - 1 &&\n      this.compare(this.arr[childrenIndex + 1], this.arr[childrenIndex]) > 0\n    ) {\n      childrenIndex++;\n    }\n    if (this.compare(this.arr[childrenIndex], this.arr[index]) > 0) {\n      [this.arr[childrenIndex], this.arr[index]] = [this.arr[index], this.arr[childrenIndex]];\n      this.shiftDown(childrenIndex);\n    }\n  }\n}\n\nfunction kSmallestPairs(nums1: number[], nums2: number[], k: number): number[][] {\n  const sum = (arr: number[]) => arr.reduce((total, cur) => total + cur, 0);\n  const heap = new Heap<number[]>((nums1, nums2) => sum(nums2) - sum(nums1));\n  nums1.forEach(num1 => nums2.forEach(num2 => heap.add([num1, num2])));\n  const ans: number[][] = [];\n  while (heap.size && k--) ans.push(heap.remove());\n  return ans;\n}",lang:"typescript"}),r.createElement("h2",{id:"\u9898\u89e3-2---c"},r.createElement(i.AnchorLink,{to:"#\u9898\u89e3-2---c","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - c++"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.01.14"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a924ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a62.6MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac++"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5806\u3002")),r.createElement(s.Z,{code:"class Solution {\n   public:\n    struct node {\n        int num1, num2, sum;\n        bool operator<(const node& obj) const {\n            return sum == obj.sum\n                       ? num2 == obj.num2 ? num1 < obj.num1 : num2 < obj.num2\n                       : sum < obj.sum;\n        }\n    };\n    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2,\n                                       int k) {\n        priority_queue<node> q;\n        int isBreak = 0, len = min(k, (int)(nums1.size() * nums2.size()));\n        // cout << \"len = \" << len << endl;\n        vector<vector<int>> ans(len, vector<int>(2));\n        for (auto& num1 : nums1) {\n            if (isBreak) break;\n            for (auto& num2 : nums2) {\n                if (q.size() >= len && num1 > 0 && num2 > 0 &&\n                    num1 > q.top().sum && num2 > q.top().sum)\n                    isBreak = 1;\n                if (isBreak) break;\n                if (q.size() < len) {\n                    q.push((node){num1, num2, num1 + num2});\n                } else if (q.top().sum > num1 + num2) {\n                    // cout << q.top().num1 << ',' << q.top().num2;\n                    // if (q.top() )\n                    q.pop();\n                    q.push((node){num1, num2, num1 + num2});\n                }\n            }\n        }\n        while (q.size()) {\n            node n = q.top();\n            q.pop();\n            ans[len - 1][0] = n.num1;\n            ans[len - 1][1] = n.num2;\n            len--;\n        }\n        return ans;\n    }\n};",lang:"cpp"})))}));e["default"]=n=>{var e=r.useContext(i.context),t=e.demos;return r.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&i.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),r.createElement(l,{demos:t})}}}]);