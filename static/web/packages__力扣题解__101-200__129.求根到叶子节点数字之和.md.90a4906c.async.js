(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[96084],{57711:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),o=t(89730),a=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"129-\u6c42\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c"},l.createElement(r.AnchorLink,{to:"#129-\u6c42\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"129. \u6c42\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/"},"129. \u6c42\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8ba1\u7b97\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u751f\u6210\u7684\u6240\u6709\u6570\u5b57\u4e4b\u548c\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.10.29"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a112ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a42.6MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u6574\u5408\u6570\u7ec4\uff0c\u6df1\u5ea6\u4f18\u5148\u3002")),l.createElement(o.Z,{code:"function sumNumbers(root: TreeNode | null): number {\n  if (root === null) return 0;\n  return find(root).reduce((total, cur) => total + Number(cur.join('')), 0);\n  function find(root: TreeNode): number[][] {\n    const val = root.val;\n    const ans: number[][] = [];\n    if (root.left === null && root.right === null) {\n      ans.push([val]);\n    }\n    if (root.left !== null) {\n      ans.push(...find(root.left).map(v => [val, ...v]));\n    }\n    if (root.right !== null) {\n      ans.push(...find(root.right).map(v => [val, ...v]));\n    }\n    return ans;\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);