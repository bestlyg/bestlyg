(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[84037],{77685:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),a=t(89730),c=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"802-\u627e\u5230\u6700\u7ec8\u7684\u5b89\u5168\u72b6\u6001"},l.createElement(r.AnchorLink,{to:"#802-\u627e\u5230\u6700\u7ec8\u7684\u5b89\u5168\u72b6\u6001","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"802. \u627e\u5230\u6700\u7ec8\u7684\u5b89\u5168\u72b6\u6001"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/find-eventual-safe-states/"},"802. \u627e\u5230\u6700\u7ec8\u7684\u5b89\u5168\u72b6\u6001"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u56fe\u3001\u62d3\u6251\u6392\u5e8f",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8fd4\u56de\u4e00\u4e2a\u7531\u56fe\u4e2d\u6240\u6709\u5b89\u5168\u7684\u8d77\u59cb\u8282\u70b9\u7ec4\u6210\u7684\u6570\u7ec4\u4f5c\u4e3a\u7b54\u6848\u3002\u7b54\u6848\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5e94\u5f53\u6309 \u5347\u5e8f \u6392\u5217\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.08.05"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a204ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a53.8MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1adfs\u3002")),l.createElement(a.Z,{code:"function eventualSafeNodes(graph: number[][]): number[] {\n  const n = graph.length;\n  const ans = new Map<number, boolean>();\n  const set = new Set<number>();\n  for (let i = 0; i < n; i++) dfs(i);\n  function dfs(idx: number) {\n    if (set.has(idx)) return false;\n    if (ans.has(idx)) return ans.get(idx);\n    if (graph[idx].length === 0) {\n      ans.set(idx, true);\n      return true;\n    }\n    set.add(idx);\n    let f = true;\n    for (const next of graph[idx]) {\n      if (!dfs(next)) {\n        f = false;\n        break;\n      }\n    }\n    set.delete(idx);\n    ans.set(idx, f);\n    return f;\n  }\n  return [...ans.entries()]\n    .filter(([, f]) => f)\n    .map(([val]) => val)\n    .sort((a, b) => a - b);\n}",lang:"typescript"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(c,{demos:t})}}}]);