(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[31822],{73087:function(e,n,l){"use strict";l.r(n);var t=l(96832),a=l(22131),r=l(89730),i=t.memo((e=>{e.demos;return t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"1104-\u4e8c\u53c9\u6811\u5bfb\u8def"},t.createElement(a.AnchorLink,{to:"#1104-\u4e8c\u53c9\u6811\u5bfb\u8def","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"1104. \u4e8c\u53c9\u6811\u5bfb\u8def"),t.createElement("blockquote",null,t.createElement("p",null,"\u94fe\u63a5\uff1a",t.createElement(a.Link,{to:"https://leetcode-cn.com/problems/path-in-zigzag-labelled-binary-tree/"},"1104. \u4e8c\u53c9\u6811\u5bfb\u8def"),t.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",t.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u6570\u5b66\u3001\u4e8c\u53c9\u6811",t.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u4f60\u6811\u4e0a\u67d0\u4e00\u4e2a\u8282\u70b9\u7684\u6807\u53f7 label\uff0c\u8bf7\u4f60\u8fd4\u56de\u4ece\u6839\u8282\u70b9\u5230\u8be5\u6807\u53f7\u4e3a label \u8282\u70b9\u7684\u8def\u5f84\uff0c\u8be5\u8def\u5f84\u662f\u7531\u9014\u7ecf\u7684\u8282\u70b9\u6807\u53f7\u6240\u7ec4\u6210\u7684\u3002")),t.createElement("h2",{id:"\u9898\u89e3-1---typescript"},t.createElement(a.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.07.29"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a88ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a39.6MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u6df1\u5ea6\u5411\u4e0a\u904d\u5386\u3002")),t.createElement(r.Z,{code:"function pathInZigZagTree(label: number): number[] {\n  const list: number[] = [];\n  let max = 1;\n  while (label >= max) list.push((max <<= 1));\n  const ans: number[] = [];\n  dfs(label);\n  return ans;\n  function find(label: number): {\n    maxLabel: number;\n    prevMin: number;\n  } {\n    for (let i = 0; i < list.length; i++) {\n      if (list[i] > label)\n        return {\n          maxLabel: list[i] - 1,\n          prevMin: list[i - 2] ?? 1,\n        };\n    }\n    return {\n      maxLabel: -1,\n      prevMin: -1,\n    };\n  }\n  function dfs(label: number): void {\n    if (label === 1) {\n      ans.unshift(label);\n      return;\n    }\n    ans.unshift(label);\n    const { maxLabel, prevMin } = find(label);\n    let i = maxLabel;\n    let parent = prevMin;\n    while (i > label) {\n      i--;\n      if ((i & 1) !== 0) parent++;\n    }\n    dfs(parent);\n  }\n}",lang:"typescript"})))}));n["default"]=e=>{var n=t.useContext(a.context),l=n.demos;return t.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&a.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),t.createElement(i,{demos:l})}}}]);