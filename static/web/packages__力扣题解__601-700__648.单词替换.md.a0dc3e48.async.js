(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[19936],{33143:function(n,e,t){"use strict";t.r(e);var r=t(96832),i=t(22131),l=t(89730),s=r.memo((n=>{n.demos;return r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"648-\u5355\u8bcd\u66ff\u6362"},r.createElement(i.AnchorLink,{to:"#648-\u5355\u8bcd\u66ff\u6362","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"648. \u5355\u8bcd\u66ff\u6362"),r.createElement("blockquote",null,r.createElement("p",null,"\u94fe\u63a5\uff1a",r.createElement(i.Link,{to:"https://leetcode.cn/problems/replace-words/"},"648. \u5355\u8bcd\u66ff\u6362"),r.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",r.createElement("br",null),"\u6807\u7b7e\uff1a\u5b57\u5178\u6811\u3001\u6570\u7ec4\u3001\u54c8\u5e0c\u8868\u3001\u5b57\u7b26\u4e32",r.createElement("br",null),"\u7b80\u4ecb\uff1a\u73b0\u5728\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u7531\u8bb8\u591a\u8bcd\u6839\u7ec4\u6210\u7684\u8bcd\u5178 dictionary \u548c\u4e00\u4e2a\u7528\u7a7a\u683c\u5206\u9694\u5355\u8bcd\u5f62\u6210\u7684\u53e5\u5b50 sentence\u3002\u4f60\u9700\u8981\u5c06\u53e5\u5b50\u4e2d\u7684\u6240\u6709\u7ee7\u627f\u8bcd\u7528\u8bcd\u6839\u66ff\u6362\u6389\u3002\u5982\u679c\u7ee7\u627f\u8bcd\u6709\u8bb8\u591a\u53ef\u4ee5\u5f62\u6210\u5b83\u7684\u8bcd\u6839\uff0c\u5219\u7528\u6700\u77ed\u7684\u8bcd\u6839\u66ff\u6362\u5b83\u3002")),r.createElement("h2",{id:"\u9898\u89e3-1---cpp"},r.createElement(i.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.07.07"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a68ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a54.5MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5b57\u5178\u6811\u3002")),r.createElement(l.Z,{code:'class TrieNode {\n   public:\n    TrieNode **children;\n    bool end;\n    TrieNode() {\n        children = (TrieNode **)malloc(sizeof(TrieNode *) * 26);\n        for (int i = 0; i < 26; i++) children[i] = nullptr;\n        end = false;\n    }\n    void insert(string str) {\n        TrieNode *node = this;\n        for (int i = 0; i < str.size(); i++) {\n            int idx = str[i] - \'a\';\n            if (!node->children[idx]) node->children[idx] = new TrieNode();\n            node = node->children[idx];\n            if (i == str.size() - 1) node->end = true;\n        }\n    }\n    string find(string str) {\n        TrieNode *node = this;\n        string ans = "", tmp = "";\n        for (int i = 0; i < str.size(); i++) {\n            int idx = str[i] - \'a\';\n            tmp += str[i];\n            if (!node->children[idx]) return ans;\n            node = node->children[idx];\n            if (node->end) return tmp;\n        }\n        return ans;\n    }\n};\nclass Solution {\n   public:\n    TrieNode *root = new TrieNode();\n    string replaceWords(vector<string> &dictionary, string sentence) {\n        vector<string> list;\n        string ans = "";\n        for (auto &str : dictionary) root->insert(str);\n        for (auto &str : split(sentence)) {\n            string res = root->find(str);\n            if (res == "")\n                list.push_back(str);\n            else\n                list.push_back(res);\n        }\n        for (int i = 0; i < list.size(); i++) {\n            if (i != 0) ans += " ";\n            ans += list[i];\n        }\n        return ans;\n    }\n    vector<string> split(string &str) {\n        vector<string> ans;\n        string tmp = "";\n        for (auto &ch : str) {\n            if (ch == \' \') {\n                ans.push_back(tmp);\n                tmp = "";\n            } else\n                tmp += ch;\n        }\n        ans.push_back(tmp);\n        return ans;\n    }\n};',lang:"cpp"})))}));e["default"]=n=>{var e=r.useContext(i.context),t=e.demos;return r.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&i.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),r.createElement(s,{demos:t})}}}]);