(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[78769],{27025:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),a=t(89730),o=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"94-\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386"},l.createElement(r.AnchorLink,{to:"#94-\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/"},"94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6808\u3001\u6811\u3001\u54c8\u5e0c\u8868",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684\u4e2d\u5e8f \u904d\u5386\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---java"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---java","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - java"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.2.21"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a38MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajava"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u3002")),l.createElement(a.Z,{code:"class Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n    \tLinkedList<Integer> list = new LinkedList<Integer>();\n        if(root==null)return list;\n        inorder(list,root);\n        return list;\n    }\n    public void inorder(List<Integer> list,TreeNode node) {\n    \tif(node.left!=null)inorder(list, node.left);\n    \tlist.add(node.val);\n    \tif(node.right!=null)inorder(list, node.right);\n    }\n}",lang:"java"}),l.createElement("h2",{id:"\u9898\u89e3-2---java"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-2---java","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - java"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.2.21"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a1ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a37.8MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajava"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u8fed\u4ee3\u3002")),l.createElement(a.Z,{code:"public List<Integer> inorderTraversal(TreeNode root) {\n\tList<Integer> list = new LinkedList<Integer>();\n\tif(root==null) return list;\n\tStack<TreeNode> stack= new Stack<TreeNode>();\n\tTreeNode node = root;\n\twhile(!stack.isEmpty()||node!=null) {\n\t\twhile(node!=null) {\n\t\t\tstack.push(node);\n\t\t\tnode=node.left;\n\t\t}\n\t\tnode=stack.pop();\n\t\tlist.add(node.val);\n\t\tnode=node.right;\n\t}\n\treturn list;\n}",lang:"java"}),l.createElement("h2",{id:"\u9898\u89e3-3---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-3---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 3 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.9.14"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a72ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a37.5MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u3002")),l.createElement(a.Z,{code:"function inorderTraversal(root: TreeNode | null): number[] {\n  const ans: number[] = [];\n  _inorder(root);\n  return ans;\n  function _inorder(node: TreeNode | null): void {\n    if (node === null) return;\n    node.left !== null && _inorder(node.left);\n    ans.push(node.val);\n    node.right !== null && _inorder(node.right);\n  }\n}",lang:"typescript"}),l.createElement("h2",{id:"\u9898\u89e3-4---typescript"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-4---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 4 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.9.14"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a84ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a37.5mb"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u8fed\u4ee3\u3002")),l.createElement(a.Z,{code:"function inorderTraversal(root: TreeNode | null): number[] {\n  if (root === null) return [];\n  const ans: number[] = [];\n  const stack: TreeNode[] = [root];\n  const used = new Set<TreeNode>();\n  while (stack.length !== 0) {\n    const node = stack.pop() as TreeNode;\n    if (used.has(node)) {\n      ans.push(node.val);\n    } else {\n      used.add(node);\n      node.right && stack.push(node.right);\n      stack.push(node);\n      node.left && stack.push(node.left);\n    }\n  }\n  return ans;\n}",lang:"typescript"}),l.createElement("h2",{id:"\u9898\u89e3-5---c"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-5---c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 5 - c"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.11.27"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a5.6mb"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u3002")),l.createElement(a.Z,{code:"// \u5148\u9012\u5f52\u5de6\uff0c\u518d\u8ba1\u7b97\u5f53\u524d\u8282\u70b9\uff0c\u518d\u9012\u5f52\u53f3\nvoid order(struct TreeNode *root, int *arr, int *idx){\n    if (!root) return ;\n    order(root->left, arr, idx);\n    arr[(*idx)++] = root->val;\n    order(root->right, arr, idx);\n}\nint* inorderTraversal(struct TreeNode* root, int* returnSize){\n    int *arr = (int *)malloc(sizeof(int) * 100);\n    *returnSize = 0;\n    order(root, arr, returnSize);\n    return arr;\n}",lang:"c"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(o,{demos:t})}}}]);