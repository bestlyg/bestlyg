(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[69707],{45263:function(t,e,n){"use strict";n.r(e);var i=n(96832),l=n(22131),o=n(89730),r=i.memo((t=>{t.demos;return i.createElement(i.Fragment,null,i.createElement("div",{className:"markdown"},i.createElement("h1",{id:"882-\u7ec6\u5206\u56fe\u4e2d\u7684\u53ef\u5230\u8fbe\u8282\u70b9"},i.createElement(l.AnchorLink,{to:"#882-\u7ec6\u5206\u56fe\u4e2d\u7684\u53ef\u5230\u8fbe\u8282\u70b9","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"882. \u7ec6\u5206\u56fe\u4e2d\u7684\u53ef\u5230\u8fbe\u8282\u70b9"),i.createElement("blockquote",null,i.createElement("p",null,"\u94fe\u63a5\uff1a",i.createElement(l.Link,{to:"https://leetcode.cn/problems/reachable-nodes-in-subdivided-graph/"},"882. \u7ec6\u5206\u56fe\u4e2d\u7684\u53ef\u5230\u8fbe\u8282\u70b9"),i.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",i.createElement("br",null),"\u6807\u7b7e\uff1a\u56fe\u3001\u6700\u77ed\u8def\u3001\u5806(\u4f18\u5148\u961f\u5217)",i.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u4f60\u539f\u59cb\u56fe\u548c maxMoves \uff0c\u8fd4\u56de \u65b0\u7684\u7ec6\u5206\u56fe\u4e2d\u4ece\u8282\u70b9 0 \u51fa\u53d1 \u53ef\u5230\u8fbe\u7684\u8282\u70b9\u6570 \u3002")),i.createElement("h2",{id:"\u9898\u89e3-1---cpp"},i.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.11.26"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a268ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a70.6MB"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1aDijkstra\u3002")),i.createElement(o.Z,{code:"struct Node {\n    int visit;\n    unordered_map<int, int> to;\n    vector<int> next;\n    Node(): visit(-1) {}\n};\nstruct Item {\n    int from, to, cnt;\n    Item() {}\n    Item(int from, int to, int cnt): from(from), to(to), cnt(cnt) {}\n};\nclass Solution {\npublic:\n    int reachableNodes(vector<vector<int>>& edges, int maxMoves, int n) {\n        vector<Node> list(n);\n        unordered_map<int, unordered_map<int, int>> mcnt;\n        for (auto &edge : edges) {\n            int from = edge[0], to = edge[1], cnt = edge[2];\n            list[from].next.push_back(to);\n            list[to].next.push_back(from);\n            mcnt[from][to] = mcnt[to][from] = cnt;\n        }\n        auto ItemCmp = [&](Item &a, Item &b){ return a.cnt < b.cnt; };\n        priority_queue<Item, vector<Item>, decltype(ItemCmp)> q(ItemCmp);\n        q.push(Item(-1, 0, maxMoves));\n        list[0].visit = maxMoves;\n        while (q.size()) {\n            Item item = q.top();\n            q.pop();\n            for (auto &next : list[item.to].next) {\n                int cnt = mcnt[item.to][next];\n                if (cnt > 0 && item.cnt <= cnt) \n                    list[item.to].to[next] = max(item.cnt, list[item.to].to[next]);\n                else {\n                    list[item.to].to[next] = cnt;\n                    int surplus = item.cnt - cnt - 1;\n                    if (surplus > list[next].visit) {\n                        list[next].visit = surplus;\n                        if (surplus > 0) q.push(Item(item.to, next, surplus));\n                    }\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < list.size(); i++) {\n            if (list[i].visit != -1) ans++;\n            for (auto &item : list[i].to) {\n                if (item.first >= i || list[item.first].to[i] == 0) \n                    ans += min(mcnt[i][item.first], item.second + list[item.first].to[i]);\n            }\n        }\n        return ans;\n    }\n};",lang:"cpp"})))}));e["default"]=t=>{var e=i.useContext(l.context),n=e.demos;return i.useEffect((()=>{var e;null!==t&&void 0!==t&&null!==(e=t.location)&&void 0!==e&&e.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(t.location.hash.slice(1)))}),[]),i.createElement(r,{demos:n})}}}]);