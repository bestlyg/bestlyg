(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[79073],{44664:function(e,n,t){"use strict";t.r(n);var l=t(96832),o=t(22131),r=t(89730),c=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"1765-\u5730\u56fe\u4e2d\u7684\u6700\u9ad8\u70b9"},l.createElement(o.AnchorLink,{to:"#1765-\u5730\u56fe\u4e2d\u7684\u6700\u9ad8\u70b9","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"1765. \u5730\u56fe\u4e2d\u7684\u6700\u9ad8\u70b9"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(o.Link,{to:"https://leetcode-cn.com/problems/map-of-highest-peak/"},"1765. \u5730\u56fe\u4e2d\u7684\u6700\u9ad8\u70b9"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u6570\u7ec4\u3001\u77e9\u9635",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u5927\u5c0f\u4e3a m x n \u7684\u6574\u6570\u77e9\u9635 height \uff0c\u5176\u4e2d height[i][j] \u662f\u683c\u5b50 (i, j) \u7684\u9ad8\u5ea6\u3002\u5982\u679c\u6709\u591a\u79cd\u89e3\u6cd5\uff0c\u8bf7\u8fd4\u56de \u4efb\u610f\u4e00\u4e2a \u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---c"},l.createElement(o.AnchorLink,{to:"#\u9898\u89e3-1---c","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - c++"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.01.29"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a284ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a105.6MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ac++"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1abfs\u3002")),l.createElement(r.Z,{code:"class Solution {\n   public:\n    struct node {\n        int row, col;\n    };\n    int dirs[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    vector<vector<int>> highestPeak(vector<vector<int>> &isWater) {\n        int m = isWater.size(), n = isWater[0].size();\n        vector<vector<int>> ans(m, vector(n, -1));\n        queue<node> q;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (isWater[i][j] == 1) {\n                    q.push((node){i, j});\n                    ans[i][j] = 0;\n                }\n            }\n        }\n        while (q.size()) {\n            node v = q.front();\n            q.pop();\n            for (int i = 0; i < 4; i++) {\n                int nrow = v.row + dirs[i][0], ncol = v.col + dirs[i][1];\n                if (nrow < 0 || ncol < 0 || nrow >= m || ncol >= n ||\n                    ans[nrow][ncol] != -1)\n                    continue;\n                ans[nrow][ncol] = ans[v.row][v.col] + 1;\n                q.push((node){nrow, ncol});\n            }\n        }\n        return ans;\n    }\n};",lang:"cpp"})))}));n["default"]=e=>{var n=l.useContext(o.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&o.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(c,{demos:t})}}}]);