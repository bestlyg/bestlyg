(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[47062],{16373:function(e,n,t){"use strict";t.r(n);var l=t(96832),a=t(22131),u=t(89730),r=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"225-\u7528\u961f\u5217\u5b9e\u73b0\u6808"},l.createElement(a.AnchorLink,{to:"#225-\u7528\u961f\u5217\u5b9e\u73b0\u6808","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"225. \u7528\u961f\u5217\u5b9e\u73b0\u6808"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(a.Link,{to:"https://leetcode-cn.com/problems/implement-stack-using-queues/"},"225. \u7528\u961f\u5217\u5b9e\u73b0\u6808"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u7b80\u5355",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6808\u3001\u8bbe\u8ba1",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u4f7f\u7528\u961f\u5217\u5b9e\u73b0\u6808\u7684\u4e0b\u5217\u64cd\u4f5c\uff1apush(x) -- \u5143\u7d20 x \u5165\u6808\uff0cpop() -- \u79fb\u9664\u6808\u9876\u5143\u7d20\uff0ctop() -- \u83b7\u53d6\u6808\u9876\u5143\u7d20\uff0cempty() -- \u8fd4\u56de\u6808\u662f\u5426\u4e3a\u7a7a\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---java"},l.createElement(a.AnchorLink,{to:"#\u9898\u89e3-1---java","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - java"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2020.2.16"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a40.8MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajava"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u4f7f\u7528\u53cc\u7aef\u961f\u5217\u6784\u5efa\u3002")),l.createElement(u.Z,{code:"class MyStack {\n    private Deque<Integer> deue;\n    public MyStack() {\n        deue=new LinkedList<Integer>();\n    }\n    public void push(int x) {\n        deue.offerLast(x);\n    }\n    public int pop() {\n    \treturn deue.pollLast();\n    }\n    public int top() {\n        return deue.getLast();\n    }\n    public boolean empty() {\n        return deue.isEmpty();\n    }\n}",lang:"java"}),l.createElement("h2",{id:"\u9898\u89e3-2---typescript"},l.createElement(a.AnchorLink,{to:"#\u9898\u89e3-2---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.11.24"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a0ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a5.7MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1aqueue\u3002")),l.createElement(u.Z,{code:'// #define DEBUG\n#ifdef DEBUG\n#define log(frm, args...)    \\\n    {                        \\\n        printf(frm, ##args); \\\n    }\n#else\n#define log(frm, args...)\n#endif\n\ntypedef struct Node{\n    int val;\n    struct Node *prev, *next;\n} Node;\nNode *createNode(int val){\n    Node *node = (Node *)malloc(sizeof(Node));\n    node->val = val;\n    node->prev = NULL;\n    node->next = NULL;\n    return node;\n}\ntypedef struct {\n    int size;\n    Node *head, *tail;\n} Queue;\nQueue *ceateQueue(){\n    Queue *q = (Queue *)malloc(sizeof(Queue));\n    q->size = 0;\n    q->tail = q->head = NULL;\n    return q;\n}\nvoid enQueue(Queue *q, int val){\n    Node *node = createNode(val);\n    if (q->size == 0) {\n        q->head = q->tail = node;\n    } else {\n        node->prev = q->tail;\n        q->tail->next = node;\n        q->tail = node;\n    }\n    q->size++;\n    log("enQueue %d success, head = %d, tail = %d\\n", val, q->head->val, q->tail->val);\n}\nint isQueueEmpty(Queue *q) {\n    return q->size == 0;\n}\nint queueTop(Queue *q){\n    if (isQueueEmpty(q)) return -1;\n    return q->head->val;\n}\nint deQueue(Queue *q) {\n    if (isQueueEmpty(q)) return -1;\n    if (q->size == 1) {\n        Node *node = q->head;\n        int val = node->val;\n        q->tail = q->head = NULL;\n        free(node);\n        q->size = 0;\n        return val;\n    }\n    Node *node = q->head;\n    node->next->prev = NULL;\n    int val = node->val;\n    q->head = node->next;\n    free(node);\n    q->size--;\n    return val;\n}\nvoid freeQueue(Queue *q){\n    while(q->size) deQueue(q);\n    free(q);\n}\n\ntypedef struct {\n    int size;\n    Queue *q1, *q2;\n} MyStack;\n\nMyStack* myStackCreate() {\n    MyStack *s = (MyStack *)malloc(sizeof(MyStack));\n    s->q1 = ceateQueue();\n    s->q2 = ceateQueue();\n    return s;\n}\n\nvoid myStackPush(MyStack* obj, int x) {\n    log("push %d\\n", x);\n    enQueue(obj->q1, x);\n    log("push %d successfully\\n", x);\n}\n\nint myStackPop(MyStack* obj) {\n    while(obj->q1->size > 1) enQueue(obj->q2, deQueue(obj->q1));\n    int val = deQueue(obj->q1);\n    while(obj->q2->size) enQueue(obj->q1, deQueue(obj->q2));\n    return val;\n}\n\nint myStackTop(MyStack* obj) {\n    return obj->q1->tail->val;\n}\n\nbool myStackEmpty(MyStack* obj) {\n    return obj->q1->size == 0;\n}\n\nvoid myStackFree(MyStack* obj) {\n    freeQueue(obj->q1);\n    freeQueue(obj->q2);\n    free(obj);\n}',lang:"typescript"})))}));n["default"]=e=>{var n=l.useContext(a.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&a.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(r,{demos:t})}}}]);