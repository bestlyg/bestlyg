(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[29059],{59687:function(n,e,t){"use strict";t.r(e);var r=t(96832),o=t(22131),s=t(89730),i=r.memo((n=>{n.demos;return r.createElement(r.Fragment,null,r.createElement("div",{className:"markdown"},r.createElement("h1",{id:"212-\u5355\u8bcd\u641c\u7d22-ii"},r.createElement(o.AnchorLink,{to:"#212-\u5355\u8bcd\u641c\u7d22-ii","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"212. \u5355\u8bcd\u641c\u7d22 II"),r.createElement("blockquote",null,r.createElement("p",null,"\u94fe\u63a5\uff1a",r.createElement(o.Link,{to:"https://leetcode-cn.com/problems/word-search-ii/"},"212. \u5355\u8bcd\u641c\u7d22 II"),r.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",r.createElement("br",null),"\u6807\u7b7e\uff1a\u5b57\u5178\u6811\u3001\u6570\u7ec4\u3001\u5b57\u7b26\u4e32\u3001\u56de\u6eaf\u3001\u77e9\u9635",r.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u4e00\u4e2a m x n \u4e8c\u7ef4\u5b57\u7b26\u7f51\u683c board \u548c\u4e00\u4e2a\u5355\u8bcd\uff08\u5b57\u7b26\u4e32\uff09\u5217\u8868 words\uff0c\u627e\u51fa\u6240\u6709\u540c\u65f6\u5728\u4e8c\u7ef4\u7f51\u683c\u548c\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u3002")),r.createElement("h2",{id:"\u9898\u89e3-1---javascript"},r.createElement(o.AnchorLink,{to:"#\u9898\u89e3-1---javascript","aria-hidden":"true",tabIndex:-1},r.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - javascript"),r.createElement("ul",null,r.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.09.16"),r.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a4092ms"),r.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a45.2MB"),r.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ajavascript"),r.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5b57\u5178\u6811\u3002")),r.createElement(s.Z,{code:"interface ITrie {\n        size: number;\n        empty: boolean;\n        add: (str: string) => void;\n        remove: (str: string) => void;\n        clear: () => void;\n        contains: (str: string) => boolean;\n        starsWith: (str: string) => boolean;\n      }\n      class TrieNode {\n        end = false;\n        children: Map<string, TrieNode> = new Map();\n        constructor(public val: string) {}\n      }\n      class Trie implements ITrie {\n        private _size = 0;\n        get size() {\n          return this._size;\n        }\n        get empty() {\n          return this._size === 0;\n        }\n        private root = new TrieNode('');\n        clear() {\n          this.root = new TrieNode('');\n          this._size = 0;\n        }\n        add(str: string) {\n          return this._add(str);\n        }\n        private _add(str: string, node = this.root) {\n          if (str.length === 0) {\n            this.root.end = true;\n            this._size++;\n            return;\n          }\n          if (str.length === 1) {\n            let endNode = node.children.get(str);\n            if (!endNode) node.children.set(str, (endNode = new TrieNode(str)));\n            if (!endNode.end) {\n              endNode.end = true;\n              this._size++;\n            }\n            return;\n          }\n          const first = str[0];\n          let nextNode = node.children.get(first);\n          if (!nextNode) node.children.set(first, (nextNode = new TrieNode(first)));\n          const nextStr = str.substr(1);\n          this._add(nextStr, nextNode);\n        }\n        contains(str: string) {\n          const endNode = this.findEndNode(str);\n          return endNode ? endNode.end : false;\n        }\n        remove(str: string) {\n          const endNode = this.findEndNode(str);\n          if (endNode && endNode.end) {\n            endNode.end = false;\n            this._size--;\n          }\n        }\n        starsWith(str: string) {\n          return this.findEndNode(str) !== null;\n        }\n        private findEndNode(str: string, node = this.root): TrieNode | null {\n          if (str.length === 0) return this.root;\n          if (str.length === 1) return node.children.get(str) ?? null;\n          const first = str[0];\n          let nextNode = node.children.get(first);\n          if (!nextNode) return null;\n          const nextStr = str.substr(1);\n          return this.findEndNode(nextStr, nextNode);\n        }\n      }\n      function findWords(board: string[][], words: string[]): string[] {\n        const trie = new Trie();\n        let maxWordLen = 0;\n        words.forEach(word => {\n          trie.add(word);\n          maxWordLen = Math.max(maxWordLen, word.length);\n        });\n        const rowLen = board.length;\n        const colLen = board[0].length;\n        const ans = new Set<string>();\n        const format = (row: number, col: number) => `${row}::${col}`;\n        const set = new Set<string>();\n        const starts: [number, number][] = [];\n        for (let row = 0; row < rowLen; row++) {\n          for (let col = 0; col < colLen; col++) {\n            if (trie.starsWith(board[row][col])) starts.push([row, col]);\n          }\n        }\n        starts.forEach(v => find(...v));\n        return Array.from(ans);\n        function find(row: number, col: number, str: string = ''): void {\n          const formatStr = format(row, col);\n          if (\n            set.has(formatStr) ||\n            str.length > maxWordLen ||\n            ans.size === words.length ||\n            row === -1 ||\n            row === rowLen ||\n            col === -1 ||\n            col === colLen\n          )\n            return;\n          str += board[row][col];\n          if (trie.contains(str)) ans.add(str);\n          set.add(formatStr);\n          find(row, col - 1, str);\n          find(row, col + 1, str);\n          find(row - 1, col, str);\n          find(row + 1, col, str);\n          set.delete(formatStr);\n        }\n      }",lang:"javascript"})))}));e["default"]=n=>{var e=r.useContext(o.context),t=e.demos;return r.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&o.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),r.createElement(i,{demos:t})}}}]);