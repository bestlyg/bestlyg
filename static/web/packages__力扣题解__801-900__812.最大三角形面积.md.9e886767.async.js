(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[22193],{3727:function(n,e,i){"use strict";i.r(e);var t=i(96832),l=i(22131),o=i(89730),c=t.memo((n=>{n.demos;return t.createElement(t.Fragment,null,t.createElement("div",{className:"markdown"},t.createElement("h1",{id:"812-\u6700\u5927\u4e09\u89d2\u5f62\u9762\u79ef"},t.createElement(l.AnchorLink,{to:"#812-\u6700\u5927\u4e09\u89d2\u5f62\u9762\u79ef","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"812. \u6700\u5927\u4e09\u89d2\u5f62\u9762\u79ef"),t.createElement("blockquote",null,t.createElement("p",null,"\u94fe\u63a5\uff1a",t.createElement(l.Link,{to:"https://leetcode-cn.com/problems/largest-triangle-area/"},"812. \u6700\u5927\u4e09\u89d2\u5f62\u9762\u79ef"),t.createElement("br",null),"\u96be\u5ea6\uff1a\u7b80\u5355",t.createElement("br",null),"\u6807\u7b7e\uff1a\u51e0\u4f55\u3001\u6570\u7ec4\u3001\u6570\u5b66",t.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u5305\u542b\u591a\u4e2a\u70b9\u7684\u96c6\u5408\uff0c\u4ece\u5176\u4e2d\u53d6\u4e09\u4e2a\u70b9\u7ec4\u6210\u4e09\u89d2\u5f62\uff0c\u8fd4\u56de\u80fd\u7ec4\u6210\u7684\u6700\u5927\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u3002")),t.createElement("h2",{id:"\u9898\u89e3-1---cpp"},t.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},t.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),t.createElement("ul",null,t.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.03.20"),t.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a24ms"),t.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a7.4MB"),t.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),t.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u904d\u5386\u3002")),t.createElement(o.Z,{code:"class Solution {\n   public:\n    double largestTriangleArea(vector<vector<int>>& points) {\n        int n = points.size();\n        double ans = 0;\n        for (int i1 = 0; i1 < n; i1++) {\n            for (int i2 = i1 + 1; i2 < n; i2++) {\n                for (int i3 = i2 + 1; i3 < n; i3++) {\n                    if (check(points, i1, i2, i3)) continue;\n                    ans = max(ans, comp_area(points, i1, i2, i3));\n                }\n            }\n        }\n        return ans;\n    }\n    bool check(vector<vector<int>>& points, int i1, int i2, int i3) {\n        return points[i1][0] == points[i2][0] &&\n                   points[i1][0] == points[i3][0] ||\n               points[i1][1] == points[i2][1] && points[i1][1] == points[i3][1];\n    }\n    double comp_area(vector<vector<int>>& points, int i1, int i2, int i3) {\n        double line1 = comp_line(points, i1, i2),\n               line2 = comp_line(points, i1, i3),\n               line3 = comp_line(points, i2, i3),\n               p = (line1 + line2 + line3) / 2;\n        return sqrt(p * (p - line1) * (p - line2) * (p - line3));\n    }\n    double comp_line(vector<vector<int>>& points, int i1, int i2) {\n        double x = pow(points[i1][0] - points[i2][0], 2),\n               y = pow(points[i1][1] - points[i2][1], 2);\n        return sqrt(x + y);\n    }\n};",lang:"cpp"})))}));e["default"]=n=>{var e=t.useContext(l.context),i=e.demos;return t.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),t.createElement(c,{demos:i})}}}]);