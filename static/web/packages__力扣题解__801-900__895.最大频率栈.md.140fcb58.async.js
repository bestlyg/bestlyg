(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[26353],{61704:function(n,e,t){"use strict";t.r(e);var a=t(96832),i=t(22131),d=t(89730),l=a.memo((n=>{n.demos;return a.createElement(a.Fragment,null,a.createElement("div",{className:"markdown"},a.createElement("h1",{id:"895-\u6700\u5927\u9891\u7387\u6808"},a.createElement(i.AnchorLink,{to:"#895-\u6700\u5927\u9891\u7387\u6808","aria-hidden":"true",tabIndex:-1},a.createElement("span",{className:"icon icon-link"})),"895. \u6700\u5927\u9891\u7387\u6808"),a.createElement("blockquote",null,a.createElement("p",null,"\u94fe\u63a5\uff1a",a.createElement(i.Link,{to:"https://leetcode.cn/problems/maximum-frequency-stack/"},"895. \u6700\u5927\u9891\u7387\u6808"),a.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",a.createElement("br",null),"\u6807\u7b7e\uff1a\u6808\u3001\u8bbe\u8ba1\u3001\u54c8\u5e0c\u8868\u3001\u6709\u5e8f\u5408\u96c6",a.createElement("br",null),"\u7b80\u4ecb\uff1a\u8bbe\u8ba1\u4e00\u4e2a\u7c7b\u4f3c\u5806\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5c06\u5143\u7d20\u63a8\u5165\u5806\u6808\uff0c\u5e76\u4ece\u5806\u6808\u4e2d\u5f39\u51fa\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\u5143\u7d20\u3002")),a.createElement("h2",{id:"\u9898\u89e3-1---cpp"},a.createElement(i.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},a.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),a.createElement("ul",null,a.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.11.30"),a.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a236ms"),a.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a123MB"),a.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),a.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1aheap\u3002")),a.createElement(d.Z,{code:'class Node {\npublic:\n    int val, cnt, idx;\n    stack<int> time;\n    Node(int val, int cnt): val(val), cnt(cnt), idx(0) {}\n    string toString() {\n        stringstream ss;\n        ss << "Node: " \n           << "val = " << val\n           << ", cnt = " << cnt\n           << ", idx = " << idx \n           << ", time = " << (time.empty() ? -1 : time.top())\n           ; \n        return ss.str();\n    }\n};\nclass Heap {\npublic:\n    int time;\n    unordered_map<int, Node*> m;\n    vector<Node*> data;\n    Heap(): time(0) {}\n    void push(int val) {\n        Node *node = nullptr;\n        if (m.count(val)) {\n            node = m[val];\n            node->cnt++;\n            node->time.push(time++);\n            // cout << "push -> " << node->toString() << endl;\n            shiftUp(node->idx);\n        } else {\n            node = m[val] = new Node(val, 1);\n            node->time.push(time++);\n            push(node);\n        }\n        // print();\n    }\n    void push(Node *node) {\n        node->idx = data.size();\n        // cout << "push -> " << node->toString() << endl;\n        data.push_back(node);\n        shiftUp(node->idx);\n    }\n    int pop() {\n        // cout << "pop -> " << data[0]->toString() << endl;\n        int val = data[0]->val;\n        if (data.size() == 1 && data[0]->cnt == 1) data.clear();\n        else {\n            Node *node = data[0], *last = data.back();\n            data.pop_back();\n            last->idx = 0;\n            data[0] = last;\n            // cout << "==" << node->toString() << endl;\n            shiftDown(0);\n            if (node->cnt > 1) {\n                node->time.pop();\n                node->cnt--;\n                push(node);\n            } else {\n                // cout << "in" << endl;\n                m.erase(node->val);\n                delete node;\n                // cout << "inend" << endl;\n            };\n        }\n        // print();\n        return val;\n    }\n    void shiftUp(int idx) {\n        // cout << "shiftup : " << idx << endl;\n        if (idx == 0) return;\n        int p = (idx - 1) / 2;\n        Node *cnode = data[idx], *pnode = data[p];\n        if (cnode->cnt > pnode->cnt || cnode->cnt == pnode->cnt && cnode->time.top() > pnode->time.top()) {\n            swap(cnode->idx, pnode->idx);\n            swap(data[idx], data[p]);\n            shiftUp(p);\n        }\n    }\n    void shiftDown(int idx) {\n        // cout << "shiftdown : " << idx << endl;\n        int child = idx * 2 + 1;\n        if (child >= data.size()) return;\n        if (child + 1 < data.size() && \n            (data[child]->cnt < data[child + 1]->cnt || \n             data[child]->cnt == data[child + 1]->cnt && data[child]->time.top() < data[child + 1]->time.top())\n        ) child++;\n        Node *cnode = data[child], *pnode = data[idx];\n        if (pnode->cnt < cnode->cnt || pnode->cnt == cnode->cnt && pnode->time.top() < cnode->time.top()) {\n            swap(cnode->idx, pnode->idx);\n            swap(data[child], data[idx]);\n            shiftDown(child);\n        }\n    }\n    void print() {\n        cout << "=======PRINT========" << endl;\n        for (int i = 0; i < data.size(); i++) {\n            cout << "idx = " << i \n                 << ", child = " << (i * 2 + 1) << ", " << (i * 2 + 2)\n                 << ", " << data[i]->toString()\n                 << endl;\n        }\n    }\n};\nclass FreqStack {\npublic:\n    Heap heap;\n    FreqStack() {}\n    void push(int val) {\n        heap.push(val);\n    }\n    int pop() {\n        return heap.pop();\n    }\n};',lang:"cpp"}),a.createElement("h2",{id:"\u9898\u89e3-2---cpp"},a.createElement(i.AnchorLink,{to:"#\u9898\u89e3-2---cpp","aria-hidden":"true",tabIndex:-1},a.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 2 - cpp"),a.createElement("ul",null,a.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.11.30"),a.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a188ms"),a.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a97.7MB"),a.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),a.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u8bb0\u5f55\u6240\u6709\u7684\u503c\u7684\u6b21\u6570\uff0c\u5229\u7528map\u5bf9\u6bcf\u79cd\u6b21\u6570\u538b\u6808\u5904\u7406\u3002")),a.createElement(d.Z,{code:"class FreqStack {\npublic:\n    unordered_map<int, stack<int>> mstack;\n    unordered_map<int, int> mfreq;\n    int maxFreq = 0;\n    FreqStack() {}\n    void push(int val) {\n        int freq = ++mfreq[val];\n        mstack[freq].push(val);\n        maxFreq = max(maxFreq, freq);\n    }\n    int pop() {\n        int val = mstack[maxFreq].top();\n        mfreq[val]--;\n        mstack[maxFreq].pop();\n        if (mstack[maxFreq].size() == 0) maxFreq--;\n        return val;\n    }\n};",lang:"cpp"})))}));e["default"]=n=>{var e=a.useContext(i.context),t=e.demos;return a.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&i.AnchorLink.scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),a.createElement(l,{demos:t})}}}]);