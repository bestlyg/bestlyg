(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[16530],{2551:function(e,n,t){"use strict";t.r(n);var l=t(96832),o=t(22131),c=t(89730),r=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"909-\u86c7\u68af\u68cb"},l.createElement(o.AnchorLink,{to:"#909-\u86c7\u68af\u68cb","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"909. \u86c7\u68af\u68cb"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(o.Link,{to:"https://leetcode-cn.com/problems/snakes-and-ladders/"},"909. \u86c7\u68af\u68cb"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u6570\u7ec4\u3001\u77e9\u9635",l.createElement("br",null),"\u7b80\u4ecb\uff1aN x N \u7684\u68cb\u76d8 board \u4e0a\uff0c\u6309\u4ece 1 \u5230 N",l.createElement("em",null,"N \u7684\u6570\u5b57\u7ed9\u65b9\u683c\u7f16\u53f7\uff0c\u7f16\u53f7 \u4ece\u5de6\u4e0b\u89d2\u5f00\u59cb\uff0c\u6bcf\u4e00\u884c\u4ea4\u66ff\u65b9\u5411\u3002\u8fd4\u56de\u8fbe\u5230\u65b9\u683c N"),"N \u6240\u9700\u7684\u6700\u5c11\u79fb\u52a8\u6b21\u6570\uff0c\u5982\u679c\u4e0d\u53ef\u80fd\uff0c\u5219\u8fd4\u56de -1\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---typescript"},l.createElement(o.AnchorLink,{to:"#\u9898\u89e3-1---typescript","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - typescript"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2021.06.27"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a116ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a45.5MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1atypescript"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u50a8\u5b58\u540e\u8fdb\u884c\u904d\u5386\u3002")),l.createElement(c.Z,{code:"function snakesAndLadders(board: number[][]): number {\n  const N = board.length;\n  const toBlock = (row: number, col: number) => {\n    if ((N & 1) === 0) {\n      return N * (N - 1 - row) + ((row & 1) === 0 ? N - col : col + 1);\n    } else {\n      return N * (N - 1 - row) + ((row & 1) === 0 ? col + 1 : N - col);\n    }\n  };\n  const toBoard = (block: number): [number, number] => {\n    const row = N - 1 - ~~((block - 1) / N);\n    let col!: number;\n    if ((N & 1) === 0) {\n      col = (row & 1) === 0 ? N - 1 - ((block - 1) % N) : (block - 1) % N;\n    } else {\n      col = (row & 1) === 0 ? (block - 1) % N : N - 1 - ((block - 1) % N);\n    }\n    return [row, col];\n  };\n  const ANS_NUM = N ** 2;\n  const map = new Map<number, number>([[1, 0]]);\n  let ans = Infinity;\n  const queue: [number, number][] = [[N - 1, 0]];\n  while (queue.length !== 0) {\n    const [row, col] = queue.shift()!;\n    const block = toBlock(row, col);\n    const step = map.get(block)!;\n    if (ANS_NUM - block <= 6) {\n      ans = Math.min(ans, step + 1);\n      continue;\n    }\n    for (let i = 1; i <= 6; i++) {\n      let nextBlock = block + i;\n      let nextBoard = toBoard(nextBlock);\n      const [nextRow, nextCol] = nextBoard;\n      if (board[nextRow][nextCol] !== -1) {\n        nextBlock = board[nextRow][nextCol];\n        nextBoard = toBoard(nextBlock);\n      }\n      if (nextBlock === ANS_NUM) {\n        ans = Math.min(ans, step + 1);\n        continue;\n      }\n      if (!map.has(nextBlock)) queue.push(nextBoard);\n      map.set(nextBlock, Math.min(map.get(nextBlock) ?? Infinity, step + 1));\n    }\n  }\n  return ans === Infinity ? -1 : ans;\n}",lang:"typescript"})))}));n["default"]=e=>{var n=l.useContext(o.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&o.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(r,{demos:t})}}}]);