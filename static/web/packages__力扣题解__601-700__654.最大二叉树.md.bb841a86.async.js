(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[778],{96508:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),a=t(89730),m=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"654-\u6700\u5927\u4e8c\u53c9\u6811"},l.createElement(r.AnchorLink,{to:"#654-\u6700\u5927\u4e8c\u53c9\u6811","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"654. \u6700\u5927\u4e8c\u53c9\u6811"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode.cn/problems/maximum-binary-tree/"},"654. \u6700\u5927\u4e8c\u53c9\u6811"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a\u6808\u3001\u6811\u3001\u6570\u7ec4\u3001\u5206\u6cbb\u3001\u4e8c\u53c9\u6811\u3001\u5355\u8c03\u6808",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8fd4\u56de nums \u6784\u5efa\u7684 \u6700\u5927\u4e8c\u53c9\u6811 \u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---cpp"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.08.20"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a64ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a41.2MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1adfs\u3002")),l.createElement(a.Z,{code:"class Solution {\npublic:\n    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {\n        return _constructMaximumBinaryTree(nums, 0, nums.size());\n    }\n    TreeNode* _constructMaximumBinaryTree(vector<int>& nums, int l, int r) {\n        if (l >= r) return nullptr;\n        int max_num = INT_MIN, max_idx;\n        for (int i = l; i < r; i++) {\n            if (nums[i] > max_num) {\n                max_num = nums[i];\n                max_idx = i;\n            }\n        }\n        return new TreeNode(max_num, _constructMaximumBinaryTree(nums, l, max_idx), _constructMaximumBinaryTree(nums, max_idx + 1, r));\n    }\n};",lang:"cpp"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(m,{demos:t})}}}]);