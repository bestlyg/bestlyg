(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[3251],{77709:function(e,n,l){"use strict";l.r(n);var o=l(96832),t=l(22131),r=l(89730),c=o.memo((e=>{e.demos;return o.createElement(o.Fragment,null,o.createElement("div",{className:"markdown"},o.createElement("h1",{id:"427-\u5efa\u7acb\u56db\u53c9\u6811"},o.createElement(t.AnchorLink,{to:"#427-\u5efa\u7acb\u56db\u53c9\u6811","aria-hidden":"true",tabIndex:-1},o.createElement("span",{className:"icon icon-link"})),"427. \u5efa\u7acb\u56db\u53c9\u6811"),o.createElement("blockquote",null,o.createElement("p",null,"\u94fe\u63a5\uff1a",o.createElement(t.Link,{to:"https://leetcode-cn.com/problems/construct-quad-tree/"},"427. \u5efa\u7acb\u56db\u53c9\u6811"),o.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",o.createElement("br",null),"\u6807\u7b7e\uff1a\u6811\u3001\u6570\u7ec4\u3001\u5206\u6cbb\u3001\u77e9\u9635",o.createElement("br",null),"\u7b80\u4ecb\uff1a\u4f60\u9700\u8981\u8fd4\u56de\u80fd\u8868\u793a\u77e9\u9635\u7684 \u56db\u53c9\u6811 \u7684\u6839\u7ed3\u70b9\u3002")),o.createElement("h2",{id:"\u9898\u89e3-1---cpp"},o.createElement(t.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},o.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),o.createElement("ul",null,o.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.04.29"),o.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a24ms"),o.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a23.7MB"),o.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),o.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1adfs\u3002")),o.createElement(r.Z,{code:"class Solution {\n   public:\n    Node *construct(vector<vector<int>> &grid) {\n        int n = grid.size(), check;\n        return dfs(grid, 0, n - 1, 0, n - 1, &check);\n    }\n    Node *dfs(vector<vector<int>> &grid, int srow, int erow, int scol, int ecol,\n              int *check) {\n        if (srow == erow && scol == ecol) {\n            *check = 1;\n            return getNode(grid[srow][scol], true);\n        }\n        int mrow = (erow + srow) >> 1, mcol = (ecol + scol) >> 1;\n        int checkTL, checkTR, checkBL, checkBR;\n        Node *tl = dfs(grid, srow, mrow, scol, mcol, &checkTL),\n             *tr = dfs(grid, srow, mrow, mcol + 1, ecol, &checkTR),\n             *bl = dfs(grid, mrow + 1, erow, scol, mcol, &checkBL),\n             *br = dfs(grid, mrow + 1, erow, mcol + 1, ecol, &checkBR);\n        if (tl->val == tr->val && tl->val == bl->val && tl->val == br->val &&\n            checkTL & checkTR & checkBL & checkBR) {\n            *check = 1;\n            int val = tl->val;\n            free(tl);\n            free(tr);\n            free(bl);\n            free(br);\n            return getNode(val, true);\n        }\n        Node *node = getNode(tl->val ^ tr->val ^ bl->val ^ br->val, false);\n        *check = 0;\n        node->topLeft = tl;\n        node->topRight = tr;\n        node->bottomLeft = bl;\n        node->bottomRight = br;\n        return node;\n    }\n    Node *getNode(bool val, bool isLeaf) {\n        Node *node = (Node *)malloc(sizeof(Node));\n        node->isLeaf = isLeaf;\n        node->val = val;\n        node->topLeft = node->topRight = node->bottomLeft = node->bottomRight =\n            nullptr;\n        return node;\n    }\n};",lang:"cpp"}),o.createElement(r.Z,{code:"## \u9898\u89e3 2 - go",lang:"unknown"}),o.createElement("ul",null,o.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.04.29"),o.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a12ms"),o.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a6.5MB"),o.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1ago"),o.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u9012\u5f52\u770b\u662f\u5426\u6210\u6811\u3002")),o.createElement(r.Z,{code:"func construct(grid [][]int) *Node {\n    n := len(grid)\n    return dfs(grid, 0, n-1, 0, n-1)\n}\nfunc dfs(grid [][]int, srow, erow, scol, ecol int) *Node {\n    mrow, mcol := (srow+erow)>>1, (scol+ecol)>>1\n    for i := srow; i <= erow; i++ {\n        for j := scol; j <= ecol; j++ {\n            if grid[i][j] != grid[srow][scol] {\n                return &Node{\n                    Val:         false,\n                    IsLeaf:      false,\n                    TopLeft:     dfs(grid, srow, mrow, scol, mcol),\n                    TopRight:    dfs(grid, srow, mrow, mcol+1, ecol),\n                    BottomLeft:  dfs(grid, mrow+1, erow, scol, mcol),\n                    BottomRight: dfs(grid, mrow+1, erow, mcol+1, ecol),\n                }\n            }\n        }\n    }\n    return &Node{Val: grid[srow][scol] == 1, IsLeaf: true}\n}",lang:"go"})))}));n["default"]=e=>{var n=o.useContext(t.context),l=n.demos;return o.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&t.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),o.createElement(c,{demos:l})}}}]);