(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[44950],{14717:function(e,n,t){"use strict";t.r(n);var l=t(96832),c=t(22131),a=t(89730),m=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"813-\u6700\u5927\u5e73\u5747\u503c\u548c\u7684\u5206\u7ec4"},l.createElement(c.AnchorLink,{to:"#813-\u6700\u5927\u5e73\u5747\u503c\u548c\u7684\u5206\u7ec4","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"813. \u6700\u5927\u5e73\u5747\u503c\u548c\u7684\u5206\u7ec4"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(c.Link,{to:"https://leetcode.cn/problems/largest-sum-of-averages"},"813. \u6700\u5927\u5e73\u5747\u503c\u548c\u7684\u5206\u7ec4"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u4e2d\u7b49",l.createElement("br",null),"\u6807\u7b7e\uff1a",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u7ed9\u5b9a\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 k \u3002\u6211\u4eec\u5c06\u7ed9\u5b9a\u7684\u6570\u7ec4 nums \u5206\u6210 \u6700\u591a k \u4e2a\u76f8\u90bb\u7684\u975e\u7a7a\u5b50\u6570\u7ec4 \u3002 \u5206\u6570 \u7531\u6bcf\u4e2a\u5b50\u6570\u7ec4\u5185\u7684\u5e73\u5747\u503c\u7684\u603b\u548c\u6784\u6210\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---cpp"},l.createElement(c.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.11.28"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a12ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a7.7MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1adp[i][j] = \u6700\u591a\u5206\u6210i\u7ec4\uff0c\u53ea\u7528\u5230\u524dj\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u5927\u5e73\u5747\u503c\u3002")),l.createElement(a.Z,{code:"class Solution {\npublic:\n    double largestSumOfAverages(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<double>> dp(k + 1, vector<double>(n + 1, 0));\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += nums[i];\n            dp[1][i + 1] = 1.0 * sum / (i + 1);\n        }\n        double ans = dp[1][n];\n        for (int knum = 2; knum <= k; knum++) {\n            for (int i = knum; i <= n; i++) {\n                int sum = 0, cnt = 0;\n                for (int j = i; j >= knum; j--) {\n                    sum += nums[j - 1];\n                    cnt += 1;\n                    dp[knum][i] = max(dp[knum][i], dp[knum - 1][j - 1] + 1.0 * sum / cnt);\n                }\n            }\n            ans = max(ans, dp[knum][n]);\n        }\n        return ans;\n    }\n};",lang:"cpp"})))}));n["default"]=e=>{var n=l.useContext(c.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&c.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(m,{demos:t})}}}]);