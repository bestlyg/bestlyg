(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[73681],{41946:function(e,n,t){"use strict";t.r(n);var i=t(96832),l=t(22131),s=t(89730),a=i.memo((e=>{e.demos;return i.createElement(i.Fragment,null,i.createElement("div",{className:"markdown"},i.createElement("h1",{id:"864-\u83b7\u53d6\u6240\u6709\u94a5\u5319\u7684\u6700\u77ed\u8def\u5f84"},i.createElement(l.AnchorLink,{to:"#864-\u83b7\u53d6\u6240\u6709\u94a5\u5319\u7684\u6700\u77ed\u8def\u5f84","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"864. \u83b7\u53d6\u6240\u6709\u94a5\u5319\u7684\u6700\u77ed\u8def\u5f84"),i.createElement("blockquote",null,i.createElement("p",null,"\u94fe\u63a5\uff1a",i.createElement(l.Link,{to:"https://leetcode.cn/problems/shortest-path-to-get-all-keys/"},"864. \u83b7\u53d6\u6240\u6709\u94a5\u5319\u7684\u6700\u77ed\u8def\u5f84"),i.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",i.createElement("br",null),"\u6807\u7b7e\uff1a\u4f4d\u8fd0\u7b97\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u6570\u7ec4\u3001\u77e9\u9635",i.createElement("br",null),"\u7b80\u4ecb\uff1a\u8fd4\u56de\u83b7\u53d6\u6240\u6709\u94a5\u5319\u6240\u9700\u8981\u7684\u79fb\u52a8\u7684\u6700\u5c11\u6b21\u6570\u3002\u5982\u679c\u65e0\u6cd5\u83b7\u53d6\u6240\u6709\u94a5\u5319\uff0c\u8fd4\u56de -1 \u3002")),i.createElement("h2",{id:"\u9898\u89e3-1---cpp"},i.createElement(l.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),i.createElement("ul",null,i.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.11.10"),i.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a16ms"),i.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a9.9MB"),i.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),i.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1abfs\uff0c\u901a\u8fc7mask\u8bb0\u5f55\u5f53\u524d\u62ff\u5230\u7684\u94a5\u5319\u6570\u3002")),i.createElement(s.Z,{code:"const int dirs[4][2] = {\n    {0, 1}, {0, -1}, \n    {1, 0}, {-1, 0}\n};\nstruct Node {\n    int x, y, mask;\n    Node(int x, int y, int mask = 0): x(x), y(y), mask(mask){}\n};\nclass Solution {\npublic:\n    int shortestPathAllKeys(vector<string>& grid) {\n        int n = grid.size(), m = grid[0].size(), sx = -1, sy = -1, mmap[35][35][70] = {0}, MAX_MASK = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == '@') sx = i, sy = j;\n                else if (islower(grid[i][j])) MAX_MASK |= (1 << grid[i][j] - 'a');\n            }\n        }\n        int size = 1, step = 0;\n        queue<Node> q;\n        q.push(Node(sx, sy));\n        mmap[sx][sy][0] = 1;\n        while (!q.empty()) {\n            Node node = q.front();\n            // cout << \"===\" << endl\n            //      << \"step = \" << step\n            //      << \", x = \" << node.x\n            //      << \", y = \" << node.y\n            //      << \", mask = \" << node.mask\n            //      << endl;\n            if (node.mask == MAX_MASK) return step;\n            q.pop();\n            for (int i = 0; i < 4; i++) {\n                int nx = node.x + dirs[i][0], ny = node.y + dirs[i][1];\n                if (nx < 0 || nx == n || ny < 0 || ny == m) continue;\n                char c = grid[nx][ny];\n                if (c == '#') continue;\n                if (isupper(c) && (node.mask & (1 << c - 'A')) == 0) continue;\n                Node next(nx, ny, node.mask);\n                if (islower(c)) next.mask |= 1 << c - 'a';\n                if (mmap[next.x][next.y][next.mask]) continue;\n                mmap[next.x][next.y][next.mask] = 1;\n                q.push(next);\n            }\n            if (--size == 0) {\n                size = q.size();\n                step++;\n            }\n        }\n        return -1;\n    }\n};",lang:"cpp"})))}));n["default"]=e=>{var n=i.useContext(l.context),t=n.demos;return i.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&l.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),i.createElement(a,{demos:t})}}}]);