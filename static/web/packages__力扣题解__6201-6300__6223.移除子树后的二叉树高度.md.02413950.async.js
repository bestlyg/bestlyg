(self["webpackChunkblog"]=self["webpackChunkblog"]||[]).push([[56415],{35977:function(e,n,t){"use strict";t.r(n);var l=t(96832),r=t(22131),o=t(89730),a=l.memo((e=>{e.demos;return l.createElement(l.Fragment,null,l.createElement("div",{className:"markdown"},l.createElement("h1",{id:"6223-\u79fb\u9664\u5b50\u6811\u540e\u7684\u4e8c\u53c9\u6811\u9ad8\u5ea6"},l.createElement(r.AnchorLink,{to:"#6223-\u79fb\u9664\u5b50\u6811\u540e\u7684\u4e8c\u53c9\u6811\u9ad8\u5ea6","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"6223. \u79fb\u9664\u5b50\u6811\u540e\u7684\u4e8c\u53c9\u6811\u9ad8\u5ea6"),l.createElement("blockquote",null,l.createElement("p",null,"\u94fe\u63a5\uff1a",l.createElement(r.Link,{to:"https://leetcode.cn/problems/height-of-binary-tree-after-subtree-removal-queries/"},"6223. \u79fb\u9664\u5b50\u6811\u540e\u7684\u4e8c\u53c9\u6811\u9ad8\u5ea6"),l.createElement("br",null),"\u96be\u5ea6\uff1a\u56f0\u96be",l.createElement("br",null),"\u6807\u7b7e\uff1a",l.createElement("br",null),"\u7b80\u4ecb\uff1a\u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a m \u7684\u6570\u7ec4 answer \uff0c\u5176\u4e2d answer[i] \u662f\u6267\u884c\u7b2c i \u4e2a\u67e5\u8be2\u540e\u6811\u7684\u9ad8\u5ea6\u3002")),l.createElement("h2",{id:"\u9898\u89e3-1---cpp"},l.createElement(r.AnchorLink,{to:"#\u9898\u89e3-1---cpp","aria-hidden":"true",tabIndex:-1},l.createElement("span",{className:"icon icon-link"})),"\u9898\u89e3 1 - cpp"),l.createElement("ul",null,l.createElement("li",null,"\u7f16\u8f91\u65f6\u95f4\uff1a2022.10.30"),l.createElement("li",null,"\u6267\u884c\u7528\u65f6\uff1a368ms"),l.createElement("li",null,"\u5185\u5b58\u6d88\u8017\uff1a222.5MB"),l.createElement("li",null,"\u7f16\u7a0b\u8bed\u8a00\uff1acpp"),l.createElement("li",null,"\u89e3\u6cd5\u4ecb\u7ecd\uff1a\u4e24\u6b21dfs\uff0c\u7b2c\u4e00\u6b21\u7edf\u8ba1\u51fa\u6bcf\u9897\u5b50\u6811\u7684\u9ad8\u5ea6\uff0c\u7b2c\u4e8c\u6b21\u8bb0\u5f55\u5c42\u9ad8\uff0c\u7edf\u8ba1\u5f53\u524d\u5b50\u6811\u88ab\u79fb\u9664\u540e\u7684\u5269\u4f59\u9ad8\u5ea6\uff0c\u901a\u8fc7\u6700\u5927\u9ad8\u5ea6\u548clevel+\u53f3\u5b50\u6811\u9ad8\u5ea6\u7684\u6700\u5927\u503c\u83b7\u53d6\u3002")),l.createElement(o.Z,{code:"class Solution {\npublic:\n    typedef pair<int, int> node;\n    unordered_map<int, node> m;\n    vector<int> treeQueries(TreeNode* root, vector<int>& queries) {\n        m[-1] = make_pair(0, 0);\n        dfs1(root);\n        dfs2(root);\n        vector<int> ans;\n        for (auto &q : queries) ans.push_back(m[q].second);\n        return ans;\n    }\n    int dfs1(TreeNode *node) {\n        if (node == nullptr) return 0;\n        int l = dfs1(node->left), r = dfs1(node->right), h = max(l, r) + 1;\n        m[node->val] = make_pair(h, 0);\n        return h;\n    }\n    void dfs2(TreeNode *node, int level = 0, int curH = 0) {\n        if (node == nullptr) return;\n        m[node->val].second = curH;\n        int l = node->left == nullptr ? -1 : node->left->val,\n            r = node->right == nullptr ? -1 : node->right->val;\n        dfs2(node->left, level + 1, max(curH, level + m[r].first));\n        dfs2(node->right, level + 1, max(curH, level + m[l].first));\n    }\n};",lang:"cpp"})))}));n["default"]=e=>{var n=l.useContext(r.context),t=n.demos;return l.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),l.createElement(a,{demos:t})}}}]);