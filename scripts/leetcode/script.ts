class NNode {
  val: boolean;
  isLeaf: boolean;
  topLeft: NNode | null;
  topRight: NNode | null;
  bottomLeft: NNode | null;
  bottomRight: NNode | null;
  constructor(
    val?: boolean,
    isLeaf?: boolean,
    topLeft?: NNode,
    topRight?: NNode,
    bottomLeft?: NNode,
    bottomRight?: NNode
  ) {
    this.val = val === undefined ? false : val;
    this.isLeaf = isLeaf === undefined ? false : isLeaf;
    this.topLeft = topLeft === undefined ? null : topLeft;
    this.topRight = topRight === undefined ? null : topRight;
    this.bottomLeft = bottomLeft === undefined ? null : bottomLeft;
    this.bottomRight = bottomRight === undefined ? null : bottomRight;
  }
}

const l1 = [
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [1, 1],
  [0, 0],
  [0, 0],
  [0, 0],
  [1, 1],
  [0, 0],
  [0, 0],
  [0, 0],
  [1, 1],
  [0, 0],
  [0, 0],
  [0, 0],
  [1, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  null,
  null,
  null,
  null,
  [1, 0],
  [1, 1],
  [1, 0],
  [1, 0],
  [1, 0],
  [1, 1],
  [1, 0],
  [1, 1],
  [1, 1],
  [1, 1],
  [1, 0],
  [1, 0],
  null,
  null,
  null,
  null,
  [1, 1],
  [1, 1],
  [1, 0],
  [1, 0],
  [1, 0],
  [1, 0],
  [1, 1],
  [1, 1],
  [1, 1],
  [1, 0],
  [1, 0],
  [1, 1],
  null,
  null,
  null,
  null,
  [1, 0],
  [1, 0],
  [1, 1],
  [1, 0],
  [1, 1],
  [1, 0],
  [1, 1],
  [1, 1],
  [1, 1],
  [1, 1],
  [1, 0],
  [1, 1],
  null,
  null,
  null,
  null,
  [1, 1],
  [1, 1],
  [1, 0],
  [1, 1],
  [1, 1],
  [1, 1],
  [1, 0],
  [1, 0],
  [1, 1],
  [1, 0],
  [1, 1],
  [1, 1],
];
const l2 = [
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [1, 1],
  [1, 0],
  [0, 0],
  [1, 1],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [1, 0],
  [0, 0],
  [1, 1],
  [1, 1],
  [1, 0],
  [1, 0],
  [1, 0],
  [1, 1],
  [1, 0],
  [1, 0],
  [1, 0],
  [1, 0],
  [1, 0],
  [1, 1],
  [1, 1],
  [1, 1],
  [1, 0],
  [1, 0],
  [1, 0],
  [1, 1],
  [1, 1],
  [1, 0],
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  [1, 0],
  [1, 0],
  [1, 1],
  [1, 0],
  null,
  null,
  null,
  null,
  [1, 1],
  [1, 0],
  [1, 1],
  [1, 1],
  [1, 1],
  [1, 1],
  [1, 0],
  [1, 0],
  [1, 1],
  [1, 1],
  [1, 1],
  [1, 0],
  [1, 0],
  [1, 1],
  [1, 0],
  [1, 1],
  [1, 0],
  [1, 1],
  [1, 0],
  [1, 0],
  null,
  null,
  null,
  null,
  [1, 0],
  [1, 0],
  [1, 0],
  [1, 1],
];

function createNode(list: [number, number][]) {
  const queue: NNode[] = [];
  const ans = new NNode();
  const [_val, _isLeaf] = list.shift()!;
  ans.val = !!_val;
  ans.isLeaf = !!_isLeaf;
  queue.push(ans);
  while (list.length) {
    const node = queue.shift();
  }
  return ans;
}
