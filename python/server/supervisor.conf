[program:app] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作
autorestart=True      ; 程序异常退出后自动重启
# autostart=True        ; 在 supervisord 启动的时候也自动启动
redirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false
# environment=PATH="/home/app_env/bin"  ; 可以通过 environment 来添加需要的环境变量，一种常见的用法是使用指定的 virtualenv 环境
command=gunicorn -c gunicorn.config.py main:app  ; 启动命令，与手动在命令行启动的命令是一样的
# user=ubuntu           ; 用哪个用户启动
# directory=/home/app/  ; 程序的启动目录
stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB
stdout_logfile_backups = 20     ; stdout 日志文件备份数
; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）
stdout_logfile = ./logs/usercenter_stdout.log



# supervisorctl 操作
# supervisorctl 是 supervisord 的命令行客户端工具，使用的配置和 supervisord 一样，这里就不再说了。下面，主要介绍 supervisorctl 操作的常用命令：

# 输入命令 supervisorctl 进入 supervisorctl 的 shell 交互界面（还是纯命令行😓），就可以在下面输入命令了。：

# help # 查看帮助
# status # 查看程序状态
# stop program_name # 关闭 指定的程序
# start program_name # 启动 指定的程序
# restart program_name # 重启 指定的程序
# tail -f program_name # 查看 该程序的日志
# update # 重启配置文件修改过的程序（修改了配置，通过这个命令加载新的配置)
# 也可以直接通过 shell 命令操作：

# supervisorctl status
# supervisorctl update

[supervisord]
logfile = ./logs/supervisord.log
logfile_maxbytes = 50MB
logfile_backups=10
loglevel = info
pidfile = ./logs/supervisord.pid
# nodaemon = false
# minfds = 1024
# minprocs = 200
# umask = 022
# user = chrism
# identifier = supervisor
# directory = /tmp
# nocleanup = true
# childlogdir = /tmp
# strip_ansi = false
# environment = KEY1="value1",KEY2="value2"

[inet_http_server]
port = 127.0.0.1:9001

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface